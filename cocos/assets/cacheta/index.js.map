{"version":3,"sources":["assets/bundle/game/cacheta/Script/ui/CachetaAction.ts","assets/bundle/game/cacheta/Script/manager/CachetaAudioMgr.ts","assets/bundle/game/cacheta/Script/model/CachetaCardModel.ts","assets/bundle/game/cacheta/Script/define/CachetaConst.ts","assets/bundle/game/cacheta/Script/ui/CachetaDeck.ts","assets/bundle/game/cacheta/Script/ui/CachetaDeclare.ts","assets/bundle/game/cacheta/Script/define/CachetaEventName.ts","assets/bundle/game/cacheta/Script/CachetaGame.ts","assets/bundle/game/cacheta/Script/ui/CachetaGroupBar.ts","assets/bundle/game/cacheta/Script/ui/CachetaHandPoker.ts","assets/bundle/game/cacheta/Script/conf/lang/en/CachetaLanguageEn.ts","assets/bundle/game/cacheta/Script/conf/lang/pt/CachetaLanguagePt.ts","assets/bundle/game/cacheta/Script/conf/lang/vi/CachetaLanguageVi.ts","assets/bundle/game/cacheta/Script/conf/lang/CachetaLanguage.ts","assets/bundle/game/cacheta/Script/manager/CachetaLogicMgr.ts","assets/bundle/game/cacheta/Script/ui/CachetaMenu.ts","assets/bundle/game/cacheta/Script/ui/CachetaOperation.ts","assets/bundle/game/cacheta/Script/ui/CachetaPlayerSeat.ts","assets/bundle/game/cacheta/Script/ui/CachetaPlayer.ts","assets/bundle/game/cacheta/Script/ui/CachetaPoker.ts","assets/bundle/game/cacheta/Script/service/ws/proto/CachetaProtoMap.ts","assets/bundle/game/cacheta/Script/service/ws/proto/CachetaProto.ts","assets/bundle/game/cacheta/Script/ui/CachetaSettlePlayer.ts","assets/bundle/game/cacheta/Script/ui/CachetaSettle.ts","assets/bundle/game/cacheta/Script/conf/skin/world_cup/CachetaSkinWorldCup.ts","assets/bundle/game/cacheta/Script/conf/skin/CachetaSkin.ts","assets/bundle/game/cacheta/Script/service/ws/CachetaSocketMgr.ts","assets/bundle/game/cacheta/Script/ui/CachetaTable.ts","assets/bundle/game/cacheta/Script/ui/CachetaToast.ts","assets/bundle/game/cacheta/Script/manager/CachetaUIMgr.ts","assets/bundle/game/cacheta/Script/conf/lang/en/CachetaUiLanguageEn.ts","assets/bundle/game/cacheta/Script/conf/lang/hi/CachetaUiLanguageHi.ts","assets/bundle/game/cacheta/Script/conf/lang/id/CachetaUiLanguageId.ts","assets/bundle/game/cacheta/Script/conf/lang/pt/CachetaUiLanguagePt.ts","assets/bundle/game/cacheta/Script/conf/lang/zh/CachetaUiLanguageZh.ts","assets/bundle/game/cacheta/Script/conf/lang/CachetaUiLanguage.ts","assets/bundle/game/cacheta/Script/ui/CachetaUserCounddownProgress.ts","assets/bundle/game/cacheta/Script/manager/CachetaUserMgr.ts","assets/bundle/game/cacheta/Script/utils/CachetaUtil.ts"],"names":["CachetaPoker_1","__importDefault","require","CachetaSkin_1","CachetaConst_1","CachetaLogicMgr_1","CachetaSocketMgr_1","Listener_1","CachetaEventName_1","ccclass","property","cc","_decorator","CachetaAction","Component","[object Object]","this","touchPoker","discardPoker","dealPokers","block","cannonball","pokerPrefab","UIDepend","PrefabManager","getPrefabBundle","default","Priority","CachetaPoker","touchPokerNode","instantiate","parent","node","getComponent","discardPokerNode","i","CachetaConst","HandPokerNumMax","pokerNode","poker","push","find","Widget","target","on","Node","EventType","TOUCH_START","onTouchBlockStart","reset","listen","CachetaEventName","ROB_FIRE","playCannonRunAction","listenOff","stopAllActions","children","length","hide","forEach","setBlockActive","active","event","cancelTrustReq","startPos","endPos","cardValue","isSelf","isOpen","callback","convertToNodeSpaceAR","show","initCard","showBack","scale","position","tween","parallel","to","timeScale","call","eulerAngles","v3","start","endPosList","cbFinished","index","j","delay","setPosition","angle","easing","easeOut","name","__decorate","exports","CommonDepend","AudioManager","playMusic","LoadOnDemand","bgm","firesDesc","playEffect","card_click","card_deal","card_flip","card_in","card_out","card_sort","click_btn","countdown","operation","lose","win","explode","declare","cardIndex","curCardIndex","groupIndex","model","PlayerNumMax","HandPokerGroupMax","PokerWidth","PokerHeight","PokerSpace","GroupSpace","PokerUpOffsetY","HeadOffset","broadCastOffsetY","PLAYER_TAG","CachetaProto_1","CachetaAudioMgr_1","CachetaUserMgr_1","GameReplayControl_1","CachetaDeck","closeBg","oepnBg","pubCacdN","light","pubCacdNull","pubPokerBig","wildShow","wildShowNull1","wildShowNull2","pokerPanel","pubPoker","wildPoker1","wildPoker2","closePoker","openPoker","closeTips","oepnTips","getChildByName","zIndex","getNewPoker","TOUCH_END","onTouchClosePoker","onTouchOpenPoker","REPLAY_STATE_CHANGED","onReplayStateChanged","off","setTouchTipActive","isWildCard","value","isFirstPlay","closeAni","Animation","y","stop","play","openAni","wildCValues","playCardFlip","setPubPoker","quadOut","Tween","stopAllByTarget","cardValueArr","Math","ceil","random","time","repeat","convertToWorldSpaceAR","isLocalActive","gameStage","CachetaProto","STAGE","TOUCH","touchReq","state","ReplayState","Play","resume","Pause","pause","wildPokerNode","UserAvatarMgr_1","CachetaDeclare","avatar","hand","deathTurn","panelList","isMaxRoundSettle","winSettle","sineOut","sineIn","opacity","destroy","Hand","GroupS","cardGroup","CardS","addChild","pokerJS","layout","Layout","spacingX","updateLayout","setAvatar","Avatar","Gender","scheduleOnce","count","len","childrenCount","enabled","gender","loadUserAvatarPrefab","then","isValid","scaleX","width","scaleY","height","prototype","MODULE","POKER_TOUCH_START","POKER_TOUCH_MOVE","POKER_TOUCH_END","POKER_STATE_RESET","POKER_STATE_CHANGED","CHECK_HAND","START_PREPARE","MANUAL_SORT","CANCEL_POKER_SELECT","CommonBroadCastUtil_1","CommonEventName_1","CachetaUIMgr_1","CachetaGame","init","playBGM","PAY_SUCCESS","onPaySuccess","onCancelPokerSelect","close","syncUserReq","adaptOperation","CachetaLanguage_1","CachetaGroupBar","groupTag","pattern","Sprite","Label","cardNum","pokerSpace","groupSpace","x","handCard","idx","isSettle","type","Pattern","PATTERN","STRAIGHT","SET","spriteFrame","SpriteManager","getSpriteBundle","string","CachetaGroupBar_1","CachetaCardModel_1","CachetaHandPoker","panle","pokers","groupBars","models","pokerXs","groupXs","moveHandCard","isFlowerSort","handCardValues","canDecCardV","insetCardIndex","destroyAllChildren","groupPrefab","groupNode","groupBar","onPokerTouchStart","onPokerTouchMove","onPokerTouchEnd","onManualSort","onResetHandPoker","saveHandCardValue","cardZIndex","fromIndex","indexOf","pokerX","setModel","setPositionX","setTouchEnabled","INVALID","Status","HAND_STATUS","LISTEN","group","handWidth","getHandCardsNum","setGroupBar","groupIdx","setLayout","setPattern","getInsetCardIndex","insetGroupIndex","getInsetGroupIndex","oldModel","getCardValue","getCardIndex","getCurCardIndex","getGroupIndex","newModel","getMoveHandCard","setPokerMovePos","DISCARD","setDiscardPoker","declareReq","discardReq","oldHandCard","newHandCard","splice","checkPokersCount","groupReq","movePokerNode","setPokerValue","newModels","concat","equal","sort","a","b","UNKNOWN","newCardGroupS","isMoving","indexs","setSelected","_a","isSelected","valueArr","handCardD","getDisorderHandCard","playCardDeal","playCardIn","k","cards","lastIndex","randomIndex","temp","floor","pos","hideCardFlower","cardA","cardB","numberA","numberB","flowerA","flowerB","getSelectedPokers","CachetaLanguageEn","PATTERN_SP","PATTERN_SET","PATTERN_STRAIGHT","SETTLE_NEXT","TIPS_GAME_START_TIME","TIPS_GAME_START_WAITING","DISCARD_TIP","DRAW_CARD","DECLARE_CARD","CONFIRM_WILDCARD","WILDCARD","GAMESTART","POT","PICK","TABLE_INFO","PLAYER_NUMS","WINNER","CONFIRM","VICTORY","DEFEAT","PLAY_AGAIN","CachetaLanguagePt","CachetaLanguageVi","BTN_NO","BTN_YES","DIALOG_EXIT_TITLE","DIALOG_EXIT_TIPS","SETTLE_TITLE","SETTLE_LEAVE","TRUST_TIP1","TRUST_TIP2","BASE_SOCRE","BTN_CHANGE_TABLE","BTN_DISCARD","BTN_PICK1","BTN_PICK2","LanguageType_1","BaseBundleLanguage_1","CachetaLanguageEn_1","CachetaLanguagePt_1","CachetaLanguageVi_1","language","LanguageType","EN","PT","VI","get","BundleCenter_1","BundleNames_1","CachetaProtoMap_1","NpmExport_1","NewGameInfo_1","autoSort","autoExit","conf","WAIT","wildCard","pubCard","discardCards","finishCard","closeNum","dropPool","lastSettleInfo","curDiscardCard","replayCtrl","isReplay","lodash","isEmpty","NewGameInfo","getInstance","current","replayRecord","_b","CurDiscardCard","initServer","onMessage","bind","messageMap","CachetaProtoMap","messageDelay","MessageID","USER_IN_EV","PREPARE_NT","PREPARE_CANCEL_NT","listenState","emit","createReplayCtrl","onError","onErrorSt","num","key","msgData","TS","NextTS","SettleInfo","Date","getTime","getLocalStatus","STATUS","U_PLAY","userOutReq","getLocalChair","sys","localStorage","setItem","launchScene","BundleNames","LOADING","message","funcName","upperFirst","camelCase","msgId","error","userIn","Conf","Stage","WildCardS","PubCard","OpenCardS","CloseNum","setUsers","UserM","setActiveChair","ActiveChair","setLastSettleInfo","winChair","WinChair","User","userOut","Chair","PREPARE","setStatusAll","U_PREPARE","getOpenCardsFirst","Open","shift","isLocalChair","setLocalHandCard","unshift","Card","getUserByChair","InListen","SETTLE","SettleS","settle","setCredit","Credit","Trust","Tools_1","CommonLanguage_1","CachetaMenu","btnExit","btnMore","btnMoreSp","morePanel","moreBg","btnRule","btnSetting","moreFold","leftTop","rightTop","onClickExit","onTouchMorePanel","onClickMore","onClickRule","onClickSetting","Tools","clickManager","playClickBtn","createDialog","contentText","gaming","positiveBtnText","continueExit","negativeBtnText","cancel","positiveCallFunc","exitGame","setMoreState","createRule","createSetting","UIMgr_1","CommonVersusLanguage_1","CachetaOperation","trust","watching","btnChangeTable","btnDisCard","btnTouchCard","btnGetCard","btnSort","togAutoSort","btnDraw","btnDrawSp","btnDrawB","btnDeclare","btnDeclareSp","btnDeclareB","drawLightSke","decLightSke","waitingGameStart","onClickChangeTable","onClickDisCard","onClickTouchCard","onClickGetOpenCard","onClickSort","onClickAutoSort","onClickDraw","Button","sp","Skeleton","onClickHu","setAutoSortState","onPokerStateChanged","setTrustActive","setWatchingActive","setChangeTableActive","setDisCardActive","setTouchCardActive","setGetCardActive","setSortActive","setDrawActive","setDrawNoraml","setDeclareActive","setDeclareNoraml","isNormal","btnListenNormal","btnListenGray","interactable","btnDeclareNormal","btnDeclareGray","Toggle","isChecked","changeTableReq","handPoker","getLocalHandCard","DECLARE","showToast","listenReq","checkHandReq","CachetaPlayer_1","CachetaPlayerSeat","players","Array","prefab","CachetaPlayer","clear","chair","seatId","getSeat","stopTimer","posList","getStatus","getChair","getHandWorldPos","user","showHand","robChair","getPlayer","playRobAction","playRobedAction","UserAvatar_1","CachetaUserCounddownProgress_1","allTime","leftTime","progressFlag","clockFlag","addition","coin","coinValue","nickname","turnStartSke","listenSke","robSke","handN","timer","timerCountdown","countcownSke","timerClock","tagNode","coinChange","winSke","UserManager","setCoin","setNickname","nick","playIn","showTrustActive","setTag","Null","ani","UserName","U_WATCH","SHUFFLE","showListen","playOut","amount","change","base","getItem","vip","sum","labAdd","labSub","label","strValue","abs","quadIn","playWin","playLose","limtLength","toString","dt","playCountdown","tag","score","bg","Drop","tag_bg_lost","Win","tag_bg_won","Lost","isWatch","posX","posY","move","userAvatar","getComponentInChildren","playWinAnimation","playLoseAnimation","isFirst","clearTracks","setAnimation","setCompleteListener","robPlayer","SpineManager","loadSkeletonBundle","UnPriority","CachetaFire","pPos","atan","skeletonData","CachetaExplode","playExplode","paused","Poker_1","EPokerState","wildAdorn","pokerState","down","selectedTime","touchEnabled","touchPosLast","moving","onTouchStart","TOUCH_MOVE","onTouchMove","onTouchEnd","TOUCH_CANCEL","id","isLaiziCard","number","follow","showCardback","getLocation","touchPosCur","touchPosSub","sub","mag","nodePosNext","getPosition","add","setState","up","playCardClick","cubicOut","selected","PING","AUTH_REQ","AuthReq","USER_OUT_REQ","UserOutReq","SYNC_USER_REQ","SyncUserReq","CHANGE_TABLE_REQ","ChangeTableReq","TOUCH_REQ","TouchReq","DISCARD_REQ","DiscardReq","LISTEN_REQ","ListenReq","DECLARE_REQ","DeclareReq","CHECK_HAND_REQ","CheckHandReq","CANCEL_TRUST_REQ","CancelTrustReq","GROUP_REQ","GroupReq","USER_ST","UserSt","ROOM_ST","RoomSt","UserInEv","USER_OUT_EV","UserOutEv","PrepareNt","PrepareCancelNt","PLAY_NT","PlayNt","CLOSE_OVER_NT","CloseOverNt","TOUCH_EV","TouchEv","DISCARD_EV","DiscardEv","LISTEN_EV","ListenEv","DECLARE_EV","DeclareEv","CHECK_HAND_EV","CheckHandEv","SETTLE_NT","SettleNt","TRUST_NT","TrustNt","CANCEL_TRUST_EV","CancelTrustEv","GROUP_EV","GroupEv","ConnectType","pb_1","Message","data","super","_one_of_decls","set","initialize","isArray","__classPrivateFieldGet","undefined","Base","PlayDelay","getFieldWithDefault","setField","w","writer","BinaryWriter","writeInt64","writeInt32","getResultBuffer","bytes","reader","BinaryReader","nextField","isEndGroup","getFieldNumber","readInt64","readInt32","skipField","serialize","deserialize","Group","_one_of_decls_1","writeEnum","writePackedInt32","readEnum","readPackedInt32","_one_of_decls_2","ToListen","getRepeatedWrapperField","setRepeatedWrapperField","map","item","fromObject","toObject","writeRepeatedMessage","readMessage","addToRepeatedWrapperField","Settle","_one_of_decls_3","UserID","getWrapperField","setWrapperField","has_Hand","getField","writeUint64","writeString","writeMessage","readUint64","readString","_one_of_decls_4","_one_of_decls_5","Token","RoomKind","Version","IP","CryptID","BrandCode","game_id","connect_type","CONNECT_NORMAL","_one_of_decls_6","_one_of_decls_7","_one_of_decls_8","_one_of_decls_9","writeBool","readBool","_one_of_decls_10","Index","_one_of_decls_11","_one_of_decls_12","_one_of_decls_13","_one_of_decls_14","_one_of_decls_15","_one_of_decls_16","RoomID","LastActiveAt","ServerAddr","UnSyncedWin","QuitFlag","Addr","Channel","VipLevel","Bet","Award","_one_of_decls_17","Kind","BankerChair","Map","has_Conf","has_SettleInfo","Object","entries","Number","size","fromEntries","from","deserializeBinary","_one_of_decls_18","has_User","_one_of_decls_19","_one_of_decls_20","_one_of_decls_21","_one_of_decls_22","_one_of_decls_23","_one_of_decls_24","_one_of_decls_25","_one_of_decls_26","_one_of_decls_27","RobChair","MaxRoundSettle","_one_of_decls_28","_one_of_decls_29","_one_of_decls_30","_one_of_decls_31","_one_of_decls_32","CachetaSettlePlayer","user_id","setCards","setAmount","userId","iconMe","isLocalUser","sign","color","Color","fromHEX","PopUpViewBase_1","CachetaSettlePlayer_1","CachetaSettle","btnClose","btnBack","playerList","tips","onClickClose","onClickBack","ScrollView","content","RichText","startUpdateText","settles","closeTime","unschedule","updateText","schedule","format","CachetaSkinWorldCup","priority","resPath","Prefab","CachetaTable","CachetaToast","SpriteFrame","group_1","group_2","unpriority","SkeletonData","loadOnDemand","AudioClip","BaseBundleSkin_1","SkinType_1","CachetaSkinWorldCup_1","CACHETA","skin","SkinType","WORLD_CUP","LIGHT","GameType_1","BaseSocketMgr_1","gameId","GameType","host","isShf","shfHost","isEncrypt","cryptId","urlParser","window","location","href","query","msgType","ctor","getMessageCtor","send","reconnect","CONNECT_RE","CommonSocketModel","getCurrentTimestamp","token","room","getVersion","getBrandCode","getConnectType","request","open","card","baseScore","baseSocre","system","systemBg","systemText","tipsNode","tipsBg","tipsText","tipsMargin","strText","text","duration","setText","CachetaTable_1","CachetaMenu_1","CachetaPlayerSeat_1","CachetaDeck_1","CachetaHandPoker_1","CachetaOperation_1","CachetaAction_1","CachetaToast_1","CommonProto_1","CommonSkin_1","StartAndStopAnim_1","CachetaDeclare_1","startAndEndController","isRobSettle","curTurnHandStatus","maxRoundSettle","root","initTable","initMenu","initPlayerSeat","initDeck","initHandPoker","initOperation","initAction","initToast","initStartEndAnim","winSize","setPostion","table","playerSeat","deck","action","toast","removeSettle","removeDialog","menu","loadPrefabInsBundle","StartAndStopAnim","startAndEndFrame","showUI","args","UILayer","ALERT","Rules","Rule","CommonUserSetting","option","showAlert","ctrl","CommonGameReplay","macro","MAX_ZINDEX","CommonProto","INSUFFICIENT","fightInsBalanceAlert","IDLE_TIMEOUT","fightTimeOutAlert","setBaseScore","setWildPoker","getWildCard","getPubCard","setOpenPoker","setClosePokerNum","getCloseNum","getLocalUser","showOtherPlayerHand","onStageWait","onStagePrepare","onStageShuffle","onStagePlay","onStageSettle","waitingPalyer","setSystemTips","complete","getClosePokerPos","getOtherPlayerHandPosList","playStartGameAnimAction","playOtherDealAni","playDealAni","playEnsurePubPokerAni","playPubandWildPokerAni","startTimer","playOperation","getOpenCards","createSettle","stopTimerAll","countTime","playTurnStartAnim","getDrawInteractable","getDeclareInteractable","getTouchPokerPos","getOpenPokerPos","playTouchPokerAni","setTouchPokerValue","getDiscardPokerPos","playDiscardPokerAni","playCardOut","discardEv","onDiscardEv","declareAnim","playWinnerAnim","loadPrefabBundle","res","playDeclare","playCardSort","CachetaUiLanguageEn","C1","C2","C3","C4","C5","C6","C7","C8","C9","C10","C11","C12","C13","C14","C15","C16","D1","D2","E1","F1","G1","G2","H1","H2","H3","I1","I2","J1","J2","J3","J4","K1","K2","K3","K4","CachetaUiLanguageHi","CachetaUiLanguageId","CachetaUiLanguagePt","CachetaUiLanguageZh","BaseBundleUiLanguage_1","InstanceClassDecorator_1","CachetaUiLanguageZh_1","CachetaUiLanguageEn_1","CachetaUiLanguagePt_1","CachetaUiLanguageHi_1","CachetaUiLanguageId_1","CachetaUiLanguage","ZH","HI","ID","setInstance","Instance","CachetaUserCounddownProgress","ProgressBar","curTime","isUpdate","progress","update","users","shfTag","localUserId","localChair","activeChair","uid","localUser","delete","seat","iter","values","getUserByUserId","status"],"mappings":"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","sourcesContent":["import CachetaPoker from \"./CachetaPoker\";\nimport CachetaSkin from \"../conf/skin/CachetaSkin\";\nimport { CachetaConst } from \"../define/CachetaConst\";\nimport CachetaLogicMgr from \"../manager/CachetaLogicMgr\";\nimport CachetaSocketMgr from \"../service/ws/CachetaSocketMgr\";\nimport Listener from \"../../../../../main/core/utils/Listener\";\nimport { CachetaEventName } from \"../define/CachetaEventName\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class CachetaAction extends cc.Component {\n    /** 摸牌 */\n    private touchPoker: CachetaPoker = null;\n    /** 出牌 */\n    private discardPoker: CachetaPoker = null;\n    /** 发牌 */\n    private dealPokers: CachetaPoker[] = [];\n    /** 阻挡层 */\n    private block: cc.Node = null;\n    private cannonball: cc.Node = null;\n\n    protected onLoad(): void {\n        let pokerPrefab: cc.Prefab = UIDepend.PrefabManager.getPrefabBundle(\n            CachetaSkin.Priority.CachetaPoker\n        );\n\n        let touchPokerNode = cc.instantiate(pokerPrefab);\n        touchPokerNode.parent = this.node;\n        this.touchPoker = touchPokerNode.getComponent(CachetaPoker);\n\n        let discardPokerNode = cc.instantiate(pokerPrefab);\n        discardPokerNode.parent = this.node;\n        this.discardPoker = discardPokerNode.getComponent(CachetaPoker);\n\n        // 以最低开局人数初始化，人数增加后按需创建\n        for (let i = 0; i < 2 * (CachetaConst.HandPokerNumMax - 1); i++) {\n            let pokerNode = cc.instantiate(pokerPrefab);\n            pokerNode.parent = this.node;\n            let poker = pokerNode.getComponent(CachetaPoker);\n            this.dealPokers.push(poker);\n        }\n\n        this.block = cc.find(\"block\", this.node);\n        this.block.getComponent(cc.Widget).target = this.node.parent;\n\n        this.cannonball = cc.find(\"cannonball\", this.node);\n\n        this.block.on(cc.Node.EventType.TOUCH_START, this.onTouchBlockStart, this);\n\n        this.reset();\n\n        Listener.listen(CachetaEventName.ROB_FIRE, this.playCannonRunAction, this);\n    }\n\n    protected onDestroy(): void {\n        Listener.listenOff(CachetaEventName.ROB_FIRE, this.playCannonRunAction, this);\n    }\n\n    public reset(): void {\n        this.node.stopAllActions();\n        let children = this.node.children;\n        for (let i = 0; i < children.length; i++) {\n            children[i].stopAllActions();\n        }\n\n        this.touchPoker.hide();\n        this.discardPoker.hide();\n        this.dealPokers.forEach((poker) => {\n            poker.hide();\n        });\n        this.setBlockActive(false);\n        this.cannonball.active = false;\n    }\n\n    public setBlockActive(active: boolean): void {\n        this.block.active = active;\n    }\n\n    private onTouchBlockStart(event: cc.Event.EventTouch): void {\n        CachetaSocketMgr.cancelTrustReq();\n    }\n\n    /**\n     * 摸牌动画\n     * @param startPos\n     * @param endPos\n     * @param cardValue\n     * @param isSelf\n     * @param callback\n     */\n    public playTouchPokerAni(\n        startPos: cc.Vec3,\n        endPos: cc.Vec3,\n        cardValue: number,\n        isSelf: boolean,\n        isOpen: boolean,\n        callback: Function = null\n    ): void {\n        startPos = this.node.convertToNodeSpaceAR(startPos);\n        endPos = this.node.convertToNodeSpaceAR(endPos);\n\n        this.touchPoker.show();\n\n        if (isOpen) {\n            this.touchPoker.initCard(cardValue);\n        } else {\n            this.touchPoker.showBack();\n        }\n\n        this.touchPoker.node.stopAllActions();\n        this.touchPoker.node.scale = 0.59;\n        this.touchPoker.node.position = startPos;\n\n        cc.tween(this.touchPoker.node)\n            .parallel(\n                cc.tween().to(0.5 / CachetaLogicMgr.timeScale, {\n                    scale: isSelf ? 1 : 0.44,\n                    position: endPos,\n                }),\n                cc.tween().call(() => {\n                    // 自己且是暗牌区  则飞行中翻牌\n                    if (isSelf && !isOpen) {\n                        cc.tween(this.touchPoker.node)\n                            .to(0.25 / CachetaLogicMgr.timeScale, { eulerAngles: cc.v3(0, -90, 0) })\n                            .call(() => {\n                                this.touchPoker.initCard(cardValue);\n                            })\n                            .to(0.25 / CachetaLogicMgr.timeScale, { eulerAngles: cc.v3(0, 0, 0) })\n                            .start();\n                    }\n                })\n            )\n            .call(() => {\n                this.touchPoker.hide();\n                if (callback) {\n                    callback();\n                }\n            })\n            .start();\n    }\n\n    /**\n     * 出牌动画\n     * @param startPos\n     * @param endPos\n     * @param cardValue\n     * @param isSelf\n     * @param callback\n     */\n    public playDiscardPokerAni(\n        startPos: cc.Vec3,\n        endPos: cc.Vec3,\n        cardValue: number,\n        isSelf: boolean,\n        callback: Function = null\n    ): void {\n        startPos = this.node.convertToNodeSpaceAR(startPos);\n        endPos = this.node.convertToNodeSpaceAR(endPos);\n\n        // 最后一瞬间摸牌\n        this.touchPoker.hide();\n        this.touchPoker.node.stopAllActions();\n\n        this.discardPoker.show();\n        this.discardPoker.initCard(cardValue);\n\n        this.discardPoker.node.stopAllActions();\n        this.discardPoker.node.scale = isSelf ? 1 : 0.44;\n        this.discardPoker.node.position = startPos;\n\n        cc.tween(this.discardPoker.node)\n            .to(0.2 / CachetaLogicMgr.timeScale, { scale: 0.59, position: endPos })\n            .call(() => {\n                this.discardPoker.hide();\n                if (callback) {\n                    callback();\n                }\n            })\n            .start();\n    }\n\n    /**\n     * 其他玩家的发牌动画\n     * @param startPos\n     * @param endPosList\n     * @param cbFinished\n     */\n    public playOtherDealAni(\n        startPos: cc.Vec3,\n        endPosList: cc.Vec3[],\n        cbFinished: Function = null\n    ): void {\n        startPos = this.node.convertToNodeSpaceAR(startPos);\n\n        let pokerPrefab: cc.Prefab = UIDepend.PrefabManager.getPrefabBundle(\n            CachetaSkin.Priority.CachetaPoker\n        );\n        let index = 0;\n        for (let i = 0; i < endPosList.length; i++) {\n            let endPos = this.node.convertToNodeSpaceAR(endPosList[i]);\n            for (let j = 0; j < CachetaConst.HandPokerNumMax - 1; j++) {\n                let poker = this.dealPokers[index];\n                if (!poker) {\n                    let pokerNode = cc.instantiate(pokerPrefab);\n                    pokerNode.parent = this.node;\n                    poker = pokerNode.getComponent(CachetaPoker);\n                    this.dealPokers.push(poker);\n                }\n                index++;\n\n                poker.show();\n                poker.showBack();\n                poker.node.stopAllActions();\n                poker.node.scale = 0.59;\n                poker.node.position = startPos;\n\n                cc.tween(poker.node)\n                    .delay((0.5 / 9 / CachetaLogicMgr.timeScale) * j)\n                    .to(0.2 / CachetaLogicMgr.timeScale, { scale: 0.44, position: endPos })\n                    .call(() => {\n                        poker.hide();\n                        if (i == endPosList.length - 1 && j == CachetaConst.HandPokerNumMax - 2) {\n                            cbFinished && cbFinished();\n                        }\n                    })\n                    .start();\n            }\n        }\n    }\n    /**\n     * 播放炸弹飞行\n     */\n    public playCannonRunAction(startPos: cc.Vec3, endPos: cc.Vec3, callback) {\n        this.cannonball.active = true;\n        this.cannonball.setPosition(this.node.convertToNodeSpaceAR(startPos));\n        this.cannonball.angle = 0;\n        cc.tween(this.cannonball)\n            .to(\n                0.8 / CachetaLogicMgr.timeScale,\n                {\n                    position: this.node.convertToNodeSpaceAR(endPos),\n                    angle: 719,\n                },\n                { easing: cc.easeOut.name }\n            )\n            .call(() => {\n                this.cannonball.active = false;\n                this.cannonball.setPosition(cc.v3(0, 0, 0));\n\n                callback && callback();\n            })\n            .start();\n    }\n}\n","import CachetaSkin from \"../conf/skin/CachetaSkin\";\r\n\r\nexport default class CachetaAudioMgr {\r\n    public static playBGM(): void {\r\n        CommonDepend.AudioManager.playMusic(CachetaSkin.LoadOnDemand.bgm);\r\n    }\r\n\r\n    public static playEffect(firesDesc: IResDescribe): void {\r\n        CommonDepend.AudioManager.playEffect(firesDesc);\r\n    }\r\n\r\n    public static playCardClick(): void {\r\n        this.playEffect(CachetaSkin.LoadOnDemand.card_click);\r\n    }\r\n\r\n    public static playCardDeal(): void {\r\n        this.playEffect(CachetaSkin.LoadOnDemand.card_deal);\r\n    }\r\n\r\n    public static playCardFlip(): void {\r\n        this.playEffect(CachetaSkin.LoadOnDemand.card_flip);\r\n    }\r\n\r\n    public static playCardIn(): void {\r\n        this.playEffect(CachetaSkin.LoadOnDemand.card_in);\r\n    }\r\n\r\n    public static playCardOut(): void {\r\n        this.playEffect(CachetaSkin.LoadOnDemand.card_out);\r\n    }\r\n\r\n    public static playCardSort(): void {\r\n        this.playEffect(CachetaSkin.LoadOnDemand.card_sort);\r\n    }\r\n\r\n    public static playClickBtn(): void {\r\n        this.playEffect(CachetaSkin.LoadOnDemand.click_btn);\r\n    }\r\n\r\n    public static playCountdown(): void {\r\n        this.playEffect(CachetaSkin.LoadOnDemand.countdown);\r\n    }\r\n\r\n    public static playOperation(): void {\r\n        this.playEffect(CachetaSkin.LoadOnDemand.operation);\r\n    }\r\n\r\n    public static playLose(): void {\r\n        this.playEffect(CachetaSkin.LoadOnDemand.lose);\r\n    }\r\n\r\n    public static playWin(): void {\r\n        this.playEffect(CachetaSkin.LoadOnDemand.win);\r\n    }\r\n\r\n    public static playExplode(): void {\r\n        this.playEffect(CachetaSkin.LoadOnDemand.explode);\r\n    }\r\n\r\n    public static playDeclare(): void {\r\n        this.playEffect(CachetaSkin.LoadOnDemand.declare);\r\n    }\r\n}\r\n","/**\r\n * 牌数据模型\r\n */\r\n\r\n// 101: “黑桃: A”, 102: “黑桃: 2\", 103: “黑桃: 3”, 104: “黑桃: 4\", 105: “黑桃: 5”, 106: “黑桃: 6\", 107: “黑桃: 7”, 108: “黑桃: 8\", 109: “黑桃: 9”, 110: “黑桃: T”, 111: “黑桃: J”, 112: “黑桃: Q”, 113: “黑桃: K”,\r\n// 201: “红心: A”, 202: “红心: 2”, 203: “红心: 3\", 204: “红心: 4”, 205: “红心: 5\", 206: “红心: 6”, 207: “红心: 7\", 208: “红心: 8”, 209: “红心: 9\", 210: “红心: T”, 211: “红心: J”, 212: “红心: Q”, 213: “红心: K”,\r\n// 301: “梅花: A”, 302: “梅花: 2\", 303: “梅花: 3”, 304: “梅花: 4\", 305: “梅花: 5”, 306: “梅花: 6\", 307: “梅花: 7”, 308: “梅花: 8\", 309: “梅花: 9”, 310: “梅花: T”, 311: “梅花: J”, 312: “梅花: Q”, 313: “梅花: K”,\r\n// 401: “菱形: A”, 402: “菱形: 2”, 403: “菱形: 3\", 404: “菱形: 4”, 405: “菱形: 5\", 406: “菱形: 6”, 407: “菱形: 7\", 408: “菱形: 8”, 409: “菱形: 9\", 410: “菱形: T”, 411: “菱形: J”, 412: “菱形: Q”, 413: “菱形: K”,\r\n// 14: “JX”, 15: “JD”,\r\n\r\nexport default class CachetaCardModel {\r\n    /** 牌值 */\r\n    public cardValue: number;\r\n    /** 初始牌索引 */\r\n    public cardIndex: number;\r\n    /** 当前牌索引 */\r\n    public curCardIndex: number;\r\n    /** 组索引 */\r\n    public groupIndex: number;\r\n\r\n    constructor(cardValue: number, cardIndex: number, curCardIndex: number, groupIndex: number) {\r\n        this.cardValue = cardValue;\r\n        this.cardIndex = cardIndex;\r\n        this.curCardIndex = curCardIndex;\r\n        this.groupIndex = groupIndex;\r\n    }\r\n\r\n    /**\r\n     * 是否相等\r\n     * @param model\r\n     */\r\n    public equal(model: CachetaCardModel): boolean {\r\n        return (\r\n            this.cardValue == model.cardValue &&\r\n            this.cardIndex == model.cardIndex &&\r\n            this.groupIndex == model.groupIndex &&\r\n            this.curCardIndex == model.curCardIndex\r\n        );\r\n    }\r\n}\r\n","/**\r\n * 常量定义\r\n */\r\nexport namespace CachetaConst {\r\n    /** 玩家的最大数量 */\r\n    export const PlayerNumMax: number = 4;\r\n    /** 手牌的最大数量 */\r\n    export const HandPokerNumMax: number = 10;\r\n    /** 手牌的最大组数 */\r\n    export const HandPokerGroupMax = 3;\r\n    /** 扑克宽度 */\r\n    export const PokerWidth: number = 126;\r\n    /** 扑克高度 */\r\n    export const PokerHeight: number = 171;\r\n    /** 扑克间距 */\r\n    export const PokerSpace: number = 86;\r\n    /** 牌组间距 */\r\n    export const GroupSpace: number = 0;\r\n    /** 扑克升起偏移值 */\r\n    export const PokerUpOffsetY: number = 30;\r\n    /** 入场出场动画头像向上偏移值模数 */\r\n    export const HeadOffset: number = 100;\r\n    export const broadCastOffsetY: number = 216;\r\n\r\n    /** 玩家标签 */\r\n    export enum PLAYER_TAG {\r\n        /** 空 */\r\n        Null = 0,\r\n        /** 弃牌 */\r\n        Drop = 1,\r\n        /** 赢 */\r\n        Win = 2,\r\n        /** 输 */\r\n        Lost = 3,\r\n    }\r\n}\r\n","import CachetaPoker from \"./CachetaPoker\";\nimport CachetaSocketMgr from \"../service/ws/CachetaSocketMgr\";\nimport { CachetaProto } from \"../service/ws/proto/CachetaProto\";\nimport CachetaAudioMgr from \"../manager/CachetaAudioMgr\";\nimport CachetaSkin from \"../conf/skin/CachetaSkin\";\nimport CachetaLogicMgr from \"../manager/CachetaLogicMgr\";\nimport CachetaUserMgr from \"../manager/CachetaUserMgr\";\nimport Listener from \"../../../../../main/core/utils/Listener\";\nimport { CachetaEventName } from \"../define/CachetaEventName\";\nimport { ReplayState } from \"../../../../plaza/common/Script/game/replay/GameReplayControl\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class CachetaDeck extends cc.Component {\n    private closeBg: cc.Node = null;\n    private oepnBg: cc.Node = null;\n    private pubCacdN: cc.Node = null;\n    private light: cc.Node = null;\n    private pubCacdNull: cc.Node = null;\n    private pubPokerBig: CachetaPoker = null;\n    private wildShow: cc.Node = null;\n    private wildShowNull1: cc.Node = null;\n    private wildShowNull2: cc.Node = null;\n    private pokerPanel: cc.Node = null;\n    private pubPoker: CachetaPoker = null;\n    private wildPoker1: CachetaPoker = null;\n    private wildPoker2: CachetaPoker = null;\n    private closePoker: CachetaPoker = null;\n    private openPoker: CachetaPoker = null;\n    private closeTips: cc.Node = null;\n    private oepnTips: cc.Node = null;\n\n    protected onLoad(): void {\n        this.closeBg = cc.find(\"closeBg\", this.node);\n        this.oepnBg = cc.find(\"oepnBg\", this.node);\n        this.pubCacdN = cc.find(\"pubCacdBg\", this.node);\n        this.light = cc.find(\"light\", this.pubCacdN);\n        this.pubCacdNull = cc.find(\"null\", this.pubCacdN);\n        this.wildShow = cc.find(\"wildShow\", this.node);\n        this.wildShowNull1 = cc.find(\"null1\", this.wildShow);\n        this.wildShowNull2 = cc.find(\"null2\", this.wildShow);\n\n        this.pokerPanel = cc.find(\"pokerPanel\", this.node);\n        let pokerPrefab: cc.Prefab = UIDepend.PrefabManager.getPrefabBundle(\n            CachetaSkin.Priority.CachetaPoker\n        );\n\n        this.pokerPanel.getChildByName(\"cardPile\").zIndex = 1;\n        this.pubPokerBig = this.getNewPoker(pokerPrefab, this.pubCacdN.getChildByName(\"pokerN\"));\n        this.pubPoker = this.getNewPoker(pokerPrefab, this.pokerPanel);\n        this.wildPoker1 = this.getNewPoker(pokerPrefab, this.wildShow.getChildByName(\"wildCardP1\"));\n        this.wildPoker2 = this.getNewPoker(pokerPrefab, this.wildShow.getChildByName(\"wildCardP2\"));\n        this.pubPoker.node.zIndex = 0;\n\n        this.closePoker = this.getNewPoker(pokerPrefab, this.pokerPanel);\n        this.closePoker.node.on(cc.Node.EventType.TOUCH_END, this.onTouchClosePoker, this);\n\n        this.openPoker = this.getNewPoker(pokerPrefab, this.pokerPanel);\n        this.openPoker.node.on(cc.Node.EventType.TOUCH_END, this.onTouchOpenPoker, this);\n\n        this.closeTips = cc.find(\"touchTips/closeTips\", this.node);\n        this.oepnTips = cc.find(\"touchTips/oepnTips\", this.node);\n\n        this.reset();\n\n        Listener.on(CachetaEventName.REPLAY_STATE_CHANGED, this.onReplayStateChanged, this);\n    }\n\n    protected onDestroy(): void {\n        Listener.off(CachetaEventName.REPLAY_STATE_CHANGED, this.onReplayStateChanged, this);\n    }\n\n    public reset(): void {\n        this.wildPoker1.node.stopAllActions();\n        this.wildPoker2.node.stopAllActions();\n\n        this.pubPoker.node.stopAllActions();\n        this.pubPoker.node.position = cc.v3(-81.2, 38, 0);\n        this.pubPoker.node.scale = 0.59;\n        this.pubPoker.node.zIndex = 0;\n\n        this.closePoker.node.stopAllActions();\n        this.closePoker.node.position = cc.v3(-81.2, 40);\n        this.closePoker.node.scale = 0.59;\n        this.closePoker.node.zIndex = 2;\n        this.closePoker.showBack();\n\n        this.openPoker.node.stopAllActions();\n        this.openPoker.node.position = cc.v3(81, 30, 0);\n        this.openPoker.node.eulerAngles = cc.v3(0, 0, 0);\n        this.openPoker.node.scale = 0.59;\n        this.openPoker.node.zIndex = 4;\n\n        this.hide();\n    }\n\n    /**\n     * 显示底牌\n     */\n    public show(): void {\n        this.closeBg.active = true;\n        this.oepnBg.active = true;\n        this.wildShow.active = true;\n        this.pokerPanel.active = true;\n    }\n\n    /**\n     * 隐藏底牌\n     */\n    public hide(): void {\n        this.setTouchTipActive(false);\n\n        this.pubCacdN.active = false;\n        this.light.active = false;\n        this.pubCacdNull.active = true;\n        this.pubPokerBig.showBack();\n\n        this.wildShow.active = false;\n        this.wildPoker1.showBack();\n        this.wildPoker2.showBack();\n        this.wildShowNull1.active = true;\n        this.wildShowNull2.active = true;\n\n        this.pokerPanel.active = false;\n        // this.closeBg.active = false;\n        // this.oepnBg.active = false;\n        this.pubPoker.hide();\n        this.closePoker.hide();\n        this.openPoker.hide();\n    }\n\n    /**\n     * 设置赖子牌\n     * @param cardValue\n     */\n    public setWildPoker(cardValue: number[]): void {\n        this.wildPoker1.initCard(cardValue[0], true);\n        this.wildPoker2.initCard(cardValue[1], true);\n        this.wildShowNull1.active = false;\n        this.wildShowNull2.active = false;\n    }\n\n    /**\n     * 设置公共牌\n     * @param cardValue\n     */\n    public setPubPoker(cardValue: number): void {\n        this.pubPoker.show();\n        this.pubPoker.initCard(cardValue);\n        this.pubPoker.node.stopAllActions();\n        this.pubPoker.node.position = cc.v3(-32, 30, 0);\n        this.pubPoker.node.eulerAngles = cc.v3(0, 0, -24);\n        this.pubPoker.node.scale = 0.59;\n        this.pubPoker.node.zIndex = 0;\n    }\n\n    /**\n     * 设置公开牌\n     * @param cardValue\n     */\n    public setOpenPoker(cardValue: number): void {\n        if (cardValue == 0) {\n            this.openPoker.hide();\n            return;\n        }\n\n        this.openPoker.show();\n        this.openPoker.initCard(cardValue, CachetaLogicMgr.isWildCard(cardValue));\n    }\n\n    /**\n     * 设置关闭牌数量\n     * @param value\n     */\n    public setClosePokerNum(value: number): void {\n        this.closePoker.node.active = value > 0;\n    }\n\n    /**\n     * 设置摸排提示显隐\n     * @param active\n     */\n    public setTouchTipActive(active: boolean, isFirstPlay: boolean = false): void {\n        this.closeTips.active = active;\n        let closeAni = this.closeTips.getComponent(cc.Animation);\n        if (active) {\n            closeAni.node.y = 2.5;\n            closeAni.stop();\n            closeAni.play(null, 0);\n        } else {\n            closeAni.stop();\n        }\n\n        this.oepnTips.active = active;\n        if (isFirstPlay) this.oepnTips.active = false;\n\n        let openAni = this.oepnTips.getComponent(cc.Animation);\n        if (active && !isFirstPlay) {\n            openAni.node.y = 2.5;\n            openAni.stop();\n            openAni.play(null, 0);\n        } else {\n            openAni.stop();\n        }\n    }\n\n    /**\n     * 播放公共牌动画\n     * @param cardValue\n     * @param cbFinished\n     */\n    public playPubandWildPokerAni(\n        cardValue: number,\n        wildCValues: number[],\n        cbFinished: Function\n    ): void {\n        CachetaAudioMgr.playCardFlip();\n\n        this.setPubPoker(cardValue);\n        this.pubPoker.show();\n        this.pubPoker.node.stopAllActions();\n        this.pubPoker.node.position = cc.v3(-81.2, 38, 0);\n        this.pubPoker.node.eulerAngles = cc.v3(0, 0, 0);\n\n        cc.tween(this.pubPoker.node)\n            .delay(0.2 / CachetaLogicMgr.timeScale)\n            .to(\n                0.5 / CachetaLogicMgr.timeScale,\n                { position: cc.v3(-32, 30, 0), eulerAngles: cc.v3(0, 0, -24) },\n                { easing: cc.easing.quadOut.name }\n            )\n            .call(() => {\n                cbFinished();\n            })\n            .start();\n\n        cc.Tween.stopAllByTarget(this.wildShow);\n        cc.tween(this.wildShow).call(() => {}).start;\n\n        // this.setWildPoker(wildCValues);\n        this.wildShowNull1.active = false;\n        this.wildShowNull2.active = false;\n\n        cc.tween(this.wildPoker1.node)\n            .delay(0.2 / CachetaLogicMgr.timeScale)\n            .to(0.25 / CachetaLogicMgr.timeScale, { eulerAngles: cc.v3(0, -90, 0) })\n            .call(() => {\n                this.wildPoker1.initCard(wildCValues[0], true);\n            })\n            .to(0.25 / CachetaLogicMgr.timeScale, { eulerAngles: cc.v3(0, 0, 0) })\n            .start();\n        cc.tween(this.wildPoker2.node)\n            .delay(0.2 / CachetaLogicMgr.timeScale)\n            .to(0.25 / CachetaLogicMgr.timeScale, { eulerAngles: cc.v3(0, -90, 0) })\n            .call(() => {\n                this.wildPoker2.initCard(wildCValues[1], true);\n            })\n            .to(0.25 / CachetaLogicMgr.timeScale, { eulerAngles: cc.v3(0, 0, 0) })\n            .start();\n    }\n\n    /**\n     * 播放定癞子动画\n     */\n    public playEnsurePubPokerAni(cardValue: number, callback: Function) {\n        this.pubCacdN.active = true;\n        cc.Tween.stopAllByTarget(this.pubPokerBig.node);\n        let cardValueArr = [];\n        for (let i = 0; i < 24; i++) {\n            cardValueArr.push(Math.ceil(Math.random() * 4) * 100 + Math.ceil(Math.random() * 13));\n        }\n        cardValueArr.push(cardValue);\n        let time = 0;\n        cc.tween(this.pubPokerBig.node)\n            .delay(0.5 / CachetaLogicMgr.timeScale)\n            .parallel(\n                cc.tween().call(() => {\n                    this.pubCacdNull.active = false;\n                }),\n                cc.tween().repeat(\n                    25,\n                    cc\n                        .tween(this.pubPokerBig.node)\n                        .delay(0.1 / CachetaLogicMgr.timeScale)\n                        .call(() => {\n                            this.pubPokerBig.initCard(cardValueArr[time]);\n                            time += 1;\n                        })\n                )\n            )\n            .call(() => {\n                // 闪光 1s\n                this.light.active = true;\n                // cc.tween(this.light).blink(1, 6).start();\n            })\n            .delay(1 / CachetaLogicMgr.timeScale)\n            .call(() => {\n                this.pubCacdN.active = false;\n                callback && callback();\n            })\n            .start();\n    }\n\n    /**\n     * 获取关闭牌位置\n     */\n    public getClosePokerPos(): cc.Vec3 {\n        return this.closePoker.node.convertToWorldSpaceAR(cc.v3(0, 0));\n    }\n\n    /**\n     * 获取公开牌位置\n     */\n    public getOpenPokerPos(): cc.Vec3 {\n        return this.openPoker.node.convertToWorldSpaceAR(cc.v3(0, 0));\n    }\n\n    private onTouchClosePoker(): void {\n        if (\n            CachetaUserMgr.isLocalActive() &&\n            CachetaLogicMgr.gameStage == CachetaProto.STAGE.TOUCH\n        ) {\n            CachetaSocketMgr.touchReq(false);\n        }\n    }\n\n    private onTouchOpenPoker(): void {\n        if (\n            CachetaUserMgr.isLocalActive() &&\n            CachetaLogicMgr.gameStage == CachetaProto.STAGE.TOUCH\n        ) {\n            CachetaSocketMgr.touchReq(true);\n        }\n    }\n\n    private onReplayStateChanged(state: ReplayState): void {\n        switch (state) {\n            case ReplayState.Play:\n                this.closeTips.getComponent(cc.Animation).resume();\n                this.oepnTips.getComponent(cc.Animation).resume();\n                break;\n            case ReplayState.Pause:\n                this.closeTips.getComponent(cc.Animation).pause();\n                this.oepnTips.getComponent(cc.Animation).pause();\n                break;\n            default:\n                break;\n        }\n    }\n\n    private getNewPoker(poker, parent) {\n        let wildPokerNode = cc.instantiate(poker);\n        wildPokerNode.parent = parent;\n        return wildPokerNode.getComponent(CachetaPoker);\n    }\n}\n","import UserAvatarMgr from \"../../../../plaza/common/Script/Component/UserAvatar/UserAvatarMgr\";\nimport UserAvatarModel from \"../../../../plaza/common/Script/Component/UserAvatar/UserAvatarModel\";\nimport CachetaSkin from \"../conf/skin/CachetaSkin\";\nimport CachetaLogicMgr from \"../manager/CachetaLogicMgr\";\nimport { CachetaProto } from \"../service/ws/proto/CachetaProto\";\nimport CachetaPoker from \"./CachetaPoker\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class CachetaDeclare extends cc.Component {\n    @property(cc.Node)\n    avatar: cc.Node = null;\n\n    win: cc.Node = null;\n    hand: cc.Node = null;\n    deathTurn: cc.Node = null;\n    panelList: cc.Node[] = [];\n\n    onLoad() {\n        this.win = cc.find(\"win\", this.node);\n        this.hand = cc.find(\"hand\", this.win);\n        this.deathTurn = cc.find(\"deathTurn\", this.node);\n        this.hand.children.forEach((node) => {\n            this.panelList.push(node);\n        });\n    }\n\n    init(isMaxRoundSettle: boolean, winSettle: CachetaProto.Settle, callback) {\n        if (!isMaxRoundSettle) {\n            let pokerPrefab: cc.Prefab = UIDepend.PrefabManager.getPrefabBundle(\n                CachetaSkin.Priority.CachetaPoker\n            );\n\n            for (let i = 0; i < winSettle.Hand.GroupS.length; i++) {\n                let cardGroup = winSettle.Hand.GroupS[i];\n                for (let j = 0; j < cardGroup.CardS.length; j++) {\n                    let poker = cc.instantiate(pokerPrefab);\n                    this.panelList[i].addChild(poker);\n                    let pokerJS = poker.getComponent(CachetaPoker);\n                    let cardValue = cardGroup.CardS[j];\n                    let isWildCard = CachetaLogicMgr.isWildCard(cardValue);\n                    pokerJS.initCard(cardValue, isWildCard);\n                    poker.opacity = 0;\n                }\n                let layout = this.panelList[i].getComponent(cc.Layout);\n                if (cardGroup.CardS.length > 3) {\n                    layout.spacingX = -62;\n                }\n                layout.updateLayout();\n            }\n\n            this.setAvatar(winSettle.Avatar, winSettle.Gender);\n\n            this.scheduleOnce(() => {\n                // 展示牌组 delay 1s\n                let count = 0;\n                for (let i = 0; i < this.panelList.length; i++) {\n                    let len = this.panelList[i].childrenCount;\n\n                    this.panelList[i].getComponent(cc.Layout).enabled = false;\n                    for (let j = 0; j < len; j++) {\n                        this.panelList[i].children[j].active = true;\n                        let poker = this.panelList[i].children[j];\n                        cc.tween(poker)\n                            .to(0, { scale: 0, opacity: 0 })\n                            .delay((0.05 * count + 0.2 * i) / CachetaLogicMgr.timeScale)\n                            .call(() => {\n                                poker.zIndex = 999;\n                            })\n                            .to(0.3 / CachetaLogicMgr.timeScale, { scale: 1.2, opacity: 255 })\n                            .call(() => {\n                                poker.zIndex = j;\n                            })\n                            .to(0.1 / CachetaLogicMgr.timeScale, { scale: 1 })\n                            .call(() => {\n                                if (j == len - 1) {\n                                    this.scheduleOnce(() => {\n                                        this.node.destroy();\n\n                                        callback && callback();\n                                    }, 2 / CachetaLogicMgr.timeScale);\n                                }\n                            })\n                            .start();\n                        count++;\n                    }\n                }\n            }, 1 / CachetaLogicMgr.timeScale);\n        } else {\n            this.win.active = false;\n            cc.tween(this.deathTurn)\n                .to(0.3 / CachetaLogicMgr.timeScale, { scale: 1.2 }, { easing: cc.easing.sineOut })\n                .to(0.1 / CachetaLogicMgr.timeScale, { scale: 1 }, { easing: cc.easing.sineIn })\n                .delay(2 / CachetaLogicMgr.timeScale)\n                .to(0.5 / CachetaLogicMgr.timeScale, { opacity: 0 })\n                .call(() => {\n                    this.node.destroy();\n\n                    callback && callback();\n                })\n                .start();\n        }\n    }\n\n    /**\n     * 设置头像\n     * @param avatar\n     * @param gender\n     */\n    public setAvatar(avatar: number, gender: UserAvatarModel.GENDER): void {\n        UserAvatarMgr.loadUserAvatarPrefab(this.avatar, avatar, gender).then((avatar: cc.Node) => {\n            if (cc.isValid(avatar)) {\n                avatar.position = cc.v3(0, 0);\n                avatar.scaleX = (this.avatar.width + 15) / avatar.width;\n                avatar.scaleY = (this.avatar.height + 15) / avatar.height;\n            }\n        });\n    }\n}\n","/**\r\n * 事件名称\r\n */\r\nexport namespace CachetaEventName {\r\n    /** 添加模块名称前缀去重 */\r\n    const MODULE: string = \"CACHETA\" + \"_\";\r\n\r\n    /** 扑克触摸开始 */\r\n    export const POKER_TOUCH_START: string = MODULE + \"POKER_TOUCH_START\";\r\n    /** 扑克触摸移动 */\r\n    export const POKER_TOUCH_MOVE: string = MODULE + \"POKER_TOUCH_MOVE\";\r\n    /** 扑克触摸结束 */\r\n    export const POKER_TOUCH_END: string = MODULE + \"POKER_TOUCH_END\";\r\n    /** 扑克状态重置 */\r\n    export const POKER_STATE_RESET: string = MODULE + \"POKER_STATE_RESET\";\r\n    /** 扑克状态改变 */\r\n    export const POKER_STATE_CHANGED: string = MODULE + \"POKER_STATE_CHANGED\";\r\n    /** 检查手牌 */\r\n    export const CHECK_HAND: string = MODULE + \"CHECK_HAND\";\r\n    /** 开始准备游戏 */\r\n    export const START_PREPARE: string = MODULE + \"START_PREPARE\";\r\n    /** 抢胡开火 */\r\n    export const ROB_FIRE: string = MODULE + \"ROB_FIRE\";\r\n    /** 手动排序 */\r\n    export const MANUAL_SORT: string = MODULE + \"MANUAL_SORT\";\r\n    /** 取消扑克选中 */\r\n    export const CANCEL_POKER_SELECT: string = MODULE + \"CANCEL_POKER_SELECT\";\r\n\r\n    export const REPLAY_STATE_CHANGED: string = MODULE + \"REPLAY_STATE_CHANGED\";\r\n}\r\n","import Listener from \"../../../../main/core/utils/Listener\";\r\nimport CommonBroadCastUtil from \"../../../plaza/common/Script/broad_cast/CommonBroadCastUtil\";\r\nimport CommonEventName from \"../../../plaza/common/Script/CommonEventName\";\r\nimport { CachetaEventName } from \"./define/CachetaEventName\";\r\nimport CachetaAudioMgr from \"./manager/CachetaAudioMgr\";\r\nimport CachetaLogicMgr from \"./manager/CachetaLogicMgr\";\r\nimport CachetaUIMgr from \"./manager/CachetaUIMgr\";\r\nimport CachetaUserMgr from \"./manager/CachetaUserMgr\";\r\nimport CachetaSocketMgr from \"./service/ws/CachetaSocketMgr\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class CachetaGame extends cc.Component {\r\n    protected onLoad(): void {\r\n        CachetaUserMgr.init();\r\n        CachetaLogicMgr.init();\r\n        CachetaUIMgr.init(this.node);\r\n        CachetaAudioMgr.playBGM();\r\n\r\n        Listener.on(CommonEventName.PAY_SUCCESS, this.onPaySuccess, this);\r\n        Listener.on(CachetaEventName.CANCEL_POKER_SELECT, this.onCancelPokerSelect, this);\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        CachetaSocketMgr.close();\r\n        CommonBroadCastUtil.reset();\r\n\r\n        Listener.off(CommonEventName.PAY_SUCCESS, this.onPaySuccess, this);\r\n        Listener.off(CachetaEventName.CANCEL_POKER_SELECT, this.onCancelPokerSelect, this);\r\n    }\r\n\r\n    private onPaySuccess(): void {\r\n        CachetaSocketMgr.syncUserReq();\r\n    }\r\n\r\n    private onCancelPokerSelect(): void {\r\n        CachetaUIMgr.adaptOperation();\r\n    }\r\n}\r\n","import { CachetaConst } from \"../define/CachetaConst\";\r\nimport CachetaSkin from \"../conf/skin/CachetaSkin\";\r\nimport { CachetaProto } from \"../service/ws/proto/CachetaProto\";\r\nimport CachetaLanguage from \"../conf/lang/CachetaLanguage\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class CachetaGroupBar extends cc.Component {\r\n    private groupTag: cc.Sprite = null;\r\n    private pattern: cc.Label = null;\r\n\r\n    protected onLoad(): void {\r\n        this.groupTag = this.node.getComponent(cc.Sprite);\r\n        this.pattern = cc.find(\"pattern\", this.node).getComponent(cc.Label);\r\n    }\r\n\r\n    public show(): void {\r\n        this.node.active = true;\r\n    }\r\n\r\n    public hide(): void {\r\n        this.node.active = false;\r\n    }\r\n\r\n    /**\r\n     * 设置布局\r\n     * @param cardIndex\r\n     * @param groupIndex\r\n     * @param cardNum\r\n     */\r\n    public setLayout(\r\n        cardIndex: number,\r\n        groupIndex: number,\r\n        cardNum: number,\r\n        pokerSpace: number,\r\n        groupSpace: number\r\n    ): void {\r\n        if (cardIndex == 0) {\r\n            this.node.x = 0;\r\n        } else {\r\n            this.node.x = (cardIndex - 1) * pokerSpace + CachetaConst.PokerWidth - 40;\r\n        }\r\n        this.node.width = pokerSpace * (cardNum - 1) + CachetaConst.PokerWidth - groupSpace;\r\n    }\r\n\r\n    /**\r\n     * 设置牌型\r\n     * @param handCard\r\n     * @param cardGroup\r\n     * @param isSettle\r\n     */\r\n    public setPattern(\r\n        handCard: CachetaProto.Hand,\r\n        cardGroup: CachetaProto.Group,\r\n        idx: number,\r\n        isSettle: boolean = false\r\n    ): void {\r\n        let type = 0;\r\n        switch (cardGroup.Pattern) {\r\n            case CachetaProto.PATTERN.STRAIGHT:\r\n                type = 2;\r\n                break;\r\n            case CachetaProto.PATTERN.SET:\r\n                type = 1;\r\n                break;\r\n            default:\r\n                type = 3;\r\n                break;\r\n        }\r\n        if (type == 3) return;\r\n\r\n        let y = !isSettle ? -85.5 : -100;\r\n        let height = !isSettle ? 42 : 5;\r\n        let resPrefix = \"group\";\r\n        let pattern = !isSettle\r\n            ? CachetaLanguage[`PATTERN_${CachetaProto.PATTERN[cardGroup.Pattern]}`]\r\n            : \"\";\r\n\r\n        this.node.y = y;\r\n        this.node.height = height;\r\n        this.groupTag.spriteFrame = UIDepend.SpriteManager.getSpriteBundle(\r\n            CachetaSkin.Priority[`${resPrefix}_${(idx % 2) + 1}`]\r\n        );\r\n        this.pattern.string = pattern;\r\n    }\r\n}\r\n","import { CachetaConst } from \"../define/CachetaConst\";\nimport { CachetaEventName } from \"../define/CachetaEventName\";\nimport CachetaAudioMgr from \"../manager/CachetaAudioMgr\";\nimport CachetaSkin from \"../conf/skin/CachetaSkin\";\nimport CachetaPoker from \"./CachetaPoker\";\nimport CachetaGroupBar from \"../ui/CachetaGroupBar\";\nimport CachetaCardModel from \"../model/CachetaCardModel\";\nimport CachetaSocketMgr from \"../service/ws/CachetaSocketMgr\";\nimport { CachetaProto } from \"../service/ws/proto/CachetaProto\";\nimport Listener from \"../../../../../main/core/utils/Listener\";\nimport CachetaLogicMgr from \"../manager/CachetaLogicMgr\";\nimport CachetaUserMgr from \"../manager/CachetaUserMgr\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class CachetaHandPoker extends cc.Component {\n    private panle: cc.Node = null;\n\n    /** 手牌列表 */\n    private pokers: CachetaPoker[] = [];\n    /** 分组条 */\n    private groupBars: CachetaGroupBar[] = [];\n    /** 手牌数据 */\n    private handCard: CachetaProto.Hand = null;\n    /** 手牌模型 */\n    private models: CachetaCardModel[] = null;\n    /** 扑克X列表 */\n    private pokerXs: number[] = [];\n    /** 分组(每组的最后一张牌)X列表 */\n    private groupXs: number[] = [];\n    /** 拖动组排的手牌数据 */\n    private moveHandCard: CachetaProto.Hand = null;\n    /** 打出的牌 */\n    private discardPoker: CachetaPoker = null;\n    /** 是否是花色排序 */\n    private isFlowerSort: boolean = true;\n    /** 手牌点数列表-服务器（非理牌） */\n    private handCardValues: number[] = [];\n    /** 能胡牌的牌值 */\n    private canDecCardV: number = 0;\n\n    private insetCardIndex = -1;\n\n    protected onLoad(): void {\n        this.panle = this.node.getChildByName(\"panle\");\n        this.panle.destroyAllChildren();\n\n        this.isFlowerSort = true;\n\n        let pokerPrefab: cc.Prefab = UIDepend.PrefabManager.getPrefabBundle(\n            CachetaSkin.Priority.CachetaPoker\n        );\n        for (let i = 0; i < CachetaConst.HandPokerNumMax; i++) {\n            let pokerNode = cc.instantiate(pokerPrefab);\n            pokerNode.parent = this.panle;\n\n            let poker = pokerNode.getComponent(CachetaPoker);\n            this.pokers.push(poker);\n        }\n\n        let groupPrefab: cc.Prefab = UIDepend.PrefabManager.getPrefabBundle(\n            CachetaSkin.Priority.CachetaGroupBar\n        );\n        for (let i = 0; i < CachetaConst.HandPokerGroupMax; i++) {\n            let groupNode = cc.instantiate(groupPrefab);\n            groupNode.parent = this.panle;\n            groupNode.zIndex = CachetaConst.HandPokerNumMax + 1 + i;\n\n            let groupBar = groupNode.getComponent(CachetaGroupBar);\n            this.groupBars.push(groupBar);\n        }\n\n        Listener.on(CachetaEventName.POKER_TOUCH_START, this.onPokerTouchStart, this);\n        Listener.on(CachetaEventName.POKER_TOUCH_MOVE, this.onPokerTouchMove, this);\n        Listener.on(CachetaEventName.POKER_TOUCH_END, this.onPokerTouchEnd, this);\n        Listener.on(CachetaEventName.MANUAL_SORT, this.onManualSort, this);\n        Listener.on(CachetaEventName.POKER_STATE_RESET, this.onResetHandPoker, this);\n\n        this.reset();\n    }\n\n    protected onDestroy(): void {\n        Listener.off(CachetaEventName.POKER_TOUCH_START, this.onPokerTouchStart, this);\n        Listener.off(CachetaEventName.POKER_TOUCH_MOVE, this.onPokerTouchMove, this);\n        Listener.off(CachetaEventName.POKER_TOUCH_END, this.onPokerTouchEnd, this);\n        Listener.off(CachetaEventName.MANUAL_SORT, this.onManualSort, this);\n        Listener.off(CachetaEventName.POKER_STATE_RESET, this.onResetHandPoker, this);\n    }\n\n    public reset(): void {\n        this.canDecCardV = 0;\n\n        this.node.stopAllActions();\n\n        for (let i = 0; i < this.pokers.length; i++) {\n            let poker = this.pokers[i];\n            poker.node.stopAllActions();\n            poker.node.eulerAngles = cc.v3(0, 0, 0);\n            poker.node.scale = 1;\n            poker.node.zIndex = i + CachetaConst.HandPokerGroupMax;\n            poker.hide();\n        }\n\n        for (let j = 0; j < this.groupBars.length; j++) {\n            this.groupBars[j].hide();\n        }\n    }\n\n    /**\n     * 设置手牌的值\n     * @param handCard\n     */\n    public setPokerValue(handCard: CachetaProto.Hand, saveHandCardValue: boolean = false): void {\n        this.handCard = handCard;\n        if (saveHandCardValue) {\n            this.handCardValues = [];\n        }\n        this.models = [];\n        this.pokerXs = [];\n        this.groupXs = [];\n\n        for (let i = 0; i < this.pokers.length; i++) {\n            this.pokers[i].reset();\n        }\n\n        let cardIndex = 0;\n        let cardZIndex = 0;\n        for (let i = 0; i < handCard.GroupS.length; i++) {\n            let cardGroup = handCard.GroupS[i];\n            for (let j = 0; j < cardGroup.CardS.length; j++) {\n                let cardValue = cardGroup.CardS[j];\n                let isWildCard = CachetaLogicMgr.isWildCard(cardValue);\n\n                // 拖牌时 如果是相同的牌 忽略cardIndex相同 curCardIndex不同即可\n                let fromIndex = 0;\n                let model = new CachetaCardModel(\n                    cardValue,\n                    saveHandCardValue\n                        ? cardIndex\n                        : this.handCardValues.indexOf(cardValue, fromIndex),\n                    cardIndex,\n                    i\n                );\n                // let pokerX = cardIndex * CachetaConst.PokerSpace + i * CachetaConst.GroupSpace;\n                let pokerX = cardIndex * CachetaConst.PokerSpace + CachetaConst.PokerWidth / 2;\n                let poker = this.pokers[cardIndex];\n                poker.node.zIndex = cardZIndex;\n                poker.show();\n                poker.initCard(cardValue, isWildCard);\n                poker.setModel(model);\n                poker.setPositionX(pokerX);\n                poker.setTouchEnabled(true);\n\n                this.models.push(model);\n                this.pokerXs.push(pokerX);\n\n                cardIndex++;\n                cardZIndex++;\n                if (\n                    j == cardGroup.CardS.length - 1 &&\n                    cardGroup.Pattern != CachetaProto.PATTERN.INVALID\n                ) {\n                    cardZIndex++;\n                }\n                if (saveHandCardValue) {\n                    this.handCardValues.push(cardValue);\n                }\n            }\n\n            this.groupXs[i] =\n                (cardIndex - 1) * CachetaConst.PokerSpace +\n                i * CachetaConst.GroupSpace +\n                CachetaConst.PokerWidth / 2;\n        }\n\n        CC_DEBUG && cc.log(`CachetaHandPoker handCardValues: ${this.handCardValues}`);\n\n        if (saveHandCardValue) {\n            this.canDecCardV = 0;\n            if (\n                handCard.Status == CachetaProto.HAND_STATUS.LISTEN &&\n                cardIndex == CachetaConst.HandPokerNumMax\n            ) {\n                handCard.GroupS.forEach((group) => {\n                    if (group.Pattern == CachetaProto.PATTERN.INVALID && group.CardS.length == 1) {\n                        this.canDecCardV = group.CardS[0];\n                    }\n                });\n            }\n        }\n\n        // 摸牌位置默认最后一张牌的位置\n        for (let i = cardIndex; i < this.pokers.length; i++) {\n            this.pokers[i].setPositionX(\n                // i * CachetaConst.PokerSpace + (handCard.GroupS.length - 1) * CachetaConst.GroupSpace\n                cardIndex * CachetaConst.PokerSpace + CachetaConst.PokerWidth / 2\n            );\n        }\n\n        // 根据牌组数量动态调整手牌位置\n        let handWidth =\n            (CachetaLogicMgr.getHandCardsNum(this.handCard) - 1) * CachetaConst.PokerSpace;\n        this.panle.x = -(handWidth + CachetaConst.PokerWidth) / 2;\n\n        this.setGroupBar(handCard);\n    }\n\n    /**\n     * 设置分组条\n     * @param handCard 手牌数据\n     */\n    private setGroupBar(handCard: CachetaProto.Hand): void {\n        for (let i = 0; i < this.groupBars.length; i++) {\n            this.groupBars[i].hide();\n        }\n\n        let groupIdx = 0;\n        for (let i = 0, cardIndex = 0; i < handCard.GroupS.length; i++) {\n            let cardGroup = handCard.GroupS[i];\n            if (cardGroup.CardS.length > 1 && cardGroup.Pattern != CachetaProto.PATTERN.INVALID) {\n                let groupBar: CachetaGroupBar = this.groupBars[i];\n                groupIdx += cardGroup.CardS.length;\n                groupBar.node.zIndex = groupIdx;\n                groupIdx++;\n                groupBar.show();\n                groupBar.setLayout(\n                    cardIndex,\n                    i,\n                    cardGroup.CardS.length,\n                    CachetaConst.PokerSpace,\n                    CachetaConst.GroupSpace\n                );\n                groupBar.setPattern(handCard, cardGroup, i);\n            } else {\n                groupIdx += cardGroup.CardS.length;\n            }\n            cardIndex = cardIndex + cardGroup.CardS.length;\n        }\n    }\n\n    /**\n     * 扑克触摸开始\n     * @param poker\n     */\n    private onPokerTouchStart(poker: CachetaPoker): void {\n        this.moveHandCard = null;\n\n        for (let i = 0; i < this.pokers.length; i++) {\n            if (this.pokers[i] != poker) {\n                this.pokers[i].setTouchEnabled(false);\n            }\n        }\n    }\n\n    /**\n     * 扑克触摸移动\n     * @param poker\n     */\n    private onPokerTouchMove(poker: CachetaPoker): void {\n        poker.node.zIndex = CachetaConst.HandPokerNumMax + CachetaConst.HandPokerGroupMax;\n\n        let position = poker.node.position;\n        if (position.y > poker.node.height) {\n            return;\n        }\n\n        let insetCardIndex = this.getInsetCardIndex(poker);\n        let insetGroupIndex = this.getInsetGroupIndex(poker);\n        let oldModel = new CachetaCardModel(\n            poker.getCardValue(),\n            poker.getCardIndex(),\n            poker.getCurCardIndex(),\n            poker.getGroupIndex()\n        );\n        let newModel = new CachetaCardModel(\n            poker.getCardValue(),\n            poker.getCardIndex(),\n            insetCardIndex,\n            insetGroupIndex\n        );\n\n        this.moveHandCard = this.getMoveHandCard(oldModel, newModel);\n        // this.setGroupBar(this.moveHandCard);\n        this.setPokerMovePos(insetCardIndex);\n        this.insetCardIndex = insetCardIndex;\n    }\n\n    /**\n     * 扑克触摸结束\n     * @param poker\n     */\n    private onPokerTouchEnd(poker: CachetaPoker): void {\n        let position = poker.node.position;\n        if (position.y >= 330 - CachetaConst.PokerHeight / 2) {\n            if (\n                CachetaUserMgr.isLocalActive() &&\n                CachetaLogicMgr.gameStage == CachetaProto.STAGE.DISCARD\n            ) {\n                this.setDiscardPoker(poker);\n                if (this.canDecCardV == poker.getCardValue()) {\n                    CachetaSocketMgr.declareReq(poker.getCardValue(), poker.getCardIndex());\n                } else {\n                    CachetaSocketMgr.discardReq(poker.getCardValue(), poker.getCardIndex());\n                }\n                this.setTouchEnabled(false);\n                return;\n            }\n        }\n\n        if (this.moveHandCard) {\n            let oldHandCard = this.handCard;\n            let newHandCard = this.moveHandCard;\n\n            // 移除空组\n            for (let i = 0; i < newHandCard.GroupS.length; i++) {\n                if (newHandCard.GroupS[i].CardS.length == 0) {\n                    newHandCard.GroupS.splice(i, 1);\n                    i--;\n                }\n            }\n\n            // todo 判断牌组是否发生改变\n            if (this.checkPokersCount(oldHandCard) == this.checkPokersCount(newHandCard)) {\n                CachetaSocketMgr.groupReq(newHandCard);\n                this.setTouchEnabled(false);\n                // 解决拖牌响应后 闪现一下的问题\n                this.movePokerNode(poker);\n            } else {\n                CC_DEBUG &&\n                    cc.error(\n                        `CachetaHandPoker onPokerTouchEnd, handCard error \\nold: `,\n                        oldHandCard,\n                        `\\nnew: `,\n                        newHandCard\n                    );\n                this.setPokerValue(oldHandCard);\n            }\n            return;\n        }\n\n        this.setTouchEnabled(true);\n    }\n\n    private movePokerNode(poker: CachetaPoker) {\n        if (this.insetCardIndex == -1) return;\n\n        this.pokers.splice(poker.getCurCardIndex(), 1);\n        this.pokers.splice(this.insetCardIndex, 0, poker);\n        this.insetCardIndex = -1;\n    }\n\n    /**\n     * 获取插入牌索引\n     * @param poker\n     */\n    private getInsetCardIndex(poker: CachetaPoker): number {\n        let cardIndex = poker.getCardIndex();\n        let x = poker.node.position.x;\n        for (let i = 0; i < this.pokerXs.length - 1; i++) {\n            if (i >= cardIndex) {\n                if (this.pokerXs[i + 1] - x > 0) {\n                    return i;\n                }\n            } else {\n                if (this.pokerXs[i] - x > 0) {\n                    return i;\n                }\n            }\n        }\n\n        return this.pokerXs.length - 1;\n    }\n\n    /**\n     * 获取插入组索引\n     * @param poker\n     */\n    private getInsetGroupIndex(poker: CachetaPoker): number {\n        let x = poker.node.position.x;\n        for (let i = 0; i < this.groupXs.length; i++) {\n            // 以两个组的中点为界 ing\n            if (this.groupXs[i] + CachetaConst.PokerSpace - CachetaConst.PokerSpace / 2 - x > 0) {\n                return i;\n            }\n        }\n\n        return this.groupXs.length - 1;\n    }\n\n    /**\n     * 获取移动手牌数据\n     * @param oldModel\n     * @param newModel\n     */\n    private getMoveHandCard(\n        oldModel: CachetaCardModel,\n        newModel: CachetaCardModel\n    ): CachetaProto.Hand {\n        let newModels = this.models.concat([]);\n        if (!oldModel.equal(newModel)) {\n            newModels.splice(oldModel.curCardIndex, 1);\n\n            // 根据移动方向调整牌索引\n            for (let i = 0; i < newModels.length; i++) {\n                let model = newModels[i];\n                if (oldModel.curCardIndex > newModel.curCardIndex) {\n                    // 左<-右\n                    if (\n                        model.curCardIndex >= newModel.curCardIndex &&\n                        model.curCardIndex < oldModel.curCardIndex\n                    ) {\n                        model.curCardIndex = model.curCardIndex + 1;\n                    }\n                } else if (newModel.curCardIndex > oldModel.curCardIndex) {\n                    // 左->右\n                    if (\n                        model.curCardIndex > oldModel.curCardIndex &&\n                        model.curCardIndex <= newModel.curCardIndex\n                    ) {\n                        model.curCardIndex = model.curCardIndex - 1;\n                    }\n                }\n            }\n\n            newModels.push(newModel);\n\n            // 根据牌索引重新排序\n            newModels.sort((a, b) => {\n                return a.curCardIndex - b.curCardIndex;\n            });\n        }\n\n        let oldHandCard = this.handCard;\n        let newHandCard = {\n            GroupS: [],\n            Status: CachetaProto.HAND_STATUS.UNKNOWN,\n        } as CachetaProto.Hand;\n\n        let newCardGroupS = {\n            Pattern: CachetaProto.PATTERN.INVALID,\n            CardS: [],\n        } as CachetaProto.Group;\n        for (let i = 0; i < oldHandCard.GroupS.length; i++) {\n            for (let j = 0; j < newModels.length; j++) {\n                let model = newModels[j];\n                if (model.groupIndex == i) {\n                    newCardGroupS.CardS.push(model.cardValue);\n                }\n            }\n        }\n        // 这里不过滤空组，更新分组条需要用\n        newHandCard.GroupS.push(newCardGroupS);\n\n        return newHandCard;\n    }\n\n    /**\n     * 设置手牌移动位置\n     * @param insetCardIndex\n     */\n    private setPokerMovePos(insetCardIndex: number): void {\n        let pokers: CachetaPoker[] = [];\n        for (let i = 0; i < this.pokers.length; i++) {\n            let poker = this.pokers[i];\n            if (poker.isMoving() == false) {\n                pokers.push(poker);\n            }\n        }\n\n        for (let i = 0; i < pokers.length; i++) {\n            let poker = pokers[i];\n            let cardIndex = i >= insetCardIndex ? i + 1 : i;\n            let groupIndex = poker.getGroupIndex();\n            poker.setPositionX(cardIndex * CachetaConst.PokerSpace + CachetaConst.PokerWidth / 2);\n        }\n    }\n\n    /**\n     * 设置是否可触摸\n     * @param enabled\n     */\n    public setTouchEnabled(enabled: boolean): void {\n        for (let i = 0; i < this.pokers.length; i++) {\n            this.pokers[i].setTouchEnabled(enabled);\n        }\n    }\n\n    /**\n     * 检查该牌是否在牌组中\n     * @param pokers\n     * @param cardValue\n     * @param cardIndex\n     * @param groupIndex\n     */\n    private checkInPokers(\n        pokers: CachetaPoker[],\n        cardValue: number,\n        cardIndex: number,\n        groupIndex: number\n    ): boolean {\n        for (let i = 0; i < pokers.length; i++) {\n            if (\n                pokers[i].getCardValue() == cardValue &&\n                pokers[i].getCardIndex() == cardIndex &&\n                pokers[i].getGroupIndex() == groupIndex\n            ) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * 选择牌\n     * @param indexs\n     */\n    public selectPokers(indexs: number[]): void {\n        if (indexs.length == 0) {\n            return;\n        }\n\n        for (let i = 0; i < this.pokers.length; i++) {\n            this.pokers[i].setSelected(false);\n        }\n\n        for (let i = 0; i < indexs.length; i++) {\n            this.pokers[indexs[i]]?.setSelected(true);\n        }\n    }\n\n    /**\n     * 获取选中的牌组\n     */\n    public getSelectedPokers(): CachetaPoker[] {\n        let pokers: CachetaPoker[] = [];\n        for (let i = 0; i < this.pokers.length; i++) {\n            let poker = this.pokers[i];\n            if (poker.isSelected()) {\n                pokers.push(poker);\n            }\n        }\n\n        return pokers;\n    }\n\n    /**\n     * 检查手牌数量\n     * @param handCard\n     */\n    private checkPokersCount(handCard: CachetaProto.Hand): number {\n        let count = 0;\n        for (let i = 0; i < handCard.GroupS.length; i++) {\n            for (let j = 0; j < handCard.GroupS[i].CardS.length; j++) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    /**\n     * 播放发牌动画\n     */\n    public playDealAni(handCard: CachetaProto.Hand, startPos: cc.Vec3, cbFinished: Function): void {\n        let handWidth =\n            (CachetaConst.HandPokerNumMax - 1 - 1) * CachetaConst.PokerSpace +\n            CachetaConst.PokerWidth;\n        this.panle.x = -handWidth / 2;\n\n        startPos = this.panle.convertToNodeSpaceAR(startPos);\n\n        let cardIndex = 0;\n        let count = 0;\n        let valueArr = [];\n        if (handCard) {\n            let handCardD = this.getDisorderHandCard(handCard);\n\n            CachetaAudioMgr.playCardDeal();\n\n            for (let i = 0; i < this.pokers.length; i++) {\n                this.pokers[i].reset();\n            }\n\n            for (let i = 0; i < handCardD.GroupS.length; i++) {\n                let cardGroup = handCardD.GroupS[i];\n                for (let j = 0; j < cardGroup.CardS.length; j++) {\n                    let cardValue = cardGroup.CardS[j];\n                    valueArr.push(cardValue);\n                    let poker = this.pokers[cardIndex];\n                    poker.node.zIndex = 0;\n                    poker.show();\n                    poker.showBack();\n                    poker.setTouchEnabled(false);\n\n                    poker.node.stopAllActions();\n                    poker.node.scale = 0.59;\n                    poker.node.position = startPos;\n\n                    cc.tween(poker.node)\n                        .call(() => {\n                            poker.showBack();\n                        })\n                        .delay((0.5 / 9 / CachetaLogicMgr.timeScale) * cardIndex)\n                        .to(0.2 / CachetaLogicMgr.timeScale, {\n                            scale: 1,\n                            position: cc.v3(\n                                cardIndex * CachetaConst.PokerSpace + CachetaConst.PokerWidth / 2,\n                                0\n                            ),\n                        })\n                        .call(() => {\n                            CachetaAudioMgr.playCardIn();\n                            count++;\n                            if (count == CachetaConst.HandPokerNumMax - 1) {\n                                // cbFinished();\n\n                                for (let k = 0; k < cardIndex; k++) {\n                                    let poker = this.pokers[k];\n                                    poker.node.stopAllActions();\n\n                                    cc.tween(poker.node)\n                                        .delay((0.3 / 9 / CachetaLogicMgr.timeScale) * k)\n                                        .to(0.1 / CachetaLogicMgr.timeScale, {\n                                            eulerAngles: cc.v3(0, -90, 0),\n                                        })\n                                        .call(() => {\n                                            poker.initCard(\n                                                valueArr[k],\n                                                false //CachetaLogicMgr.isWildCard(valueArr[k])\n                                            );\n                                        })\n                                        .to(0.1 / CachetaLogicMgr.timeScale, {\n                                            eulerAngles: cc.v3(0, 0, 0),\n                                        })\n                                        .call(() => {\n                                            if (k == cardIndex - 1) {\n                                                cbFinished();\n                                            }\n                                        })\n                                        .start();\n                                }\n                            }\n                        })\n                        .start();\n\n                    cardIndex++;\n                }\n            }\n        } else {\n            this.node.stopAllActions();\n            cc.tween(this.node)\n                .delay(0.5 / CachetaLogicMgr.timeScale)\n                .call(() => {\n                    cbFinished();\n                })\n                .start();\n        }\n    }\n\n    /**\n     * 获取乱序手牌\n     * @param handCard\n     */\n    private getDisorderHandCard(handCard: CachetaProto.Hand): CachetaProto.Hand {\n        if (handCard == null) {\n            return null;\n        }\n\n        let oldHandCard = handCard;\n        let newHandCard = {\n            GroupS: [],\n            Status: oldHandCard.Status,\n        } as CachetaProto.Hand;\n\n        let newCardGroupS = {\n            Pattern: CachetaProto.PATTERN.INVALID,\n            CardS: [],\n        } as CachetaProto.Group;\n\n        for (let i = 0; i < oldHandCard.GroupS.length; i++) {\n            for (let j = 0; j < oldHandCard.GroupS[i].CardS.length; j++) {\n                newCardGroupS.CardS.push(oldHandCard.GroupS[i].CardS[j]);\n            }\n        }\n\n        let cards = newCardGroupS.CardS;\n        let count = cards.length;\n        let lastIndex = cards.length - 1;\n        let randomIndex = 0;\n        let temp = 0;\n\n        while (count > 0) {\n            // 生成一个随机数与数组最后一个元素交换，排除最后一个，再生成一个随机数与倒数第二个交换，依次类推\n            randomIndex = Math.floor(Math.random() * count);\n            temp = cards[randomIndex];\n            cards[randomIndex] = cards[lastIndex];\n            cards[lastIndex] = temp;\n            count--;\n        }\n\n        newHandCard.GroupS.push(newCardGroupS);\n        return newHandCard;\n    }\n\n    /**\n     * 获取摸牌位置\n     */\n    public getTouchPokerPos(): cc.Vec3 {\n        let pos = this.pokers[this.pokers.length - 1].node.position;\n        return this.panle.convertToWorldSpaceAR(pos);\n    }\n\n    /**\n     * 设置摸牌的显示\n     * @returns\n     */\n    public setTouchPokerValue(cardValue: number): void {\n        this.pokers[this.pokers.length - 1].show();\n        this.pokers[this.pokers.length - 1].hideCardFlower();\n        this.pokers[this.pokers.length - 1].initCard(cardValue);\n    }\n\n    /**\n     * 记录出牌\n     * @param discardPoker\n     */\n    public setDiscardPoker(discardPoker: CachetaPoker): void {\n        this.discardPoker = discardPoker;\n    }\n\n    /**\n     * 获取出牌位置\n     */\n    public getDiscardPokerPos(): cc.Vec3 {\n        let pos: cc.Vec3;\n        if (this.discardPoker) {\n            pos = this.discardPoker.node.position;\n            this.discardPoker = null;\n        } else {\n            pos = this.pokers[this.pokers.length - 1].node.position;\n        }\n\n        return this.panle.convertToWorldSpaceAR(pos);\n    }\n\n    /**\n     * 设置面板位置\n     * @param pos\n     */\n    public setPanlePos(pos: cc.Vec3): void {\n        this.panle.position = pos;\n    }\n\n    /**\n     * 设置结算手牌\n     * @param handCard\n     */\n    public setPokerValueBySettle(handCard: CachetaProto.Hand): void {\n        let pokerSpace = 65;\n        let groupSpace = 100;\n        for (let i = 0, cardIndex = 0; i < handCard.GroupS.length; i++) {\n            let cardGroup = handCard.GroupS[i];\n            if (cardGroup.CardS.length > 1) {\n                let groupBar: CachetaGroupBar = this.groupBars[i];\n                groupBar.show();\n                groupBar.setLayout(cardIndex, i, cardGroup.CardS.length, pokerSpace, groupSpace);\n                groupBar.setPattern(handCard, cardGroup, i, true);\n            }\n\n            for (let j = 0; j < cardGroup.CardS.length; j++) {\n                let cardValue = cardGroup.CardS[j];\n                let isWildCard = CachetaLogicMgr.isWildCard(cardValue);\n                let poker = this.pokers[cardIndex];\n                poker.node.zIndex = cardIndex;\n                poker.show();\n                poker.initCard(cardValue, isWildCard);\n                poker.setPositionX(cardIndex * pokerSpace + i * groupSpace);\n                cardIndex++;\n            }\n        }\n    }\n\n    /**\n     * 手动排序\n     */\n    public onManualSort(): void {\n        this.isFlowerSort = !this.isFlowerSort;\n        for (let i = 0; i < this.handCard.GroupS.length; i++) {\n            let cardGroup = this.handCard.GroupS[i];\n            if (cardGroup.Pattern != CachetaProto.PATTERN.INVALID) continue;\n            cardGroup.CardS.sort((cardA, cardB) => {\n                let numberA = cardA % 100;\n                let numberB = cardB % 100;\n                let flowerA = Math.floor(cardA / 100); // hei, hong, mei, fang\n                flowerA = flowerA == 2 ? 0 : flowerA;\n                let flowerB = Math.floor(cardB / 100); // hei, hong, mei, fang\n                flowerB = flowerB == 2 ? 0 : flowerB;\n                if (this.isFlowerSort) {\n                    return flowerA == flowerB ? numberA - numberB : flowerA - flowerB;\n                } else {\n                    return numberA == numberB ? flowerA - flowerB : numberA - numberB;\n                }\n            });\n        }\n        CachetaSocketMgr.groupReq(this.handCard);\n    }\n\n    /**\n     * 重置手牌状态\n     * @param pos\n     */\n    public onResetHandPoker(): void {\n        this.getSelectedPokers().forEach((poker) => {\n            poker.setSelected(false);\n        });\n    }\n}\n","export const CachetaLanguageEn = {\n    PATTERN_SP: \"Invalid\",\n    PATTERN_SET: \"Set\",\n    PATTERN_STRAIGHT: \"Straight\",\n    SETTLE_NEXT:\n        \"<color=#d8d6a4>Next game starts in </color><color=#fff729>{0} </color><color=#d8d6a4>seconds!</color>\",\n    TIPS_GAME_START_TIME:\n        \"<color=#d8d6a4>The game will start in </color><color=#fff729>{0} </color><color=#d8d6a4>seconds</color>\",\n    TIPS_GAME_START_WAITING: \"Waiting\",\n    DISCARD_TIP: \"Select a card and play it out\",\n\n    DRAW_CARD: \"Chill\",\n    DECLARE_CARD: \"Hit\",\n    CONFIRM_WILDCARD: \"Turn\",\n    WILDCARD: \"Wild Card\",\n    GAMESTART: \"Start\",\n    POT: \"POT\",\n    PICK: \"Pick\",\n    TABLE_INFO: \"Table Info\",\n    PLAYER_NUMS: \"Players\",\n    WINNER: \"Winner\",\n    CONFIRM: \"Confirm\",\n    VICTORY: \"Victory\",\n    DEFEAT: \"Defeat\",\n    PLAY_AGAIN: \"Play Again\",\n};\n","export const CachetaLanguagePt = {\n    PATTERN_SP: \"Invalid\",\n    PATTERN_SET: \"Trinca\",\n    PATTERN_STRAIGHT: \"Sequência\",\n    SETTLE_NEXT:\n        \"<color=#d8d6a4>O próximo jogo começa em </color><color=#fff729>{0} </color><color=#d8d6a4>segundos!</color>\",\n    TIPS_GAME_START_TIME:\n        \"<color=#d8d6a4>O jogo começará em </color><color=#fff729>{0} </color><color=#d8d6a4>segundos</color>\",\n    TIPS_GAME_START_WAITING: \"Aguardando\",\n    DISCARD_TIP: \"Selecione uma carta e jogue-a\",\n\n    DRAW_CARD: \"Na boa\",\n    DECLARE_CARD: \"Bater\",\n    CONFIRM_WILDCARD: \"Vira\",\n    WILDCARD: \"Curinga\",\n    GAMESTART: \"Começou\",\n    POT: \"POTE\",\n    PICK: \"Comprar\",\n    TABLE_INFO: \"Inform. Da Mesa\",\n    PLAYER_NUMS: \"Jogadores\",\n    WINNER: \"Vencedor\",\n    CONFIRM: \"Confirmar\",\n    VICTORY: \"Vitória\",\n    DEFEAT: \"Derrota\",\n    PLAY_AGAIN: \"Jogar Novamente\",\n};\n","export const CachetaLanguageVi = {\n    BTN_NO: \"No\",\n    BTN_YES: \"Yes\",\n    DIALOG_EXIT_TITLE: \"Exit to Lobby\",\n    PATTERN_SP: \"Invalid\",\n    PATTERN_SET: \"Set\",\n    PATTERN_STRAIGHT: \"Sequence\",\n    DIALOG_EXIT_TIPS: \"Are you sure to quit while the game is in progress?\",\n    SETTLE_TITLE: \"Settlement\",\n    SETTLE_LEAVE: \"Quit\",\n    SETTLE_NEXT:\n        \"<color=#d8d6a4>Next game starts in </color><color=#fff729>{0} </color><color=#d8d6a4>seconds!</color>\",\n    TRUST_TIP1: \"Auto playing...\",\n    TRUST_TIP2: \"Tap screen to continue\",\n    BASE_SOCRE: \"Point Value: {0}\",\n    DRAW_CARD: \"Chill\",\n    DECLARE_CARD: \"Hit\",\n    CONFIRM_WILDCARD: \"Turn\",\n    WILDCARD: \"Wild Card\",\n    GAMESTART: \"Start\",\n    TIPS_GAME_START_TIME:\n        \"<color=#d8d6a4>The game will start in </color><color=#fff729>{0} </color><color=#d8d6a4>seconds</color>\",\n    TIPS_GAME_START_WAITING: \"Waiting\",\n    BTN_CHANGE_TABLE: \"Change Table\",\n    POT: \"POT\",\n    BTN_DISCARD: \"Discard\",\n    BTN_PICK1: \"Pick from Deck\",\n    BTN_PICK2: \"Pick from discard pile\",\n    PICK: \"Pick\",\n    TABLE_INFO: \"Table Info\",\n    PLAYER_NUMS: \"Players\",\n    WINNER: \"Winner\",\n    CONFIRM: \"Confirm\",\n    VICTORY: \"Victory\",\n    DEFEAT: \"Defeat\",\n    PLAY_AGAIN: \"Play Again\",\n    DISCARD_TIP: \"Select a card and play it out\",\n};\n","import { LanguageType } from \"../../../../../../main/core/conf/LanguageType\";\nimport BaseBundleLanguage from \"../../../../../../main/core/language/BaseBundleLanguage\";\nimport { CachetaLanguageEn } from \"./en/CachetaLanguageEn\";\nimport { CachetaLanguagePt } from \"./pt/CachetaLanguagePt\";\nimport { CachetaLanguageVi } from \"./vi/CachetaLanguageVi\";\n\ntype TLanguage = typeof CachetaLanguageEn &\n    typeof CachetaLanguagePt &\n    typeof CachetaLanguageVi;\nclass CachetaLanguage extends BaseBundleLanguage<TLanguage> {\n    protected language: LG.ILanguageConfigs = {\n        [LanguageType.EN]: CachetaLanguageEn,\n        [LanguageType.PT]: CachetaLanguagePt,\n        [LanguageType.VI]: CachetaLanguageVi,\n    };\n}\nexport default new CachetaLanguage().get();\n","import BundleCenter from \"../../../../../main/core/bd/BundleCenter\";\nimport { BundleNames } from \"../../../../../main/core/conf/BundleNames\";\nimport { CachetaProto } from \"../service/ws/proto/CachetaProto\";\nimport CachetaSocketMgr from \"../service/ws/CachetaSocketMgr\";\nimport CachetaUIMgr from \"./CachetaUIMgr\";\nimport CachetaUserMgr from \"./CachetaUserMgr\";\nimport { CommonProto } from \"../../../../plaza/common/Script/service/ws/proto/CommonProto\";\nimport { CachetaProtoMap } from \"../service/ws/proto/CachetaProtoMap\";\nimport { lodash } from \"../../../../../main/core/utils/NpmExport\";\nimport GameReplayControl from \"../../../../plaza/common/Script/game/replay/GameReplayControl\";\nimport { NewGameInfo } from \"../../../../plaza/common/Script/NewGameInfo\";\nimport Listener from \"../../../../../main/core/utils/Listener\";\nimport { CachetaEventName } from \"../define/CachetaEventName\";\n\nclass CachetaLogicMgr {\n    /** 自动排序 */\n    public autoSort = false;\n    /** 自动退出 */\n    public autoExit = false;\n    /** 配置 */\n    public conf: CachetaProto.Conf = null;\n    /** 游戏阶段 */\n    public gameStage = CachetaProto.STAGE.WAIT;\n    /** 赖子牌 */\n    private wildCard: number[] = [];\n    /** 公共牌 */\n    private pubCard: number = 0;\n    /** 弃牌 */\n    private discardCards: number[] = [];\n    /** 结束牌 */\n    private finishCard: number = 0;\n    /** 关闭牌数量 */\n    private closeNum: number = 0;\n    /** 弃牌池 */\n    private dropPool: number = 0;\n    /** 最近结算信息 */\n    private lastSettleInfo: CachetaProto.SettleNt = null;\n    private curDiscardCard: number = 0;\n\n    /** 牌局回放控制 */\n    private replayCtrl: GameReplayControl = null;\n\n    public get isReplay(): boolean {\n        return !lodash.isEmpty(NewGameInfo.getInstance().current.replayRecord);\n    }\n    public get timeScale(): number {\n        return this.replayCtrl?.timeScale ?? 1;\n    }\n\n    get CurDiscardCard() {\n        return this.curDiscardCard;\n    }\n\n    public init(): void {\n        this.autoSort = false;\n        this.autoExit = false;\n\n        this.initServer();\n    }\n\n    public initServer(): void {\n        if (!this.isReplay) {\n            CachetaSocketMgr.init({\n                onMessage: this.onMessage.bind(this),\n                onError: this.onErrorSt.bind(this),\n            });\n        } else {\n            this.replayCtrl = new GameReplayControl(\n                NewGameInfo.getInstance().current.replayRecord,\n                {\n                    onMessage: this.onMessage.bind(this),\n                    timeScale: 1,\n                    messageMap: CachetaProtoMap,\n                    messageDelay: {\n                        [CachetaProto.MessageID.USER_IN_EV]: 0,\n                        [CachetaProto.MessageID.PREPARE_NT]: 0,\n                        [CachetaProto.MessageID.PREPARE_CANCEL_NT]: 0,\n                    },\n                }\n            );\n            this.replayCtrl.listenState((state) => {\n                Listener.emit(CachetaEventName.REPLAY_STATE_CHANGED, state);\n            }, this);\n\n            CachetaUIMgr.createReplayCtrl(this.replayCtrl);\n        }\n    }\n\n    private reset(): void {\n        this.gameStage = CachetaProto.STAGE.WAIT;\n        this.wildCard = [];\n        this.discardCards = [];\n        this.finishCard = 0;\n        this.closeNum = 0;\n        this.dropPool = 0;\n        this.lastSettleInfo = null;\n\n        CachetaUserMgr.reset();\n    }\n\n    public getWildCard(): number[] {\n        return this.wildCard;\n    }\n\n    public isWildCard(cardValue: number): boolean {\n        let find = false;\n\n        this.wildCard.forEach((value) => {\n            if (value == cardValue) {\n                find = true;\n            }\n        });\n        return find;\n    }\n\n    public getOpenCards(): number[] {\n        return this.discardCards;\n    }\n\n    public getOpenCardsFirst(): number {\n        return this.discardCards[0] || 0;\n    }\n\n    public getFinishCard(): number {\n        return this.finishCard;\n    }\n\n    public getCloseNum(): number {\n        return this.closeNum;\n    }\n\n    public getDropPool(): number {\n        return this.dropPool;\n    }\n\n    public getPubCard(): number {\n        return this.pubCard;\n    }\n\n    /**\n     * 获取牌的rank值\n     */\n    public getCardRank(cardValue: number): number {\n        let rank = cardValue % 100;\n        return rank;\n    }\n\n    /**\n     * 获取牌的follow值\n     */\n    public getfollow(cardValue: number): number {\n        let follow = Math.floor(cardValue / 100); // hei, hong, mei, fang\n        return follow;\n    }\n\n    /**\n     * 获取手牌的数量\n     */\n    public getHandCardsNum(hand: CachetaProto.Hand) {\n        let num = 0;\n        for (let key in hand.GroupS) {\n            num += hand.GroupS[key].CardS.length;\n        }\n        return num;\n    }\n\n    private setLastSettleInfo(msgData: CachetaProto.SettleNt | CachetaProto.RoomSt): void {\n        this.lastSettleInfo = {\n            TS: msgData.TS,\n            NextTS: msgData.NextTS,\n            SettleInfo: msgData.SettleInfo,\n        } as CachetaProto.SettleNt;\n\n        this.lastSettleInfo.NextTS =\n            new Date().getTime() + this.lastSettleInfo.NextTS - this.lastSettleInfo.TS;\n    }\n\n    public getLastSettleInfo(): CachetaProto.SettleNt {\n        return this.lastSettleInfo;\n    }\n\n    public exitGame(): void {\n        if (CachetaUserMgr.getLocalStatus() == CachetaProto.STATUS.U_PLAY) {\n            CachetaSocketMgr.userOutReq(CachetaUserMgr.getLocalChair());\n        }\n        cc.sys.localStorage.setItem(\"br-67\", \"0\");\n        BundleCenter.getInstance().launchScene(BundleNames.LOADING);\n    }\n\n    /**\n     * socket 消息\n     * @param message\n     */\n    private onMessage(message: ProtoObject<typeof CachetaProtoMap[CachetaProto.MessageID]>) {\n        let funcName = `on${lodash.upperFirst(\n            lodash.camelCase(CachetaProto.MessageID[message.msgId])\n        )}`;\n        this[funcName]?.(message.msgData);\n        CachetaUIMgr[funcName]?.(message.msgData);\n    }\n\n    /**\n     * 错误码\n     * @param error\n     */\n    private onErrorSt(error: CommonProto.ErrorST): void {\n        CachetaUIMgr.onErrorSt(error);\n    }\n\n    /**\n     * 用户状态\n     * @param msgData\n     */\n    protected onUserSt(msgData: CachetaProto.UserSt): void {\n        CachetaUserMgr.userIn(msgData);\n    }\n\n    /**\n     * 游戏状态\n     * @param msgData\n     */\n    protected onRoomSt(msgData: CachetaProto.RoomSt): void {\n        this.reset();\n\n        this.conf = msgData.Conf;\n        this.gameStage = msgData.Stage;\n        this.wildCard = msgData.WildCardS;\n        this.pubCard = msgData.PubCard;\n        this.discardCards = msgData.OpenCardS;\n        this.closeNum = msgData.CloseNum;\n\n        CachetaUserMgr.setUsers(<any>msgData.UserM);\n        CachetaUserMgr.setActiveChair(msgData.ActiveChair);\n\n        if (msgData.SettleInfo) {\n            this.setLastSettleInfo(msgData);\n            CachetaUserMgr.winChair = msgData.SettleInfo.WinChair;\n        }\n    }\n\n    /**\n     * 用户进入房间\n     * @param msgData\n     */\n    protected onUserInEv(msgData: CachetaProto.UserInEv): void {\n        CachetaUserMgr.userIn(msgData.User);\n    }\n\n    /**\n     * 用户退出房间(用户主动退出/被踢出房间)\n     * @param msgData\n     */\n    protected onUserOutEv(msgData: CachetaProto.UserOutEv): void {\n        CachetaUserMgr.userOut(msgData.Chair);\n    }\n\n    /**\n     * 游戏准备\n     * @param msgData\n     */\n    protected onPrepareNt(msgData: CachetaProto.PrepareNt): void {\n        this.gameStage = CachetaProto.STAGE.PREPARE;\n        CachetaUserMgr.setStatusAll(CachetaProto.STATUS.U_PREPARE);\n    }\n\n    /**\n     * 游戏准备取消\n     * @param msgData\n     */\n    protected onPrepareCancelNt(msgData: CachetaProto.PrepareCancelNt): void {\n        this.gameStage = CachetaProto.STAGE.WAIT;\n    }\n\n    /**\n     * play通知\n     * @param msgData\n     */\n    protected onPlayNt(msgData: CachetaProto.PlayNt): void {\n        CachetaUserMgr.setActiveChair(msgData.Chair);\n        if (this.gameStage != CachetaProto.STAGE.DISCARD) {\n            this.gameStage = CachetaProto.STAGE.TOUCH;\n        }\n        CC_DEBUG && cc.log(`CachetaLogicMgr onPlayNt: ${CachetaProto.STAGE[this.gameStage]}`);\n    }\n\n    /**\n     * close区摸完了的通知\n     * @param msgData\n     */\n    protected onCloseOverNt(msgData: CachetaProto.CloseOverNt): void {\n        this.closeNum = this.discardCards.length - 1;\n        this.discardCards = [this.getOpenCardsFirst()];\n    }\n\n    /**\n     * 摸牌反馈\n     * @param msgData\n     */\n    protected onTouchEv(msgData: CachetaProto.TouchEv): void {\n        this.gameStage = CachetaProto.STAGE.DISCARD;\n        if (msgData.Open) {\n            this.curDiscardCard = this.discardCards.shift();\n        } else {\n            this.closeNum--;\n        }\n\n        if (CachetaUserMgr.isLocalChair(msgData.Chair)) {\n            CachetaUserMgr.setLocalHandCard(msgData.Hand);\n        }\n    }\n\n    /**\n     * 出牌反馈\n     * @param msgData\n     */\n    protected onDiscardEv(msgData: CachetaProto.DiscardEv): void {\n        this.gameStage = CachetaProto.STAGE.TOUCH;\n        this.discardCards.unshift(msgData.Card);\n\n        if (CachetaUserMgr.isLocalChair(msgData.Chair)) {\n            CachetaUserMgr.setLocalHandCard(msgData.Hand);\n        }\n    }\n\n    /**\n     * 听牌/听牌出牌反馈\n     * @param msgData\n     */\n    protected onListenEv(msgData: CachetaProto.ListenEv): void {\n        msgData.Card && this.discardCards.unshift(msgData.Card);\n\n        CachetaUserMgr.getUserByChair(msgData.Chair).InListen = true;\n        if (CachetaUserMgr.isLocalChair(msgData.Chair)) {\n            CachetaUserMgr.setLocalHandCard(msgData.Hand);\n        }\n    }\n\n    /**\n     * 胡牌/胡牌出牌反馈\n     */\n    protected onDeclareEv(msgData: CachetaProto.DeclareEv): void {\n        msgData.Card && this.discardCards.unshift(msgData.Card);\n\n        if (CachetaUserMgr.isLocalChair(msgData.Chair)) {\n            CachetaUserMgr.setLocalHandCard(msgData.Hand);\n        }\n    }\n\n    /**\n     * 检查手牌反馈\n     * @param msgData\n     */\n    protected onCheckHandEv(msgData: CachetaProto.CheckHandEv): void {\n        if (CachetaUserMgr.isLocalChair(msgData.Chair)) {\n            CachetaUserMgr.setLocalHandCard(msgData.Hand);\n        }\n    }\n\n    /**\n     * 结算结果通知\n     * @param msgData\n     */\n    protected onSettleNt(msgData: CachetaProto.SettleNt): void {\n        this.gameStage = CachetaProto.STAGE.SETTLE;\n        CachetaUserMgr.setStatusAll(CachetaProto.STATUS.U_PREPARE);\n        CachetaUserMgr.winChair = msgData.SettleInfo.WinChair;\n\n        for (let i = 0; i < msgData.SettleInfo.SettleS.length; i++) {\n            let settle = msgData.SettleInfo.SettleS[i];\n            CachetaUserMgr.setCredit(settle.Chair, settle.Credit);\n        }\n\n        this.setLastSettleInfo(msgData);\n    }\n\n    /**\n     * 广播玩家托管\n     * @param msgData\n     */\n    protected onTrustNt(msgData: CachetaProto.TrustNt): void {\n        CachetaUserMgr.getUserByChair(msgData.Chair).Trust = true;\n    }\n\n    /**\n     * 广播取消托管\n     * @param msgData\n     */\n    protected onCancelTrustEv(msgData: CachetaProto.CancelTrustEv): void {\n        CachetaUserMgr.getUserByChair(msgData.Chair).Trust = false;\n    }\n\n    /**\n     * 排序反馈\n     * @param msgData\n     */\n    protected onGroupEv(msgData: CachetaProto.GroupEv): void {\n        CachetaUserMgr.setLocalHandCard(msgData.Hand);\n    }\n}\n\nexport default new CachetaLogicMgr();\n","import { Tools } from \"../../../../../main/core/utils/Tools\";\nimport CommonLanguage from \"../../../../plaza/common/Script/conf/lang/CommonLanguage\";\n// import WalletUtil from \"../../../../plaza/wallet/Script/view/utils/WalletUtil\";\nimport CachetaAudioMgr from \"../manager/CachetaAudioMgr\";\nimport CachetaLogicMgr from \"../manager/CachetaLogicMgr\";\nimport CachetaUIMgr from \"../manager/CachetaUIMgr\";\nimport CachetaUserMgr from \"../manager/CachetaUserMgr\";\nimport { CachetaProto } from \"../service/ws/proto/CachetaProto\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class CachetaMenu extends cc.Component {\n    private btnExit: cc.Node = null;\n    private btnMore: cc.Node = null;\n    private btnMoreSp: cc.Sprite = null;\n    private morePanel: cc.Node = null;\n    private moreBg: cc.Node = null;\n    private btnRule: cc.Node = null;\n    private btnSetting: cc.Node = null;\n    // private btnStore: cc.Node = null;\n\n    private moreFold: boolean = true;\n\n    protected onLoad(): void {\n        let leftTop = cc.find(\"leftTop\", this.node);\n        let rightTop = cc.find(\"rightTop\", this.node);\n\n        this.btnExit = cc.find(\"btnExit\", leftTop);\n        this.btnExit.on(\"click\", this.onClickExit, this);\n\n        this.morePanel = cc.find(\"more/panel\", rightTop);\n        this.morePanel.active = !this.moreFold;\n        this.morePanel.on(cc.Node.EventType.TOUCH_END, this.onTouchMorePanel, this);\n\n        this.moreBg = cc.find(\"more/mask/bg\", rightTop);\n        this.moreBg.y = 275;\n\n        this.btnMore = cc.find(\"more/btnMore\", rightTop);\n        this.btnMoreSp = this.btnMore.getComponent(cc.Sprite);\n        this.btnMore.on(\"click\", this.onClickMore, this);\n\n        this.btnRule = cc.find(\"btnRule\", this.moreBg);\n        this.btnRule.on(\"click\", this.onClickRule, this);\n\n        this.btnSetting = cc.find(\"btnSetting\", this.moreBg);\n        this.btnSetting.on(\"click\", this.onClickSetting, this);\n\n        // this.btnStore = cc.find(\"btnStore\", rightTop);\n        // this.btnStore.on(\"click\", this.onClickStore, this);\n    }\n\n    private onClickExit(event: cc.Event): void {\n        Tools.clickManager(event.target);\n        CachetaAudioMgr.playClickBtn();\n\n        if (CachetaUserMgr.getLocalStatus() == CachetaProto.STATUS.U_PLAY) {\n            CachetaUIMgr.createDialog({\n                // titleText: CommonLanguage.noticeTitle,\n                contentText: CommonLanguage.gaming,\n                positiveBtnText: CommonLanguage.continueExit,\n                negativeBtnText: CommonLanguage.cancel,\n                positiveCallFunc: () => {\n                    CachetaLogicMgr.exitGame();\n                },\n            });\n        } else {\n            CachetaLogicMgr.exitGame();\n        }\n    }\n\n    private onTouchMorePanel(event: cc.Event): void {\n        if (this.moreFold) {\n            return;\n        }\n\n        this.setMoreState();\n    }\n\n    private onClickMore(event: cc.Event): void {\n        Tools.clickManager(event.target);\n\n        this.setMoreState();\n    }\n\n    private setMoreState(): void {\n        CachetaAudioMgr.playClickBtn();\n\n        this.moreFold = !this.moreFold;\n        this.morePanel.active = !this.moreFold;\n        this.btnMoreSp.enabled = this.moreFold;\n        this.btnMore.getChildByName(\"fold\").active = !this.moreFold;\n\n        this.moreBg.stopAllActions();\n        cc.tween(this.moreBg)\n            .to(0.2 / CachetaLogicMgr.timeScale, { y: this.moreFold ? 275 : 36 })\n            .start();\n    }\n\n    private onClickRule(event: cc.Event): void {\n        Tools.clickManager(event.target);\n        CachetaAudioMgr.playClickBtn();\n\n        CachetaUIMgr.createRule();\n    }\n\n    private onClickSetting(event: cc.Event): void {\n        Tools.clickManager(event.target);\n        CachetaAudioMgr.playClickBtn();\n\n        CachetaUIMgr.createSetting();\n    }\n\n    private onClickStore(event: cc.Event): void {\n        Tools.clickManager(event.target);\n        CachetaAudioMgr.playClickBtn();\n        // WalletUtil.toTopup();\n    }\n}\n","import CachetaLanguage from \"../conf/lang/CachetaLanguage\";\r\nimport CachetaAudioMgr from \"../manager/CachetaAudioMgr\";\r\nimport CachetaSocketMgr from \"../service/ws/CachetaSocketMgr\";\r\nimport CachetaUIMgr from \"../manager/CachetaUIMgr\";\r\nimport { CachetaEventName } from \"../define/CachetaEventName\";\r\nimport { CachetaProto } from \"../service/ws/proto/CachetaProto\";\r\nimport Listener from \"../../../../../main/core/utils/Listener\";\r\nimport CachetaLogicMgr from \"../manager/CachetaLogicMgr\";\r\nimport CachetaUserMgr from \"../manager/CachetaUserMgr\";\r\nimport { Tools } from \"../../../../../main/core/utils/Tools\";\r\nimport CachetaSkin from \"../conf/skin/CachetaSkin\";\r\nimport UIMgr from \"../../../../plaza/common/Script/Component/base/UIMgr\";\r\nimport CommonVersusLanguage from \"../../../../plaza/common_versus/Script/conf/lang/CommonVersusLanguage\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class CachetaOperation extends cc.Component {\r\n    private trust: cc.Node = null;\r\n    private watching: cc.Node = null;\r\n    private btnChangeTable: cc.Node = null;\r\n    private btnDisCard: cc.Node = null;\r\n    private btnTouchCard: cc.Node = null;\r\n    private btnGetCard: cc.Node = null;\r\n    private btnSort: cc.Node = null;\r\n    private togAutoSort: cc.Node = null;\r\n    private btnDraw: cc.Node = null;\r\n    private btnDrawSp: cc.Sprite = null;\r\n    private btnDrawB: cc.Button = null;\r\n    private btnDeclare: cc.Node = null;\r\n    private btnDeclareSp: cc.Sprite = null;\r\n    private btnDeclareB: cc.Button = null;\r\n    private drawLightSke: sp.Skeleton = null;\r\n    private decLightSke: sp.Skeleton = null;\r\n\r\n    protected onLoad(): void {\r\n        this.trust = cc.find(\"trust\", this.node);\r\n        this.watching = cc.find(\"watching\", this.node);\r\n        cc.find(\"tip2\", this.watching).getComponent(cc.Label).string =\r\n            CommonVersusLanguage.waitingGameStart;\r\n        cc.find(\"btnChangeTable\", this.watching).on(\"click\", this.onClickChangeTable, this);\r\n\r\n        this.btnChangeTable = cc.find(\"btnChangeTable\", this.node);\r\n        this.btnChangeTable.on(\"click\", this.onClickChangeTable, this);\r\n\r\n        this.btnDisCard = cc.find(\"btnDisCard\", this.node);\r\n        this.btnDisCard.on(\"click\", this.onClickDisCard, this);\r\n\r\n        this.btnTouchCard = cc.find(\"btnTouchCard\", this.node);\r\n        this.btnTouchCard.on(\"click\", this.onClickTouchCard, this);\r\n\r\n        this.btnGetCard = cc.find(\"btnGetCard\", this.node);\r\n        this.btnGetCard.on(\"click\", this.onClickGetOpenCard, this);\r\n\r\n        this.btnSort = cc.find(\"btnSort\", this.node);\r\n        this.btnSort.on(\"click\", this.onClickSort, this);\r\n\r\n        this.togAutoSort = cc.find(\"togAutoSort\", this.btnSort);\r\n        this.togAutoSort.on(\"toggle\", this.onClickAutoSort, this);\r\n\r\n        this.btnDraw = cc.find(\"btnDraw\", this.node);\r\n        this.btnDraw.on(\"click\", this.onClickDraw, this);\r\n        this.btnDrawSp = this.btnDraw.getComponent(cc.Sprite);\r\n        this.btnDrawB = this.btnDraw.getComponent(cc.Button);\r\n        this.drawLightSke = cc.find(\"lightSke\", this.btnDraw).getComponent(sp.Skeleton);\r\n\r\n        this.btnDeclare = cc.find(\"btnDeclare\", this.node);\r\n        this.btnDeclare.on(\"click\", this.onClickHu, this);\r\n        this.btnDeclareSp = this.btnDeclare.getComponent(cc.Sprite);\r\n        this.btnDeclareB = this.btnDeclare.getComponent(cc.Button);\r\n        this.decLightSke = cc.find(\"lightSke\", this.btnDeclare).getComponent(sp.Skeleton);\r\n\r\n        this.setAutoSortState();\r\n        this.reset();\r\n\r\n        Listener.on(CachetaEventName.POKER_STATE_CHANGED, this.onPokerStateChanged, this);\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        Listener.off(CachetaEventName.POKER_STATE_CHANGED, this.onPokerStateChanged, this);\r\n    }\r\n\r\n    public reset(): void {\r\n        this.setTrustActive(false);\r\n        this.setWatchingActive(false);\r\n        this.setChangeTableActive(false);\r\n        this.setDisCardActive(false);\r\n        this.setTouchCardActive(false);\r\n        this.setGetCardActive(false);\r\n        this.setSortActive(false);\r\n        this.setDrawActive(false);\r\n        this.setDrawNoraml(false);\r\n        this.setDeclareActive(false);\r\n        this.setDeclareNoraml(false);\r\n    }\r\n\r\n    public setTrustActive(active: boolean): void {\r\n        this.trust.active = active;\r\n    }\r\n\r\n    public setWatchingActive(active: boolean): void {\r\n        this.watching.active = active;\r\n    }\r\n\r\n    public setChangeTableActive(active: boolean): void {\r\n        this.btnChangeTable.active = active;\r\n        this.btnChangeTable.x = 0;\r\n    }\r\n\r\n    public setDisCardActive(active: boolean): void {\r\n        this.btnDisCard.active = active;\r\n    }\r\n\r\n    public setTouchCardActive(active: boolean): void {\r\n        this.btnTouchCard.active = active;\r\n    }\r\n\r\n    public setGetCardActive(active: boolean): void {\r\n        this.btnGetCard.active = active;\r\n    }\r\n\r\n    public setSortActive(active: boolean): void {\r\n        this.btnSort.active = active;\r\n    }\r\n\r\n    public setDrawActive(active: boolean): void {\r\n        this.btnDraw.active = active;\r\n    }\r\n\r\n    public setDrawNoraml(isNormal: boolean): void {\r\n        this.btnDrawSp.spriteFrame = isNormal\r\n            ? UIDepend.SpriteManager.getSpriteBundle(CachetaSkin.Priority.btnListenNormal)\r\n            : UIDepend.SpriteManager.getSpriteBundle(CachetaSkin.Priority.btnListenGray);\r\n        this.btnDrawB.interactable = isNormal;\r\n        this.drawLightSke.node.active = isNormal;\r\n    }\r\n\r\n    public getDrawInteractable() {\r\n        return this.btnDrawB.interactable;\r\n    }\r\n\r\n    public setDeclareActive(active: boolean): void {\r\n        this.btnDeclare.active = active;\r\n    }\r\n\r\n    public setDeclareNoraml(isNormal: boolean): void {\r\n        this.btnDeclareSp.spriteFrame = isNormal\r\n            ? UIDepend.SpriteManager.getSpriteBundle(CachetaSkin.Priority.btnDeclareNormal)\r\n            : UIDepend.SpriteManager.getSpriteBundle(CachetaSkin.Priority.btnDeclareGray);\r\n        this.btnDeclareB.interactable = isNormal;\r\n        this.decLightSke.node.active = isNormal;\r\n    }\r\n\r\n    public getDeclareInteractable() {\r\n        return this.btnDeclareB.interactable;\r\n    }\r\n\r\n    private setAutoSortState(): void {\r\n        this.togAutoSort.getComponent(cc.Toggle).isChecked = CachetaLogicMgr.autoSort;\r\n    }\r\n\r\n    private onClickChangeTable(event: cc.Event): void {\r\n        Tools.clickManager(event.target);\r\n        CachetaAudioMgr.playClickBtn();\r\n\r\n        CachetaSocketMgr.changeTableReq();\r\n    }\r\n\r\n    /**\r\n     * 出牌\r\n     */\r\n    private onClickDisCard(event: cc.Event): void {\r\n        Tools.clickManager(event.target);\r\n        CachetaAudioMgr.playClickBtn();\r\n\r\n        let pokers = CachetaUIMgr.handPoker.getSelectedPokers();\r\n        if (pokers.length == 1) {\r\n            let poker = pokers[0];\r\n            CachetaUIMgr.handPoker.setDiscardPoker(poker);\r\n            if (\r\n                CachetaUserMgr.getLocalHandCard().Status == CachetaProto.HAND_STATUS.DECLARE &&\r\n                pokers[0].getCardValue() == CachetaUIMgr.canDecCardV\r\n            ) {\r\n                CachetaSocketMgr.declareReq(poker.getCardValue(), poker.getCardIndex());\r\n            } else {\r\n                CachetaSocketMgr.discardReq(poker.getCardValue(), poker.getCardIndex());\r\n            }\r\n        } else {\r\n            UIMgr.showToast(CachetaLanguage.DISCARD_TIP);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 从暗牌区摸牌\r\n     */\r\n    private onClickTouchCard(event: cc.Event): void {\r\n        Tools.clickManager(event.target);\r\n        CachetaAudioMgr.playClickBtn();\r\n\r\n        CachetaSocketMgr.touchReq(false);\r\n    }\r\n\r\n    /**\r\n     * 从弃牌区拿牌\r\n     */\r\n    private onClickGetOpenCard(event: cc.Event): void {\r\n        Tools.clickManager(event.target);\r\n        CachetaAudioMgr.playClickBtn();\r\n\r\n        CachetaSocketMgr.touchReq(true);\r\n    }\r\n\r\n    private onClickSort(event: cc.Event): void {\r\n        Tools.clickManager(event.target);\r\n        CachetaAudioMgr.playClickBtn();\r\n\r\n        Listener.emit(CachetaEventName.MANUAL_SORT);\r\n    }\r\n\r\n    private onClickAutoSort(event: cc.Event): void {\r\n        Tools.clickManager(event.target);\r\n        CachetaAudioMgr.playClickBtn();\r\n\r\n        CachetaLogicMgr.autoSort = this.togAutoSort.getComponent(cc.Toggle).isChecked;\r\n        if (CachetaLogicMgr.autoSort) {\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 听牌\r\n     */\r\n    private onClickDraw(event: cc.Event): void {\r\n        Tools.clickManager(event.target);\r\n        CachetaAudioMgr.playClickBtn();\r\n\r\n        if (CachetaUserMgr.isLocalActive()) {\r\n            let pokers = CachetaUIMgr.handPoker.getSelectedPokers();\r\n            if (pokers.length == 1) {\r\n                let poker = pokers[0];\r\n                CachetaUIMgr.handPoker.setDiscardPoker(poker);\r\n                CachetaSocketMgr.listenReq(poker.getCardValue(), poker.getCardIndex());\r\n            } else {\r\n                CachetaSocketMgr.listenReq();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 胡牌\r\n     */\r\n    private onClickHu(event: cc.Event): void {\r\n        Tools.clickManager(event.target);\r\n        CachetaAudioMgr.playClickBtn();\r\n\r\n        if (CachetaUserMgr.isLocalActive()) {\r\n            let pokers = CachetaUIMgr.handPoker.getSelectedPokers();\r\n            if (pokers.length == 1) {\r\n                let poker = pokers[0];\r\n                CachetaUIMgr.handPoker.setDiscardPoker(poker);\r\n                CachetaSocketMgr.declareReq(poker.getCardValue(), poker.getCardIndex());\r\n            } else {\r\n                CachetaSocketMgr.declareReq();\r\n            }\r\n        }\r\n    }\r\n\r\n    private onPokerStateChanged(): void {\r\n        if (\r\n            CachetaUserMgr.isLocalActive() &&\r\n            CachetaLogicMgr.gameStage == CachetaProto.STAGE.DISCARD\r\n        ) {\r\n            let pokers = CachetaUIMgr.handPoker.getSelectedPokers();\r\n            if (pokers.length == 1) {\r\n                CachetaSocketMgr.checkHandReq(pokers[0].getCardValue(), pokers[0].getCardIndex());\r\n            }\r\n        }\r\n    }\r\n\r\n    private onCheckHand(): void {\r\n        // 自己回合 出牌阶段 检查手牌\r\n        if (\r\n            CachetaUserMgr.isLocalActive() &&\r\n            CachetaLogicMgr.gameStage == CachetaProto.STAGE.DISCARD\r\n        ) {\r\n            let pokers = CachetaUIMgr.handPoker.getSelectedPokers();\r\n            if (pokers.length == 1) {\r\n                CachetaSocketMgr.checkHandReq(pokers[0].getCardValue(), pokers[0].getCardIndex());\r\n            }\r\n        }\r\n    }\r\n}\r\n","import CachetaSkin from \"../conf/skin/CachetaSkin\";\r\nimport CachetaPlayer from \"../ui/CachetaPlayer\";\r\nimport CachetaUserMgr from \"../manager/CachetaUserMgr\";\r\nimport { CachetaConst } from \"../define/CachetaConst\";\r\nimport { CachetaProto } from \"../service/ws/proto/CachetaProto\";\r\nimport CachetaLogicMgr from \"../manager/CachetaLogicMgr\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class CachetaPlayerSeat extends cc.Component {\r\n    private players: CachetaPlayer[] = null;\r\n\r\n    protected onLoad(): void {\r\n        this.players = new Array(CachetaConst.PlayerNumMax);\r\n        let prefab: cc.Prefab = UIDepend.PrefabManager.getPrefabBundle(\r\n            CachetaSkin.Priority.CachetaPlayer\r\n        );\r\n        for (let i = 0; i < this.players.length; i++) {\r\n            let node = cc.instantiate(prefab);\r\n            node.parent = this.node.getChildByName(\"player_\" + i);\r\n\r\n            this.players[i] = node.getComponent(CachetaPlayer);\r\n            this.players[i].init(i);\r\n        }\r\n    }\r\n\r\n    public clear(): void {\r\n        for (let i = 0; i < this.players.length; i++) {\r\n            let player: CachetaPlayer = this.players[i];\r\n            player.clear();\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        for (let i = 0; i < this.players.length; i++) {\r\n            let player: CachetaPlayer = this.players[i];\r\n            player.reset();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取玩家\r\n     * @param chair\r\n     */\r\n    public getPlayer(chair: number): CachetaPlayer {\r\n        let seatId = CachetaUserMgr.getSeat(chair);\r\n        if (this.players[seatId]) {\r\n            return this.players[seatId];\r\n        }\r\n        return this.players[0];\r\n    }\r\n\r\n    public stopTimerAll(): void {\r\n        for (let i = 0; i < this.players.length; i++) {\r\n            this.players[i].stopTimer();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取其他玩家的位置\r\n     */\r\n    public getOtherPlayerPosList(): cc.Vec3[] {\r\n        let posList: cc.Vec3[] = [];\r\n        for (let i = 1; i < this.players.length; i++) {\r\n            if (\r\n                CachetaUserMgr.getStatus(CachetaUserMgr.getChair(i)) == CachetaProto.STATUS.U_PLAY\r\n            ) {\r\n                let pos = this.players[i].node.parent.position;\r\n                posList.push(this.node.convertToWorldSpaceAR(pos));\r\n            }\r\n        }\r\n        return posList;\r\n    }\r\n\r\n    /**\r\n     * 获取其他玩家手牌的位置\r\n     */\r\n    public getOtherPlayerHandPosList(): cc.Vec3[] {\r\n        let posList: cc.Vec3[] = [];\r\n        for (let i = 1; i < this.players.length; i++) {\r\n            if (\r\n                CachetaUserMgr.getStatus(CachetaUserMgr.getChair(i)) == CachetaProto.STATUS.U_PLAY\r\n            ) {\r\n                posList.push(this.players[i].getHandWorldPos());\r\n            }\r\n        }\r\n        return posList;\r\n    }\r\n\r\n    /**\r\n     * 其他玩家展示一张手牌\r\n     */\r\n    public showOtherPlayerHand(): void {\r\n        for (let i = 1; i < this.players.length; i++) {\r\n            let user = CachetaUserMgr.getUserByChair(CachetaUserMgr.getChair(i));\r\n            if (user && user.Status == CachetaProto.STATUS.U_PLAY) {\r\n                this.players[i].showHand();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 抢胡表现\r\n     * @param chair\r\n     * @param robChair\r\n     * @param callback\r\n     */\r\n    public playRobAction(chair: number, robChair: number, callback): void {\r\n        this.scheduleOnce(() => {\r\n            this.getPlayer(chair).playRobAction(this.getPlayer(robChair), () => {\r\n                this.getPlayer(robChair).playRobedAction(callback);\r\n            });\r\n        }, 0.5 / CachetaLogicMgr.timeScale);\r\n    }\r\n}\r\n","import CachetaAudioMgr from \"../manager/CachetaAudioMgr\";\r\nimport { CachetaConst } from \"../define/CachetaConst\";\r\nimport CachetaSkin from \"../conf/skin/CachetaSkin\";\r\nimport { CachetaProto } from \"../service/ws/proto/CachetaProto\";\r\nimport UserAvatarMgr from \"../../../../plaza/common/Script/Component/UserAvatar/UserAvatarMgr\";\r\nimport CachetaPoker from \"./CachetaPoker\";\r\nimport { CurrencyUtil } from \"../../../../plaza/common/Script/utils/CurrencyUtil\";\r\nimport UserAvatarModel from \"../../../../plaza/common/Script/Component/UserAvatar/UserAvatarModel\";\r\nimport UserAvatar from \"../../../../plaza/common/Script/Component/UserAvatar/UserAvatar\";\r\nimport CachetaUserMgr from \"../manager/CachetaUserMgr\";\r\nimport CachetaUserCounddownProgress from \"./CachetaUserCounddownProgress\";\r\nimport Listener from \"../../../../../main/core/utils/Listener\";\r\nimport { CachetaEventName } from \"../define/CachetaEventName\";\r\nimport CachetaLogicMgr from \"../manager/CachetaLogicMgr\";\r\nimport { ReplayState } from \"../../../../plaza/common/Script/game/replay/GameReplayControl\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class CachetaPlayer extends cc.Component {\r\n    private avatar: cc.Node;\r\n    private coin: cc.Node;\r\n    private coinValue: cc.Label;\r\n    private nickname: cc.Node;\r\n    private turnStartSke: sp.Skeleton;\r\n    private listenSke: sp.Skeleton;\r\n    private robSke: sp.Skeleton;\r\n    private winSke: sp.Skeleton;\r\n    private cannonball: cc.Node;\r\n    private handN: cc.Node;\r\n    private timer: cc.Node;\r\n    private timerCountdown: CachetaUserCounddownProgress;\r\n    private countcownSke: sp.Skeleton;\r\n    private timerClock: cc.Label;\r\n    private tagNode: cc.Node;\r\n    private coinChange: cc.Node;\r\n    private state: cc.Node;\r\n    private trust: cc.Node;\r\n\r\n    /** 视图椅子号 */\r\n    private seatId: number = 0;\r\n    /** 总时间 */\r\n    private allTime: number = 0;\r\n    /** 剩余时间 */\r\n    private leftTime: number = 0;\r\n    /** 进度标记 */\r\n    private progressFlag: number = 0;\r\n    /** 响铃标记 */\r\n    private clockFlag: number = 0;\r\n\r\n    protected onLoad(): void {\r\n        this.avatar = cc.find(\"head/mask/avatar\", this.node);\r\n        this.coin = cc.find(\"coin\", this.node);\r\n        this.coinValue = cc.find(\"value\", this.coin).getComponent(cc.Label);\r\n        this.nickname = cc.find(\"nickname\", this.node);\r\n        this.turnStartSke = cc.find(\"anim/turnStartSke\", this.node).getComponent(sp.Skeleton);\r\n        this.listenSke = cc.find(\"anim/listenSke\", this.node).getComponent(sp.Skeleton);\r\n        this.robSke = cc.find(\"anim/robSke\", this.node).getComponent(sp.Skeleton);\r\n        this.cannonball = cc.find(\"cannonball\", this.robSke.node);\r\n        this.handN = cc.find(\"handN\", this.node);\r\n        this.timer = cc.find(\"timer\", this.node);\r\n        this.timerCountdown = cc\r\n            .find(\"countdown\", this.timer)\r\n            .getComponent(CachetaUserCounddownProgress);\r\n        this.countcownSke = cc.find(\"countdown/countcownSke\", this.timer).getComponent(sp.Skeleton);\r\n        this.timerClock = cc.find(\"clock/value\", this.timer).getComponent(cc.Label);\r\n        this.tagNode = cc.find(\"tag\", this.node);\r\n        this.coinChange = cc.find(\"coinChange\", this.node);\r\n        this.state = cc.find(\"state\", this.node);\r\n        this.trust = cc.find(\"trust\", this.state);\r\n        this.winSke = cc.find(\"winSke\", this.node).getComponent(sp.Skeleton);\r\n\r\n        this.countcownSke.timeScale = CachetaLogicMgr.timeScale;\r\n\r\n        Listener.on(CachetaEventName.REPLAY_STATE_CHANGED, this.onReplayStateChanged, this);\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        Listener.off(CachetaEventName.REPLAY_STATE_CHANGED, this.onReplayStateChanged, this);\r\n    }\r\n\r\n    public init(seatId: number): void {\r\n        this.seatId = seatId;\r\n\r\n        // 根据椅子号修改差异点\r\n        if (this.seatId == 2) {\r\n            this.coin.setPosition(cc.v3(127, -24, 0));\r\n            this.nickname.setPosition(cc.v3(127, 9, 0));\r\n            // this.coinValue.node.color = cc.color().fromHEX(\"#a8450a\");\r\n        }\r\n\r\n        if (this.seatId == 3 || this.seatId == 2) {\r\n            this.handN.setPosition(cc.v3(-88, -5, 0)); // cc.v3(97, -5, 0)\r\n            this.listenSke.node.x = -38;\r\n        }\r\n        this.tagNode.position = this.seatId == 0 ? cc.v3(32, 60) : cc.v3(38, 50);\r\n\r\n        if (this.seatId == 0) {\r\n            this.setAvatar(CommonDepend.UserManager.avatar, CommonDepend.UserManager.gender);\r\n            this.setCoin(CommonDepend.UserManager.coin);\r\n            this.setNickname(CommonDepend.UserManager.nick);\r\n            this.playIn();\r\n        } else {\r\n            let pokerPrefab: cc.Prefab = UIDepend.PrefabManager.getPrefabBundle(\r\n                CachetaSkin.Priority.CachetaPoker\r\n            );\r\n\r\n            let poker = cc.instantiate(pokerPrefab);\r\n            poker.parent = this.handN;\r\n            poker.setPosition(cc.v3(0, 0, 0));\r\n            let pokerJS = poker.getComponent(CachetaPoker);\r\n            pokerJS.showBack();\r\n            pokerJS.setTouchEnabled(false);\r\n        }\r\n\r\n        this.clear();\r\n        this.reset();\r\n    }\r\n\r\n    public clear(): void {\r\n        if (this.seatId == 0) {\r\n            return;\r\n        }\r\n\r\n        this.node.active = false;\r\n    }\r\n\r\n    public reset(): void {\r\n        this.node.stopAllActions();\r\n        let children = this.node.children;\r\n        for (let i = 0; i < children.length; i++) {\r\n            children[i].stopAllActions();\r\n        }\r\n\r\n        this.node.position = cc.v3(0, 0);\r\n        this.node.opacity = 255;\r\n        this.coinChange.active = false;\r\n        this.turnStartSke.node.active = false;\r\n        this.winSke.node.active = false;\r\n        this.listenSke.node.active = false;\r\n        this.robSke.node.active = false;\r\n        this.robSke.node.scaleX = 1;\r\n        this.cannonball.active = false;\r\n        this.handN.active = false;\r\n        this.showTrustActive(false);\r\n\r\n        this.stopTimer();\r\n        this.setTag(CachetaConst.PLAYER_TAG.Null);\r\n    }\r\n\r\n    /**\r\n     * 玩家进入\r\n     * @param user\r\n     */\r\n    public userIn(user: CachetaProto.UserSt, ani: boolean = false): void {\r\n        this.reset();\r\n        this.node.active = true;\r\n\r\n        this.setAvatar(user.Avatar, user.Gender);\r\n        this.setCoin(user.Credit);\r\n        this.setNickname(user.UserName);\r\n        this.setTag(CachetaConst.PLAYER_TAG.Null);\r\n\r\n        if (this.seatId == 0) {\r\n            // 如果自己在对局中退出到大厅修改了头像，那么重回后子游戏服务器还没同步，客户端自己处理\r\n            this.setAvatar(CommonDepend.UserManager.avatar, CommonDepend.UserManager.gender);\r\n        }\r\n\r\n        if (ani) {\r\n            this.playIn(user.Status == CachetaProto.STATUS.U_WATCH);\r\n        } else {\r\n            if (user.Status == CachetaProto.STATUS.U_WATCH) {\r\n                this.node.opacity = 255 / 2;\r\n            }\r\n        }\r\n\r\n        if (CachetaLogicMgr.gameStage >= CachetaProto.STAGE.SHUFFLE && user.InListen) {\r\n            this.showListen();\r\n        }\r\n        this.showTrustActive(user.Trust);\r\n    }\r\n\r\n    /**\r\n     * 玩家退出\r\n     */\r\n    public userOut(): void {\r\n        this.playOut();\r\n    }\r\n\r\n    /**\r\n     * 设置头像\r\n     * @param avatar\r\n     * @param gender\r\n     */\r\n    public setAvatar(avatar: number, gender: UserAvatarModel.GENDER): void {\r\n        UserAvatarMgr.loadUserAvatarPrefab(this.avatar, avatar, gender).then((avatar: cc.Node) => {\r\n            if (cc.isValid(avatar)) {\r\n                avatar.position = cc.v3(0, 0);\r\n                avatar.scaleX = (this.avatar.width + 15) / avatar.width;\r\n                avatar.scaleY = (this.avatar.height + 15) / avatar.height;\r\n            }\r\n        });\r\n    }\r\n\r\n    private addition = 0;\r\n\r\n    /**\r\n     * 设置金币\r\n     * @param amount\r\n     * @param change\r\n     * @param ani\r\n     */\r\n    public setCoin(amount: number, change: number = 0, ani: boolean = false): void {\r\n        let base = cc.sys.localStorage.getItem(\"Base\");\r\n        if (change < 0) {\r\n            if (base == 10) {\r\n                change = -500 * 10;\r\n            } else if (base == 50) {\r\n                change = -500 * 50;\r\n            }\r\n        } else {\r\n            if (base == 10) {\r\n                change = 1500 * 10;\r\n            } else if (base == 50) {\r\n                change = 1500 * 50;\r\n            }\r\n        }\r\n        this.coinValue.string = amount + \"\";\r\n\r\n        if (change > 0) {\r\n            let vip = cc.sys.localStorage.getItem(\"vip\");\r\n            if (vip != null) {\r\n                if (vip == \"1\") {\r\n                    this.addition = 0.01;\r\n                } else if (vip == \"2\") {\r\n                    this.addition = 0.03;\r\n                } else if (vip == \"3\") {\r\n                    this.addition = 0.05;\r\n                } else if (vip == \"4\") {\r\n                    this.addition = 0.08;\r\n                } else if (vip == \"5\") {\r\n                    this.addition = 0.1;\r\n                }\r\n            } else {\r\n                this.addition = 0;\r\n            }\r\n        }\r\n        let sum = this.addition * change + change;\r\n\r\n        if (ani) {\r\n            this.coinChange.active = true;\r\n            let labAdd = cc.find(\"add\", this.coinChange);\r\n            labAdd.active = change >= 0;\r\n            let labSub = cc.find(\"sub\", this.coinChange);\r\n            labSub.active = change < 0;\r\n\r\n            let label: cc.Node = null;\r\n            let strValue = Math.abs(sum) + \"\";\r\n            if (change >= 0) {\r\n                label = labAdd;\r\n                strValue = \"+\" + strValue;\r\n            } else {\r\n                label = labSub;\r\n                strValue = \"-\" + strValue;\r\n            }\r\n\r\n            label.active = true;\r\n            label.opacity = 255;\r\n            label.position = cc.v3(0, 0);\r\n            label.getComponent(cc.Label).string = strValue;\r\n            label.stopAllActions();\r\n\r\n            cc.tween(label)\r\n                .to(\r\n                    0.5 / CachetaLogicMgr.timeScale,\r\n                    { position: cc.v3(0, 100) },\r\n                    { easing: cc.easing.quadIn.name }\r\n                )\r\n                .to(\r\n                    0.5 / CachetaLogicMgr.timeScale,\r\n                    { position: cc.v3(0, 60) },\r\n                    { easing: cc.easing.quadOut.name }\r\n                )\r\n                .delay(1 / CachetaLogicMgr.timeScale)\r\n                .to(1 / CachetaLogicMgr.timeScale, { opacity: 0 })\r\n                .call(() => {\r\n                    this.coinChange.active = false;\r\n                    label.active = false;\r\n                })\r\n                .start();\r\n\r\n            if (change >= 0) {\r\n                this.playWin();\r\n            } else {\r\n                this.playLose();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置昵称\r\n     */\r\n    public setNickname(nickname: string): void {\r\n        this.nickname.getChildByName(\"value\").getComponent(cc.Label).string =\r\n            nickname.limtLength(10);\r\n    }\r\n\r\n    /**\r\n     * 启动倒计时\r\n     * @param leftTime ms\r\n     * @param allTime ms\r\n     */\r\n    public startTimer(leftTime: number, allTime: number): void {\r\n        if (\r\n            CachetaUserMgr.getStatus(CachetaUserMgr.getChair(this.seatId)) !=\r\n            CachetaProto.STATUS.U_PLAY\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        this.timerCountdown.play(allTime / 1000);\r\n\r\n        leftTime /= 1000;\r\n        allTime /= 1000;\r\n\r\n        this.timer.active = true;\r\n        // this.timerProgressBox.fillRange = 1;\r\n        // this.timerProgressBg.fillRange = 1;\r\n        // this.timerLight.angle = -360;\r\n        this.timerClock.string = (Math.floor(leftTime) + 1).toString();\r\n        this.allTime = allTime;\r\n        this.leftTime = leftTime;\r\n        this.progressFlag = 0;\r\n        this.clockFlag = 0;\r\n        // this.schedule(this.updateTimer, 0, cc.macro.REPEAT_FOREVER);\r\n    }\r\n\r\n    /**\r\n     * 停止倒计时\r\n     */\r\n    public stopTimer(): void {\r\n        this.timer.active = false;\r\n        this.timerCountdown.stop();\r\n        // this.unschedule(this.updateTimer);\r\n    }\r\n\r\n    /**\r\n     * 更新倒计时\r\n     * @param dt\r\n     */\r\n    private updateTimer(dt: number): void {\r\n        if (this.timer.active) {\r\n            this.leftTime -= dt * CachetaLogicMgr.timeScale;\r\n            let progress = this.leftTime / this.allTime;\r\n            if (progress >= 0.33) {\r\n                if (this.progressFlag != 1) {\r\n                    this.progressFlag = 1;\r\n                    // this.timerProgressBg.spriteFrame = UIDepend.SpriteManager.getSpriteBundle(\r\n                    //     CachetaSkin.Priority.timer_progress_bg_yellow\r\n                    // );\r\n                }\r\n            } else {\r\n                if (this.progressFlag != 2) {\r\n                    this.progressFlag = 2;\r\n                    // this.timerProgressBg.spriteFrame = UIDepend.SpriteManager.getSpriteBundle(\r\n                    //     CachetaSkin.Priority.timer_progress_bg_red\r\n                    // );\r\n                }\r\n            }\r\n\r\n            // this.timerProgressBox.fillRange = progress;\r\n            // this.timerProgressBg.fillRange = progress;\r\n            // this.timerLight.angle = -360 * (1 - progress);\r\n            this.timerClock.string = Math.floor(this.leftTime + 1).toString();\r\n\r\n            if (this.seatId == 0) {\r\n                // 5秒提示响铃 ，只有自己才有\r\n                if (this.leftTime <= 5 && Math.floor(this.leftTime) != this.clockFlag) {\r\n                    this.clockFlag = Math.floor(this.leftTime);\r\n                    CachetaAudioMgr.playCountdown();\r\n                }\r\n            }\r\n\r\n            if (this.leftTime <= 0) {\r\n                this.stopTimer();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置玩家标签\r\n     * @param tag\r\n     * @param score\r\n     */\r\n    public setTag(tag: CachetaConst.PLAYER_TAG, score: number = 0): void {\r\n        let active = false;\r\n\r\n        let bg = this.tagNode.getChildByName(\"bg\").getComponent(cc.Sprite);\r\n        let value = this.tagNode.getChildByName(\"value\").getComponent(cc.Label);\r\n\r\n        switch (tag) {\r\n            case CachetaConst.PLAYER_TAG.Drop:\r\n                active = true;\r\n                bg.spriteFrame = UIDepend.SpriteManager.getSpriteBundle(\r\n                    CachetaSkin.Priority.tag_bg_lost\r\n                );\r\n                // value.string = CachetaLanguage.STATUS_DROP;\r\n                break;\r\n            case CachetaConst.PLAYER_TAG.Win:\r\n                active = true;\r\n                bg.spriteFrame = UIDepend.SpriteManager.getSpriteBundle(\r\n                    CachetaSkin.Priority.tag_bg_won\r\n                );\r\n                // value.string = CachetaLanguage.STATUS_WON;\r\n                break;\r\n            case CachetaConst.PLAYER_TAG.Lost:\r\n                active = true;\r\n                bg.spriteFrame = UIDepend.SpriteManager.getSpriteBundle(\r\n                    CachetaSkin.Priority.tag_bg_lost\r\n                );\r\n                // value.string = CachetaLanguage.STATUS_LOST.format(score);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        this.tagNode.active = active;\r\n    }\r\n\r\n    /**\r\n     * 获取玩家坐标\r\n     */\r\n    public getPlayerPos(): cc.Vec3 {\r\n        return this.node.convertToWorldSpaceAR(cc.v3(0, 0));\r\n    }\r\n\r\n    /**\r\n     * 获取手牌世界坐标\r\n     */\r\n    public getHandWorldPos(): cc.Vec3 {\r\n        return this.handN.convertToWorldSpaceAR(cc.v3(0, 0));\r\n    }\r\n\r\n    /**\r\n     * 播放进入动画\r\n     */\r\n    private playIn(isWatch: boolean = false): void {\r\n        let posX = 0;\r\n        let posY = 0;\r\n        let move = CachetaConst.HeadOffset;\r\n        switch (this.seatId) {\r\n            case 0:\r\n                posY -= move / 2;\r\n                break;\r\n            case 1:\r\n                posX -= move;\r\n                break;\r\n            case 2:\r\n                posY += move / 2;\r\n                break;\r\n            case 3:\r\n                posX += move;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        this.node.position = cc.v3(posX, posY);\r\n        this.node.active = true;\r\n        this.node.opacity = 0;\r\n        this.node.stopAllActions();\r\n\r\n        cc.tween(this.node)\r\n            .to(\r\n                0.6 / CachetaLogicMgr.timeScale,\r\n                { position: cc.v3(0, 0), opacity: isWatch ? 255 / 2 : 255 },\r\n                { easing: cc.easing.quadOut.name }\r\n            )\r\n            .start();\r\n    }\r\n\r\n    /**\r\n     * 播放退出动画\r\n     */\r\n    private playOut(): void {\r\n        let posX = 0;\r\n        let posY = 0;\r\n        let move = CachetaConst.HeadOffset;\r\n        switch (this.seatId) {\r\n            case 0:\r\n                posY -= move / 2;\r\n                break;\r\n            case 1:\r\n                posX -= move;\r\n                break;\r\n            case 2:\r\n                posY += move / 2;\r\n                break;\r\n            case 3:\r\n                posX += move;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        this.node.stopAllActions();\r\n\r\n        cc.tween(this.node)\r\n            .to(\r\n                0.6 / CachetaLogicMgr.timeScale,\r\n                { position: cc.v3(posX, posY), opacity: 0 },\r\n                { easing: cc.easing.quadOut.name }\r\n            )\r\n            .call(() => {\r\n                this.node.active = false;\r\n                this.node.x = 0;\r\n                this.node.y = 0;\r\n            })\r\n            .start();\r\n    }\r\n\r\n    private playWin(): void {\r\n        let userAvatar = this.avatar.getComponentInChildren(UserAvatar);\r\n        if (userAvatar) {\r\n            userAvatar.playWinAnimation();\r\n        }\r\n\r\n        if (this.seatId == 0) {\r\n            CachetaAudioMgr.playWin();\r\n        }\r\n    }\r\n\r\n    private playLose(): void {\r\n        let userAvatar = this.avatar.getComponentInChildren(UserAvatar);\r\n        if (userAvatar) {\r\n            userAvatar.playLoseAnimation();\r\n        }\r\n\r\n        if (this.seatId == 0) {\r\n            CachetaAudioMgr.playLose();\r\n        }\r\n    }\r\n\r\n    public showHand(): void {\r\n        this.handN.active = true;\r\n    }\r\n\r\n    public showListen(isFirst: boolean = false): void {\r\n        this.listenSke.node.active = true;\r\n        this.listenSke.clearTracks();\r\n        this.listenSke.timeScale = CachetaLogicMgr.timeScale;\r\n        if (isFirst) {\r\n            this.listenSke.setAnimation(0, \"Appear\", false);\r\n            this.listenSke.setCompleteListener(() => {\r\n                this.listenSke.setAnimation(0, \"continued\", true);\r\n            });\r\n        } else {\r\n            this.listenSke.setAnimation(0, \"continued\", true);\r\n        }\r\n    }\r\n\r\n    public showTrustActive(active: boolean): void {\r\n        this.state.active = active;\r\n        this.trust.active = active;\r\n    }\r\n\r\n    public playTurnStartAnim(): void {\r\n        this.turnStartSke.node.active = true;\r\n        this.turnStartSke.clearTracks();\r\n        this.turnStartSke.timeScale = CachetaLogicMgr.timeScale;\r\n        this.turnStartSke.setAnimation(0, \"animation\", false);\r\n        this.turnStartSke.setCompleteListener(() => {\r\n            this.turnStartSke.node.active = false;\r\n        });\r\n    }\r\n\r\n    public playWinnerAnim(): void {\r\n        this.winSke.node.active = true;\r\n        this.winSke.clearTracks();\r\n        this.winSke.timeScale = CachetaLogicMgr.timeScale;\r\n        this.winSke.setAnimation(0, \"animation\", false);\r\n        // this.winSke.setCompleteListener(() => {\r\n        //     this.winSke.node.active = false;\r\n        // });\r\n    }\r\n\r\n    public playRobAction(robPlayer: CachetaPlayer, callback): void {\r\n        this.robSke.node.active = true;\r\n        UIDepend.SpineManager.loadSkeletonBundle(\r\n            this.robSke,\r\n            CachetaSkin.UnPriority.CachetaFire,\r\n            () => {\r\n                if (!cc.isValid(this.node)) return;\r\n\r\n                switch (this.seatId) {\r\n                    case 0:\r\n                        if (robPlayer.seatId == 1) {\r\n                            this.robSke.node.scaleX = 1;\r\n                        } else {\r\n                            this.robSke.node.scaleX = -1;\r\n                        }\r\n                        break;\r\n                    case 1:\r\n                        this.robSke.node.scaleX = -1;\r\n                        break;\r\n                    case 2:\r\n                        if (robPlayer.seatId == 3) {\r\n                            this.robSke.node.scaleX = -1;\r\n                        }\r\n                        break;\r\n                    case 3:\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                // 设置角度\r\n                let pPos = this.node.parent.convertToNodeSpaceAR(\r\n                    robPlayer.node.convertToWorldSpaceAR(cc.v3(0, 0, 0))\r\n                );\r\n                let radian = Math.atan((this.node.x - pPos.x) / (this.node.y - pPos.y));\r\n                let degree = (radian * 180) / 3.14;\r\n                let angle = degree;\r\n                angle = angle > 0 ? 90 - angle : -90 - angle;\r\n                CC_DEBUG && cc.log(`CachetaPlayer playRobAction: angle: ${angle}`);\r\n                this.robSke.node.angle = angle;\r\n\r\n                this.robSke.clearTracks();\r\n                this.robSke.timeScale = CachetaLogicMgr.timeScale;\r\n                this.robSke.setAnimation(0, \"animation\", false);\r\n                this.robSke.setCompleteListener(() => {\r\n                    // this.robSke.node.active = false;\r\n                    this.robSke.skeletonData = null;\r\n                });\r\n                Listener.emit(\r\n                    CachetaEventName.ROB_FIRE,\r\n                    this.cannonball.convertToWorldSpaceAR(cc.v3(0, 0, 0)),\r\n                    robPlayer.node.convertToWorldSpaceAR(cc.v3(0, 0, 0)),\r\n                    callback\r\n                );\r\n            }\r\n        );\r\n    }\r\n\r\n    public playRobedAction(callback): void {\r\n        this.robSke.node.active = true;\r\n        UIDepend.SpineManager.loadSkeletonBundle(\r\n            this.robSke,\r\n            CachetaSkin.UnPriority.CachetaExplode,\r\n            () => {\r\n                if (!cc.isValid(this.node)) return;\r\n\r\n                CachetaAudioMgr.playExplode();\r\n\r\n                this.robSke.node.angle = 0;\r\n                this.robSke.node.y = -10;\r\n                this.robSke.clearTracks();\r\n                this.robSke.timeScale = CachetaLogicMgr.timeScale;\r\n                this.robSke.setAnimation(0, \"animation\", false);\r\n                this.robSke.setCompleteListener(() => {\r\n                    this.robSke.node.active = false;\r\n                    this.robSke.skeletonData = null;\r\n\r\n                    this.robSke.node.y = 0;\r\n                    callback && callback();\r\n                });\r\n            }\r\n        );\r\n    }\r\n\r\n    private onReplayStateChanged(state: ReplayState): void {\r\n        switch (state) {\r\n            case ReplayState.Play:\r\n                this.listenSke.paused = false;\r\n                this.countcownSke.paused = false;\r\n                this.countcownSke.timeScale = CachetaLogicMgr.timeScale;\r\n                break;\r\n            case ReplayState.Pause:\r\n                this.listenSke.paused = true;\r\n                this.countcownSke.paused = true;\r\n                this.countcownSke.timeScale = CachetaLogicMgr.timeScale;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n","import { CachetaConst } from \"../define/CachetaConst\";\r\nimport { CachetaEventName } from \"../define/CachetaEventName\";\r\nimport CachetaCardModel from \"../model/CachetaCardModel\";\r\nimport Listener from \"../../../../../main/core/utils/Listener\";\r\nimport CachetaAudioMgr from \"../manager/CachetaAudioMgr\";\r\nimport Poker from \"../../../../plaza/common/Script/Component/Poker/Poker\";\r\nimport CachetaLogicMgr from \"../manager/CachetaLogicMgr\";\r\n\r\n/** 扑克状态 */\r\nenum EPokerState {\r\n    down = 0, // 落下\r\n    up = 1, // 升起\r\n    move = 2, // 移动\r\n}\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class CachetaPoker extends Poker {\r\n    @property(cc.Node)\r\n    private wildAdorn: cc.Node = null;\r\n\r\n    /** 数据模型 */\r\n    private model: CachetaCardModel = new CachetaCardModel(0, 0, 0, 0);\r\n    /** 扑克状态 */\r\n    private pokerState: number = EPokerState.down;\r\n    /** 选择时间，点选组排按选择时间排序 */\r\n    private selectedTime: number = 0;\r\n    /** 是否可触摸 */\r\n    private touchEnabled: boolean = false;\r\n    /** 上次触摸位置 */\r\n    private touchPosLast: cc.Vec2 = null;\r\n    /** 是否在移动中 */\r\n    private moving: boolean = false;\r\n\r\n    protected onLoad(): void {\r\n        this.node.on(cc.Node.EventType.TOUCH_START, this.onTouchStart, this);\r\n        this.node.on(cc.Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\r\n        this.node.on(cc.Node.EventType.TOUCH_END, this.onTouchEnd, this);\r\n        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this.onTouchEnd, this);\r\n\r\n        this.wildAdorn.active = false;\r\n    }\r\n\r\n    public reset(): void {\r\n        this.pokerState = EPokerState.down;\r\n        this.selectedTime = 0;\r\n        this.moving = false;\r\n        this.wildAdorn.active = false;\r\n        this.hide();\r\n    }\r\n\r\n    public show(): void {\r\n        this.node.active = true;\r\n    }\r\n\r\n    public hide(): void {\r\n        this.node.active = false;\r\n    }\r\n\r\n    public async initCard(id: number, isLaiziCard: boolean = false) {\r\n        if (!id) {\r\n            id = 0;\r\n        }\r\n\r\n        this.wildAdorn.active = isLaiziCard;\r\n\r\n        let number = id % 100;\r\n        let follow = Math.floor(id / 100); // hei, hong, mei, fang\r\n        if (id < 0) {\r\n            this.showCardback();\r\n        } else {\r\n            await this.init(number, follow);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置模型\r\n     * @param model\r\n     */\r\n    public setModel(model: CachetaCardModel): void {\r\n        this.model = model;\r\n    }\r\n\r\n    /**\r\n     * 设置坐标\r\n     * @param x\r\n     */\r\n    public setPositionX(x: number): void {\r\n        this.node.x = x;\r\n        this.node.y = 0;\r\n        this.pokerState = EPokerState.down;\r\n        this.selectedTime = 0;\r\n    }\r\n\r\n    /**\r\n     * 设置是否触摸\r\n     * @param touchEnabled\r\n     */\r\n    public setTouchEnabled(touchEnabled: boolean): void {\r\n        this.touchEnabled = touchEnabled;\r\n    }\r\n\r\n    private onTouchStart(event: cc.Event.EventTouch): void {\r\n        this.moving = false;\r\n\r\n        if (!this.touchEnabled) {\r\n            return;\r\n        }\r\n\r\n        this.touchPosLast = event.getLocation();\r\n        Listener.emit(CachetaEventName.POKER_TOUCH_START, this);\r\n    }\r\n\r\n    private onTouchMove(event: cc.Event.EventTouch): void {\r\n        if (!this.touchEnabled || !this.touchPosLast) {\r\n            return;\r\n        }\r\n\r\n        let touchPosCur = event.getLocation();\r\n        let touchPosSub = touchPosCur.sub(this.touchPosLast);\r\n        let distance = touchPosSub.mag();\r\n        if (distance > 5) {\r\n            this.moving = true;\r\n            this.touchPosLast = touchPosCur;\r\n\r\n            let nodePosCur = this.node.getPosition();\r\n            let nodePosNext = nodePosCur.add(touchPosSub);\r\n            this.node.setPosition(nodePosNext);\r\n\r\n            Listener.emit(CachetaEventName.POKER_TOUCH_MOVE, this);\r\n\r\n            this.setState(EPokerState.move);\r\n        }\r\n    }\r\n\r\n    private onTouchEnd(event: cc.Event.EventTouch): void {\r\n        this.moving = false;\r\n\r\n        if (!this.touchEnabled) {\r\n            return;\r\n        }\r\n\r\n        switch (this.pokerState) {\r\n            case EPokerState.down:\r\n                Listener.emit(CachetaEventName.POKER_STATE_RESET);\r\n                this.setState(EPokerState.up);\r\n                break;\r\n            case EPokerState.up:\r\n                this.setState(EPokerState.down);\r\n                Listener.emit(CachetaEventName.CANCEL_POKER_SELECT);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        Listener.emit(CachetaEventName.POKER_TOUCH_END, this);\r\n        CachetaAudioMgr.playCardClick();\r\n    }\r\n\r\n    /**\r\n     * 设置状态\r\n     * @param state\r\n     */\r\n    private setState(state: EPokerState): void {\r\n        if (state == this.pokerState) {\r\n            return;\r\n        }\r\n\r\n        if (state != EPokerState.move) {\r\n            let y = state == EPokerState.up ? CachetaConst.PokerUpOffsetY : 0;\r\n            cc.tween(this.node)\r\n                .to(0.1 / CachetaLogicMgr.timeScale, { y: y }, { easing: cc.easing.cubicOut.name })\r\n                .start();\r\n            this.selectedTime = state == EPokerState.up ? new Date().getTime() : 0;\r\n        }\r\n\r\n        this.pokerState = state;\r\n        state == EPokerState.up && Listener.emit(CachetaEventName.POKER_STATE_CHANGED);\r\n    }\r\n\r\n    /**\r\n     * 是否正在移动中\r\n     */\r\n    public isMoving(): boolean {\r\n        return this.moving;\r\n    }\r\n\r\n    /**\r\n     * 设置选中\r\n     * @param selected\r\n     */\r\n    public setSelected(selected: boolean): void {\r\n        this.setState(selected ? EPokerState.up : EPokerState.down);\r\n    }\r\n\r\n    /**\r\n     * 是否选中\r\n     */\r\n    public isSelected(): boolean {\r\n        return this.pokerState == EPokerState.up;\r\n    }\r\n\r\n    /**\r\n     * 获取选择时间\r\n     */\r\n    public getSelectedTime(): number {\r\n        return this.selectedTime;\r\n    }\r\n\r\n    /**\r\n     * 获取牌值\r\n     */\r\n    public getCardValue(): number {\r\n        return this.model.cardValue;\r\n    }\r\n\r\n    /**\r\n     * 获取牌索引\r\n     */\r\n    public getCardIndex(): number {\r\n        return this.model.cardIndex;\r\n    }\r\n\r\n    /**\r\n     * 获取当前牌索引\r\n     */\r\n    public getCurCardIndex(): number {\r\n        return this.model.curCardIndex;\r\n    }\r\n\r\n    /**\r\n     * 获取组索引\r\n     */\r\n    public getGroupIndex(): number {\r\n        return this.model.groupIndex;\r\n    }\r\n\r\n    /**\r\n     * 获取牌背\r\n     */\r\n    public getBack() {\r\n        return this.node;\r\n    }\r\n\r\n    /**\r\n     * 显示牌背\r\n     */\r\n    public showBack() {\r\n        this.showCardback();\r\n    }\r\n\r\n    /**\r\n     * 隐藏牌背\r\n     */\r\n    public hideBack() {}\r\n}\r\n","import { CachetaProto } from \"./CachetaProto\";\n\nexport const CachetaProtoMap = {\n    [CachetaProto.MessageID.PING]: null,\n    [CachetaProto.MessageID.AUTH_REQ]: CachetaProto.AuthReq,\n    [CachetaProto.MessageID.USER_OUT_REQ]: CachetaProto.UserOutReq,\n    [CachetaProto.MessageID.SYNC_USER_REQ]: CachetaProto.SyncUserReq,\n    [CachetaProto.MessageID.CHANGE_TABLE_REQ]: CachetaProto.ChangeTableReq,\n    [CachetaProto.MessageID.TOUCH_REQ]: CachetaProto.TouchReq,\n    [CachetaProto.MessageID.DISCARD_REQ]: CachetaProto.DiscardReq,\n    [CachetaProto.MessageID.LISTEN_REQ]: CachetaProto.ListenReq,\n    [CachetaProto.MessageID.DECLARE_REQ]: CachetaProto.DeclareReq,\n    [CachetaProto.MessageID.CHECK_HAND_REQ]: CachetaProto.CheckHandReq,\n    [CachetaProto.MessageID.CANCEL_TRUST_REQ]: CachetaProto.CancelTrustReq,\n    [CachetaProto.MessageID.GROUP_REQ]: CachetaProto.GroupReq,\n    [CachetaProto.MessageID.USER_ST]: CachetaProto.UserSt,\n    [CachetaProto.MessageID.ROOM_ST]: CachetaProto.RoomSt,\n    [CachetaProto.MessageID.USER_IN_EV]: CachetaProto.UserInEv,\n    [CachetaProto.MessageID.USER_OUT_EV]: CachetaProto.UserOutEv,\n    [CachetaProto.MessageID.PREPARE_NT]: CachetaProto.PrepareNt,\n    [CachetaProto.MessageID.PREPARE_CANCEL_NT]: CachetaProto.PrepareCancelNt,\n    [CachetaProto.MessageID.PLAY_NT]: CachetaProto.PlayNt,\n    [CachetaProto.MessageID.CLOSE_OVER_NT]: CachetaProto.CloseOverNt,\n    [CachetaProto.MessageID.TOUCH_EV]: CachetaProto.TouchEv,\n    [CachetaProto.MessageID.DISCARD_EV]: CachetaProto.DiscardEv,\n    [CachetaProto.MessageID.LISTEN_EV]: CachetaProto.ListenEv,\n    [CachetaProto.MessageID.DECLARE_EV]: CachetaProto.DeclareEv,\n    [CachetaProto.MessageID.CHECK_HAND_EV]: CachetaProto.CheckHandEv,\n    [CachetaProto.MessageID.SETTLE_NT]: CachetaProto.SettleNt,\n    [CachetaProto.MessageID.TRUST_NT]: CachetaProto.TrustNt,\n    [CachetaProto.MessageID.CANCEL_TRUST_EV]: CachetaProto.CancelTrustEv,\n    [CachetaProto.MessageID.GROUP_EV]: CachetaProto.GroupEv,\n};\n","/**\n * Generated by the protoc-gen-ts.  DO NOT EDIT!\n * compiler version: 3.19.4\n * source: int/cacheta/cacheta.proto\n * git: https://github.com/thesayyn/protoc-gen-ts */\n\n/*\n此处请修改为Creator NpmExport路径\n请注意路径的层级\n */\nimport { pb_1 } from \"../../../../../../../main/core/utils/NpmExport\";\nexport namespace CachetaProto {\n    export enum ConnectType {\n        /** \n          正常连接\n           **/\n        CONNECT_NORMAL = 0,\n\n        /** \n          重连\n           **/\n        CONNECT_RE = 1,\n    }\n\n    /** \n      协议id\n       **/\n    export enum MessageID {\n        PING = 0,\n\n        /** \n          认证请求\n           **/\n        AUTH_REQ = 999,\n\n        /** \n          退出请求\n           **/\n        USER_OUT_REQ = 2,\n\n        /** \n          同步用户信息请求\n           **/\n        SYNC_USER_REQ = 3,\n\n        /** \n          换桌请求\n           **/\n        CHANGE_TABLE_REQ = 4,\n\n        /** \n          摸牌请求\n           **/\n        TOUCH_REQ = 11,\n\n        /** \n          出牌请求\n           **/\n        DISCARD_REQ = 12,\n\n        /** \n          (听牌/听牌出牌)请求\n           **/\n        LISTEN_REQ = 13,\n\n        /** \n          (胡牌/胡牌出牌)请求\n           **/\n        DECLARE_REQ = 14,\n\n        /** \n          检查手牌请求\n           **/\n        CHECK_HAND_REQ = 15,\n\n        /** \n          取消托管请求\n           **/\n        CANCEL_TRUST_REQ = 16,\n\n        /** \n          理牌请求\n           **/\n        GROUP_REQ = 17,\n\n        /** \n          用户信息\n           **/\n        USER_ST = 101,\n\n        /** \n          房间信息\n           **/\n        ROOM_ST = 102,\n\n        /** \n          进入房间\n           **/\n        USER_IN_EV = 103,\n\n        /** \n          退出房间\n           **/\n        USER_OUT_EV = 104,\n\n        /** \n          准备\n           **/\n        PREPARE_NT = 105,\n\n        /** \n          取消准备\n           **/\n        PREPARE_CANCEL_NT = 106,\n\n        /** \n          广播通知用户play\n           **/\n        PLAY_NT = 111,\n\n        /** \n          广播闭牌区摸完了\n           **/\n        CLOSE_OVER_NT = 112,\n\n        /** \n          广播摸牌\n           **/\n        TOUCH_EV = 113,\n\n        /** \n          广播出牌\n           **/\n        DISCARD_EV = 114,\n\n        /** \n          广播(听牌/听牌出牌)\n           **/\n        LISTEN_EV = 115,\n\n        /** \n          广播(胡牌/胡牌出牌)\n           **/\n        DECLARE_EV = 116,\n\n        /** \n          检查手牌反馈\n           **/\n        CHECK_HAND_EV = 117,\n\n        /** \n          广播通知结算结果\n           **/\n        SETTLE_NT = 118,\n\n        /** \n          广播玩家托管\n           **/\n        TRUST_NT = 119,\n\n        /** \n          广播取消托管\n           **/\n        CANCEL_TRUST_EV = 120,\n\n        /** \n          理牌反馈\n           **/\n        GROUP_EV = 121,\n    }\n\n    /** \n      游戏流程状态\n       **/\n    export enum STAGE {\n        /** \n          等待\n           **/\n        WAIT = 0,\n\n        /** \n          准备\n           **/\n        PREPARE = 1,\n\n        /** \n          发牌\n           **/\n        SHUFFLE = 2,\n\n        /** \n          摸牌\n           **/\n        TOUCH = 3,\n\n        /** \n          出牌\n           **/\n        DISCARD = 4,\n\n        /** \n          结算\n           **/\n        SETTLE = 5,\n    }\n\n    /** \n      玩家状态\n       **/\n    export enum STATUS {\n        /** \n          准备\n           **/\n        U_PREPARE = 0,\n\n        /** \n          正在玩\n           **/\n        U_PLAY = 1,\n\n        /** \n          观战\n           **/\n        U_WATCH = 2,\n    }\n\n    /** \n      牌组的牌型\n       **/\n    export enum PATTERN {\n        INVALID = 0,\n        SET = 1,\n        STRAIGHT = 2,\n    }\n\n    /** \n      手牌状态\n       **/\n    export enum HAND_STATUS {\n        UNKNOWN = 0,\n\n        /** \n          可以听牌\n           **/\n        LISTEN = 1,\n\n        /** \n          可以胡牌\n           **/\n        DECLARE = 2,\n    }\n\n    /** \n      房间配置\n       **/\n    export class Conf extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        private base: number;\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Base?: number;\n                      PlayDelay?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Base\" in data && data.Base != undefined) {\n                    this.Base = data.Base;\n                }\n                if (\"PlayDelay\" in data && data.PlayDelay != undefined) {\n                    this.PlayDelay = data.PlayDelay;\n                }\n            }\n        }\n\n        /** \n          底分\n           **/\n        get Base() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n\n        /** \n          底分\n           **/\n        set Base(value: number) {\n            if (value == 500) {\n                value = 1;\n            } else if (value == 1000) {\n                value = 1 * 10;\n            } else {\n                value = 1 * 50;\n            }\n            cc.sys.localStorage.setItem(\"Base\", value);\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          ms，摸打牌的回合时间\n           **/\n        get PlayDelay() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n\n        /** \n          ms，摸打牌的回合时间\n           **/\n        set PlayDelay(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: { Base?: number; PlayDelay?: number }): Conf {\n            const message = new Conf({});\n            if (data.Base != null) {\n                message.Base = data.Base;\n            }\n            if (data.PlayDelay != null) {\n                message.PlayDelay = data.PlayDelay;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Base?: number;\n                PlayDelay?: number;\n            } = {};\n            if (this.Base != null) {\n                data.Base = this.Base;\n            }\n            if (this.PlayDelay != null) {\n                data.PlayDelay = this.PlayDelay;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Base != 0) writer.writeInt64(1, this.Base);\n            if (this.PlayDelay != 0) writer.writeInt32(2, this.PlayDelay);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Conf {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new Conf();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Base = reader.readInt64();\n                        break;\n                    case 2:\n                        message.PlayDelay = reader.readInt32();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): Conf {\n            return Conf.deserialize(bytes);\n        }\n    }\n\n    /** \n      牌组\n       **/\n    export class Group extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Pattern?: PATTERN;\n                      CardS?: number[];\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [2],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Pattern\" in data && data.Pattern != undefined) {\n                    this.Pattern = data.Pattern;\n                }\n                if (\"CardS\" in data && data.CardS != undefined) {\n                    this.CardS = data.CardS;\n                }\n            }\n        }\n\n        /** \n          牌型\n           **/\n        get Pattern() {\n            return pb_1.Message.getFieldWithDefault(this, 1, PATTERN.INVALID) as PATTERN;\n        }\n\n        /** \n          牌型\n           **/\n        set Pattern(value: PATTERN) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          牌\n           **/\n        get CardS() {\n            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];\n        }\n\n        /** \n          牌\n           **/\n        set CardS(value: number[]) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: { Pattern?: PATTERN; CardS?: number[] }): Group {\n            const message = new Group({});\n            if (data.Pattern != null) {\n                message.Pattern = data.Pattern;\n            }\n            if (data.CardS != null) {\n                message.CardS = data.CardS;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Pattern?: PATTERN;\n                CardS?: number[];\n            } = {};\n            if (this.Pattern != null) {\n                data.Pattern = this.Pattern;\n            }\n            if (this.CardS != null) {\n                data.CardS = this.CardS;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Pattern != PATTERN.INVALID) writer.writeEnum(1, this.Pattern);\n            if (this.CardS.length) writer.writePackedInt32(2, this.CardS);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Group {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new Group();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Pattern = reader.readEnum();\n                        break;\n                    case 2:\n                        message.CardS = reader.readPackedInt32();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): Group {\n            return Group.deserialize(bytes);\n        }\n    }\n\n    /** \n      手牌信息\n       **/\n    export class Hand extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      GroupS?: Group[];\n                      Status?: HAND_STATUS;\n                      ToListen?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [1],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"GroupS\" in data && data.GroupS != undefined) {\n                    this.GroupS = data.GroupS;\n                }\n                if (\"Status\" in data && data.Status != undefined) {\n                    this.Status = data.Status;\n                }\n                if (\"ToListen\" in data && data.ToListen != undefined) {\n                    this.ToListen = data.ToListen;\n                }\n            }\n        }\n\n        /** \n          牌组\n           **/\n        get GroupS() {\n            return pb_1.Message.getRepeatedWrapperField(this, Group, 1) as Group[];\n        }\n\n        /** \n          牌组\n           **/\n        set GroupS(value: Group[]) {\n            pb_1.Message.setRepeatedWrapperField(this, 1, value);\n        }\n\n        /** \n          手牌状态(1:能听牌;2:能胡牌)\n           **/\n        get Status() {\n            return pb_1.Message.getFieldWithDefault(this, 2, HAND_STATUS.UNKNOWN) as HAND_STATUS;\n        }\n\n        /** \n          手牌状态(1:能听牌;2:能胡牌)\n           **/\n        set Status(value: HAND_STATUS) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          10张牌的时候，打哪张能听牌的索引。注意：仅在 Status为LISTEN 且 10张牌 时有效。目前仅支持一张\n           **/\n        get ToListen() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n\n        /** \n          10张牌的时候，打哪张能听牌的索引。注意：仅在 Status为LISTEN 且 10张牌 时有效。目前仅支持一张\n           **/\n        set ToListen(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: {\n            GroupS?: ReturnType<typeof Group.prototype.toObject>[];\n            Status?: HAND_STATUS;\n            ToListen?: number;\n        }): Hand {\n            const message = new Hand({});\n            if (data.GroupS != null) {\n                message.GroupS = data.GroupS.map((item) => Group.fromObject(item));\n            }\n            if (data.Status != null) {\n                message.Status = data.Status;\n            }\n            if (data.ToListen != null) {\n                message.ToListen = data.ToListen;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                GroupS?: ReturnType<typeof Group.prototype.toObject>[];\n                Status?: HAND_STATUS;\n                ToListen?: number;\n            } = {};\n            if (this.GroupS != null) {\n                data.GroupS = this.GroupS.map((item: Group) => item.toObject());\n            }\n            if (this.Status != null) {\n                data.Status = this.Status;\n            }\n            if (this.ToListen != null) {\n                data.ToListen = this.ToListen;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.GroupS.length)\n                writer.writeRepeatedMessage(1, this.GroupS, (item: Group) =>\n                    item.serialize(writer)\n                );\n            if (this.Status != HAND_STATUS.UNKNOWN) writer.writeEnum(2, this.Status);\n            if (this.ToListen != 0) writer.writeInt32(3, this.ToListen);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Hand {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new Hand();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(message.GroupS, () =>\n                            pb_1.Message.addToRepeatedWrapperField(\n                                message,\n                                1,\n                                Group.deserialize(reader),\n                                Group\n                            )\n                        );\n                        break;\n                    case 2:\n                        message.Status = reader.readEnum();\n                        break;\n                    case 3:\n                        message.ToListen = reader.readInt32();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): Hand {\n            return Hand.deserialize(bytes);\n        }\n    }\n\n    /** \n      各玩家的结算项\n       **/\n    export class Settle extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Chair?: number;\n                      UserID?: number;\n                      UserName?: string;\n                      Avatar?: number;\n                      Gender?: number;\n                      Hand?: Hand;\n                      Win?: number;\n                      Credit?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Chair\" in data && data.Chair != undefined) {\n                    this.Chair = data.Chair;\n                }\n                if (\"UserID\" in data && data.UserID != undefined) {\n                    this.UserID = data.UserID;\n                }\n                if (\"UserName\" in data && data.UserName != undefined) {\n                    this.UserName = data.UserName;\n                }\n                if (\"Avatar\" in data && data.Avatar != undefined) {\n                    this.Avatar = data.Avatar;\n                }\n                if (\"Gender\" in data && data.Gender != undefined) {\n                    this.Gender = data.Gender;\n                }\n                if (\"Hand\" in data && data.Hand != undefined) {\n                    this.Hand = data.Hand;\n                }\n                if (\"Win\" in data && data.Win != undefined) {\n                    this.Win = data.Win;\n                }\n                if (\"Credit\" in data && data.Credit != undefined) {\n                    this.Credit = data.Credit;\n                }\n            }\n        }\n\n        /** \n          chair id\n           **/\n        get Chair() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n\n        /** \n          chair id\n           **/\n        set Chair(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          user id\n           **/\n        get UserID() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n\n        /** \n          user id\n           **/\n        set UserID(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          user name\n           **/\n        get UserName() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n\n        /** \n          user name\n           **/\n        set UserName(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n\n        /** \n          头像\n           **/\n        get Avatar() {\n            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n        }\n\n        /** \n          头像\n           **/\n        set Avatar(value: number) {\n            pb_1.Message.setField(this, 4, value);\n        }\n\n        /** \n          性别\n           **/\n        get Gender() {\n            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;\n        }\n\n        /** \n          性别\n           **/\n        set Gender(value: number) {\n            pb_1.Message.setField(this, 5, value);\n        }\n\n        /** \n          手牌\n           **/\n        get Hand() {\n            return pb_1.Message.getWrapperField(this, Hand, 6) as Hand;\n        }\n\n        /** \n          手牌\n           **/\n        set Hand(value: Hand) {\n            pb_1.Message.setWrapperField(this, 6, value);\n        }\n        get has_Hand() {\n            return pb_1.Message.getField(this, 6) != null;\n        }\n\n        /** \n          输赢金额\n           **/\n        get Win() {\n            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;\n        }\n\n        /** \n          输赢金额\n           **/\n        set Win(value: number) {\n            pb_1.Message.setField(this, 7, value);\n        }\n\n        /** \n          最新余额\n           **/\n        get Credit() {\n            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;\n        }\n\n        /** \n          最新余额\n           **/\n        set Credit(value: number) {\n            pb_1.Message.setField(this, 8, value);\n        }\n        static fromObject(data: {\n            Chair?: number;\n            UserID?: number;\n            UserName?: string;\n            Avatar?: number;\n            Gender?: number;\n            Hand?: ReturnType<typeof Hand.prototype.toObject>;\n            Win?: number;\n            Credit?: number;\n        }): Settle {\n            const message = new Settle({});\n            if (data.Chair != null) {\n                message.Chair = data.Chair;\n            }\n            if (data.UserID != null) {\n                message.UserID = data.UserID;\n            }\n            if (data.UserName != null) {\n                message.UserName = data.UserName;\n            }\n            if (data.Avatar != null) {\n                message.Avatar = data.Avatar;\n            }\n            if (data.Gender != null) {\n                message.Gender = data.Gender;\n            }\n            if (data.Hand != null) {\n                message.Hand = Hand.fromObject(data.Hand);\n            }\n            if (data.Win != null) {\n                message.Win = data.Win;\n            }\n            if (data.Credit != null) {\n                message.Credit = data.Credit;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Chair?: number;\n                UserID?: number;\n                UserName?: string;\n                Avatar?: number;\n                Gender?: number;\n                Hand?: ReturnType<typeof Hand.prototype.toObject>;\n                Win?: number;\n                Credit?: number;\n            } = {};\n            if (this.Chair != null) {\n                data.Chair = this.Chair;\n            }\n            if (this.UserID != null) {\n                data.UserID = this.UserID;\n            }\n            if (this.UserName != null) {\n                data.UserName = this.UserName;\n            }\n            if (this.Avatar != null) {\n                data.Avatar = this.Avatar;\n            }\n            if (this.Gender != null) {\n                data.Gender = this.Gender;\n            }\n            if (this.Hand != null) {\n                data.Hand = this.Hand.toObject();\n            }\n            if (this.Win != null) {\n                data.Win = this.Win;\n            }\n            if (this.Credit != null) {\n                data.Credit = this.Credit;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Chair != 0) writer.writeInt32(1, this.Chair);\n            if (this.UserID != 0) writer.writeUint64(2, this.UserID);\n            if (this.UserName.length) writer.writeString(3, this.UserName);\n            if (this.Avatar != 0) writer.writeInt32(4, this.Avatar);\n            if (this.Gender != 0) writer.writeInt32(5, this.Gender);\n            if (this.has_Hand) writer.writeMessage(6, this.Hand, () => this.Hand.serialize(writer));\n            if (this.Win != 0) writer.writeInt64(7, this.Win);\n            if (this.Credit != 0) writer.writeInt64(8, this.Credit);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Settle {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new Settle();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Chair = reader.readInt32();\n                        break;\n                    case 2:\n                        message.UserID = reader.readUint64();\n                        break;\n                    case 3:\n                        message.UserName = reader.readString();\n                        break;\n                    case 4:\n                        message.Avatar = reader.readInt32();\n                        break;\n                    case 5:\n                        message.Gender = reader.readInt32();\n                        break;\n                    case 6:\n                        reader.readMessage(\n                            message.Hand,\n                            () => (message.Hand = Hand.deserialize(reader))\n                        );\n                        break;\n                    case 7:\n                        message.Win = reader.readInt64();\n                        break;\n                    case 8:\n                        message.Credit = reader.readInt64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): Settle {\n            return Settle.deserialize(bytes);\n        }\n    }\n\n    /** \n      结算信息\n       **/\n    export class SettleInfo extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      WinChair?: number;\n                      SettleS?: Settle[];\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [2],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"WinChair\" in data && data.WinChair != undefined) {\n                    this.WinChair = data.WinChair;\n                }\n                if (\"SettleS\" in data && data.SettleS != undefined) {\n                    this.SettleS = data.SettleS;\n                }\n            }\n        }\n\n        /** \n          赢家\n           **/\n        get WinChair() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n\n        /** \n          赢家\n           **/\n        set WinChair(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          结算信息列表\n           **/\n        get SettleS() {\n            return pb_1.Message.getRepeatedWrapperField(this, Settle, 2) as Settle[];\n        }\n\n        /** \n          结算信息列表\n           **/\n        set SettleS(value: Settle[]) {\n            pb_1.Message.setRepeatedWrapperField(this, 2, value);\n        }\n        static fromObject(data: {\n            WinChair?: number;\n            SettleS?: ReturnType<typeof Settle.prototype.toObject>[];\n        }): SettleInfo {\n            const message = new SettleInfo({});\n            if (data.WinChair != null) {\n                message.WinChair = data.WinChair;\n            }\n            if (data.SettleS != null) {\n                message.SettleS = data.SettleS.map((item) => Settle.fromObject(item));\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                WinChair?: number;\n                SettleS?: ReturnType<typeof Settle.prototype.toObject>[];\n            } = {};\n            if (this.WinChair != null) {\n                data.WinChair = this.WinChair;\n            }\n            if (this.SettleS != null) {\n                data.SettleS = this.SettleS.map((item: Settle) => item.toObject());\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.WinChair != 0) writer.writeInt32(1, this.WinChair);\n            if (this.SettleS.length)\n                writer.writeRepeatedMessage(2, this.SettleS, (item: Settle) =>\n                    item.serialize(writer)\n                );\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SettleInfo {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new SettleInfo();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.WinChair = reader.readInt32();\n                        break;\n                    case 2:\n                        reader.readMessage(message.SettleS, () =>\n                            pb_1.Message.addToRepeatedWrapperField(\n                                message,\n                                2,\n                                Settle.deserialize(reader),\n                                Settle\n                            )\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): SettleInfo {\n            return SettleInfo.deserialize(bytes);\n        }\n    }\n\n    /** \n      ------------------------------------------------------------------\n       ---------------------------- 客户端请求 ----------------------------\n       ------------------------------------------------------------------\n       --------------------------- 1 ~ 10：通用消息 -----------------------\n       认证，id:1，用户认证后自动进入准备状态\n       **/\n    export class AuthReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      TS?: number;\n                      UserID?: number;\n                      Token?: string;\n                      RoomKind?: number;\n                      Version?: number;\n                      IP?: string;\n                      CryptID?: number;\n                      BrandCode?: string;\n                      game_id?: number;\n                      connect_type?: ConnectType;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"TS\" in data && data.TS != undefined) {\n                    this.TS = data.TS;\n                }\n                if (\"UserID\" in data && data.UserID != undefined) {\n                    this.UserID = data.UserID;\n                }\n                if (\"Token\" in data && data.Token != undefined) {\n                    this.Token = data.Token;\n                }\n                if (\"RoomKind\" in data && data.RoomKind != undefined) {\n                    this.RoomKind = data.RoomKind;\n                }\n                if (\"Version\" in data && data.Version != undefined) {\n                    this.Version = data.Version;\n                }\n                if (\"IP\" in data && data.IP != undefined) {\n                    this.IP = data.IP;\n                }\n                if (\"CryptID\" in data && data.CryptID != undefined) {\n                    this.CryptID = data.CryptID;\n                }\n                if (\"BrandCode\" in data && data.BrandCode != undefined) {\n                    this.BrandCode = data.BrandCode;\n                }\n                if (\"game_id\" in data && data.game_id != undefined) {\n                    this.game_id = data.game_id;\n                }\n                if (\"connect_type\" in data && data.connect_type != undefined) {\n                    this.connect_type = data.connect_type;\n                }\n            }\n        }\n        get TS() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set TS(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get UserID() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n        set UserID(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get Token() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n        set Token(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n\n        /** \n          房间号,类型\n           **/\n        get RoomKind() {\n            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n        }\n\n        /** \n          房间号,类型\n           **/\n        set RoomKind(value: number) {\n            pb_1.Message.setField(this, 4, value);\n        }\n\n        /** \n          客户端版本，现在传0就行\n           **/\n        get Version() {\n            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;\n        }\n\n        /** \n          客户端版本，现在传0就行\n           **/\n        set Version(value: number) {\n            pb_1.Message.setField(this, 5, value);\n        }\n\n        /** \n          客户端上传ip\n           **/\n        get IP() {\n            return pb_1.Message.getFieldWithDefault(this, 7, \"\") as string;\n        }\n\n        /** \n          客户端上传ip\n           **/\n        set IP(value: string) {\n            pb_1.Message.setField(this, 7, value);\n        }\n        get CryptID() {\n            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;\n        }\n        set CryptID(value: number) {\n            pb_1.Message.setField(this, 8, value);\n        }\n        get BrandCode() {\n            return pb_1.Message.getFieldWithDefault(this, 9, \"\") as string;\n        }\n        set BrandCode(value: string) {\n            pb_1.Message.setField(this, 9, value);\n        }\n\n        /** \n          game id\n           **/\n        get game_id() {\n            return pb_1.Message.getFieldWithDefault(this, 100, 0) as number;\n        }\n\n        /** \n          game id\n           **/\n        set game_id(value: number) {\n            pb_1.Message.setField(this, 100, value);\n        }\n\n        /** \n          连接类型，0：正常    1：重连\n           **/\n        get connect_type() {\n            return pb_1.Message.getFieldWithDefault(\n                this,\n                101,\n                ConnectType.CONNECT_NORMAL\n            ) as ConnectType;\n        }\n\n        /** \n          连接类型，0：正常    1：重连\n           **/\n        set connect_type(value: ConnectType) {\n            pb_1.Message.setField(this, 101, value);\n        }\n        static fromObject(data: {\n            TS?: number;\n            UserID?: number;\n            Token?: string;\n            RoomKind?: number;\n            Version?: number;\n            IP?: string;\n            CryptID?: number;\n            BrandCode?: string;\n            game_id?: number;\n            connect_type?: ConnectType;\n        }): AuthReq {\n            const message = new AuthReq({});\n            if (data.TS != null) {\n                message.TS = data.TS;\n            }\n            if (data.UserID != null) {\n                message.UserID = data.UserID;\n            }\n            if (data.Token != null) {\n                message.Token = data.Token;\n            }\n            if (data.RoomKind != null) {\n                message.RoomKind = data.RoomKind;\n            }\n            if (data.Version != null) {\n                message.Version = data.Version;\n            }\n            if (data.IP != null) {\n                message.IP = data.IP;\n            }\n            if (data.CryptID != null) {\n                message.CryptID = data.CryptID;\n            }\n            if (data.BrandCode != null) {\n                message.BrandCode = data.BrandCode;\n            }\n            if (data.game_id != null) {\n                message.game_id = data.game_id;\n            }\n            if (data.connect_type != null) {\n                message.connect_type = data.connect_type;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                TS?: number;\n                UserID?: number;\n                Token?: string;\n                RoomKind?: number;\n                Version?: number;\n                IP?: string;\n                CryptID?: number;\n                BrandCode?: string;\n                game_id?: number;\n                connect_type?: ConnectType;\n            } = {};\n            if (this.TS != null) {\n                data.TS = this.TS;\n            }\n            if (this.UserID != null) {\n                data.UserID = this.UserID;\n            }\n            if (this.Token != null) {\n                data.Token = this.Token;\n            }\n            if (this.RoomKind != null) {\n                data.RoomKind = this.RoomKind;\n            }\n            if (this.Version != null) {\n                data.Version = this.Version;\n            }\n            if (this.IP != null) {\n                data.IP = this.IP;\n            }\n            if (this.CryptID != null) {\n                data.CryptID = this.CryptID;\n            }\n            if (this.BrandCode != null) {\n                data.BrandCode = this.BrandCode;\n            }\n            if (this.game_id != null) {\n                data.game_id = this.game_id;\n            }\n            if (this.connect_type != null) {\n                data.connect_type = this.connect_type;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.TS != 0) writer.writeInt64(1, this.TS);\n            if (this.UserID != 0) writer.writeUint64(2, this.UserID);\n            if (this.Token.length) writer.writeString(3, this.Token);\n            if (this.RoomKind != 0) writer.writeInt32(4, this.RoomKind);\n            if (this.Version != 0) writer.writeInt32(5, this.Version);\n            if (this.IP.length) writer.writeString(7, this.IP);\n            if (this.CryptID != 0) writer.writeInt32(8, this.CryptID);\n            if (this.BrandCode.length) writer.writeString(9, this.BrandCode);\n            if (this.game_id != 0) writer.writeInt32(100, this.game_id);\n            if (this.connect_type != ConnectType.CONNECT_NORMAL)\n                writer.writeEnum(101, this.connect_type);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new AuthReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.TS = reader.readInt64();\n                        break;\n                    case 2:\n                        message.UserID = reader.readUint64();\n                        break;\n                    case 3:\n                        message.Token = reader.readString();\n                        break;\n                    case 4:\n                        message.RoomKind = reader.readInt32();\n                        break;\n                    case 5:\n                        message.Version = reader.readInt32();\n                        break;\n                    case 7:\n                        message.IP = reader.readString();\n                        break;\n                    case 8:\n                        message.CryptID = reader.readInt32();\n                        break;\n                    case 9:\n                        message.BrandCode = reader.readString();\n                        break;\n                    case 100:\n                        message.game_id = reader.readInt32();\n                        break;\n                    case 101:\n                        message.connect_type = reader.readEnum();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): AuthReq {\n            return AuthReq.deserialize(bytes);\n        }\n    }\n\n    /** \n      离开房间，id:2\n       **/\n    export class UserOutReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      TS?: number;\n                      Chair?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"TS\" in data && data.TS != undefined) {\n                    this.TS = data.TS;\n                }\n                if (\"Chair\" in data && data.Chair != undefined) {\n                    this.Chair = data.Chair;\n                }\n            }\n        }\n        get TS() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set TS(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get Chair() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n        set Chair(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: { TS?: number; Chair?: number }): UserOutReq {\n            const message = new UserOutReq({});\n            if (data.TS != null) {\n                message.TS = data.TS;\n            }\n            if (data.Chair != null) {\n                message.Chair = data.Chair;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                TS?: number;\n                Chair?: number;\n            } = {};\n            if (this.TS != null) {\n                data.TS = this.TS;\n            }\n            if (this.Chair != null) {\n                data.Chair = this.Chair;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.TS != 0) writer.writeInt64(1, this.TS);\n            if (this.Chair != 0) writer.writeInt32(2, this.Chair);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserOutReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new UserOutReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.TS = reader.readInt64();\n                        break;\n                    case 2:\n                        message.Chair = reader.readInt32();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): UserOutReq {\n            return UserOutReq.deserialize(bytes);\n        }\n    }\n\n    /** \n      同步用户信息, id:3\n       **/\n    export class SyncUserReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      TS?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"TS\" in data && data.TS != undefined) {\n                    this.TS = data.TS;\n                }\n            }\n        }\n        get TS() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set TS(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        static fromObject(data: { TS?: number }): SyncUserReq {\n            const message = new SyncUserReq({});\n            if (data.TS != null) {\n                message.TS = data.TS;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                TS?: number;\n            } = {};\n            if (this.TS != null) {\n                data.TS = this.TS;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.TS != 0) writer.writeInt64(1, this.TS);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SyncUserReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new SyncUserReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.TS = reader.readInt64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): SyncUserReq {\n            return SyncUserReq.deserialize(bytes);\n        }\n    }\n\n    /** \n      请求更换牌桌, id:4\n       **/\n    export class ChangeTableReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      TS?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"TS\" in data && data.TS != undefined) {\n                    this.TS = data.TS;\n                }\n            }\n        }\n        get TS() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set TS(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        static fromObject(data: { TS?: number }): ChangeTableReq {\n            const message = new ChangeTableReq({});\n            if (data.TS != null) {\n                message.TS = data.TS;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                TS?: number;\n            } = {};\n            if (this.TS != null) {\n                data.TS = this.TS;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.TS != 0) writer.writeInt64(1, this.TS);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChangeTableReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new ChangeTableReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.TS = reader.readInt64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): ChangeTableReq {\n            return ChangeTableReq.deserialize(bytes);\n        }\n    }\n\n    /** \n      11~29：具体玩法消息\n       摸牌, id:11\n       **/\n    export class TouchReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      TS?: number;\n                      Open?: boolean;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"TS\" in data && data.TS != undefined) {\n                    this.TS = data.TS;\n                }\n                if (\"Open\" in data && data.Open != undefined) {\n                    this.Open = data.Open;\n                }\n            }\n        }\n        get TS() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set TS(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          是否从open区摸\n           **/\n        get Open() {\n            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;\n        }\n\n        /** \n          是否从open区摸\n           **/\n        set Open(value: boolean) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: { TS?: number; Open?: boolean }): TouchReq {\n            const message = new TouchReq({});\n            if (data.TS != null) {\n                message.TS = data.TS;\n            }\n            if (data.Open != null) {\n                message.Open = data.Open;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                TS?: number;\n                Open?: boolean;\n            } = {};\n            if (this.TS != null) {\n                data.TS = this.TS;\n            }\n            if (this.Open != null) {\n                data.Open = this.Open;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.TS != 0) writer.writeInt64(1, this.TS);\n            if (this.Open != false) writer.writeBool(2, this.Open);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TouchReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new TouchReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.TS = reader.readInt64();\n                        break;\n                    case 2:\n                        message.Open = reader.readBool();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): TouchReq {\n            return TouchReq.deserialize(bytes);\n        }\n    }\n\n    /** \n      出牌, id:12\n       **/\n    export class DiscardReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      TS?: number;\n                      Card?: number;\n                      Index?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"TS\" in data && data.TS != undefined) {\n                    this.TS = data.TS;\n                }\n                if (\"Card\" in data && data.Card != undefined) {\n                    this.Card = data.Card;\n                }\n                if (\"Index\" in data && data.Index != undefined) {\n                    this.Index = data.Index;\n                }\n            }\n        }\n        get TS() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set TS(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          所出的牌\n           **/\n        get Card() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n\n        /** \n          所出的牌\n           **/\n        set Card(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          出的牌在所有手牌中的索引\n           **/\n        get Index() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n\n        /** \n          出的牌在所有手牌中的索引\n           **/\n        set Index(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: { TS?: number; Card?: number; Index?: number }): DiscardReq {\n            const message = new DiscardReq({});\n            if (data.TS != null) {\n                message.TS = data.TS;\n            }\n            if (data.Card != null) {\n                message.Card = data.Card;\n            }\n            if (data.Index != null) {\n                message.Index = data.Index;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                TS?: number;\n                Card?: number;\n                Index?: number;\n            } = {};\n            if (this.TS != null) {\n                data.TS = this.TS;\n            }\n            if (this.Card != null) {\n                data.Card = this.Card;\n            }\n            if (this.Index != null) {\n                data.Index = this.Index;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.TS != 0) writer.writeInt64(1, this.TS);\n            if (this.Card != 0) writer.writeInt32(2, this.Card);\n            if (this.Index != 0) writer.writeInt32(3, this.Index);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiscardReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new DiscardReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.TS = reader.readInt64();\n                        break;\n                    case 2:\n                        message.Card = reader.readInt32();\n                        break;\n                    case 3:\n                        message.Index = reader.readInt32();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): DiscardReq {\n            return DiscardReq.deserialize(bytes);\n        }\n    }\n\n    /** \n      听牌/听牌出牌, id:13\n       **/\n    export class ListenReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      TS?: number;\n                      Card?: number;\n                      Index?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"TS\" in data && data.TS != undefined) {\n                    this.TS = data.TS;\n                }\n                if (\"Card\" in data && data.Card != undefined) {\n                    this.Card = data.Card;\n                }\n                if (\"Index\" in data && data.Index != undefined) {\n                    this.Index = data.Index;\n                }\n            }\n        }\n        get TS() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set TS(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          所出的牌(0表示只是听牌)\n           **/\n        get Card() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n\n        /** \n          所出的牌(0表示只是听牌)\n           **/\n        set Card(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          出的牌在所有手牌中的索引(-1表示只是听牌)\n           **/\n        get Index() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n\n        /** \n          出的牌在所有手牌中的索引(-1表示只是听牌)\n           **/\n        set Index(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: { TS?: number; Card?: number; Index?: number }): ListenReq {\n            const message = new ListenReq({});\n            if (data.TS != null) {\n                message.TS = data.TS;\n            }\n            if (data.Card != null) {\n                message.Card = data.Card;\n            }\n            if (data.Index != null) {\n                message.Index = data.Index;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                TS?: number;\n                Card?: number;\n                Index?: number;\n            } = {};\n            if (this.TS != null) {\n                data.TS = this.TS;\n            }\n            if (this.Card != null) {\n                data.Card = this.Card;\n            }\n            if (this.Index != null) {\n                data.Index = this.Index;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.TS != 0) writer.writeInt64(1, this.TS);\n            if (this.Card != 0) writer.writeInt32(2, this.Card);\n            if (this.Index != 0) writer.writeInt32(3, this.Index);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListenReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new ListenReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.TS = reader.readInt64();\n                        break;\n                    case 2:\n                        message.Card = reader.readInt32();\n                        break;\n                    case 3:\n                        message.Index = reader.readInt32();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): ListenReq {\n            return ListenReq.deserialize(bytes);\n        }\n    }\n\n    /** \n      胡牌/胡牌出牌, id:14\n       **/\n    export class DeclareReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      TS?: number;\n                      Card?: number;\n                      Index?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"TS\" in data && data.TS != undefined) {\n                    this.TS = data.TS;\n                }\n                if (\"Card\" in data && data.Card != undefined) {\n                    this.Card = data.Card;\n                }\n                if (\"Index\" in data && data.Index != undefined) {\n                    this.Index = data.Index;\n                }\n            }\n        }\n        get TS() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set TS(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          所出的牌(0表示只是胡牌)\n           **/\n        get Card() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n\n        /** \n          所出的牌(0表示只是胡牌)\n           **/\n        set Card(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          出的牌在所有手牌中的索引(-1表示只是胡牌)\n           **/\n        get Index() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n\n        /** \n          出的牌在所有手牌中的索引(-1表示只是胡牌)\n           **/\n        set Index(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: { TS?: number; Card?: number; Index?: number }): DeclareReq {\n            const message = new DeclareReq({});\n            if (data.TS != null) {\n                message.TS = data.TS;\n            }\n            if (data.Card != null) {\n                message.Card = data.Card;\n            }\n            if (data.Index != null) {\n                message.Index = data.Index;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                TS?: number;\n                Card?: number;\n                Index?: number;\n            } = {};\n            if (this.TS != null) {\n                data.TS = this.TS;\n            }\n            if (this.Card != null) {\n                data.Card = this.Card;\n            }\n            if (this.Index != null) {\n                data.Index = this.Index;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.TS != 0) writer.writeInt64(1, this.TS);\n            if (this.Card != 0) writer.writeInt32(2, this.Card);\n            if (this.Index != 0) writer.writeInt32(3, this.Index);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeclareReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new DeclareReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.TS = reader.readInt64();\n                        break;\n                    case 2:\n                        message.Card = reader.readInt32();\n                        break;\n                    case 3:\n                        message.Index = reader.readInt32();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): DeclareReq {\n            return DeclareReq.deserialize(bytes);\n        }\n    }\n\n    /** \n      检查手牌, id:15 (用于听牌出牌/胡牌出牌 选中一张牌 检查是否能听牌/胡牌)\n       **/\n    export class CheckHandReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      TS?: number;\n                      Card?: number;\n                      Index?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"TS\" in data && data.TS != undefined) {\n                    this.TS = data.TS;\n                }\n                if (\"Card\" in data && data.Card != undefined) {\n                    this.Card = data.Card;\n                }\n                if (\"Index\" in data && data.Index != undefined) {\n                    this.Index = data.Index;\n                }\n            }\n        }\n        get TS() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set TS(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          所出的牌\n           **/\n        get Card() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n\n        /** \n          所出的牌\n           **/\n        set Card(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          出的牌在所有手牌中的索引\n           **/\n        get Index() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n\n        /** \n          出的牌在所有手牌中的索引\n           **/\n        set Index(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: { TS?: number; Card?: number; Index?: number }): CheckHandReq {\n            const message = new CheckHandReq({});\n            if (data.TS != null) {\n                message.TS = data.TS;\n            }\n            if (data.Card != null) {\n                message.Card = data.Card;\n            }\n            if (data.Index != null) {\n                message.Index = data.Index;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                TS?: number;\n                Card?: number;\n                Index?: number;\n            } = {};\n            if (this.TS != null) {\n                data.TS = this.TS;\n            }\n            if (this.Card != null) {\n                data.Card = this.Card;\n            }\n            if (this.Index != null) {\n                data.Index = this.Index;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.TS != 0) writer.writeInt64(1, this.TS);\n            if (this.Card != 0) writer.writeInt32(2, this.Card);\n            if (this.Index != 0) writer.writeInt32(3, this.Index);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckHandReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new CheckHandReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.TS = reader.readInt64();\n                        break;\n                    case 2:\n                        message.Card = reader.readInt32();\n                        break;\n                    case 3:\n                        message.Index = reader.readInt32();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): CheckHandReq {\n            return CheckHandReq.deserialize(bytes);\n        }\n    }\n\n    /** \n      取消托管，id:16\n       **/\n    export class CancelTrustReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      TS?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"TS\" in data && data.TS != undefined) {\n                    this.TS = data.TS;\n                }\n            }\n        }\n        get TS() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set TS(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        static fromObject(data: { TS?: number }): CancelTrustReq {\n            const message = new CancelTrustReq({});\n            if (data.TS != null) {\n                message.TS = data.TS;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                TS?: number;\n            } = {};\n            if (this.TS != null) {\n                data.TS = this.TS;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.TS != 0) writer.writeInt64(1, this.TS);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CancelTrustReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new CancelTrustReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.TS = reader.readInt64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): CancelTrustReq {\n            return CancelTrustReq.deserialize(bytes);\n        }\n    }\n\n    /** \n      理牌, id:17\n       **/\n    export class GroupReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      TS?: number;\n                      Hand?: Hand;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"TS\" in data && data.TS != undefined) {\n                    this.TS = data.TS;\n                }\n                if (\"Hand\" in data && data.Hand != undefined) {\n                    this.Hand = data.Hand;\n                }\n            }\n        }\n        get TS() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set TS(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          理牌后的手牌\n           **/\n        get Hand() {\n            return pb_1.Message.getWrapperField(this, Hand, 2) as Hand;\n        }\n\n        /** \n          理牌后的手牌\n           **/\n        set Hand(value: Hand) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_Hand() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            TS?: number;\n            Hand?: ReturnType<typeof Hand.prototype.toObject>;\n        }): GroupReq {\n            const message = new GroupReq({});\n            if (data.TS != null) {\n                message.TS = data.TS;\n            }\n            if (data.Hand != null) {\n                message.Hand = Hand.fromObject(data.Hand);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                TS?: number;\n                Hand?: ReturnType<typeof Hand.prototype.toObject>;\n            } = {};\n            if (this.TS != null) {\n                data.TS = this.TS;\n            }\n            if (this.Hand != null) {\n                data.Hand = this.Hand.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.TS != 0) writer.writeInt64(1, this.TS);\n            if (this.has_Hand) writer.writeMessage(2, this.Hand, () => this.Hand.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new GroupReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.TS = reader.readInt64();\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.Hand,\n                            () => (message.Hand = Hand.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): GroupReq {\n            return GroupReq.deserialize(bytes);\n        }\n    }\n\n    /** \n      ------------------------------------------------------------------\n       ---------------------------- 服务器推送 ----------------------------\n       -----------------------------------------------------------------\n       ------------------------ 101 ~ 110：通用消息 -----------------------\n       用户状态，id=101\n       **/\n    export class UserSt extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      UserID?: number;\n                      UserName?: string;\n                      Credit?: number;\n                      Avatar?: number;\n                      Gender?: number;\n                      Status?: STATUS;\n                      RoomID?: number;\n                      Chair?: number;\n                      LastActiveAt?: number;\n                      ServerAddr?: string;\n                      UnSyncedWin?: number;\n                      QuitFlag?: number;\n                      Addr?: string;\n                      Channel?: string;\n                      IP?: string;\n                      VipLevel?: number;\n                      Bet?: number;\n                      Award?: number;\n                      Hand?: Hand;\n                      InListen?: boolean;\n                      Trust?: boolean;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"UserID\" in data && data.UserID != undefined) {\n                    this.UserID = data.UserID;\n                }\n                if (\"UserName\" in data && data.UserName != undefined) {\n                    this.UserName = data.UserName;\n                }\n                if (\"Credit\" in data && data.Credit != undefined) {\n                    this.Credit = data.Credit;\n                }\n                if (\"Avatar\" in data && data.Avatar != undefined) {\n                    this.Avatar = data.Avatar;\n                }\n                if (\"Gender\" in data && data.Gender != undefined) {\n                    this.Gender = data.Gender;\n                }\n                if (\"Status\" in data && data.Status != undefined) {\n                    this.Status = data.Status;\n                }\n                if (\"RoomID\" in data && data.RoomID != undefined) {\n                    this.RoomID = data.RoomID;\n                }\n                if (\"Chair\" in data && data.Chair != undefined) {\n                    this.Chair = data.Chair;\n                }\n                if (\"LastActiveAt\" in data && data.LastActiveAt != undefined) {\n                    this.LastActiveAt = data.LastActiveAt;\n                }\n                if (\"ServerAddr\" in data && data.ServerAddr != undefined) {\n                    this.ServerAddr = data.ServerAddr;\n                }\n                if (\"UnSyncedWin\" in data && data.UnSyncedWin != undefined) {\n                    this.UnSyncedWin = data.UnSyncedWin;\n                }\n                if (\"QuitFlag\" in data && data.QuitFlag != undefined) {\n                    this.QuitFlag = data.QuitFlag;\n                }\n                if (\"Addr\" in data && data.Addr != undefined) {\n                    this.Addr = data.Addr;\n                }\n                if (\"Channel\" in data && data.Channel != undefined) {\n                    this.Channel = data.Channel;\n                }\n                if (\"IP\" in data && data.IP != undefined) {\n                    this.IP = data.IP;\n                }\n                if (\"VipLevel\" in data && data.VipLevel != undefined) {\n                    this.VipLevel = data.VipLevel;\n                }\n                if (\"Bet\" in data && data.Bet != undefined) {\n                    this.Bet = data.Bet;\n                }\n                if (\"Award\" in data && data.Award != undefined) {\n                    this.Award = data.Award;\n                }\n                if (\"Hand\" in data && data.Hand != undefined) {\n                    this.Hand = data.Hand;\n                }\n                if (\"InListen\" in data && data.InListen != undefined) {\n                    this.InListen = data.InListen;\n                }\n                if (\"Trust\" in data && data.Trust != undefined) {\n                    this.Trust = data.Trust;\n                }\n            }\n        }\n\n        /** \n          用户id\n           **/\n        get UserID() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n\n        /** \n          用户id\n           **/\n        set UserID(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          用户名\n           **/\n        get UserName() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n\n        /** \n          用户名\n           **/\n        set UserName(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          用户余额\n           **/\n        get Credit() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n\n        /** \n          用户余额\n           **/\n        set Credit(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n\n        /** \n          头像\n           **/\n        get Avatar() {\n            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n        }\n\n        /** \n          头像\n           **/\n        set Avatar(value: number) {\n            pb_1.Message.setField(this, 4, value);\n        }\n\n        /** \n          性别\n           **/\n        get Gender() {\n            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;\n        }\n\n        /** \n          性别\n           **/\n        set Gender(value: number) {\n            pb_1.Message.setField(this, 5, value);\n        }\n\n        /** \n          用户状态\n           **/\n        get Status() {\n            return pb_1.Message.getFieldWithDefault(this, 6, STATUS.U_PREPARE) as STATUS;\n        }\n\n        /** \n          用户状态\n           **/\n        set Status(value: STATUS) {\n            pb_1.Message.setField(this, 6, value);\n        }\n\n        /** \n          房间id\n           **/\n        get RoomID() {\n            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;\n        }\n\n        /** \n          房间id\n           **/\n        set RoomID(value: number) {\n            pb_1.Message.setField(this, 7, value);\n        }\n\n        /** \n          椅子号\n           **/\n        get Chair() {\n            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;\n        }\n\n        /** \n          椅子号\n           **/\n        set Chair(value: number) {\n            pb_1.Message.setField(this, 8, value);\n        }\n\n        /** \n          用户最后活跃时间\n           **/\n        get LastActiveAt() {\n            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;\n        }\n\n        /** \n          用户最后活跃时间\n           **/\n        set LastActiveAt(value: number) {\n            pb_1.Message.setField(this, 9, value);\n        }\n\n        /** \n          用户实际连接的服务器\n           **/\n        get ServerAddr() {\n            return pb_1.Message.getFieldWithDefault(this, 10, \"\") as string;\n        }\n\n        /** \n          用户实际连接的服务器\n           **/\n        set ServerAddr(value: string) {\n            pb_1.Message.setField(this, 10, value);\n        }\n\n        /** \n          未落库的金币数\n           **/\n        get UnSyncedWin() {\n            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;\n        }\n\n        /** \n          未落库的金币数\n           **/\n        set UnSyncedWin(value: number) {\n            pb_1.Message.setField(this, 11, value);\n        }\n\n        /** \n          断线标记, 1: 已断线\n           **/\n        get QuitFlag() {\n            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;\n        }\n\n        /** \n          断线标记, 1: 已断线\n           **/\n        set QuitFlag(value: number) {\n            pb_1.Message.setField(this, 12, value);\n        }\n\n        /** \n          用户地址\n           **/\n        get Addr() {\n            return pb_1.Message.getFieldWithDefault(this, 13, \"\") as string;\n        }\n\n        /** \n          用户地址\n           **/\n        set Addr(value: string) {\n            pb_1.Message.setField(this, 13, value);\n        }\n\n        /** \n          用户渠道\n           **/\n        get Channel() {\n            return pb_1.Message.getFieldWithDefault(this, 14, \"\") as string;\n        }\n\n        /** \n          用户渠道\n           **/\n        set Channel(value: string) {\n            pb_1.Message.setField(this, 14, value);\n        }\n\n        /** \n          用户IP\n           **/\n        get IP() {\n            return pb_1.Message.getFieldWithDefault(this, 15, \"\") as string;\n        }\n\n        /** \n          用户IP\n           **/\n        set IP(value: string) {\n            pb_1.Message.setField(this, 15, value);\n        }\n\n        /** \n          vip 等级\n           **/\n        get VipLevel() {\n            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;\n        }\n\n        /** \n          vip 等级\n           **/\n        set VipLevel(value: number) {\n            pb_1.Message.setField(this, 16, value);\n        }\n\n        /** \n          本局下注，花费\n           **/\n        get Bet() {\n            return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;\n        }\n\n        /** \n          本局下注，花费\n           **/\n        set Bet(value: number) {\n            pb_1.Message.setField(this, 17, value);\n        }\n\n        /** \n          本局赢金\n           **/\n        get Award() {\n            return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;\n        }\n\n        /** \n          本局赢金\n           **/\n        set Award(value: number) {\n            pb_1.Message.setField(this, 18, value);\n        }\n\n        /** \n          手牌\n           **/\n        get Hand() {\n            return pb_1.Message.getWrapperField(this, Hand, 19) as Hand;\n        }\n\n        /** \n          手牌\n           **/\n        set Hand(value: Hand) {\n            pb_1.Message.setWrapperField(this, 19, value);\n        }\n        get has_Hand() {\n            return pb_1.Message.getField(this, 19) != null;\n        }\n\n        /** \n          是否在听牌中\n           **/\n        get InListen() {\n            return pb_1.Message.getFieldWithDefault(this, 20, false) as boolean;\n        }\n\n        /** \n          是否在听牌中\n           **/\n        set InListen(value: boolean) {\n            pb_1.Message.setField(this, 20, value);\n        }\n\n        /** \n          是否被托管中\n           **/\n        get Trust() {\n            return pb_1.Message.getFieldWithDefault(this, 21, false) as boolean;\n        }\n\n        /** \n          是否被托管中\n           **/\n        set Trust(value: boolean) {\n            pb_1.Message.setField(this, 21, value);\n        }\n        static fromObject(data: {\n            UserID?: number;\n            UserName?: string;\n            Credit?: number;\n            Avatar?: number;\n            Gender?: number;\n            Status?: STATUS;\n            RoomID?: number;\n            Chair?: number;\n            LastActiveAt?: number;\n            ServerAddr?: string;\n            UnSyncedWin?: number;\n            QuitFlag?: number;\n            Addr?: string;\n            Channel?: string;\n            IP?: string;\n            VipLevel?: number;\n            Bet?: number;\n            Award?: number;\n            Hand?: ReturnType<typeof Hand.prototype.toObject>;\n            InListen?: boolean;\n            Trust?: boolean;\n        }): UserSt {\n            const message = new UserSt({});\n            if (data.UserID != null) {\n                message.UserID = data.UserID;\n            }\n            if (data.UserName != null) {\n                message.UserName = data.UserName;\n            }\n            if (data.Credit != null) {\n                message.Credit = data.Credit;\n            }\n            if (data.Avatar != null) {\n                message.Avatar = data.Avatar;\n            }\n            if (data.Gender != null) {\n                message.Gender = data.Gender;\n            }\n            if (data.Status != null) {\n                message.Status = data.Status;\n            }\n            if (data.RoomID != null) {\n                message.RoomID = data.RoomID;\n            }\n            if (data.Chair != null) {\n                message.Chair = data.Chair;\n            }\n            if (data.LastActiveAt != null) {\n                message.LastActiveAt = data.LastActiveAt;\n            }\n            if (data.ServerAddr != null) {\n                message.ServerAddr = data.ServerAddr;\n            }\n            if (data.UnSyncedWin != null) {\n                message.UnSyncedWin = data.UnSyncedWin;\n            }\n            if (data.QuitFlag != null) {\n                message.QuitFlag = data.QuitFlag;\n            }\n            if (data.Addr != null) {\n                message.Addr = data.Addr;\n            }\n            if (data.Channel != null) {\n                message.Channel = data.Channel;\n            }\n            if (data.IP != null) {\n                message.IP = data.IP;\n            }\n            if (data.VipLevel != null) {\n                message.VipLevel = data.VipLevel;\n            }\n            if (data.Bet != null) {\n                message.Bet = data.Bet;\n            }\n            if (data.Award != null) {\n                message.Award = data.Award;\n            }\n            if (data.Hand != null) {\n                message.Hand = Hand.fromObject(data.Hand);\n            }\n            if (data.InListen != null) {\n                message.InListen = data.InListen;\n            }\n            if (data.Trust != null) {\n                message.Trust = data.Trust;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                UserID?: number;\n                UserName?: string;\n                Credit?: number;\n                Avatar?: number;\n                Gender?: number;\n                Status?: STATUS;\n                RoomID?: number;\n                Chair?: number;\n                LastActiveAt?: number;\n                ServerAddr?: string;\n                UnSyncedWin?: number;\n                QuitFlag?: number;\n                Addr?: string;\n                Channel?: string;\n                IP?: string;\n                VipLevel?: number;\n                Bet?: number;\n                Award?: number;\n                Hand?: ReturnType<typeof Hand.prototype.toObject>;\n                InListen?: boolean;\n                Trust?: boolean;\n            } = {};\n            if (this.UserID != null) {\n                data.UserID = this.UserID;\n            }\n            if (this.UserName != null) {\n                data.UserName = this.UserName;\n            }\n            if (this.Credit != null) {\n                data.Credit = this.Credit;\n            }\n            if (this.Avatar != null) {\n                data.Avatar = this.Avatar;\n            }\n            if (this.Gender != null) {\n                data.Gender = this.Gender;\n            }\n            if (this.Status != null) {\n                data.Status = this.Status;\n            }\n            if (this.RoomID != null) {\n                data.RoomID = this.RoomID;\n            }\n            if (this.Chair != null) {\n                data.Chair = this.Chair;\n            }\n            if (this.LastActiveAt != null) {\n                data.LastActiveAt = this.LastActiveAt;\n            }\n            if (this.ServerAddr != null) {\n                data.ServerAddr = this.ServerAddr;\n            }\n            if (this.UnSyncedWin != null) {\n                data.UnSyncedWin = this.UnSyncedWin;\n            }\n            if (this.QuitFlag != null) {\n                data.QuitFlag = this.QuitFlag;\n            }\n            if (this.Addr != null) {\n                data.Addr = this.Addr;\n            }\n            if (this.Channel != null) {\n                data.Channel = this.Channel;\n            }\n            if (this.IP != null) {\n                data.IP = this.IP;\n            }\n            if (this.VipLevel != null) {\n                data.VipLevel = this.VipLevel;\n            }\n            if (this.Bet != null) {\n                data.Bet = this.Bet;\n            }\n            if (this.Award != null) {\n                data.Award = this.Award;\n            }\n            if (this.Hand != null) {\n                data.Hand = this.Hand.toObject();\n            }\n            if (this.InListen != null) {\n                data.InListen = this.InListen;\n            }\n            if (this.Trust != null) {\n                data.Trust = this.Trust;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.UserID != 0) writer.writeUint64(1, this.UserID);\n            if (this.UserName.length) writer.writeString(2, this.UserName);\n            if (this.Credit != 0) writer.writeInt64(3, this.Credit);\n            if (this.Avatar != 0) writer.writeInt32(4, this.Avatar);\n            if (this.Gender != 0) writer.writeInt32(5, this.Gender);\n            if (this.Status != STATUS.U_PREPARE) writer.writeEnum(6, this.Status);\n            if (this.RoomID != 0) writer.writeUint64(7, this.RoomID);\n            if (this.Chair != 0) writer.writeInt32(8, this.Chair);\n            if (this.LastActiveAt != 0) writer.writeInt64(9, this.LastActiveAt);\n            if (this.ServerAddr.length) writer.writeString(10, this.ServerAddr);\n            if (this.UnSyncedWin != 0) writer.writeInt64(11, this.UnSyncedWin);\n            if (this.QuitFlag != 0) writer.writeInt32(12, this.QuitFlag);\n            if (this.Addr.length) writer.writeString(13, this.Addr);\n            if (this.Channel.length) writer.writeString(14, this.Channel);\n            if (this.IP.length) writer.writeString(15, this.IP);\n            if (this.VipLevel != 0) writer.writeInt32(16, this.VipLevel);\n            if (this.Bet != 0) writer.writeInt64(17, this.Bet);\n            if (this.Award != 0) writer.writeInt64(18, this.Award);\n            if (this.has_Hand)\n                writer.writeMessage(19, this.Hand, () => this.Hand.serialize(writer));\n            if (this.InListen != false) writer.writeBool(20, this.InListen);\n            if (this.Trust != false) writer.writeBool(21, this.Trust);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserSt {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new UserSt();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.UserID = reader.readUint64();\n                        break;\n                    case 2:\n                        message.UserName = reader.readString();\n                        break;\n                    case 3:\n                        message.Credit = reader.readInt64();\n                        break;\n                    case 4:\n                        message.Avatar = reader.readInt32();\n                        break;\n                    case 5:\n                        message.Gender = reader.readInt32();\n                        break;\n                    case 6:\n                        message.Status = reader.readEnum();\n                        break;\n                    case 7:\n                        message.RoomID = reader.readUint64();\n                        break;\n                    case 8:\n                        message.Chair = reader.readInt32();\n                        break;\n                    case 9:\n                        message.LastActiveAt = reader.readInt64();\n                        break;\n                    case 10:\n                        message.ServerAddr = reader.readString();\n                        break;\n                    case 11:\n                        message.UnSyncedWin = reader.readInt64();\n                        break;\n                    case 12:\n                        message.QuitFlag = reader.readInt32();\n                        break;\n                    case 13:\n                        message.Addr = reader.readString();\n                        break;\n                    case 14:\n                        message.Channel = reader.readString();\n                        break;\n                    case 15:\n                        message.IP = reader.readString();\n                        break;\n                    case 16:\n                        message.VipLevel = reader.readInt32();\n                        break;\n                    case 17:\n                        message.Bet = reader.readInt64();\n                        break;\n                    case 18:\n                        message.Award = reader.readInt64();\n                        break;\n                    case 19:\n                        reader.readMessage(\n                            message.Hand,\n                            () => (message.Hand = Hand.deserialize(reader))\n                        );\n                        break;\n                    case 20:\n                        message.InListen = reader.readBool();\n                        break;\n                    case 21:\n                        message.Trust = reader.readBool();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): UserSt {\n            return UserSt.deserialize(bytes);\n        }\n    }\n\n    /** \n      游戏状态，id:102，当进入房间或游戏开始倒计时(prepare)会一次性发送给客户端\n       **/\n    export class RoomSt extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      TS?: number;\n                      NextTS?: number;\n                      Kind?: number;\n                      RoomID?: number;\n                      Conf?: Conf;\n                      Stage?: STAGE;\n                      UserM?: Map<number, UserSt>;\n                      BankerChair?: number;\n                      ActiveChair?: number;\n                      OpenCardS?: number[];\n                      PubCard?: number;\n                      WildCardS?: number[];\n                      SettleInfo?: SettleInfo;\n                      CloseNum?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [10, 12],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"TS\" in data && data.TS != undefined) {\n                    this.TS = data.TS;\n                }\n                if (\"NextTS\" in data && data.NextTS != undefined) {\n                    this.NextTS = data.NextTS;\n                }\n                if (\"Kind\" in data && data.Kind != undefined) {\n                    this.Kind = data.Kind;\n                }\n                if (\"RoomID\" in data && data.RoomID != undefined) {\n                    this.RoomID = data.RoomID;\n                }\n                if (\"Conf\" in data && data.Conf != undefined) {\n                    this.Conf = data.Conf;\n                }\n                if (\"Stage\" in data && data.Stage != undefined) {\n                    this.Stage = data.Stage;\n                }\n                if (\"UserM\" in data && data.UserM != undefined) {\n                    this.UserM = data.UserM;\n                }\n                if (\"BankerChair\" in data && data.BankerChair != undefined) {\n                    this.BankerChair = data.BankerChair;\n                }\n                if (\"ActiveChair\" in data && data.ActiveChair != undefined) {\n                    this.ActiveChair = data.ActiveChair;\n                }\n                if (\"OpenCardS\" in data && data.OpenCardS != undefined) {\n                    this.OpenCardS = data.OpenCardS;\n                }\n                if (\"PubCard\" in data && data.PubCard != undefined) {\n                    this.PubCard = data.PubCard;\n                }\n                if (\"WildCardS\" in data && data.WildCardS != undefined) {\n                    this.WildCardS = data.WildCardS;\n                }\n                if (\"SettleInfo\" in data && data.SettleInfo != undefined) {\n                    this.SettleInfo = data.SettleInfo;\n                }\n                if (\"CloseNum\" in data && data.CloseNum != undefined) {\n                    this.CloseNum = data.CloseNum;\n                }\n            }\n            if (!this.UserM) this.UserM = new Map();\n        }\n\n        /** \n          当前时间戳\n           **/\n        get TS() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n\n        /** \n          当前时间戳\n           **/\n        set TS(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          到下一玩家的时间戳, 0表示不存在倒计时\n           **/\n        get NextTS() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n\n        /** \n          到下一玩家的时间戳, 0表示不存在倒计时\n           **/\n        set NextTS(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          房间类型\n           **/\n        get Kind() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n\n        /** \n          房间类型\n           **/\n        set Kind(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n\n        /** \n          房间Id\n           **/\n        get RoomID() {\n            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n        }\n\n        /** \n          房间Id\n           **/\n        set RoomID(value: number) {\n            pb_1.Message.setField(this, 4, value);\n        }\n\n        /** \n          房间配置\n           **/\n        get Conf() {\n            return pb_1.Message.getWrapperField(this, Conf, 5) as Conf;\n        }\n\n        /** \n          房间配置\n           **/\n        set Conf(value: Conf) {\n            pb_1.Message.setWrapperField(this, 5, value);\n        }\n        get has_Conf() {\n            return pb_1.Message.getField(this, 5) != null;\n        }\n\n        /** \n          游戏阶段\n           **/\n        get Stage() {\n            return pb_1.Message.getFieldWithDefault(this, 6, STAGE.WAIT) as STAGE;\n        }\n\n        /** \n          游戏阶段\n           **/\n        set Stage(value: STAGE) {\n            pb_1.Message.setField(this, 6, value);\n        }\n\n        /** \n          记录座位的实时玩家信息, key是座位号，value是玩家信息\n           **/\n        get UserM() {\n            return pb_1.Message.getField(this, 7) as any as Map<number, UserSt>;\n        }\n\n        /** \n          记录座位的实时玩家信息, key是座位号，value是玩家信息\n           **/\n        set UserM(value: Map<number, UserSt>) {\n            pb_1.Message.setField(this, 7, value as any);\n        }\n\n        /** \n          庄家\n           **/\n        get BankerChair() {\n            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;\n        }\n\n        /** \n          庄家\n           **/\n        set BankerChair(value: number) {\n            pb_1.Message.setField(this, 8, value);\n        }\n\n        /** \n          当前玩家\n           **/\n        get ActiveChair() {\n            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;\n        }\n\n        /** \n          当前玩家\n           **/\n        set ActiveChair(value: number) {\n            pb_1.Message.setField(this, 9, value);\n        }\n\n        /** \n          公开牌区的牌，新出的牌放在前面\n           **/\n        get OpenCardS() {\n            return pb_1.Message.getFieldWithDefault(this, 10, []) as number[];\n        }\n\n        /** \n          公开牌区的牌，新出的牌放在前面\n           **/\n        set OpenCardS(value: number[]) {\n            pb_1.Message.setField(this, 10, value);\n        }\n\n        /** \n          公开牌值(用来确定癞子牌)\n           **/\n        get PubCard() {\n            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;\n        }\n\n        /** \n          公开牌值(用来确定癞子牌)\n           **/\n        set PubCard(value: number) {\n            pb_1.Message.setField(this, 11, value);\n        }\n\n        /** \n          癞子牌\n           **/\n        get WildCardS() {\n            return pb_1.Message.getFieldWithDefault(this, 12, []) as number[];\n        }\n\n        /** \n          癞子牌\n           **/\n        set WildCardS(value: number[]) {\n            pb_1.Message.setField(this, 12, value);\n        }\n\n        /** \n          结算信息\n           **/\n        get SettleInfo() {\n            return pb_1.Message.getWrapperField(this, SettleInfo, 13) as SettleInfo;\n        }\n\n        /** \n          结算信息\n           **/\n        set SettleInfo(value: SettleInfo) {\n            pb_1.Message.setWrapperField(this, 13, value);\n        }\n        get has_SettleInfo() {\n            return pb_1.Message.getField(this, 13) != null;\n        }\n\n        /** \n          闭区的牌剩余数量\n           **/\n        get CloseNum() {\n            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;\n        }\n\n        /** \n          闭区的牌剩余数量\n           **/\n        set CloseNum(value: number) {\n            pb_1.Message.setField(this, 14, value);\n        }\n        static fromObject(data: {\n            TS?: number;\n            NextTS?: number;\n            Kind?: number;\n            RoomID?: number;\n            Conf?: ReturnType<typeof Conf.prototype.toObject>;\n            Stage?: STAGE;\n            UserM?: {\n                [key: number]: ReturnType<typeof UserSt.prototype.toObject>;\n            };\n            BankerChair?: number;\n            ActiveChair?: number;\n            OpenCardS?: number[];\n            PubCard?: number;\n            WildCardS?: number[];\n            SettleInfo?: ReturnType<typeof SettleInfo.prototype.toObject>;\n            CloseNum?: number;\n        }): RoomSt {\n            const message = new RoomSt({});\n            if (data.TS != null) {\n                message.TS = data.TS;\n            }\n            if (data.NextTS != null) {\n                message.NextTS = data.NextTS;\n            }\n            if (data.Kind != null) {\n                message.Kind = data.Kind;\n            }\n            if (data.RoomID != null) {\n                message.RoomID = data.RoomID;\n            }\n            if (data.Conf != null) {\n                message.Conf = Conf.fromObject(data.Conf);\n            }\n            if (data.Stage != null) {\n                message.Stage = data.Stage;\n            }\n            if (typeof data.UserM == \"object\") {\n                message.UserM = new Map(\n                    Object.entries(data.UserM).map(([key, value]) => [\n                        Number(key),\n                        UserSt.fromObject(value),\n                    ])\n                );\n            }\n            if (data.BankerChair != null) {\n                message.BankerChair = data.BankerChair;\n            }\n            if (data.ActiveChair != null) {\n                message.ActiveChair = data.ActiveChair;\n            }\n            if (data.OpenCardS != null) {\n                message.OpenCardS = data.OpenCardS;\n            }\n            if (data.PubCard != null) {\n                message.PubCard = data.PubCard;\n            }\n            if (data.WildCardS != null) {\n                message.WildCardS = data.WildCardS;\n            }\n            if (data.SettleInfo != null) {\n                message.SettleInfo = SettleInfo.fromObject(data.SettleInfo);\n            }\n            if (data.CloseNum != null) {\n                message.CloseNum = data.CloseNum;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                TS?: number;\n                NextTS?: number;\n                Kind?: number;\n                RoomID?: number;\n                Conf?: ReturnType<typeof Conf.prototype.toObject>;\n                Stage?: STAGE;\n                UserM?: {\n                    [key: number]: ReturnType<typeof UserSt.prototype.toObject>;\n                };\n                BankerChair?: number;\n                ActiveChair?: number;\n                OpenCardS?: number[];\n                PubCard?: number;\n                WildCardS?: number[];\n                SettleInfo?: ReturnType<typeof SettleInfo.prototype.toObject>;\n                CloseNum?: number;\n            } = {};\n            if (this.TS != null) {\n                data.TS = this.TS;\n            }\n            if (this.NextTS != null) {\n                data.NextTS = this.NextTS;\n            }\n            if (this.Kind != null) {\n                data.Kind = this.Kind;\n            }\n            if (this.RoomID != null) {\n                data.RoomID = this.RoomID;\n            }\n            if (this.Conf != null) {\n                data.Conf = this.Conf.toObject();\n            }\n            if (this.Stage != null) {\n                data.Stage = this.Stage;\n            }\n            if (this.UserM.size > 0) {\n                data.UserM = Object.fromEntries(\n                    Array.from(this.UserM).map(([key, value]) => [key, value.toObject()])\n                );\n            }\n            if (this.BankerChair != null) {\n                data.BankerChair = this.BankerChair;\n            }\n            if (this.ActiveChair != null) {\n                data.ActiveChair = this.ActiveChair;\n            }\n            if (this.OpenCardS != null) {\n                data.OpenCardS = this.OpenCardS;\n            }\n            if (this.PubCard != null) {\n                data.PubCard = this.PubCard;\n            }\n            if (this.WildCardS != null) {\n                data.WildCardS = this.WildCardS;\n            }\n            if (this.SettleInfo != null) {\n                data.SettleInfo = this.SettleInfo.toObject();\n            }\n            if (this.CloseNum != null) {\n                data.CloseNum = this.CloseNum;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.TS != 0) writer.writeInt64(1, this.TS);\n            if (this.NextTS != 0) writer.writeInt64(2, this.NextTS);\n            if (this.Kind != 0) writer.writeInt32(3, this.Kind);\n            if (this.RoomID != 0) writer.writeUint64(4, this.RoomID);\n            if (this.has_Conf) writer.writeMessage(5, this.Conf, () => this.Conf.serialize(writer));\n            if (this.Stage != STAGE.WAIT) writer.writeEnum(6, this.Stage);\n            for (const [key, value] of this.UserM) {\n                writer.writeMessage(7, this.UserM, () => {\n                    writer.writeInt32(1, key);\n                    writer.writeMessage(2, value, () => value.serialize(writer));\n                });\n            }\n            if (this.BankerChair != 0) writer.writeInt32(8, this.BankerChair);\n            if (this.ActiveChair != 0) writer.writeInt32(9, this.ActiveChair);\n            if (this.OpenCardS.length) writer.writePackedInt32(10, this.OpenCardS);\n            if (this.PubCard != 0) writer.writeInt32(11, this.PubCard);\n            if (this.WildCardS.length) writer.writePackedInt32(12, this.WildCardS);\n            if (this.has_SettleInfo)\n                writer.writeMessage(13, this.SettleInfo, () => this.SettleInfo.serialize(writer));\n            if (this.CloseNum != 0) writer.writeInt32(14, this.CloseNum);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoomSt {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new RoomSt();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.TS = reader.readInt64();\n                        break;\n                    case 2:\n                        message.NextTS = reader.readInt64();\n                        break;\n                    case 3:\n                        message.Kind = reader.readInt32();\n                        break;\n                    case 4:\n                        message.RoomID = reader.readUint64();\n                        break;\n                    case 5:\n                        reader.readMessage(\n                            message.Conf,\n                            () => (message.Conf = Conf.deserialize(reader))\n                        );\n                        break;\n                    case 6:\n                        message.Stage = reader.readEnum();\n                        break;\n                    case 7:\n                        reader.readMessage(message, () =>\n                            pb_1.Map.deserializeBinary(\n                                message.UserM as any,\n                                reader,\n                                reader.readInt32,\n                                () => {\n                                    let value;\n                                    reader.readMessage(\n                                        message,\n                                        () => (value = UserSt.deserialize(reader))\n                                    );\n                                    return value;\n                                }\n                            )\n                        );\n                        break;\n                    case 8:\n                        message.BankerChair = reader.readInt32();\n                        break;\n                    case 9:\n                        message.ActiveChair = reader.readInt32();\n                        break;\n                    case 10:\n                        message.OpenCardS = reader.readPackedInt32();\n                        break;\n                    case 11:\n                        message.PubCard = reader.readInt32();\n                        break;\n                    case 12:\n                        message.WildCardS = reader.readPackedInt32();\n                        break;\n                    case 13:\n                        reader.readMessage(\n                            message.SettleInfo,\n                            () => (message.SettleInfo = SettleInfo.deserialize(reader))\n                        );\n                        break;\n                    case 14:\n                        message.CloseNum = reader.readInt32();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): RoomSt {\n            return RoomSt.deserialize(bytes);\n        }\n    }\n\n    /** \n      广播用户进入房间，id：103\n       **/\n    export class UserInEv extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      TS?: number;\n                      User?: UserSt;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"TS\" in data && data.TS != undefined) {\n                    this.TS = data.TS;\n                }\n                if (\"User\" in data && data.User != undefined) {\n                    this.User = data.User;\n                }\n            }\n        }\n        get TS() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set TS(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get User() {\n            return pb_1.Message.getWrapperField(this, UserSt, 2) as UserSt;\n        }\n        set User(value: UserSt) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_User() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            TS?: number;\n            User?: ReturnType<typeof UserSt.prototype.toObject>;\n        }): UserInEv {\n            const message = new UserInEv({});\n            if (data.TS != null) {\n                message.TS = data.TS;\n            }\n            if (data.User != null) {\n                message.User = UserSt.fromObject(data.User);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                TS?: number;\n                User?: ReturnType<typeof UserSt.prototype.toObject>;\n            } = {};\n            if (this.TS != null) {\n                data.TS = this.TS;\n            }\n            if (this.User != null) {\n                data.User = this.User.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.TS != 0) writer.writeInt64(1, this.TS);\n            if (this.has_User) writer.writeMessage(2, this.User, () => this.User.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserInEv {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new UserInEv();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.TS = reader.readInt64();\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.User,\n                            () => (message.User = UserSt.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): UserInEv {\n            return UserInEv.deserialize(bytes);\n        }\n    }\n\n    /** \n      广播用户退出房间(用户主动退出/被踢出房间)，id：104\n       **/\n    export class UserOutEv extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      TS?: number;\n                      Chair?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"TS\" in data && data.TS != undefined) {\n                    this.TS = data.TS;\n                }\n                if (\"Chair\" in data && data.Chair != undefined) {\n                    this.Chair = data.Chair;\n                }\n            }\n        }\n        get TS() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set TS(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          操作玩家\n           **/\n        get Chair() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n\n        /** \n          操作玩家\n           **/\n        set Chair(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: { TS?: number; Chair?: number }): UserOutEv {\n            const message = new UserOutEv({});\n            if (data.TS != null) {\n                message.TS = data.TS;\n            }\n            if (data.Chair != null) {\n                message.Chair = data.Chair;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                TS?: number;\n                Chair?: number;\n            } = {};\n            if (this.TS != null) {\n                data.TS = this.TS;\n            }\n            if (this.Chair != null) {\n                data.Chair = this.Chair;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.TS != 0) writer.writeInt64(1, this.TS);\n            if (this.Chair != 0) writer.writeInt32(2, this.Chair);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserOutEv {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new UserOutEv();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.TS = reader.readInt64();\n                        break;\n                    case 2:\n                        message.Chair = reader.readInt32();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): UserOutEv {\n            return UserOutEv.deserialize(bytes);\n        }\n    }\n\n    /** \n      广播游戏准备, id: 105\n       **/\n    export class PrepareNt extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      TS?: number;\n                      NextTS?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"TS\" in data && data.TS != undefined) {\n                    this.TS = data.TS;\n                }\n                if (\"NextTS\" in data && data.NextTS != undefined) {\n                    this.NextTS = data.NextTS;\n                }\n            }\n        }\n        get TS() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set TS(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          游戏开始的时间戳, 用于客户端准备倒计时\n           **/\n        get NextTS() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n\n        /** \n          游戏开始的时间戳, 用于客户端准备倒计时\n           **/\n        set NextTS(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: { TS?: number; NextTS?: number }): PrepareNt {\n            const message = new PrepareNt({});\n            if (data.TS != null) {\n                message.TS = data.TS;\n            }\n            if (data.NextTS != null) {\n                message.NextTS = data.NextTS;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                TS?: number;\n                NextTS?: number;\n            } = {};\n            if (this.TS != null) {\n                data.TS = this.TS;\n            }\n            if (this.NextTS != null) {\n                data.NextTS = this.NextTS;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.TS != 0) writer.writeInt64(1, this.TS);\n            if (this.NextTS != 0) writer.writeInt64(2, this.NextTS);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrepareNt {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PrepareNt();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.TS = reader.readInt64();\n                        break;\n                    case 2:\n                        message.NextTS = reader.readInt64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PrepareNt {\n            return PrepareNt.deserialize(bytes);\n        }\n    }\n\n    /** \n      广播游戏准备取消, id: 106\n       **/\n    export class PrepareCancelNt extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      TS?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"TS\" in data && data.TS != undefined) {\n                    this.TS = data.TS;\n                }\n            }\n        }\n        get TS() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set TS(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        static fromObject(data: { TS?: number }): PrepareCancelNt {\n            const message = new PrepareCancelNt({});\n            if (data.TS != null) {\n                message.TS = data.TS;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                TS?: number;\n            } = {};\n            if (this.TS != null) {\n                data.TS = this.TS;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.TS != 0) writer.writeInt64(1, this.TS);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrepareCancelNt {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PrepareCancelNt();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.TS = reader.readInt64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PrepareCancelNt {\n            return PrepareCancelNt.deserialize(bytes);\n        }\n    }\n\n    /** \n      ------------------------ 111 ~ 129：具体玩法消息 -----------------------\n       广播play通知，id：111\n       **/\n    export class PlayNt extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      TS?: number;\n                      NextTS?: number;\n                      Chair?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"TS\" in data && data.TS != undefined) {\n                    this.TS = data.TS;\n                }\n                if (\"NextTS\" in data && data.NextTS != undefined) {\n                    this.NextTS = data.NextTS;\n                }\n                if (\"Chair\" in data && data.Chair != undefined) {\n                    this.Chair = data.Chair;\n                }\n            }\n        }\n        get TS() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set TS(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          超时时间\n           **/\n        get NextTS() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n\n        /** \n          超时时间\n           **/\n        set NextTS(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          chair id\n           **/\n        get Chair() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n\n        /** \n          chair id\n           **/\n        set Chair(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: { TS?: number; NextTS?: number; Chair?: number }): PlayNt {\n            const message = new PlayNt({});\n            if (data.TS != null) {\n                message.TS = data.TS;\n            }\n            if (data.NextTS != null) {\n                message.NextTS = data.NextTS;\n            }\n            if (data.Chair != null) {\n                message.Chair = data.Chair;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                TS?: number;\n                NextTS?: number;\n                Chair?: number;\n            } = {};\n            if (this.TS != null) {\n                data.TS = this.TS;\n            }\n            if (this.NextTS != null) {\n                data.NextTS = this.NextTS;\n            }\n            if (this.Chair != null) {\n                data.Chair = this.Chair;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.TS != 0) writer.writeInt64(1, this.TS);\n            if (this.NextTS != 0) writer.writeInt64(2, this.NextTS);\n            if (this.Chair != 0) writer.writeInt32(3, this.Chair);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayNt {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PlayNt();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.TS = reader.readInt64();\n                        break;\n                    case 2:\n                        message.NextTS = reader.readInt64();\n                        break;\n                    case 3:\n                        message.Chair = reader.readInt32();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PlayNt {\n            return PlayNt.deserialize(bytes);\n        }\n    }\n\n    /** \n      闭牌区摸完了的通知，id: 112\n       **/\n    export class CloseOverNt extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      TS?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"TS\" in data && data.TS != undefined) {\n                    this.TS = data.TS;\n                }\n            }\n        }\n        get TS() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set TS(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        static fromObject(data: { TS?: number }): CloseOverNt {\n            const message = new CloseOverNt({});\n            if (data.TS != null) {\n                message.TS = data.TS;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                TS?: number;\n            } = {};\n            if (this.TS != null) {\n                data.TS = this.TS;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.TS != 0) writer.writeInt64(1, this.TS);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CloseOverNt {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new CloseOverNt();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.TS = reader.readInt64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): CloseOverNt {\n            return CloseOverNt.deserialize(bytes);\n        }\n    }\n\n    /** \n      广播摸牌反馈，id: 113\n       **/\n    export class TouchEv extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      TS?: number;\n                      Chair?: number;\n                      Open?: boolean;\n                      Card?: number;\n                      Hand?: Hand;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"TS\" in data && data.TS != undefined) {\n                    this.TS = data.TS;\n                }\n                if (\"Chair\" in data && data.Chair != undefined) {\n                    this.Chair = data.Chair;\n                }\n                if (\"Open\" in data && data.Open != undefined) {\n                    this.Open = data.Open;\n                }\n                if (\"Card\" in data && data.Card != undefined) {\n                    this.Card = data.Card;\n                }\n                if (\"Hand\" in data && data.Hand != undefined) {\n                    this.Hand = data.Hand;\n                }\n            }\n        }\n        get TS() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set TS(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          chair id\n           **/\n        get Chair() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n\n        /** \n          chair id\n           **/\n        set Chair(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          是否从open区摸\n           **/\n        get Open() {\n            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;\n        }\n\n        /** \n          是否从open区摸\n           **/\n        set Open(value: boolean) {\n            pb_1.Message.setField(this, 3, value);\n        }\n\n        /** \n          摸到的牌\n           **/\n        get Card() {\n            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n        }\n\n        /** \n          摸到的牌\n           **/\n        set Card(value: number) {\n            pb_1.Message.setField(this, 4, value);\n        }\n\n        /** \n          手牌\n           **/\n        get Hand() {\n            return pb_1.Message.getWrapperField(this, Hand, 5) as Hand;\n        }\n\n        /** \n          手牌\n           **/\n        set Hand(value: Hand) {\n            pb_1.Message.setWrapperField(this, 5, value);\n        }\n        get has_Hand() {\n            return pb_1.Message.getField(this, 5) != null;\n        }\n        static fromObject(data: {\n            TS?: number;\n            Chair?: number;\n            Open?: boolean;\n            Card?: number;\n            Hand?: ReturnType<typeof Hand.prototype.toObject>;\n        }): TouchEv {\n            const message = new TouchEv({});\n            if (data.TS != null) {\n                message.TS = data.TS;\n            }\n            if (data.Chair != null) {\n                message.Chair = data.Chair;\n            }\n            if (data.Open != null) {\n                message.Open = data.Open;\n            }\n            if (data.Card != null) {\n                message.Card = data.Card;\n            }\n            if (data.Hand != null) {\n                message.Hand = Hand.fromObject(data.Hand);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                TS?: number;\n                Chair?: number;\n                Open?: boolean;\n                Card?: number;\n                Hand?: ReturnType<typeof Hand.prototype.toObject>;\n            } = {};\n            if (this.TS != null) {\n                data.TS = this.TS;\n            }\n            if (this.Chair != null) {\n                data.Chair = this.Chair;\n            }\n            if (this.Open != null) {\n                data.Open = this.Open;\n            }\n            if (this.Card != null) {\n                data.Card = this.Card;\n            }\n            if (this.Hand != null) {\n                data.Hand = this.Hand.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.TS != 0) writer.writeInt64(1, this.TS);\n            if (this.Chair != 0) writer.writeInt32(2, this.Chair);\n            if (this.Open != false) writer.writeBool(3, this.Open);\n            if (this.Card != 0) writer.writeInt32(4, this.Card);\n            if (this.has_Hand) writer.writeMessage(5, this.Hand, () => this.Hand.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TouchEv {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new TouchEv();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.TS = reader.readInt64();\n                        break;\n                    case 2:\n                        message.Chair = reader.readInt32();\n                        break;\n                    case 3:\n                        message.Open = reader.readBool();\n                        break;\n                    case 4:\n                        message.Card = reader.readInt32();\n                        break;\n                    case 5:\n                        reader.readMessage(\n                            message.Hand,\n                            () => (message.Hand = Hand.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): TouchEv {\n            return TouchEv.deserialize(bytes);\n        }\n    }\n\n    /** \n      广播出牌反馈，id: 114\n       **/\n    export class DiscardEv extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      TS?: number;\n                      Chair?: number;\n                      Card?: number;\n                      Hand?: Hand;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"TS\" in data && data.TS != undefined) {\n                    this.TS = data.TS;\n                }\n                if (\"Chair\" in data && data.Chair != undefined) {\n                    this.Chair = data.Chair;\n                }\n                if (\"Card\" in data && data.Card != undefined) {\n                    this.Card = data.Card;\n                }\n                if (\"Hand\" in data && data.Hand != undefined) {\n                    this.Hand = data.Hand;\n                }\n            }\n        }\n        get TS() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set TS(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          chair id\n           **/\n        get Chair() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n\n        /** \n          chair id\n           **/\n        set Chair(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          用户出牌的牌值\n           **/\n        get Card() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n\n        /** \n          用户出牌的牌值\n           **/\n        set Card(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n\n        /** \n          手牌信息, 仅自己可见\n           **/\n        get Hand() {\n            return pb_1.Message.getWrapperField(this, Hand, 4) as Hand;\n        }\n\n        /** \n          手牌信息, 仅自己可见\n           **/\n        set Hand(value: Hand) {\n            pb_1.Message.setWrapperField(this, 4, value);\n        }\n        get has_Hand() {\n            return pb_1.Message.getField(this, 4) != null;\n        }\n        static fromObject(data: {\n            TS?: number;\n            Chair?: number;\n            Card?: number;\n            Hand?: ReturnType<typeof Hand.prototype.toObject>;\n        }): DiscardEv {\n            const message = new DiscardEv({});\n            if (data.TS != null) {\n                message.TS = data.TS;\n            }\n            if (data.Chair != null) {\n                message.Chair = data.Chair;\n            }\n            if (data.Card != null) {\n                message.Card = data.Card;\n            }\n            if (data.Hand != null) {\n                message.Hand = Hand.fromObject(data.Hand);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                TS?: number;\n                Chair?: number;\n                Card?: number;\n                Hand?: ReturnType<typeof Hand.prototype.toObject>;\n            } = {};\n            if (this.TS != null) {\n                data.TS = this.TS;\n            }\n            if (this.Chair != null) {\n                data.Chair = this.Chair;\n            }\n            if (this.Card != null) {\n                data.Card = this.Card;\n            }\n            if (this.Hand != null) {\n                data.Hand = this.Hand.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.TS != 0) writer.writeInt64(1, this.TS);\n            if (this.Chair != 0) writer.writeInt32(2, this.Chair);\n            if (this.Card != 0) writer.writeInt32(3, this.Card);\n            if (this.has_Hand) writer.writeMessage(4, this.Hand, () => this.Hand.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiscardEv {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new DiscardEv();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.TS = reader.readInt64();\n                        break;\n                    case 2:\n                        message.Chair = reader.readInt32();\n                        break;\n                    case 3:\n                        message.Card = reader.readInt32();\n                        break;\n                    case 4:\n                        reader.readMessage(\n                            message.Hand,\n                            () => (message.Hand = Hand.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): DiscardEv {\n            return DiscardEv.deserialize(bytes);\n        }\n    }\n\n    /** \n      广播(听牌/听牌出牌)反馈，id: 115\n       **/\n    export class ListenEv extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      TS?: number;\n                      Chair?: number;\n                      Card?: number;\n                      Hand?: Hand;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"TS\" in data && data.TS != undefined) {\n                    this.TS = data.TS;\n                }\n                if (\"Chair\" in data && data.Chair != undefined) {\n                    this.Chair = data.Chair;\n                }\n                if (\"Card\" in data && data.Card != undefined) {\n                    this.Card = data.Card;\n                }\n                if (\"Hand\" in data && data.Hand != undefined) {\n                    this.Hand = data.Hand;\n                }\n            }\n        }\n        get TS() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set TS(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          chair id\n           **/\n        get Chair() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n\n        /** \n          chair id\n           **/\n        set Chair(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          用户出牌的牌值(0表示只是听牌)\n           **/\n        get Card() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n\n        /** \n          用户出牌的牌值(0表示只是听牌)\n           **/\n        set Card(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n\n        /** \n          手牌信息, 仅自己可见\n           **/\n        get Hand() {\n            return pb_1.Message.getWrapperField(this, Hand, 4) as Hand;\n        }\n\n        /** \n          手牌信息, 仅自己可见\n           **/\n        set Hand(value: Hand) {\n            pb_1.Message.setWrapperField(this, 4, value);\n        }\n        get has_Hand() {\n            return pb_1.Message.getField(this, 4) != null;\n        }\n        static fromObject(data: {\n            TS?: number;\n            Chair?: number;\n            Card?: number;\n            Hand?: ReturnType<typeof Hand.prototype.toObject>;\n        }): ListenEv {\n            const message = new ListenEv({});\n            if (data.TS != null) {\n                message.TS = data.TS;\n            }\n            if (data.Chair != null) {\n                message.Chair = data.Chair;\n            }\n            if (data.Card != null) {\n                message.Card = data.Card;\n            }\n            if (data.Hand != null) {\n                message.Hand = Hand.fromObject(data.Hand);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                TS?: number;\n                Chair?: number;\n                Card?: number;\n                Hand?: ReturnType<typeof Hand.prototype.toObject>;\n            } = {};\n            if (this.TS != null) {\n                data.TS = this.TS;\n            }\n            if (this.Chair != null) {\n                data.Chair = this.Chair;\n            }\n            if (this.Card != null) {\n                data.Card = this.Card;\n            }\n            if (this.Hand != null) {\n                data.Hand = this.Hand.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.TS != 0) writer.writeInt64(1, this.TS);\n            if (this.Chair != 0) writer.writeInt32(2, this.Chair);\n            if (this.Card != 0) writer.writeInt32(3, this.Card);\n            if (this.has_Hand) writer.writeMessage(4, this.Hand, () => this.Hand.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListenEv {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new ListenEv();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.TS = reader.readInt64();\n                        break;\n                    case 2:\n                        message.Chair = reader.readInt32();\n                        break;\n                    case 3:\n                        message.Card = reader.readInt32();\n                        break;\n                    case 4:\n                        reader.readMessage(\n                            message.Hand,\n                            () => (message.Hand = Hand.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): ListenEv {\n            return ListenEv.deserialize(bytes);\n        }\n    }\n\n    /** \n      广播(胡牌/胡牌出牌)反馈，id: 116\n       **/\n    export class DeclareEv extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      TS?: number;\n                      Chair?: number;\n                      Card?: number;\n                      Hand?: Hand;\n                      RobChair?: number;\n                      MaxRoundSettle?: boolean;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"TS\" in data && data.TS != undefined) {\n                    this.TS = data.TS;\n                }\n                if (\"Chair\" in data && data.Chair != undefined) {\n                    this.Chair = data.Chair;\n                }\n                if (\"Card\" in data && data.Card != undefined) {\n                    this.Card = data.Card;\n                }\n                if (\"Hand\" in data && data.Hand != undefined) {\n                    this.Hand = data.Hand;\n                }\n                if (\"RobChair\" in data && data.RobChair != undefined) {\n                    this.RobChair = data.RobChair;\n                }\n                if (\"MaxRoundSettle\" in data && data.MaxRoundSettle != undefined) {\n                    this.MaxRoundSettle = data.MaxRoundSettle;\n                }\n            }\n        }\n        get TS() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set TS(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          chair id\n           **/\n        get Chair() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n\n        /** \n          chair id\n           **/\n        set Chair(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          用户出牌的牌值(0表示只是胡牌)\n           **/\n        get Card() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n\n        /** \n          用户出牌的牌值(0表示只是胡牌)\n           **/\n        set Card(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n\n        /** \n          手牌信息, 仅自己可见\n           **/\n        get Hand() {\n            return pb_1.Message.getWrapperField(this, Hand, 4) as Hand;\n        }\n\n        /** \n          手牌信息, 仅自己可见\n           **/\n        set Hand(value: Hand) {\n            pb_1.Message.setWrapperField(this, 4, value);\n        }\n        get has_Hand() {\n            return pb_1.Message.getField(this, 4) != null;\n        }\n\n        /** \n          被抢的 chair id(>-1表示抢胡)\n           **/\n        get RobChair() {\n            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;\n        }\n\n        /** \n          被抢的 chair id(>-1表示抢胡)\n           **/\n        set RobChair(value: number) {\n            pb_1.Message.setField(this, 5, value);\n        }\n\n        /** \n          最大轮次结算，所有玩家平局\n           **/\n        get MaxRoundSettle() {\n            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;\n        }\n\n        /** \n          最大轮次结算，所有玩家平局\n           **/\n        set MaxRoundSettle(value: boolean) {\n            pb_1.Message.setField(this, 6, value);\n        }\n        static fromObject(data: {\n            TS?: number;\n            Chair?: number;\n            Card?: number;\n            Hand?: ReturnType<typeof Hand.prototype.toObject>;\n            RobChair?: number;\n            MaxRoundSettle?: boolean;\n        }): DeclareEv {\n            const message = new DeclareEv({});\n            if (data.TS != null) {\n                message.TS = data.TS;\n            }\n            if (data.Chair != null) {\n                message.Chair = data.Chair;\n            }\n            if (data.Card != null) {\n                message.Card = data.Card;\n            }\n            if (data.Hand != null) {\n                message.Hand = Hand.fromObject(data.Hand);\n            }\n            if (data.RobChair != null) {\n                message.RobChair = data.RobChair;\n            }\n            if (data.MaxRoundSettle != null) {\n                message.MaxRoundSettle = data.MaxRoundSettle;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                TS?: number;\n                Chair?: number;\n                Card?: number;\n                Hand?: ReturnType<typeof Hand.prototype.toObject>;\n                RobChair?: number;\n                MaxRoundSettle?: boolean;\n            } = {};\n            if (this.TS != null) {\n                data.TS = this.TS;\n            }\n            if (this.Chair != null) {\n                data.Chair = this.Chair;\n            }\n            if (this.Card != null) {\n                data.Card = this.Card;\n            }\n            if (this.Hand != null) {\n                data.Hand = this.Hand.toObject();\n            }\n            if (this.RobChair != null) {\n                data.RobChair = this.RobChair;\n            }\n            if (this.MaxRoundSettle != null) {\n                data.MaxRoundSettle = this.MaxRoundSettle;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.TS != 0) writer.writeInt64(1, this.TS);\n            if (this.Chair != 0) writer.writeInt32(2, this.Chair);\n            if (this.Card != 0) writer.writeInt32(3, this.Card);\n            if (this.has_Hand) writer.writeMessage(4, this.Hand, () => this.Hand.serialize(writer));\n            if (this.RobChair != 0) writer.writeInt32(5, this.RobChair);\n            if (this.MaxRoundSettle != false) writer.writeBool(6, this.MaxRoundSettle);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeclareEv {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new DeclareEv();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.TS = reader.readInt64();\n                        break;\n                    case 2:\n                        message.Chair = reader.readInt32();\n                        break;\n                    case 3:\n                        message.Card = reader.readInt32();\n                        break;\n                    case 4:\n                        reader.readMessage(\n                            message.Hand,\n                            () => (message.Hand = Hand.deserialize(reader))\n                        );\n                        break;\n                    case 5:\n                        message.RobChair = reader.readInt32();\n                        break;\n                    case 6:\n                        message.MaxRoundSettle = reader.readBool();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): DeclareEv {\n            return DeclareEv.deserialize(bytes);\n        }\n    }\n\n    /** \n      检查手牌反馈，id:117\n       **/\n    export class CheckHandEv extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      TS?: number;\n                      Chair?: number;\n                      Card?: number;\n                      Hand?: Hand;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"TS\" in data && data.TS != undefined) {\n                    this.TS = data.TS;\n                }\n                if (\"Chair\" in data && data.Chair != undefined) {\n                    this.Chair = data.Chair;\n                }\n                if (\"Card\" in data && data.Card != undefined) {\n                    this.Card = data.Card;\n                }\n                if (\"Hand\" in data && data.Hand != undefined) {\n                    this.Hand = data.Hand;\n                }\n            }\n        }\n        get TS() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set TS(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          chair id\n           **/\n        get Chair() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n\n        /** \n          chair id\n           **/\n        set Chair(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          用户检测的出牌\n           **/\n        get Card() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n\n        /** \n          用户检测的出牌\n           **/\n        set Card(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n\n        /** \n          手牌信息, 仅自己可见\n           **/\n        get Hand() {\n            return pb_1.Message.getWrapperField(this, Hand, 4) as Hand;\n        }\n\n        /** \n          手牌信息, 仅自己可见\n           **/\n        set Hand(value: Hand) {\n            pb_1.Message.setWrapperField(this, 4, value);\n        }\n        get has_Hand() {\n            return pb_1.Message.getField(this, 4) != null;\n        }\n        static fromObject(data: {\n            TS?: number;\n            Chair?: number;\n            Card?: number;\n            Hand?: ReturnType<typeof Hand.prototype.toObject>;\n        }): CheckHandEv {\n            const message = new CheckHandEv({});\n            if (data.TS != null) {\n                message.TS = data.TS;\n            }\n            if (data.Chair != null) {\n                message.Chair = data.Chair;\n            }\n            if (data.Card != null) {\n                message.Card = data.Card;\n            }\n            if (data.Hand != null) {\n                message.Hand = Hand.fromObject(data.Hand);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                TS?: number;\n                Chair?: number;\n                Card?: number;\n                Hand?: ReturnType<typeof Hand.prototype.toObject>;\n            } = {};\n            if (this.TS != null) {\n                data.TS = this.TS;\n            }\n            if (this.Chair != null) {\n                data.Chair = this.Chair;\n            }\n            if (this.Card != null) {\n                data.Card = this.Card;\n            }\n            if (this.Hand != null) {\n                data.Hand = this.Hand.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.TS != 0) writer.writeInt64(1, this.TS);\n            if (this.Chair != 0) writer.writeInt32(2, this.Chair);\n            if (this.Card != 0) writer.writeInt32(3, this.Card);\n            if (this.has_Hand) writer.writeMessage(4, this.Hand, () => this.Hand.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckHandEv {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new CheckHandEv();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.TS = reader.readInt64();\n                        break;\n                    case 2:\n                        message.Chair = reader.readInt32();\n                        break;\n                    case 3:\n                        message.Card = reader.readInt32();\n                        break;\n                    case 4:\n                        reader.readMessage(\n                            message.Hand,\n                            () => (message.Hand = Hand.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): CheckHandEv {\n            return CheckHandEv.deserialize(bytes);\n        }\n    }\n\n    /** \n      广播结算结果通知，id: 118\n       **/\n    export class SettleNt extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      TS?: number;\n                      NextTS?: number;\n                      SettleInfo?: SettleInfo;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"TS\" in data && data.TS != undefined) {\n                    this.TS = data.TS;\n                }\n                if (\"NextTS\" in data && data.NextTS != undefined) {\n                    this.NextTS = data.NextTS;\n                }\n                if (\"SettleInfo\" in data && data.SettleInfo != undefined) {\n                    this.SettleInfo = data.SettleInfo;\n                }\n            }\n        }\n        get TS() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set TS(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          超时时间\n           **/\n        get NextTS() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n\n        /** \n          超时时间\n           **/\n        set NextTS(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          结算信息\n           **/\n        get SettleInfo() {\n            return pb_1.Message.getWrapperField(this, SettleInfo, 3) as SettleInfo;\n        }\n\n        /** \n          结算信息\n           **/\n        set SettleInfo(value: SettleInfo) {\n            pb_1.Message.setWrapperField(this, 3, value);\n        }\n        get has_SettleInfo() {\n            return pb_1.Message.getField(this, 3) != null;\n        }\n        static fromObject(data: {\n            TS?: number;\n            NextTS?: number;\n            SettleInfo?: ReturnType<typeof SettleInfo.prototype.toObject>;\n        }): SettleNt {\n            const message = new SettleNt({});\n            if (data.TS != null) {\n                message.TS = data.TS;\n            }\n            if (data.NextTS != null) {\n                message.NextTS = data.NextTS;\n            }\n            if (data.SettleInfo != null) {\n                message.SettleInfo = SettleInfo.fromObject(data.SettleInfo);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                TS?: number;\n                NextTS?: number;\n                SettleInfo?: ReturnType<typeof SettleInfo.prototype.toObject>;\n            } = {};\n            if (this.TS != null) {\n                data.TS = this.TS;\n            }\n            if (this.NextTS != null) {\n                data.NextTS = this.NextTS;\n            }\n            if (this.SettleInfo != null) {\n                data.SettleInfo = this.SettleInfo.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.TS != 0) writer.writeInt64(1, this.TS);\n            if (this.NextTS != 0) writer.writeInt64(2, this.NextTS);\n            if (this.has_SettleInfo)\n                writer.writeMessage(3, this.SettleInfo, () => this.SettleInfo.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SettleNt {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new SettleNt();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.TS = reader.readInt64();\n                        break;\n                    case 2:\n                        message.NextTS = reader.readInt64();\n                        break;\n                    case 3:\n                        reader.readMessage(\n                            message.SettleInfo,\n                            () => (message.SettleInfo = SettleInfo.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): SettleNt {\n            return SettleNt.deserialize(bytes);\n        }\n    }\n\n    /** \n      广播玩家托管，id:119\n       **/\n    export class TrustNt extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      TS?: number;\n                      Chair?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"TS\" in data && data.TS != undefined) {\n                    this.TS = data.TS;\n                }\n                if (\"Chair\" in data && data.Chair != undefined) {\n                    this.Chair = data.Chair;\n                }\n            }\n        }\n        get TS() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set TS(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          chair id\n           **/\n        get Chair() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n\n        /** \n          chair id\n           **/\n        set Chair(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: { TS?: number; Chair?: number }): TrustNt {\n            const message = new TrustNt({});\n            if (data.TS != null) {\n                message.TS = data.TS;\n            }\n            if (data.Chair != null) {\n                message.Chair = data.Chair;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                TS?: number;\n                Chair?: number;\n            } = {};\n            if (this.TS != null) {\n                data.TS = this.TS;\n            }\n            if (this.Chair != null) {\n                data.Chair = this.Chair;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.TS != 0) writer.writeInt64(1, this.TS);\n            if (this.Chair != 0) writer.writeInt32(2, this.Chair);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TrustNt {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new TrustNt();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.TS = reader.readInt64();\n                        break;\n                    case 2:\n                        message.Chair = reader.readInt32();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): TrustNt {\n            return TrustNt.deserialize(bytes);\n        }\n    }\n\n    /** \n      广播取消托管，id:120\n       **/\n    export class CancelTrustEv extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      TS?: number;\n                      Chair?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"TS\" in data && data.TS != undefined) {\n                    this.TS = data.TS;\n                }\n                if (\"Chair\" in data && data.Chair != undefined) {\n                    this.Chair = data.Chair;\n                }\n            }\n        }\n        get TS() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set TS(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          chair id\n           **/\n        get Chair() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n\n        /** \n          chair id\n           **/\n        set Chair(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: { TS?: number; Chair?: number }): CancelTrustEv {\n            const message = new CancelTrustEv({});\n            if (data.TS != null) {\n                message.TS = data.TS;\n            }\n            if (data.Chair != null) {\n                message.Chair = data.Chair;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                TS?: number;\n                Chair?: number;\n            } = {};\n            if (this.TS != null) {\n                data.TS = this.TS;\n            }\n            if (this.Chair != null) {\n                data.Chair = this.Chair;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.TS != 0) writer.writeInt64(1, this.TS);\n            if (this.Chair != 0) writer.writeInt32(2, this.Chair);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CancelTrustEv {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new CancelTrustEv();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.TS = reader.readInt64();\n                        break;\n                    case 2:\n                        message.Chair = reader.readInt32();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): CancelTrustEv {\n            return CancelTrustEv.deserialize(bytes);\n        }\n    }\n\n    /** \n      理牌反馈, id: 121\n       **/\n    export class GroupEv extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      TS?: number;\n                      Hand?: Hand;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"TS\" in data && data.TS != undefined) {\n                    this.TS = data.TS;\n                }\n                if (\"Hand\" in data && data.Hand != undefined) {\n                    this.Hand = data.Hand;\n                }\n            }\n        }\n        get TS() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set TS(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          手牌\n           **/\n        get Hand() {\n            return pb_1.Message.getWrapperField(this, Hand, 2) as Hand;\n        }\n\n        /** \n          手牌\n           **/\n        set Hand(value: Hand) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_Hand() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            TS?: number;\n            Hand?: ReturnType<typeof Hand.prototype.toObject>;\n        }): GroupEv {\n            const message = new GroupEv({});\n            if (data.TS != null) {\n                message.TS = data.TS;\n            }\n            if (data.Hand != null) {\n                message.Hand = Hand.fromObject(data.Hand);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                TS?: number;\n                Hand?: ReturnType<typeof Hand.prototype.toObject>;\n            } = {};\n            if (this.TS != null) {\n                data.TS = this.TS;\n            }\n            if (this.Hand != null) {\n                data.Hand = this.Hand.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.TS != 0) writer.writeInt64(1, this.TS);\n            if (this.has_Hand) writer.writeMessage(2, this.Hand, () => this.Hand.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupEv {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new GroupEv();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.TS = reader.readInt64();\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.Hand,\n                            () => (message.Hand = Hand.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): GroupEv {\n            return GroupEv.deserialize(bytes);\n        }\n    }\n}\n","import CachetaSkin from \"../conf/skin/CachetaSkin\";\r\nimport CachetaHandPoker from \"./CachetaHandPoker\";\r\nimport { CachetaProto } from \"../service/ws/proto/CachetaProto\";\r\nimport UserAvatarMgr from \"../../../../plaza/common/Script/Component/UserAvatar/UserAvatarMgr\";\r\nimport CachetaUserMgr from \"../manager/CachetaUserMgr\";\r\nimport { CurrencyUtil } from \"../../../../plaza/common/Script/utils/CurrencyUtil\";\r\nimport UserAvatarModel from \"../../../../plaza/common/Script/Component/UserAvatar/UserAvatarModel\";\r\nimport UserAvatar from \"../../../../plaza/common/Script/Component/UserAvatar/UserAvatar\";\r\nimport CachetaLogicMgr from \"../manager/CachetaLogicMgr\";\r\nimport CachetaPoker from \"./CachetaPoker\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class CachetaSettlePlayer extends cc.Component {\r\n    private bg: cc.Node;\r\n    private avatar: cc.Node;\r\n    private iconMe: cc.Node;\r\n    private nickname: cc.Label;\r\n    private cards: cc.Node;\r\n    private amount: cc.Label;\r\n\r\n    protected onLoad(): void {\r\n        this.avatar = cc.find(\"head/mask/avatar\", this.node);\r\n        // this.iconMe = cc.find(\"iconMe\", this.node);\r\n        this.nickname = cc.find(\"nickname\", this.node).getComponent(cc.Label);\r\n        this.cards = cc.find(\"cards\", this.node);\r\n        this.amount = cc.find(\"amount\", this.node).getComponent(cc.Label);\r\n    }\r\n\r\n    public init(settle: CachetaProto.Settle): void {\r\n        if (settle.UserID == CommonDepend.UserManager.user_id) {\r\n            this.setAvatar(CommonDepend.UserManager.avatar, CommonDepend.UserManager.gender);\r\n        } else {\r\n            this.setAvatar(settle.Avatar, settle.Gender);\r\n        }\r\n        // this.setIconMe(settle.UserID);\r\n        this.setNickname(settle.UserName, settle.UserID);\r\n        this.setCards(settle.Hand);\r\n        this.setAmount(settle.Win);\r\n    }\r\n\r\n    private setAvatar(avatar: number, gender: UserAvatarModel.GENDER): void {\r\n        UserAvatarMgr.loadUserAvatarPrefab(this.avatar, avatar, gender).then((avatar: cc.Node) => {\r\n            if (cc.isValid(avatar)) {\r\n                avatar.position = cc.v3(0, 0);\r\n                avatar.scaleX = (this.avatar.width + 15) / avatar.width;\r\n                avatar.scaleY = (this.avatar.height + 15) / avatar.height;\r\n            }\r\n        });\r\n    }\r\n\r\n    private setIconMe(userId: number): void {\r\n        this.iconMe.active = CachetaUserMgr.isLocalUser(userId);\r\n    }\r\n\r\n    private setNickname(nickname: string, userId: number): void {\r\n        this.nickname.string = nickname.limtLength(10);\r\n    }\r\n\r\n    private setCards(handCard: CachetaProto.Hand): void {\r\n        let pokerPrefab: cc.Prefab = UIDepend.PrefabManager.getPrefabBundle(\r\n            CachetaSkin.Priority.CachetaPoker\r\n        );\r\n        for (let i = 0; i < handCard.GroupS.length; i++) {\r\n            let cardGroup = handCard.GroupS[i];\r\n            for (let j = 0; j < cardGroup.CardS.length; j++) {\r\n                let cardValue = cardGroup.CardS[j];\r\n                let isWildCard = CachetaLogicMgr.isWildCard(cardValue);\r\n                let poker = cc.instantiate(pokerPrefab).getComponent(CachetaPoker);\r\n\r\n                if (i >= this.cards.childrenCount) break;\r\n                poker.node.parent = this.cards.children[i];\r\n                poker.node.setPosition(cc.v3(0, 0, 0));\r\n                poker.show();\r\n                poker.initCard(cardValue, isWildCard);\r\n            }\r\n        }\r\n    }\r\n\r\n    private addition = 0;\r\n\r\n    private setAmount(amount: number): void {\r\n        let base = cc.sys.localStorage.getItem(\"Base\");\r\n        if (amount < 0) {\r\n            if (base == 10) {\r\n                amount = -500 * 10;\r\n            } else if (base == 50) {\r\n                amount = -500 * 50;\r\n            }\r\n        } else {\r\n            if (base == 10) {\r\n                amount = 1500 * 10;\r\n            } else if (base == 50) {\r\n                amount = 1500 * 50;\r\n            }\r\n        }\r\n\r\n        let sign = amount >= 0 ? \"+\" : \"-\";\r\n        let color =\r\n            amount >= 0 ? new cc.Color().fromHEX(\"#fff500\") : new cc.Color().fromHEX(\"#35d7d1\");\r\n        this.amount.node.color = color;\r\n        if (amount > 0) {\r\n            let vip = cc.sys.localStorage.getItem(\"vip\");\r\n            if (vip != null) {\r\n                if (vip == \"1\") {\r\n                    this.addition = 0.01;\r\n                } else if (vip == \"2\") {\r\n                    this.addition = 0.03;\r\n                } else if (vip == \"3\") {\r\n                    this.addition = 0.05;\r\n                } else if (vip == \"4\") {\r\n                    this.addition = 0.08;\r\n                } else if (vip == \"5\") {\r\n                    this.addition = 0.1;\r\n                }\r\n            } else {\r\n                this.addition = 0;\r\n            }\r\n        }\r\n        let sum = this.addition * amount + amount;\r\n        this.amount.string = sign + Math.abs(sum);\r\n\r\n        if (amount >= 0) {\r\n            this.playWin();\r\n        } else {\r\n            this.playLose();\r\n        }\r\n    }\r\n\r\n    private playWin(): void {\r\n        let userAvatar = this.avatar.getComponentInChildren(UserAvatar);\r\n        if (userAvatar) {\r\n            userAvatar.playWinAnimation();\r\n        }\r\n    }\r\n\r\n    private playLose(): void {\r\n        let userAvatar = this.avatar.getComponentInChildren(UserAvatar);\r\n        if (userAvatar) {\r\n            userAvatar.playLoseAnimation();\r\n        }\r\n    }\r\n}\r\n","import PopUpViewBase from \"../../../../../main/core/popUpViewUtils/PopUpViewBase\";\r\nimport CachetaSkin from \"../conf/skin/CachetaSkin\";\r\nimport CachetaSettlePlayer from \"./CachetaSettlePlayer\";\r\nimport CachetaLanguage from \"../conf/lang/CachetaLanguage\";\r\nimport { CachetaProto } from \"../service/ws/proto/CachetaProto\";\r\nimport CachetaLogicMgr from \"../manager/CachetaLogicMgr\";\r\nimport CachetaSocketMgr from \"../service/ws/CachetaSocketMgr\";\r\nimport { Tools } from \"../../../../../main/core/utils/Tools\";\r\nimport Listener from \"../../../../../main/core/utils/Listener\";\r\nimport { CachetaEventName } from \"../define/CachetaEventName\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class CachetaSettle extends PopUpViewBase {\r\n    private btnClose: cc.Node = null;\r\n    private btnBack: cc.Node = null;\r\n    private btnChangeTable: cc.Node = null;\r\n    private playerList: cc.Node = null;\r\n    private tips: cc.RichText = null;\r\n    private leftTime: number = 0;\r\n\r\n    protected onLoad(): void {\r\n        this.btnClose = cc.find(\"frame/btnClose\", this.node);\r\n        this.btnClose.on(\"click\", this.onClickClose, this);\r\n\r\n        this.btnBack = cc.find(\"frame/btnBack\", this.node);\r\n        this.btnBack.on(\"click\", this.onClickBack, this);\r\n\r\n        this.btnChangeTable = cc.find(\"frame/btnChangeTable\", this.node);\r\n        this.btnChangeTable.on(\"click\", this.onClickChangeTable, this);\r\n\r\n        this.playerList = cc\r\n            .find(\"frame/context/playerList\", this.node)\r\n            .getComponent(cc.ScrollView).content;\r\n        this.tips = cc.find(\"frame/tips\", this.node).getComponent(cc.RichText);\r\n\r\n        Listener.listen(CachetaEventName.START_PREPARE, this.startUpdateText, this);\r\n    }\r\n\r\n    protected onDestroy(): void {\r\n        Listener.listenOff(CachetaEventName.START_PREPARE, this.startUpdateText, this);\r\n    }\r\n\r\n    public init(settles: CachetaProto.Settle[], closeTime: number): void {\r\n        for (let i = 0; i < settles.length; i++) {\r\n            let prefab: cc.Prefab = UIDepend.PrefabManager.getPrefabBundle(\r\n                CachetaSkin.Priority.CachetaSettlePlayer\r\n            );\r\n            let node = cc.instantiate(prefab);\r\n            node.parent = this.playerList;\r\n            let player = node.getComponent(CachetaSettlePlayer);\r\n            player.init(settles[i]);\r\n        }\r\n    }\r\n\r\n    private startUpdateText(closeTime) {\r\n        this.leftTime = Math.floor(closeTime) + 1;\r\n        this.unschedule(this.updateText);\r\n        this.schedule(this.updateText, 1);\r\n        this.updateText();\r\n    }\r\n\r\n    private updateText(): void {\r\n        this.leftTime -= 1;\r\n        if (this.leftTime < 1) {\r\n            this.close();\r\n            return;\r\n        }\r\n\r\n        this.tips.string = CachetaLanguage.SETTLE_NEXT.format(this.leftTime);\r\n    }\r\n\r\n    private onClickClose(event: cc.Event): void {\r\n        Tools.clickManager(event.target);\r\n\r\n        this.close();\r\n    }\r\n\r\n    private onClickBack(event: cc.Event): void {\r\n        Tools.clickManager(event.target);\r\n\r\n        CachetaLogicMgr.exitGame();\r\n        this.destroy();\r\n    }\r\n\r\n    private onClickChangeTable(event: cc.Event): void {\r\n        Tools.clickManager(event.target);\r\n\r\n        CachetaSocketMgr.changeTableReq();\r\n        this.close();\r\n    }\r\n}\r\n","export const CachetaSkinWorldCup = {\n    launchScene: \"Cacheta\",\n\n    priority: {\n        CachetaAction: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/CachetaAction\",\n            type: cc.Prefab,\n        },\n        CachetaDeck: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/CachetaDeck\",\n            type: cc.Prefab,\n        },\n        CachetaGroupBar: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/CachetaGroupBar\",\n            type: cc.Prefab,\n        },\n        CachetaHandPoker: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/CachetaHandPoker\",\n            type: cc.Prefab,\n        },\n        CachetaMenu: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/CachetaMenu\",\n            type: cc.Prefab,\n        },\n        CachetaOperation: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/CachetaOperation\",\n            type: cc.Prefab,\n        },\n        CachetaPlayer: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/CachetaPlayer\",\n            type: cc.Prefab,\n        },\n        CachetaPlayerSeat: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/CachetaPlayerSeat\",\n            type: cc.Prefab,\n        },\n        CachetaPoker: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/CachetaPoker\",\n            type: cc.Prefab,\n        },\n        CachetaSettlePlayer: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/CachetaSettlePlayer\",\n            type: cc.Prefab,\n        },\n        CachetaTable: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/CachetaTable\",\n            type: cc.Prefab,\n        },\n        CachetaToast: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/CachetaToast\",\n            type: cc.Prefab,\n        },\n        // player\n        tag_bg_won: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/texture/player/tag_bg_won\",\n            type: cc.SpriteFrame,\n        },\n        tag_bg_lost: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/texture/player/tag_bg_lost\",\n            type: cc.SpriteFrame,\n        },\n        group_1: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/texture/poker/tk_ca_img_set_bottom\",\n            type: cc.SpriteFrame,\n        },\n        group_2: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/texture/poker/tk_ca_img_set_bottom_2\",\n            type: cc.SpriteFrame,\n        },\n        btnListenNormal: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/texture/table/tk_ca_img_draw\",\n            type: cc.SpriteFrame,\n        },\n        btnListenGray: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/texture/table/tk_ca_img_draw_1\",\n            type: cc.SpriteFrame,\n        },\n        btnDeclareNormal: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/texture/table/tk_ca_img_hu_card\",\n            type: cc.SpriteFrame,\n        },\n        btnDeclareGray: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/texture/table/tk_ca_img_hu_card_1\",\n            type: cc.SpriteFrame,\n        },\n    },\n\n    unpriority: {\n        CachetaDeclare: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/CachetaDeclare\",\n            type: cc.Prefab,\n        },\n        CachetaSettle: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/CachetaSettle\",\n            type: cc.Prefab,\n        },\n\n        CachetaFire: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/animation/player/tk_cacheta_fire\",\n            type: sp.SkeletonData,\n        },\n\n        CachetaExplode: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/animation/player/tk_cacheta_explode\",\n            type: sp.SkeletonData,\n        },\n    },\n\n    loadOnDemand: {\n        bgm: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/audio/bgm\",\n            type: cc.AudioClip,\n        },\n        card_click: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/audio/card_click\",\n            type: cc.AudioClip,\n        },\n        card_deal: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/audio/card_deal\",\n            type: cc.AudioClip,\n        },\n        card_flip: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/audio/card_flip\",\n            type: cc.AudioClip,\n        },\n        card_in: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/audio/card_in\",\n            type: cc.AudioClip,\n        },\n        card_out: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/audio/card_out\",\n            type: cc.AudioClip,\n        },\n        card_sort: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/audio/card_sort\",\n            type: cc.AudioClip,\n        },\n        click_btn: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/audio/click_btn\",\n            type: cc.AudioClip,\n        },\n        countdown: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/audio/countdown\",\n            type: cc.AudioClip,\n        },\n        operation: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/audio/operation\",\n            type: cc.AudioClip,\n        },\n        lose: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/audio/lose\",\n            type: cc.AudioClip,\n        },\n        win: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/audio/win\",\n            type: cc.AudioClip,\n        },\n        explode: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/audio/explode\",\n            type: cc.AudioClip,\n        },\n        declare: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/audio/declare\",\n            type: cc.AudioClip,\n        },\n    },\n};\n","import BaseBundleSkin from \"../../../../../../main/core/bd/bd_skin/BaseBundleSkin\";\nimport { BundleNames } from \"../../../../../../main/core/conf/BundleNames\";\nimport { SkinType } from \"../../../../../../main/core/conf/SkinType\";\nimport { CachetaSkinWorldCup } from \"./world_cup/CachetaSkinWorldCup\";\n\ntype TBundleInfo = typeof CachetaSkinWorldCup;\n\nclass CachetaSkin extends BaseBundleSkin<TBundleInfo> {\n    protected skin: BdSkin.TSkinInfo = {\n        [SkinType.WORLD_CUP]: CachetaSkinWorldCup,\n        [SkinType.LIGHT]: CachetaSkinWorldCup,\n    };\n\n    constructor() {\n        super(BundleNames.CACHETA);\n    }\n}\n\nexport default new CachetaSkin();\n","import { GameType } from \"../../../../../../main/core/conf/GameType\";\nimport BaseSocketMgr from \"../../../../../plaza/common/Script/service/ws/BaseSocketMgr\";\nimport { CachetaProto } from \"./proto/CachetaProto\";\nimport { CachetaProtoMap } from \"./proto/CachetaProtoMap\";\nimport { urlParser } from \"../../../../../../main/core/utils/NpmExport\";\n\nclass CachetaSocketMgr extends BaseSocketMgr<CachetaProto.MessageID> {\n    protected gameId: number = GameType.CACHETA; //ws://localhost:5200\n    protected host: string[] = this.isShf ? [this.shfHost || \"wss://cachetax.tansuotv.net\"] : null;\n    protected isEncrypt: boolean = true;\n    protected cryptId: number = 8000;\n    public get isShf(): boolean {\n        let shf = urlParser(window.location.href, true)?.query[`shf_${this.gameId}`];\n        // return shf ? true : false;\n        return true;\n    }\n\n    private get shfHost(): string {\n        let shf = urlParser(window.location.href, true)?.query[`shf_${this.gameId}`];\n        return \"wss://cachetax.tansuotv.net\";\n    }\n\n    public getMessageCtor<T extends CachetaProto.MessageID>(msgType: T) {\n        return CachetaProtoMap[msgType];\n    }\n\n    public request<T extends CachetaProto.MessageID>(\n        msgType: T,\n        data: ProtoObject<typeof CachetaProtoMap[T]>\n    ) {\n        const ctor = this.getMessageCtor(msgType);\n        this.send(msgType, ctor.fromObject(data));\n    }\n\n    public getConnectType() {\n        if (this.reconnect) {\n            return CachetaProto.ConnectType.CONNECT_NORMAL;\n        }\n        return CachetaProto.ConnectType.CONNECT_RE;\n    }\n\n    protected onAuthReq(): void {\n        // let userId = JSON.parse(cc.sys.localStorage.getItem(\"userID\"));\n        let data = {\n            TS: CommonDepend.CommonSocketModel.getCurrentTimestamp(),\n            // UserID: userId,\n            UserID: CommonDepend.UserManager.user_id,\n            Token: CommonDepend.UserManager.token,\n            RoomKind: CommonDepend.NewGameInfo.current.room,\n            Version: CommonDepend.CommonSocketModel.getVersion(),\n            CryptID: this.cryptId,\n            BrandCode: CommonDepend.CommonSocketModel.getBrandCode(),\n            game_id: this.gameId,\n            connect_type: this.getConnectType(),\n        };\n        this.request(CachetaProto.MessageID.AUTH_REQ, data);\n    }\n\n    /**\n     * 离开房间\n     * @param chair\n     */\n    public userOutReq(chair: number): void {\n        this.request(CachetaProto.MessageID.USER_OUT_REQ, {\n            TS: new Date().getTime(),\n            Chair: chair,\n        });\n    }\n\n    /**\n     * 同步用户信息\n     */\n    public syncUserReq(): void {\n        this.request(CachetaProto.MessageID.SYNC_USER_REQ, {\n            TS: new Date().getTime(),\n        });\n    }\n\n    /**\n     * 换桌\n     */\n    public changeTableReq(): void {\n        this.request(CachetaProto.MessageID.CHANGE_TABLE_REQ, {\n            TS: new Date().getTime(),\n        });\n    }\n\n    /**\n     * 摸牌\n     */\n    public touchReq(open: boolean): void {\n        this.request(CachetaProto.MessageID.TOUCH_REQ, {\n            TS: new Date().getTime(),\n            Open: open,\n        });\n    }\n\n    /**\n     * 出牌\n     * @param card 所出牌的牌值\n     * @param index 所出的牌在手牌中的索引，所有组按顺序组成一组的索引\n     */\n    public discardReq(card: number, index: number): void {\n        this.request(CachetaProto.MessageID.DISCARD_REQ, {\n            TS: new Date().getTime(),\n            Card: card,\n            Index: index,\n        });\n    }\n\n    /**\n     * 听牌/听牌出牌\n     */\n    public listenReq(card: number = 0, index: number = -1): void {\n        this.request(CachetaProto.MessageID.LISTEN_REQ, {\n            TS: new Date().getTime(),\n            Card: card,\n            Index: index,\n        });\n    }\n\n    /**\n     * 胡牌/胡牌出牌\n     */\n    public declareReq(card: number = 0, index: number = -1): void {\n        this.request(CachetaProto.MessageID.DECLARE_REQ, {\n            TS: new Date().getTime(),\n            Card: card,\n            Index: index,\n        });\n    }\n\n    /**\n     * 检查手牌\n     */\n    public checkHandReq(card: number, index: number): void {\n        this.request(CachetaProto.MessageID.CHECK_HAND_REQ, {\n            TS: new Date().getTime(),\n            Card: card,\n            Index: index,\n        });\n    }\n\n    /**\n     * 取消托管\n     */\n    public cancelTrustReq(): void {\n        this.request(CachetaProto.MessageID.CANCEL_TRUST_REQ, {\n            TS: new Date().getTime(),\n        });\n    }\n\n    /**\n     * 理牌\n     */\n    public groupReq(hand: CachetaProto.Hand): void {\n        this.request(CachetaProto.MessageID.GROUP_REQ, {\n            TS: new Date().getTime(),\n            Hand: hand,\n        });\n    }\n}\n\nexport default new CachetaSocketMgr();\n","import { CurrencyUtil } from \"../../../../plaza/common/Script/utils/CurrencyUtil\";\nimport CommonVersusLanguage from \"../../../../plaza/common_versus/Script/conf/lang/CommonVersusLanguage\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class CachetaTable extends cc.Component {\n    private baseScore: cc.Label = null;\n\n    protected onLoad(): void {\n        this.baseScore = cc.find(\"baseScore\", this.node).getComponent(cc.Label);\n        // this.baseScore.node.active = false;\n\n        this.reset();\n    }\n\n    reset() {}\n\n    /**\n     * 设置底分\n     * @param value\n     */\n    public setBaseScore(value: number): void {\n        this.baseScore.node.active = true;\n        this.baseScore.string = CommonVersusLanguage.baseSocre.format(value);\n    }\n}\n","const { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class CachetaToast extends cc.Component {\n    private system: cc.Node = null;\n    private systemBg: cc.Sprite = null;\n    private systemText: cc.RichText = null;\n\n    private tipsNode: cc.Node = null;\n    private tipsBg: cc.Sprite = null;\n    private tipsText: cc.RichText = null;\n    private tipsMargin: number = 0;\n    private strText: string = \"\";\n    private leftTime: number = 0;\n\n    protected onLoad(): void {\n        this.system = cc.find(\"system\", this.node);\n        // this.systemBg = cc.find(\"bg\", this.system).getComponent(cc.Sprite);\n        this.systemText = cc.find(\"text\", this.system).getComponent(cc.RichText);\n\n        this.reset();\n    }\n\n    public reset(): void {\n        this.hide();\n    }\n\n    public hide(): void {\n        this.node.active = false;\n        this.system.active = false;\n    }\n\n    /**\n     * 系统提示\n     * @param text\n     * @param duration\n     * @param posY\n     */\n    public setSystemTips(text: string, duration: number = -1, posY: number = 0): void {\n        this.tipsNode = this.system;\n        // this.tipsBg = this.systemBg;\n        this.tipsText = this.systemText;\n        this.tipsMargin = 200;\n        this.setText(text, duration, posY);\n    }\n\n    private setText(text: string, duration: number = -1, posY: number): void {\n        this.node.active = true;\n        this.system.active = false;\n\n        this.tipsNode.active = true;\n        this.tipsNode.y = posY;\n        this.tipsNode.opacity = 0;\n        this.strText = text;\n        this.leftTime = duration == -1 ? 65535 : Math.floor(duration) + 1;\n        this.unschedule(this.updateText);\n        this.schedule(this.updateText, 1);\n        this.updateText();\n        this.scheduleOnce(() => {\n            // let textWidth = this.tipsText.node.width;\n            // let width = textWidth > 400 ? textWidth : 400;\n            // this.tipsBg.node.width = width + this.tipsMargin;\n            this.tipsNode.opacity = 255;\n        });\n    }\n\n    private updateText(): void {\n        this.leftTime -= 1;\n        if (this.leftTime < 1) {\n            this.hide();\n            return;\n        }\n\n        if (this.tipsText) {\n            this.tipsText.string = this.strText.format(this.leftTime.toString());\n        }\n    }\n}\n","import CachetaSkin from \"../conf/skin/CachetaSkin\";\r\nimport CachetaTable from \"../ui/CachetaTable\";\r\nimport CachetaMenu from \"../ui/CachetaMenu\";\r\nimport CachetaPlayerSeat from \"../ui/CachetaPlayerSeat\";\r\nimport CachetaDeck from \"../ui/CachetaDeck\";\r\nimport CachetaHandPoker from \"../ui/CachetaHandPoker\";\r\nimport CachetaOperation from \"../ui/CachetaOperation\";\r\nimport CachetaAction from \"../ui/CachetaAction\";\r\nimport CachetaToast from \"../ui/CachetaToast\";\r\nimport { CachetaProto } from \"../service/ws/proto/CachetaProto\";\r\nimport CachetaLanguage from \"../conf/lang/CachetaLanguage\";\r\nimport CachetaLogicMgr from \"./CachetaLogicMgr\";\r\nimport CachetaUserMgr from \"./CachetaUserMgr\";\r\nimport CachetaAudioMgr from \"./CachetaAudioMgr\";\r\nimport CachetaSocketMgr from \"../service/ws/CachetaSocketMgr\";\r\nimport UIMgr from \"../../../../plaza/common/Script/Component/base/UIMgr\";\r\nimport { CommonProto } from \"../../../../plaza/common/Script/service/ws/proto/CommonProto\";\r\nimport CommonSkin from \"../../../../plaza/common/Script/conf/skin/CommonSkin\";\r\nimport { GameType } from \"../../../../../main/core/conf/GameType\";\r\nimport StartAndStopAnim from \"../../../../plaza/common/Script/Component/StartAndStopAnim\";\r\nimport CachetaDeclare from \"../ui/CachetaDeclare\";\r\nimport CommonBroadCastUtil from \"../../../../plaza/common/Script/broad_cast/CommonBroadCastUtil\";\r\nimport { CachetaConst } from \"../define/CachetaConst\";\r\nimport Listener from \"../../../../../main/core/utils/Listener\";\r\nimport { CachetaEventName } from \"../define/CachetaEventName\";\r\nimport CommonVersusLanguage from \"../../../../plaza/common_versus/Script/conf/lang/CommonVersusLanguage\";\r\nimport GameReplayControl from \"../../../../plaza/common/Script/game/replay/GameReplayControl\";\r\n\r\nclass CachetaUIMgr {\r\n    private root: cc.Node;\r\n    private table: CachetaTable;\r\n    private menu: CachetaMenu;\r\n    private playerSeat: CachetaPlayerSeat;\r\n    private deck: CachetaDeck;\r\n    public handPoker: CachetaHandPoker;\r\n    private operation: CachetaOperation;\r\n    private action: CachetaAction;\r\n    private toast: CachetaToast;\r\n    private startAndEndController: StartAndStopAnim = null;\r\n    private isRobSettle: boolean = false;\r\n    private curTurnHandStatus: number = 0;\r\n    public canDecCardV: number = 0;\r\n    private maxRoundSettle: boolean = false;\r\n\r\n    public init(node: cc.Node): void {\r\n        this.root = node;\r\n\r\n        this.initTable();\r\n        this.initMenu();\r\n        this.initPlayerSeat();\r\n        this.initDeck();\r\n        this.initHandPoker();\r\n        this.initOperation();\r\n        this.initAction();\r\n        this.initToast();\r\n        this.initStartEndAnim();\r\n\r\n        let pos = cc.v3(\r\n            cc.winSize.width / 2,\r\n            cc.winSize.height / 2 + CachetaConst.broadCastOffsetY\r\n        );\r\n        CommonBroadCastUtil.setPostion(pos);\r\n    }\r\n\r\n    private reset(): void {\r\n        this.isRobSettle = false;\r\n        // this.maxRoundSettle = false;\r\n        this.curTurnHandStatus = 0;\r\n        this.root.stopAllActions();\r\n\r\n        this.table.reset();\r\n        this.playerSeat.reset();\r\n        this.deck.reset();\r\n        this.handPoker.reset();\r\n        this.action.reset();\r\n        this.operation.reset();\r\n        this.toast.reset();\r\n\r\n        this.removeSettle();\r\n        this.removeDialog();\r\n    }\r\n\r\n    private initTable(): void {\r\n        let prefab = UIDepend.PrefabManager.getPrefabBundle(CachetaSkin.Priority.CachetaTable);\r\n        let node = cc.instantiate(prefab);\r\n        node.parent = this.root;\r\n\r\n        this.table = node.getComponent(CachetaTable);\r\n    }\r\n\r\n    private initMenu(): void {\r\n        let prefab = UIDepend.PrefabManager.getPrefabBundle(CachetaSkin.Priority.CachetaMenu);\r\n        let node = cc.instantiate(prefab);\r\n        node.parent = this.root;\r\n\r\n        this.menu = node.getComponent(CachetaMenu);\r\n    }\r\n\r\n    private initPlayerSeat(): void {\r\n        let prefab = UIDepend.PrefabManager.getPrefabBundle(CachetaSkin.Priority.CachetaPlayerSeat);\r\n        let node = cc.instantiate(prefab);\r\n        node.parent = this.root;\r\n\r\n        this.playerSeat = node.getComponent(CachetaPlayerSeat);\r\n    }\r\n\r\n    private initDeck(): void {\r\n        let prefab = UIDepend.PrefabManager.getPrefabBundle(CachetaSkin.Priority.CachetaDeck);\r\n        let node = cc.instantiate(prefab);\r\n        node.parent = this.root;\r\n\r\n        this.deck = node.getComponent(CachetaDeck);\r\n    }\r\n\r\n    private initHandPoker(): void {\r\n        let prefab = UIDepend.PrefabManager.getPrefabBundle(CachetaSkin.Priority.CachetaHandPoker);\r\n        let node = cc.instantiate(prefab);\r\n        node.parent = this.root;\r\n\r\n        this.handPoker = node.getComponent(CachetaHandPoker);\r\n    }\r\n\r\n    private initOperation(): void {\r\n        let prefab = UIDepend.PrefabManager.getPrefabBundle(CachetaSkin.Priority.CachetaOperation);\r\n        let node = cc.instantiate(prefab);\r\n        node.parent = this.root;\r\n\r\n        this.operation = node.getComponent(CachetaOperation);\r\n    }\r\n\r\n    private initAction(): void {\r\n        let prefab = UIDepend.PrefabManager.getPrefabBundle(CachetaSkin.Priority.CachetaAction);\r\n        let node = cc.instantiate(prefab);\r\n        node.parent = this.root;\r\n\r\n        this.action = node.getComponent(CachetaAction);\r\n    }\r\n\r\n    private initToast(): void {\r\n        let prefab = UIDepend.PrefabManager.getPrefabBundle(CachetaSkin.Priority.CachetaToast);\r\n        let node = cc.instantiate(prefab);\r\n        node.parent = this.root;\r\n\r\n        this.toast = node.getComponent(CachetaToast);\r\n        node.setPosition(cc.v3(0, -50, 0));\r\n    }\r\n\r\n    private initStartEndAnim(): void {\r\n        UIDepend.PrefabManager.loadPrefabInsBundle(\r\n            CommonSkin.Priority.StartAndStopAnim,\r\n            (prefab) => {\r\n                let startAndEndFrame = cc.instantiate(prefab);\r\n                if (cc.isValid(this.root)) {\r\n                    this.root.addChild(startAndEndFrame);\r\n                }\r\n                if (startAndEndFrame.getComponent(StartAndStopAnim)) {\r\n                    this.startAndEndController = startAndEndFrame.getComponent(StartAndStopAnim);\r\n                    this.startAndEndController.init();\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    public createSettle(settles: CachetaProto.Settle[], closeTime: number = 0): void {\r\n        UIMgr.showUI(CachetaSkin.UnPriority.CachetaSettle, {\r\n            args: [settles, closeTime],\r\n            zIndex: UIMgr.UILayer.ALERT,\r\n        });\r\n    }\r\n\r\n    public removeSettle(): void {\r\n        UIMgr.close(CachetaSkin.UnPriority.CachetaSettle);\r\n    }\r\n\r\n    public createRule(): void {\r\n        UIMgr.showUI(CommonSkin.LoadOnDemand.Rules[GameType.CACHETA], {\r\n            args: [GameType.CACHETA],\r\n            zIndex: UIMgr.UILayer.ALERT,\r\n        });\r\n    }\r\n\r\n    public removeRule(): void {\r\n        UIMgr.close(CommonSkin.LoadOnDemand.Rule);\r\n    }\r\n\r\n    public createSetting(): void {\r\n        UIMgr.showUI(CommonSkin.LoadOnDemand.CommonUserSetting, {\r\n            zIndex: UIMgr.UILayer.ALERT,\r\n        });\r\n    }\r\n\r\n    public removeSetting(): void {\r\n        UIMgr.close(CommonSkin.LoadOnDemand.CommonUserSetting);\r\n    }\r\n\r\n    public createDialog(option: IAlertParm, closeTime: number = -1): void {\r\n        UIMgr.showAlert(option);\r\n    }\r\n\r\n    public removeDialog(): void {}\r\n\r\n    public createReplayCtrl(ctrl: GameReplayControl): void {\r\n        UIMgr.showUI(CommonSkin.LoadOnDemand.CommonGameReplay, {\r\n            args: [ctrl],\r\n            zIndex: cc.macro.MAX_ZINDEX - 1,\r\n        });\r\n    }\r\n\r\n    public onErrorSt(error: CommonProto.ErrorST): void {\r\n        switch (error.Status) {\r\n            // 余额不足\r\n            case CommonProto.STATUS.INSUFFICIENT:\r\n                CachetaSocketMgr.close();\r\n                this.playerSeat.clear();\r\n                UIMgr.fightInsBalanceAlert(() => {\r\n                    CachetaLogicMgr.exitGame();\r\n                });\r\n                break;\r\n            // 闲置时间过长\r\n            case CommonProto.STATUS.IDLE_TIMEOUT:\r\n                CachetaSocketMgr.close();\r\n                this.playerSeat.clear();\r\n                UIMgr.fightTimeOutAlert(\r\n                    () => {\r\n                        CachetaLogicMgr.exitGame();\r\n                    },\r\n                    () => {\r\n                        CachetaLogicMgr.initServer();\r\n                    }\r\n                );\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    protected onUserSt(msgData: CachetaProto.UserSt): void {\r\n        this.playerSeat.getPlayer(msgData.Chair).userIn(msgData);\r\n    }\r\n\r\n    protected onRoomSt(msgData: CachetaProto.RoomSt): void {\r\n        this.reset();\r\n        this.maxRoundSettle = false;\r\n\r\n        this.table.setBaseScore(CachetaLogicMgr.conf.Base);\r\n        this.playerSeat.clear();\r\n\r\n        for (let chair in msgData.UserM) {\r\n            let user: CachetaProto.UserSt = msgData.UserM[chair];\r\n            this.playerSeat.getPlayer(user.Chair).userIn(user);\r\n        }\r\n\r\n        if (CachetaUserMgr.getLocalStatus() != CachetaProto.STATUS.U_PLAY) {\r\n            this.operation.setChangeTableActive(true);\r\n        }\r\n\r\n        if (CachetaLogicMgr.gameStage >= CachetaProto.STAGE.TOUCH) {\r\n            this.deck.show();\r\n            this.deck.setWildPoker(CachetaLogicMgr.getWildCard());\r\n            this.deck.setPubPoker(CachetaLogicMgr.getPubCard());\r\n            this.deck.setOpenPoker(CachetaLogicMgr.getOpenCardsFirst());\r\n            this.deck.setClosePokerNum(CachetaLogicMgr.getCloseNum());\r\n\r\n            if (CachetaUserMgr.getLocalStatus() == CachetaProto.STATUS.U_PLAY) {\r\n                let handCard = CachetaUserMgr.getLocalHandCard();\r\n                this.handPoker.setPokerValue(handCard, true);\r\n\r\n                this.operation.setSortActive(true);\r\n                if (!CachetaUserMgr.getLocalUser().InListen) {\r\n                    this.operation.setDrawActive(true);\r\n                } else {\r\n                    this.operation.setDeclareActive(true);\r\n                }\r\n            } else if (CachetaUserMgr.getLocalStatus() == CachetaProto.STATUS.U_WATCH) {\r\n                this.operation.setWatchingActive(true);\r\n                this.operation.setChangeTableActive(false);\r\n            }\r\n\r\n            if (CachetaUserMgr.getLocalUser().Trust) {\r\n                this.operation.setTrustActive(true);\r\n                this.action.setBlockActive(true);\r\n            }\r\n\r\n            // 其他玩家展示一张手牌\r\n            this.playerSeat.showOtherPlayerHand();\r\n        }\r\n\r\n        switch (CachetaLogicMgr.gameStage) {\r\n            case CachetaProto.STAGE.WAIT:\r\n                this.onStageWait(msgData);\r\n                break;\r\n            case CachetaProto.STAGE.PREPARE:\r\n                this.onStagePrepare(msgData);\r\n                break;\r\n            case CachetaProto.STAGE.SHUFFLE:\r\n                this.onStageShuffle(msgData);\r\n                break;\r\n            case CachetaProto.STAGE.TOUCH:\r\n            case CachetaProto.STAGE.DISCARD:\r\n                this.onStagePlay(msgData);\r\n                break;\r\n            case CachetaProto.STAGE.SETTLE:\r\n                this.onStageSettle(msgData);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    protected onStageWait(msgData: CachetaProto.RoomSt): void {\r\n        this.operation.setChangeTableActive(true);\r\n        // this.toast.setSystemTips(CachetaLanguage.TIPS_GAME_START_WAITING);\r\n        UIMgr.showToast(CommonVersusLanguage.waitingPalyer);\r\n    }\r\n\r\n    protected onStagePrepare(msgData: CachetaProto.RoomSt): void {\r\n        this.operation.setChangeTableActive(true);\r\n        this.toast.setSystemTips(\r\n            CachetaLanguage.TIPS_GAME_START_TIME,\r\n            (msgData.NextTS - msgData.TS) / 1000\r\n        );\r\n    }\r\n\r\n    protected onStageShuffle(msgData: CachetaProto.RoomSt): void {\r\n        let handCard = CachetaUserMgr.getLocalHandCard();\r\n        let complete = (ani: boolean) => {\r\n            if (!ani) {\r\n                this.deck.show();\r\n                this.deck.setWildPoker(CachetaLogicMgr.getWildCard());\r\n                this.deck.setPubPoker(CachetaLogicMgr.getPubCard());\r\n                // 其他玩家展示一张手牌\r\n                this.playerSeat.showOtherPlayerHand();\r\n            }\r\n\r\n            if (handCard) {\r\n                this.handPoker.setPokerValue(handCard, true);\r\n            }\r\n            this.operation.setSortActive(true);\r\n            this.operation.setDrawActive(true);\r\n        };\r\n\r\n        let leftTime = (msgData.NextTS - msgData.TS) / 1000;\r\n        if (leftTime < 6) {\r\n            complete(false);\r\n        } else {\r\n            this.deck.show();\r\n            let startPos = this.deck.getClosePokerPos();\r\n            let endPosList = this.playerSeat.getOtherPlayerHandPosList();\r\n\r\n            // 开始游戏\r\n            this.startAndEndController.playStartGameAnimAction(\r\n                () => {\r\n                    if (!cc.isValid(this.root)) return;\r\n\r\n                    this.action.playOtherDealAni(startPos, endPosList, () => {\r\n                        // 其他玩家展示一张手牌\r\n                        this.playerSeat.showOtherPlayerHand();\r\n                    });\r\n                    this.handPoker.playDealAni(handCard, startPos, () => {\r\n                        this.deck.playEnsurePubPokerAni(CachetaLogicMgr.getPubCard(), () => {\r\n                            this.deck.setClosePokerNum(CachetaLogicMgr.getCloseNum());\r\n                            this.deck.playPubandWildPokerAni(\r\n                                CachetaLogicMgr.getPubCard(),\r\n                                CachetaLogicMgr.getWildCard(),\r\n                                () => {\r\n                                    complete(true);\r\n                                }\r\n                            );\r\n                        });\r\n                    });\r\n                },\r\n                { timeScale: CachetaLogicMgr.timeScale }\r\n            );\r\n        }\r\n    }\r\n\r\n    protected onStagePlay(msgData: CachetaProto.RoomSt): void {\r\n        this.playerSeat\r\n            .getPlayer(msgData.ActiveChair)\r\n            .startTimer(msgData.NextTS - msgData.TS, CachetaLogicMgr.conf.PlayDelay);\r\n\r\n        if (CachetaUserMgr.getLocalStatus() == CachetaProto.STATUS.U_PLAY) {\r\n            if (CachetaUserMgr.isLocalActive()) {\r\n                CachetaAudioMgr.playOperation();\r\n\r\n                if (CachetaLogicMgr.gameStage == CachetaProto.STAGE.TOUCH) {\r\n                    this.operation.setTouchCardActive;\r\n                    this.operation.setTouchCardActive(true);\r\n                    this.operation.setGetCardActive(CachetaLogicMgr.getOpenCards().length > 0);\r\n                    this.deck.setTouchTipActive(true, CachetaLogicMgr.getOpenCards().length == 0);\r\n                } else {\r\n                    this.operation.setDisCardActive(true);\r\n                    this.canDecCardV = 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onStageSettle(msgData: CachetaProto.RoomSt): void {\r\n        this.reset();\r\n\r\n        this.operation.setChangeTableActive(true);\r\n        this.toast.setSystemTips(\r\n            CommonVersusLanguage.waitingPalyer,\r\n            (msgData.NextTS - msgData.TS) / 1000\r\n        );\r\n\r\n        this.createSettle(msgData.SettleInfo.SettleS);\r\n    }\r\n\r\n    protected onUserInEv(msgData: CachetaProto.UserInEv): void {\r\n        this.playerSeat.getPlayer(msgData.User.Chair).userIn(msgData.User, true);\r\n    }\r\n\r\n    protected onUserOutEv(msgData: CachetaProto.UserOutEv): void {\r\n        this.playerSeat.getPlayer(msgData.Chair).userOut();\r\n    }\r\n\r\n    protected onPrepareNt(msgData: CachetaProto.PrepareNt): void {\r\n        this.operation.setChangeTableActive(true);\r\n        this.toast.setSystemTips(\r\n            CachetaLanguage.TIPS_GAME_START_TIME,\r\n            (msgData.NextTS - msgData.TS) / 1000\r\n        );\r\n\r\n        Listener.emit(CachetaEventName.START_PREPARE, (msgData.NextTS - msgData.TS) / 1000);\r\n    }\r\n\r\n    protected onPrepareCancelNt(msgData: CachetaProto.PrepareCancelNt): void {\r\n        // this.toast.setSystemTips(CachetaLanguage.TIPS_GAME_START_WAITING);\r\n        UIMgr.showToast(CommonVersusLanguage.waitingPalyer);\r\n    }\r\n\r\n    protected onPlayNt(msgData: CachetaProto.PlayNt): void {\r\n        this.playerSeat.stopTimerAll();\r\n        let countTime = msgData.NextTS - msgData.TS;\r\n        // 开启 倒计时\r\n        this.playerSeat\r\n            .getPlayer(msgData.Chair)\r\n            .startTimer(countTime, CachetaLogicMgr.conf.PlayDelay);\r\n\r\n        if (CachetaLogicMgr.gameStage == CachetaProto.STAGE.TOUCH) {\r\n            this.playerSeat.getPlayer(msgData.Chair).playTurnStartAnim();\r\n\r\n            if (CachetaUserMgr.isLocalChair(msgData.Chair)) {\r\n                this.operation.setTouchCardActive(true);\r\n                this.operation.setGetCardActive(CachetaLogicMgr.getOpenCards().length > 0);\r\n                this.deck.setTouchTipActive(true, CachetaLogicMgr.getOpenCards().length == 0);\r\n            }\r\n        }\r\n\r\n        if (CachetaUserMgr.isLocalChair(msgData.Chair)) {\r\n            CachetaAudioMgr.playOperation();\r\n            this.removeDialog();\r\n\r\n            this.curTurnHandStatus = CachetaUserMgr.getLocalHandCard().Status;\r\n\r\n            // 阶段开始即可听\r\n            if (\r\n                !CachetaUserMgr.getLocalUser().InListen &&\r\n                (CachetaUserMgr.getLocalHandCard().Status == CachetaProto.HAND_STATUS.LISTEN ||\r\n                    CachetaUserMgr.getLocalHandCard().Status == CachetaProto.HAND_STATUS.DECLARE)\r\n            ) {\r\n                this.operation.setDrawNoraml(true);\r\n            } else if (!CachetaUserMgr.getLocalUser().InListen) {\r\n                this.operation.setDrawNoraml(false);\r\n            }\r\n\r\n            // 阶段开始即可胡\r\n            if (CachetaUserMgr.getLocalHandCard().Status == CachetaProto.HAND_STATUS.DECLARE) {\r\n                this.operation.setDeclareNoraml(true);\r\n            } else {\r\n                this.operation.setDeclareNoraml(false);\r\n            }\r\n        } else {\r\n            if (this.operation.getDrawInteractable()) {\r\n                this.operation.setDrawNoraml(false);\r\n            }\r\n            if (this.operation.getDeclareInteractable()) {\r\n                this.operation.setDeclareNoraml(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onCloseOverNt(msgData: CachetaProto.CloseOverNt): void {}\r\n\r\n    protected onTouchEv(msgData: CachetaProto.TouchEv): void {\r\n        let endPos: cc.Vec3 = null;\r\n        if (CachetaUserMgr.isLocalChair(msgData.Chair)) {\r\n            endPos = this.handPoker.getTouchPokerPos();\r\n\r\n            this.deck.setTouchTipActive(false);\r\n            this.operation.setTouchCardActive(false);\r\n            this.operation.setGetCardActive(false);\r\n            this.operation.setDisCardActive(true);\r\n            this.removeDialog();\r\n\r\n            this.curTurnHandStatus = msgData.Hand.Status;\r\n        } else {\r\n            endPos = this.playerSeat.getPlayer(msgData.Chair).getHandWorldPos();\r\n            this.curTurnHandStatus = 0;\r\n        }\r\n\r\n        let startPos = msgData.Open ? this.deck.getOpenPokerPos() : this.deck.getClosePokerPos();\r\n        this.action.playTouchPokerAni(\r\n            startPos,\r\n            endPos,\r\n            msgData.Open ? CachetaLogicMgr.CurDiscardCard : msgData.Card,\r\n            CachetaUserMgr.isLocalChair(msgData.Chair),\r\n            msgData.Open,\r\n            () => {\r\n                CachetaAudioMgr.playCardIn();\r\n                if (CachetaUserMgr.isLocalChair(msgData.Chair)) {\r\n                    this.handPoker.setTouchPokerValue(msgData.Card);\r\n                    if (!CachetaUserMgr.getLocalUser().Trust) {\r\n                        this.handPoker.setTouchEnabled(false);\r\n                        cc.tween(this.root)\r\n                            .delay(1 / CachetaLogicMgr.timeScale)\r\n                            .call(() => {\r\n                                this.handPoker.setTouchEnabled(true);\r\n                                this.handPoker.setPokerValue(msgData.Hand, true);\r\n                            })\r\n                            .start();\r\n                    }\r\n                }\r\n            }\r\n        );\r\n\r\n        this.deck.setOpenPoker(CachetaLogicMgr.getOpenCardsFirst());\r\n        this.deck.setClosePokerNum(CachetaLogicMgr.getCloseNum());\r\n\r\n        this.playerSeat.getPlayer(msgData.Chair).stopTimer();\r\n    }\r\n\r\n    protected onDiscardEv(msgData: CachetaProto.DiscardEv, callback = null): void {\r\n        let startPos: cc.Vec3 = null;\r\n        if (CachetaUserMgr.isLocalChair(msgData.Chair)) {\r\n            // startPos 需要在刷新手牌之前获取，不然就被重置了，拖动出牌时会先落下来再打出去\r\n            startPos = this.handPoker.getDiscardPokerPos();\r\n            this.handPoker.setPokerValue(msgData.Hand, true);\r\n            this.operation.setDisCardActive(false);\r\n            this.removeDialog();\r\n        } else {\r\n            startPos = this.playerSeat.getPlayer(msgData.Chair).getHandWorldPos();\r\n        }\r\n\r\n        let endPos = this.deck.getOpenPokerPos();\r\n        this.action.playDiscardPokerAni(\r\n            startPos,\r\n            endPos,\r\n            msgData.Card,\r\n            CachetaUserMgr.isLocalChair(msgData.Chair),\r\n            () => {\r\n                CachetaAudioMgr.playCardOut();\r\n                this.deck.setOpenPoker(CachetaLogicMgr.getOpenCardsFirst());\r\n                callback && callback();\r\n            }\r\n        );\r\n\r\n        this.playerSeat.getPlayer(msgData.Chair).stopTimer();\r\n    }\r\n\r\n    /**\r\n     * 听牌/听牌出牌反馈\r\n     */\r\n    protected onListenEv(msgData: CachetaProto.ListenEv): void {\r\n        this.playerSeat.getPlayer(msgData.Chair).showListen(true);\r\n        if (msgData.Card) {\r\n            let discardEv = {\r\n                TS: msgData.TS,\r\n                Chair: msgData.Chair,\r\n                Card: msgData.Card,\r\n                Hand: msgData.Hand,\r\n            } as CachetaProto.DiscardEv;\r\n            this.onDiscardEv(discardEv);\r\n        }\r\n\r\n        if (CachetaUserMgr.isLocalChair(msgData.Chair)) {\r\n            this.operation.setDrawActive(false);\r\n            this.operation.setDeclareActive(true);\r\n            if (!msgData.Card) {\r\n                // 可胡忘记听牌\r\n                if (CachetaUserMgr.getLocalHandCard().Status == CachetaProto.HAND_STATUS.DECLARE) {\r\n                    this.operation.setDeclareNoraml(true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 胡牌/胡牌出牌反馈\r\n     */\r\n    protected onDeclareEv(msgData: CachetaProto.DeclareEv): void {\r\n        let declareAnim = () => {\r\n            this.playerSeat.getPlayer(msgData.Chair).playWinnerAnim();\r\n        };\r\n\r\n        if (msgData.RobChair >= 0) {\r\n            // 抢胡表现\r\n            this.playerSeat.playRobAction(msgData.Chair, msgData.RobChair, declareAnim);\r\n            this.isRobSettle = true;\r\n        } else {\r\n            this.maxRoundSettle = msgData.MaxRoundSettle;\r\n            if (msgData.Card) {\r\n                let discardEv = {\r\n                    TS: msgData.TS,\r\n                    Chair: msgData.Chair,\r\n                    Card: msgData.Card,\r\n                    Hand: msgData.Hand,\r\n                } as CachetaProto.DiscardEv;\r\n                this.onDiscardEv(discardEv, declareAnim);\r\n            } else {\r\n                if (!msgData.MaxRoundSettle) {\r\n                    declareAnim();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (CachetaUserMgr.isLocalChair(msgData.Chair)) {\r\n            this.operation.setDeclareActive(false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 检查手牌反馈\r\n     * @param msgData\r\n     */\r\n    protected onCheckHandEv(msgData: CachetaProto.CheckHandEv): void {\r\n        if (\r\n            !(\r\n                CachetaUserMgr.isLocalActive() &&\r\n                CachetaLogicMgr.gameStage == CachetaProto.STAGE.DISCARD\r\n            )\r\n        )\r\n            return;\r\n\r\n        let pokers = this.handPoker.getSelectedPokers();\r\n        // 听牌\r\n        if (!CachetaUserMgr.getLocalUser().InListen) {\r\n            if (\r\n                CachetaUserMgr.getLocalHandCard().Status >= CachetaProto.HAND_STATUS.LISTEN &&\r\n                pokers.length == 1 &&\r\n                pokers[0].getCardValue() == msgData.Card\r\n            ) {\r\n                this.operation.setDrawNoraml(true);\r\n            } else {\r\n                // 由于网络延迟 手牌可能已经取消选中\r\n                if (\r\n                    this.curTurnHandStatus >= CachetaProto.HAND_STATUS.LISTEN &&\r\n                    this.handPoker.getSelectedPokers().length == 0\r\n                ) {\r\n                    this.operation.setDrawNoraml(true);\r\n                } else {\r\n                    this.operation.setDrawNoraml(false);\r\n                }\r\n            }\r\n        } else {\r\n            this.canDecCardV = msgData.Card;\r\n            // 胡牌\r\n            if (\r\n                CachetaUserMgr.getLocalHandCard().Status == CachetaProto.HAND_STATUS.DECLARE &&\r\n                pokers.length == 1 &&\r\n                pokers[0].getCardValue() == msgData.Card\r\n            ) {\r\n                this.operation.setDeclareNoraml(true);\r\n            } else {\r\n                // 由于网络延迟 手牌可能已经取消选中\r\n                if (\r\n                    this.curTurnHandStatus == CachetaProto.HAND_STATUS.DECLARE &&\r\n                    this.handPoker.getSelectedPokers().length == 0\r\n                ) {\r\n                    this.operation.setDeclareNoraml(true);\r\n                } else {\r\n                    this.operation.setDeclareNoraml(false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected onSettleNt(msgData: CachetaProto.SettleNt): void {\r\n        let time = 2;\r\n        if (this.isRobSettle) {\r\n            time = 3 + 2;\r\n        }\r\n\r\n        cc.tween(this.root)\r\n            .delay(time / CachetaLogicMgr.timeScale)\r\n            .call(() => {\r\n                if (!cc.isValid(this.root)) return;\r\n\r\n                this.reset();\r\n                let winSettle;\r\n                for (let i = 0; i < msgData.SettleInfo.SettleS.length; i++) {\r\n                    if (msgData.SettleInfo.SettleS[i].Chair == msgData.SettleInfo.WinChair) {\r\n                        winSettle = msgData.SettleInfo.SettleS[i];\r\n                        break;\r\n                    }\r\n                }\r\n                UIDepend.PrefabManager.loadPrefabBundle(\r\n                    CachetaSkin.UnPriority.CachetaDeclare,\r\n                    (res) => {\r\n                        if (res && cc.isValid(this.root)) {\r\n                            let node = cc.instantiate(res);\r\n                            this.root.addChild(node);\r\n\r\n                            CachetaAudioMgr.playDeclare();\r\n\r\n                            node.getComponent(CachetaDeclare).init(\r\n                                this.maxRoundSettle,\r\n                                winSettle,\r\n                                () => {\r\n                                    if (!cc.isValid(this.root)) return;\r\n\r\n                                    // 播放玩家飘输赢\r\n                                    for (let i = 0; i < msgData.SettleInfo.SettleS.length; i++) {\r\n                                        let settle = msgData.SettleInfo.SettleS[i];\r\n                                        this.playerSeat\r\n                                            .getPlayer(settle.Chair)\r\n                                            .setCoin(settle.Credit, settle.Win, true);\r\n                                    }\r\n\r\n                                    let delay = 1.3;\r\n                                    cc.tween(this.root)\r\n                                        .delay(delay / CachetaLogicMgr.timeScale)\r\n                                        .call(() => {\r\n                                            this.operation.setChangeTableActive(true);\r\n                                            // this.toast.setSystemTips(\r\n                                            //     CachetaLanguage.TIPS_GAME_START_TIME,\r\n                                            //     (msgData.NextTS - msgData.TS - delay * 1000) / 1000\r\n                                            // );\r\n\r\n                                            this.createSettle(msgData.SettleInfo.SettleS);\r\n                                            this.maxRoundSettle = false;\r\n                                        })\r\n                                        .start();\r\n                                }\r\n                            );\r\n                        }\r\n                    }\r\n                );\r\n            })\r\n            .start();\r\n    }\r\n\r\n    /**\r\n     * 广播玩家托管\r\n     * @param msgData\r\n     */\r\n    protected onTrustNt(msgData: CachetaProto.TrustNt): void {\r\n        if (CachetaUserMgr.isLocalChair(msgData.Chair)) {\r\n            this.operation.setTrustActive(true);\r\n            this.action.setBlockActive(true);\r\n            CachetaUserMgr.getLocalUser().Trust = true;\r\n        }\r\n        this.playerSeat.getPlayer(msgData.Chair).showTrustActive(true);\r\n    }\r\n\r\n    /**\r\n     * 广播取消托管\r\n     * @param msgData\r\n     */\r\n    protected onCancelTrustEv(msgData: CachetaProto.CancelTrustEv): void {\r\n        if (CachetaUserMgr.isLocalChair(msgData.Chair)) {\r\n            this.operation.setTrustActive(false);\r\n            this.action.setBlockActive(false);\r\n            CachetaUserMgr.getLocalUser().Trust = false;\r\n        }\r\n        this.playerSeat.getPlayer(msgData.Chair).showTrustActive(false);\r\n    }\r\n\r\n    protected onGroupEv(msgData: CachetaProto.GroupEv): void {\r\n        CachetaAudioMgr.playCardSort();\r\n        this.handPoker.setPokerValue(msgData.Hand);\r\n\r\n        // 听牌\r\n        if (!CachetaUserMgr.getLocalUser().InListen) {\r\n            if (msgData.Hand.Status == CachetaProto.HAND_STATUS.LISTEN) {\r\n                this.operation.setDrawNoraml(true);\r\n            } else {\r\n                this.operation.setDrawNoraml(false);\r\n            }\r\n        } else {\r\n            // 胡牌\r\n            if (msgData.Hand.Status == CachetaProto.HAND_STATUS.DECLARE) {\r\n                this.operation.setDeclareNoraml(true);\r\n            } else {\r\n                this.operation.setDeclareNoraml(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 适配 操作按钮\r\n     */\r\n    public adaptOperation() {\r\n        if (!CachetaUserMgr.isLocalActive()) return;\r\n\r\n        if (!CachetaUserMgr.getLocalUser().InListen) {\r\n            if (\r\n                this.curTurnHandStatus >= CachetaProto.HAND_STATUS.LISTEN &&\r\n                this.handPoker.getSelectedPokers().length == 0\r\n            ) {\r\n                this.operation.setDrawNoraml(true);\r\n            } else {\r\n                this.operation.setDrawNoraml(false);\r\n            }\r\n        } else {\r\n            if (\r\n                this.curTurnHandStatus == CachetaProto.HAND_STATUS.DECLARE &&\r\n                this.handPoker.getSelectedPokers().length == 0\r\n            ) {\r\n                this.operation.setDeclareNoraml(true);\r\n            } else {\r\n                this.operation.setDeclareNoraml(false);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default new CachetaUIMgr();\r\n","/**\n * 该文件为自动生成\n * 2022/11/14下午4:50:53\n *\n **/\n\nexport const CachetaUiLanguageEn = {\n    CachetaOperation: {\n        C1: \"Prize Pool\",\n        C2: \"Waiting\",\n        C3: \"Pick From Deck\",\n        C4: \"Pick from discard pile\",\n        C5: \"Pick\",\n        C6: \"Discard\",\n        C7: \"Table Info\",\n        C8: \"Players\",\n        C9: \"2-4\",\n        C10: \"Winner\",\n        C11: \"Confirm\",\n        C12: \"Auto Play\",\n        C13: \"Victory\",\n        C14: \"Defeat\",\n        C15: \"Play Again\",\n        C16: \"Select a card and play it out\",\n        D1: \"Waiting for other players.\",\n        D2: \"Change Table\",\n        E1: \"The game will start in X seconds\",\n        F1: \"Game Start\",\n        G1: \"Turn\",\n        G2: \"Wild Card\",\n        H1: \"Point Value\",\n        H2: \"Ready\",\n        H3: \"Knock\",\n        I1: \"Auto playing...\",\n        I2: \"Tap screen to continue\",\n    },\n    CachetaSettle: {\n        J1: \"Settlement\",\n        J2: \"Quit\",\n        J3: \"Change Table\",\n        J4: \"Next game starts in x seconds!\",\n        K1: \"SYSTEM NOTIFICATION\",\n        K2: \"The game is in progress, are you sure to exit?\",\n        K3: \"Exit\",\n        K4: \"Cancel\",\n    },\n};\n","/** \n * 该文件为自动生成\n * 2022/11/14下午4:50:53\n * \n **/\n\nexport const CachetaUiLanguageHi = {\n    CachetaOperation: {\n        C1: \"इनाम राशि\",\n        C2: \"खिलाड़ियों की प्रतीक्षा में\",\n        C3: \"डेक से ड्रा करें\",\n        C4: \"छोड़ा हुआ कार्ड उठाये\",\n        C5: \"उठाये\",\n        C6: \"खारिज करे\",\n        C7: \"टेबल की जानकारी\",\n        C8: \"खिलाड़ियों\",\n        C9: \"2-4\",\n        C10: \"विजेता\",\n        C11: \"पुष्टि करें\",\n        C12: \"मेजबानी\",\n        C13: \"जीत\",\n        C14: \"हार\",\n        C15: \"फिर से चालू करें\",\n        C16: \"एक कार्ड का चयन करें और इसे खेलें\",\n        D1: \"अन्य खिलाड़ियों के लिए प्रतिक्षा कर रहे हैं\",\n        D2: \"मेज बदले\",\n        E1: \"खेल X सेकंड में शुरू होगा\",\n        F1: \"खेल प्रारंभ\",\n        G1: \"चाल\",\n        G2: \"वाइल्ड कार्ड\",\n        H1: \"बूट राशि\",\n        H2: \"चिल्ल\",\n        H3: \"हिट\",\n        I1: \"स्वचालित खेल\",\n        I2: \"जारी रखने के लिए स्क्रीन टैप करें\",\n    },\n    CachetaSettle: {\n        J1: \"गणना\",\n        J2: \"छुट्टी\",\n        J3: \"मेज बदले\",\n        J4: \"अगला गेम x  सेकंड में शुरू होता है!\",\n        K1: \"सिस्टम अधिसूचना\",\n        K2: \"खेल प्रगति पर है, क्या आप बाहर निकलना सुनिश्चित करते हैं?\",\n        K3: \"बाहर निकलना\",\n        K4: \"रद्द करना\",\n    },\n};\n","/** \n * 该文件为自动生成\n * 2022/11/14下午4:50:53\n * \n **/\n\nexport const CachetaUiLanguageId = {\n    CachetaOperation: {\n        C1: \"POT\",\n        C2: \"Menunggu Pemain\",\n        C3: \"Ambil kartu dari dek\",\n        C4: \"Pilih yang Dibuang\",\n        C6: \"Membuang\",\n        C7: \"Informasi meja\",\n        C8: \"Pemain\",\n        C9: \"2-4\",\n        C10: \"Pemenang\",\n        C11: \"Konfirmasi\",\n        C12: \"Hosting\",\n        C13: \"Kemenangan\",\n        C14: \"Gagal\",\n        C15: \"Main lagi\",\n        C16: \"Pilih kartu dan mainkan\",\n        D1: \"Menunggu pemain lain\",\n        D2: \"Ganti Meja\",\n        E1: \"Game akan dimulai dalam X detik\",\n        F1: \"Game Dimulai\",\n        G1: \"Belok\",\n        G2: \"Wild Card\",\n        H1: \"Buta\",\n        H2: \"Seri\",\n        H3: \"Hit\",\n        I1: \"Sistem akan diputar secara otomatis...\",\n        I2: \"Sentuh layar untuk melanjutkan permainan\",\n    },\n    CachetaSettle: {\n        J2: \"Meninggalkan\",\n        J3: \"Ganti Meja\",\n        J4: \"Game berikutnya dimulai dalam x detik!\",\n        K1: \"NOTIFIKASI SISTEM\",\n        K2: \"Permainan sedang berlangsung, Anda yakin untuk keluar?\",\n        K3: \"Keluar\",\n        K4: \"Batal\",\n    },\n};\n","/**\n * 该文件为自动生成\n * 2022/11/14下午4:50:53\n *\n **/\n\nexport const CachetaUiLanguagePt = {\n    CachetaOperation: {\n        C1: \"Premiação\",\n        C2: \"Aguardando\",\n        C3: \"Comprar Do Monte\",\n        C4: \"Comprar da Lixeira\",\n        C5: \"Comprar\",\n        C6: \"Descartar\",\n        C7: \"Inform. Da Mesa\",\n        C8: \"Jogadores\",\n        C9: \"2-4\",\n        C10: \"Vencedor\",\n        C11: \"Confirmar\",\n        C12: \"Auto Play\",\n        C13: \"Vitória\",\n        C14: \"Derrota\",\n        C15: \"Jogar Novamente\",\n        C16: \"Selecione uma carta e jogue-a\",\n        D1: \"Esperando por outros jogadores.\",\n        D2: \"Mudar De Mesa\",\n        E1: \"O jogo começará em X segundos\",\n        F1: \"Jogo Começou\",\n        G1: \"Vira\",\n        G2: \"Curinga\",\n        H1: \"Aposta Básica\",\n        H2: \"Na boa\",\n        H3: \"Bater\",\n        I1: \"Auto jogando...\",\n        I2: \"Toque na tela para continuar\",\n    },\n    CachetaSettle: {\n        J1: \"Liquidação\",\n        J2: \"Sair\",\n        J3: \"Mudar De Mesa\",\n        J4: \"O próximo jogo começa em x segundos!\",\n        K1: \"LEMBRETE\",\n        K2: \"O jogo está em andamento, você tem certeza de sair?\",\n        K3: \"Sair\",\n        K4: \"Cancelar\",\n    },\n};\n","/** \n * 该文件为自动生成\n * 2022/11/14下午4:50:53\n * \n **/\n\nexport const CachetaUiLanguageZh = {\n    CachetaOperation: {\n        C1: \"奖池\",\n        C2: \"等待其他玩家\",\n        C3: \"从牌堆拿一张牌下来\",\n        C4: \"拿上一家打出来的牌\",\n        C5: \"拿牌\",\n        C6: \"出牌\",\n        C7: \"牌桌信息\",\n        C8: \"游戏人数\",\n        C9: \"2-4人\",\n        C10: \"赢家\",\n        C11: \"确定\",\n        C12: \"托管\",\n        C13: \"胜利\",\n        C14: \"失败\",\n        C15: \"再玩一局\",\n        C16: \"请选择一张牌打出\",\n        D1: \"等待其他玩家加入游戏\",\n        D2: \"换桌\",\n        E1: \"游戏将在X秒后开始\",\n        F1: \"游戏开始\",\n        G1: \"定癞子\",\n        G2: \"癞子\",\n        H1: \"底注\",\n        H2: \"听牌\",\n        H3: \"胡牌\",\n        I1: \"系统自动游戏中...\",\n        I2: \"触摸屏幕继续游戏\",\n    },\n    CachetaSettle: {\n        J1: \"结算\",\n        J2: \"离开\",\n        J3: \"换桌\",\n        J4: \"下一场游戏将在X秒后开始\",\n        K1: \"系统提示\",\n        K2: \"牌局进行中确认退出吗？\",\n        K3: \"离开\",\n        K4: \"取消\",\n    },\n};\n","/** 该文件为自动生成\n * 2022/11/14下午4:39:14\n *\n **/\n\nimport { LanguageType } from \"../../../../../../main/core/conf/LanguageType\";\nimport BaseBundleUiLanguage from \"../../../../../../main/core/language/BaseBundleUiLanguage\";\nimport {\n    Instance,\n    setInstance,\n} from \"../../../../../../main/core/utils/decorators/InstanceClassDecorator\";\nimport { CachetaUiLanguageZh } from \"./zh/CachetaUiLanguageZh\";\nimport { CachetaUiLanguageEn } from \"./en/CachetaUiLanguageEn\";\nimport { CachetaUiLanguagePt } from \"./pt/CachetaUiLanguagePt\";\nimport { CachetaUiLanguageHi } from \"./hi/CachetaUiLanguageHi\";\nimport { CachetaUiLanguageId } from \"./id/CachetaUiLanguageId\";\n\ntype TLanguage = typeof CachetaUiLanguageZh &\n    typeof CachetaUiLanguageEn &\n    typeof CachetaUiLanguagePt &\n    typeof CachetaUiLanguageHi &\n    typeof CachetaUiLanguageId;\n@cc._decorator.ccclass(\"CachetaUiLanguage\")\n@setInstance\nclass CachetaUiLanguage extends BaseBundleUiLanguage<TLanguage> {\n    protected getLanguage(): LG.ILanguageConfigs {\n        return {\n            [LanguageType.ZH]: CachetaUiLanguageZh,\n            [LanguageType.EN]: CachetaUiLanguageEn,\n            [LanguageType.PT]: CachetaUiLanguagePt,\n            [LanguageType.HI]: CachetaUiLanguageHi,\n            [LanguageType.ID]: CachetaUiLanguageId,\n        };\n    }\n}\nexport default Instance(CachetaUiLanguage).get();\n","import Listener from \"../../../../../main/core/utils/Listener\";\nimport { ReplayState } from \"../../../../plaza/common/Script/game/replay/GameReplayControl\";\nimport { CachetaEventName } from \"../define/CachetaEventName\";\nimport CachetaLogicMgr from \"../manager/CachetaLogicMgr\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class CachetaUserCounddownProgress extends cc.ProgressBar {\n    private time: number = null;\n    private curTime: number = 0;\n    private isUpdate: boolean = false;\n\n    protected onLoad(): void {\n        Listener.on(CachetaEventName.REPLAY_STATE_CHANGED, this.onReplayStateChanged, this);\n    }\n\n    protected onDestroy(): void {\n        Listener.off(CachetaEventName.REPLAY_STATE_CHANGED, this.onReplayStateChanged, this);\n    }\n\n    public play(time: number) {\n        this.time = time;\n        this.curTime = 0;\n        this.isUpdate = true;\n    }\n\n    stop() {\n        this.progress = 0;\n        this.time = 0;\n        this.node.children.forEach((node) => {\n            node.active = !!this.progress;\n            node.angle = this.progress * 360;\n        });\n        this.isUpdate = false;\n    }\n\n    protected update(dt: number) {\n        if (!this.isUpdate) return;\n\n        super.update?.(dt);\n        this.curTime += dt * CachetaLogicMgr.timeScale;\n        if (this.time == 0) {\n            return;\n        }\n        this.progress = (this.time - this.curTime) / this.time;\n        if (this.progress <= 0) {\n            this.time = 0;\n            this.progress = 0;\n        }\n        this.node.children.forEach((node) => {\n            node.active = !!this.progress;\n            node.angle = this.progress * 360;\n        });\n    }\n\n    private onReplayStateChanged(state: ReplayState): void {\n        switch (state) {\n            case ReplayState.Play:\n                this.isUpdate = true;\n                break;\n            case ReplayState.Pause:\n                this.isUpdate = false;\n                break;\n            default:\n                break;\n        }\n    }\n}\n","import { CachetaConst } from \"../define/CachetaConst\";\nimport CachetaSocketMgr from \"../service/ws/CachetaSocketMgr\";\nimport { CachetaProto } from \"../service/ws/proto/CachetaProto\";\nimport CachetaUtil from \"../utils/CachetaUtil\";\nimport CachetaLogicMgr from \"./CachetaLogicMgr\";\n\nclass CachetaUserMgr {\n    /** key: chair */\n    private users: Map<number, CachetaProto.UserSt> = new Map<number, CachetaProto.UserSt>();\n    /** shf 标记 */\n    private shfTag: boolean = false;\n    /** 自己的用户id */\n    private localUserId: number = 0;\n    /** 自己的座位  */\n    private localChair = -1;\n    /** 操作玩家座位 */\n    private activeChair = -1;\n    /** 胜利玩家座位 */\n    public winChair = -1;\n\n    public init(): void {\n        this.shfTag = false;\n        this.localUserId = CommonDepend.UserManager.uid;\n    }\n\n    public reset(): void {\n        this.users.clear();\n        this.localChair = -1;\n        this.activeChair = -1;\n        this.winChair = -1;\n    }\n\n    public setUsers(users: { [chair: string]: CachetaProto.UserSt }): void {\n        let localUser: CachetaProto.UserSt = null;\n        for (let chair in users) {\n            let user = users[chair];\n            this.users.set(user.Chair, user);\n\n            if (user.UserID == this.localUserId) {\n                localUser = user;\n            }\n        }\n\n        if (!localUser) {\n            CC_DEBUG && cc.error(`CachetaUserMgr setUsers, localUser err`);\n            return;\n        }\n\n        this.localChair = localUser.Chair;\n    }\n\n    public userIn(user: CachetaProto.UserSt): void {\n        this.users.set(user.Chair, user);\n\n        if (CachetaSocketMgr.isShf && !this.shfTag) {\n            this.shfTag = true;\n            this.localUserId = user.UserID;\n        }\n    }\n\n    public userOut(chair: number): void {\n        this.users.delete(chair);\n    }\n\n    /**\n     * 获取视图座位号\n     * @param chair\n     */\n    public getSeat(chair: number): number {\n        return (chair - this.localChair + CachetaConst.PlayerNumMax) % CachetaConst.PlayerNumMax;\n    }\n\n    /**\n     * 获取逻辑座位号\n     * @param seat\n     */\n    public getChair(seat: number): number {\n        return (seat + this.localChair) % CachetaConst.PlayerNumMax;\n    }\n\n    public getLocalChair(): number {\n        return this.localChair;\n    }\n\n    public isLocalChair(chair: number): boolean {\n        return this.localChair == chair;\n    }\n\n    public getLocalUser(): CachetaProto.UserSt {\n        return this.users.get(this.localChair);\n    }\n\n    public isLocalUser(userId: number): boolean {\n        return this.localUserId == userId;\n    }\n\n    public setLocalHandCard(handCard: CachetaProto.Hand): void {\n        if (!handCard) {\n            return;\n        }\n\n        let localUser = this.getLocalUser();\n        localUser.Hand = handCard;\n    }\n\n    public getLocalHandCard(): CachetaProto.Hand {\n        let localUser = this.getLocalUser();\n        return localUser.Hand;\n    }\n\n    public setActiveChair(chair: number): void {\n        this.activeChair = chair;\n    }\n\n    public isLocalActive(): boolean {\n        return this.localChair == this.activeChair;\n    }\n\n    public getUserByChair(chair: number): CachetaProto.UserSt {\n        return this.users.get(chair);\n    }\n\n    public getUserByUserId(userId: number): CachetaProto.UserSt {\n        for (const iter of this.users.values()) {\n            if (iter.UserID == userId) {\n                return iter;\n            }\n        }\n        return null;\n    }\n\n    public getChairByUserId(userId: number): number {\n        for (const iter of this.users.values()) {\n            if (iter.UserID == userId) {\n                return iter.Chair;\n            }\n        }\n        return 0;\n    }\n\n    public getNicknameByChair(chair: number): string {\n        let user = this.getUserByChair(chair);\n        return user.UserName;\n    }\n\n    public getNicknameByUserId(userId: number): string {\n        let user = this.getUserByUserId(userId);\n        return user.UserName;\n    }\n\n    public setCredit(chair: number, amount: number): void {\n        let user = this.getUserByChair(chair);\n        user.Credit = amount;\n    }\n\n    public getCredit(chair: number): number {\n        let user = this.getUserByChair(chair);\n        return user.Credit;\n    }\n\n    public setStatusAll(status: CachetaProto.STATUS): void {\n        for (const iter of this.users.values()) {\n            iter.Status = status;\n        }\n    }\n\n    public setStatus(chair: number, status: CachetaProto.STATUS): void {\n        let user = this.getUserByChair(chair);\n        user.Status = status;\n    }\n\n    public getStatus(chair: number): CachetaProto.STATUS {\n        let user = this.getUserByChair(chair);\n        return user?.Status ?? CachetaProto.STATUS.U_PREPARE;\n    }\n\n    public getLocalStatus(): CachetaProto.STATUS {\n        let localUser = this.getLocalUser();\n        return localUser?.Status ?? CachetaProto.STATUS.U_PREPARE;\n    }\n}\n\nexport default new CachetaUserMgr();\n","export default class CachetaUtil {}\n"],"file":"index.js"}