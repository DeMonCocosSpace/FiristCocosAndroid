{"version":3,"sources":["assets/bundle/plaza/common/Script/Component/ALabelFixed.ts","assets/bundle/plaza/common/Script/Component/base/alert/Alert.ts","assets/bundle/plaza/common/Script/service/api/ApiErrorHelper.ts","assets/bundle/plaza/common/Script/service/api/ApiMgr.ts","assets/bundle/plaza/common/Script/service/api/ApiProto.ts","assets/bundle/plaza/common/Script/service/api/ApiReqPlain.ts","assets/bundle/plaza/common/Script/service/service_error/ApiServiceErrorCenter.ts","assets/bundle/plaza/common/Script/service/api/ApiUrl.ts","assets/bundle/plaza/common/Script/service/ws/heartCheck/BackHeartCheck.ts","assets/bundle/plaza/common/Script/service/service_error/base/BaseServiceErrorCenter.ts","assets/bundle/plaza/common/Script/service/service_error/handler/base/BaseServiceErrorHandler.ts","assets/bundle/plaza/common/Script/service/ws/attachment/BaseSocketAttachment.ts","assets/bundle/plaza/common/Script/service/ws/BaseSocketMgr.ts","assets/bundle/plaza/common/Script/service/ws/BaseSocket.ts","assets/bundle/plaza/common/Script/Component/chip/BetChip.ts","assets/bundle/plaza/common/Script/Component/rule/bingo/BingoRuleDialog.ts","assets/bundle/plaza/common/Script/utils/BlackIpUtil.ts","assets/bundle/plaza/common/Script/room_list/big_battle/BrcBigBattleDLTrendFrame.ts","assets/bundle/plaza/common/Script/Component/brc/BrcGraphicsMgr.ts","assets/bundle/plaza/common/Script/room_list/red_black/BrcRedBlackDLTrendFrame.ts","assets/bundle/plaza/common/Script/broad_cast/services/ws/BroadCastSocketAttachment.ts","assets/bundle/plaza/common/Script/utils/BrowserUtil.ts","assets/bundle/plaza/common/Script/bd/BundleCommonMgr.ts","assets/bundle/plaza/common/Script/Component/rule/cacheta/CachetaRuleDialog.ts","assets/bundle/plaza/common/Script/calendar/CalendarEnum.ts","assets/bundle/plaza/common/Script/calendar/CalendarItem.ts","assets/bundle/plaza/common/Script/calendar/Calendar.ts","assets/bundle/plaza/common/Script/Component/card_type_result/CardTypeResultConfig.ts","assets/bundle/plaza/common/Script/Component/card_type_result/CardTypeResult.ts","assets/bundle/plaza/common/Script/Component/chip/ChipFrame.ts","assets/bundle/plaza/common/Script/Component/chip/ChipTypeEnum.ts","assets/bundle/plaza/common/Script/Component/chip/ChipUtil.ts","assets/bundle/plaza/common/Script/Component/chip/ChipValueEnum.ts","assets/bundle/plaza/common/Script/user/utils/CommonAccountUtil.ts","assets/bundle/plaza/common/Script/broad_cast/define/CommonBroadCastEvents.ts","assets/bundle/plaza/common/Script/broad_cast/logic/CommonBroadCastLogic.ts","assets/bundle/plaza/common/Script/broad_cast/obs/CommonBroadCastObserver.ts","assets/bundle/plaza/common/Script/broad_cast/ui/CommonBroadCastSet.ts","assets/bundle/plaza/common/Script/broad_cast/define/CommonBroadCastType.ts","assets/bundle/plaza/common/Script/broad_cast/CommonBroadCastUtil.ts","assets/bundle/plaza/common/Script/broad_cast/ui/CommonBroadCast.ts","assets/bundle/plaza/common/Script/CommonEventName.ts","assets/bundle/plaza/common/Script/obs/CommonFeatureSettingObserver.ts","assets/bundle/plaza/common/Script/obs/CommonGameListObserver.ts","assets/bundle/plaza/common/Script/game/replay/ui/CommonGameReplay.ts","assets/bundle/plaza/common/Script/obs/CommonHostListObserver.ts","assets/bundle/plaza/common/Script/obs/CommonHostListSwitchCountObserver.ts","assets/bundle/plaza/common/Script/user/obs/CommonKycInfoObserver.ts","assets/bundle/plaza/common/Script/user/ui/CommonKycInfo.ts","assets/bundle/plaza/common/Script/conf/lang/en/CommonLanguageEn.ts","assets/bundle/plaza/common/Script/conf/lang/hi/CommonLanguageHi.ts","assets/bundle/plaza/common/Script/conf/lang/id/CommonLanguageId.ts","assets/bundle/plaza/common/Script/conf/lang/pt/CommonLanguagePt.ts","assets/bundle/plaza/common/Script/conf/lang/zh/CommonLanguageZh.ts","assets/bundle/plaza/common/Script/conf/lang/CommonLanguage.ts","assets/bundle/plaza/common/Script/obs/CommonLaunchConfigObserver.ts","assets/bundle/plaza/common/Script/event/CommonListenUiEvent.ts","assets/bundle/plaza/common/Script/obs/CommonNetworkSwitchObserver.ts","assets/bundle/plaza/common/Script/CommonObjectPool.ts","assets/bundle/plaza/common/Script/CommonPrefabMgr.ts","assets/bundle/plaza/common/Script/obs/CommonPromoterVerifyBrdObserver.ts","assets/bundle/plaza/common/Script/service/ws/proto/CommonProto.ts","assets/bundle/plaza/common/Script/user/ui/CommonRegisterForGiftView.ts","assets/bundle/plaza/common/Script/conf/skin/light/CommonResLight.ts","assets/bundle/plaza/common/Script/conf/skin/world_cup/CommonResWorldCup.ts","assets/bundle/plaza/common/Script/user/define/CommonResultType.ts","assets/bundle/plaza/common/Script/user/ui/CommonRetrievePassword.ts","assets/bundle/plaza/common/Script/Component/rule/lang/en/CommonRuleLanguageEn.ts","assets/bundle/plaza/common/Script/Component/rule/lang/pt/CommonRuleLanguagePt.ts","assets/bundle/plaza/common/Script/Component/rule/lang/CommonRuleLanguage.ts","assets/bundle/plaza/common/Script/Component/rule/CommonRule.ts","assets/bundle/plaza/common/Script/conf/skin/CommonSkin.ts","assets/bundle/plaza/common/Script/user/ui/CommonSmsCode.ts","assets/bundle/plaza/common/Script/service/ws/attachment/CommonSocketAttachment.ts","assets/bundle/plaza/common/Script/service/ws/CommonSocketUtil.ts","assets/bundle/plaza/common/Script/Storage/CommonStorageMgr.ts","assets/bundle/plaza/common/Script/conf/lang/en/CommonUiLanguageEn.ts","assets/bundle/plaza/common/Script/conf/lang/hi/CommonUiLanguageHi.ts","assets/bundle/plaza/common/Script/conf/lang/id/CommonUiLanguageId.ts","assets/bundle/plaza/common/Script/conf/lang/pt/CommonUiLanguagePt.ts","assets/bundle/plaza/common/Script/conf/lang/zh/CommonUiLanguageZh.ts","assets/bundle/plaza/common/Script/conf/lang/CommonUiLanguage.ts","assets/bundle/plaza/common/Script/obs/CommonUpdateNewObserver.ts","assets/bundle/plaza/common/Script/broad_cast/obs/CommonUserBroadCastObserver.ts","assets/bundle/plaza/common/Script/user/utils/CommonUserInfoUtil.ts","assets/bundle/plaza/common/Script/user/obs/CommonUserLastLoginObserver.ts","assets/bundle/plaza/common/Script/user/login/CommonUserLoginAuto.ts","assets/bundle/plaza/common/Script/user/login/CommonUserLoginBase.ts","assets/bundle/plaza/common/Script/user/utils/CommonUserLoginCheckUtil.ts","assets/bundle/plaza/common/Script/user/login/CommonUserLoginGuest.ts","assets/bundle/plaza/common/Script/user/obs/CommonUserLoginInfoObserver.ts","assets/bundle/plaza/common/Script/user/login/CommonUserLoginPassword.ts","assets/bundle/plaza/common/Script/user/utils/CommonUserLoginUiUtil.ts","assets/bundle/plaza/common/Script/setting/CommonUserSetting.ts","assets/bundle/plaza/common/Script/user/CommonUserUtil.ts","assets/bundle/plaza/common/Script/CommonZOrder.ts","assets/bundle/plaza/common/Script/Component/CountDownTimer.ts","assets/bundle/plaza/common/Script/utils/currency/CurrencyBRL.ts","assets/bundle/plaza/common/Script/utils/currency/CurrencyIDR.ts","assets/bundle/plaza/common/Script/utils/currency/CurrencyINR.ts","assets/bundle/plaza/common/Script/utils/CurrencyUtil.ts","assets/bundle/plaza/common/Script/utils/currency/CurrencyVND.ts","assets/bundle/plaza/common/Script/DataCacheMgr.ts","assets/bundle/plaza/common/Script/service/ws/attachment/DebugLogAttachment.ts","assets/bundle/plaza/common/Script/Component/DropDown/DropDownItem.ts","assets/bundle/plaza/common/Script/Component/DropDown/DropDownOptionData.ts","assets/bundle/plaza/common/Script/Component/DropDown/DropDown.ts","assets/bundle/plaza/common/Script/utils/DynamicMounNodeComponent.ts","assets/bundle/plaza/common/Script/utils/DynamicMounNodeUtil.ts","assets/bundle/plaza/common/Script/utils/DynamicMultipleMounNodeComponent.ts","assets/bundle/plaza/common/Script/service/ws/attachment/ErrorStSocketAttachment.ts","assets/bundle/plaza/common/Script/utils/format_const/FormatConstBRL.ts","assets/bundle/plaza/common/Script/utils/format_const/FormatConstINR.ts","assets/bundle/plaza/common/Script/utils/FormatConstUtil.ts","assets/bundle/plaza/common/Script/utils/FormatTemplateUtil.ts","assets/bundle/plaza/common/Script/utils/FormatTestUtil.ts","assets/bundle/plaza/common/Script/service/ws/heartCheck/FrontHeartCheck.ts","assets/bundle/plaza/common/Script/GameNavigation.ts","assets/bundle/plaza/common/Script/game/replay/GameReplayControl.ts","assets/bundle/plaza/common/Script/Component/get_award/GetAwardDialog.ts","assets/bundle/plaza/common/Script/Component/get_award/GetAwardFrameCtrl.ts","assets/bundle/plaza/common/Script/Component/get_award/GetAwardItem.ts","assets/bundle/plaza/common/Script/Component/get_award/GetAwardTipsCtrl.ts","assets/bundle/plaza/common/Script/Component/get_award/GetAwardType.ts","assets/bundle/plaza/common/Script/Component/get_award/GetAwardUtils.ts","assets/bundle/plaza/common/Script/h5_customer/H5Customer.ts","assets/bundle/plaza/common/Script/h5/H5Page.ts","assets/bundle/plaza/common/Script/service/ws/heartCheck/HeartCheck.ts","assets/bundle/plaza/common/Script/obs/hostList/HostListLogic.ts","assets/bundle/plaza/common/Script/I18nTools.ts","assets/bundle/plaza/common/Script/utils/InfoMosaicUtil.ts","assets/bundle/plaza/common/Script/Component/LabelShader.ts","assets/bundle/plaza/common/Script/Component/VirtualList/ListItem.ts","assets/bundle/plaza/common/Script/Component/VirtualList/List.ts","assets/bundle/plaza/common/Script/obs/LoadingSceneStateObserver.ts","assets/bundle/plaza/common/Script/Component/base/loading_toast/LoadingToastUi.ts","assets/bundle/plaza/common/Script/Component/base/loading_ui/LoadingUI.ts","assets/bundle/plaza/common/Script/Component/LoadingWithFont.ts","assets/bundle/plaza/common/Script/Component/rule/ludo/LudoGameRule.ts","assets/bundle/plaza/common/Script/NewGameInfo.ts","assets/bundle/plaza/common/Script/Component/SelectPageCom/PageItem.ts","assets/bundle/plaza/common/Script/user/ui/PasswordLogin.ts","assets/bundle/plaza/common/Script/Component/Poker/enums/PokerCardEnum.ts","assets/bundle/plaza/common/Script/Component/Poker/PokerCardMgr.ts","assets/bundle/plaza/common/Script/Component/Poker/enums/PokerFlowerEnum.ts","assets/bundle/plaza/common/Script/Component/Poker/enums/PokerResEnum.ts","assets/bundle/plaza/common/Script/Component/Poker/PokerResMgr.ts","assets/bundle/plaza/common/Script/Component/Poker/Poker.ts","assets/bundle/plaza/common/Script/PropConfMgr.ts","assets/bundle/plaza/common/Script/utils/RandomUtil.ts","assets/bundle/plaza/common/Script/obs/RedPointCacheKey.ts","assets/bundle/plaza/common/Script/obs/RedPointObserver.ts","assets/bundle/plaza/common/Script/user/ui/Register.ts","assets/bundle/plaza/common/Script/Component/rule/RuleContent.ts","assets/bundle/plaza/common/Script/Component/rule/RuleItem.ts","assets/bundle/plaza/common/Script/Component/rule/Rule.ts","assets/bundle/plaza/common/Script/SafariDeskIcon.ts","assets/bundle/plaza/common/Script/SceneControl.ts","assets/bundle/plaza/common/Script/SceneType.ts","assets/bundle/plaza/common/Script/Component/SelectPageCom/SelectPageCom.ts","assets/bundle/plaza/common/Script/service/service_error/define/ServiceCatchResult.ts","assets/bundle/plaza/common/Script/service/service_error/handler/ServiceEnterHallFailedAlert.ts","assets/bundle/plaza/common/Script/service/service_error/handler/ServiceErrorCoinLock.ts","assets/bundle/plaza/common/Script/service/service_error/handler/ServiceErrorConfirmAlert.ts","assets/bundle/plaza/common/Script/service/service_error/handler/ServiceErrorNetwordErrorAlert.ts","assets/bundle/plaza/common/Script/service/service_error/handler/ServiceErrorNetwordError.ts","assets/bundle/plaza/common/Script/service/service_error/handler/ServiceErrorNetwordTimeout.ts","assets/bundle/plaza/common/Script/service/service_error/handler/ServiceErrorSelectAlert.ts","assets/bundle/plaza/common/Script/service/service_error/handler/ServiceErrorShowToast.ts","assets/bundle/plaza/common/Script/service/service_error/handler/ServiceErrorToHallScene.ts","assets/bundle/plaza/common/Script/service/service_error/handler/ServiceErrorToLoginScene.ts","assets/bundle/plaza/common/Script/service/service_error/handler/ServiceErrorTryOpenTopup.ts","assets/bundle/plaza/common/Script/service/service_error/handler/ServiceErrorUnkonw.ts","assets/bundle/plaza/common/Script/service/service_error/handler/ServiceErrorUpgradeAccount.ts","assets/bundle/plaza/common/Script/service/service_error/ServiceErrorUtils.ts","assets/bundle/plaza/common/Script/service/service_error/handler/ServiceErrorWithdrawAlert.ts","assets/bundle/plaza/common/Script/service/service_error/define/ServiceOperateType.ts","assets/bundle/plaza/common/Script/Component/rule/seven_up_down/SevenUpDownRule.ts","assets/bundle/plaza/common/Script/utils/ShuffleUtil.ts","assets/bundle/plaza/common/Script/service/ws/SocketInternalEvent.ts","assets/bundle/plaza/common/Script/service/service_error/SocketServiceErrorCenter.ts","assets/bundle/plaza/common/Script/Component/StartAndStopAnim.ts","assets/bundle/plaza/common/Script/Switch.ts","assets/bundle/plaza/common/Script/utils/TimerUtil.ts","assets/bundle/plaza/common/Script/TipsInfo.ts","assets/bundle/plaza/common/Script/Component/base/toast/ToastItem.ts","assets/bundle/plaza/common/Script/Component/base/toast/ToastUI.ts","assets/bundle/plaza/common/Script/Component/rule/truco/TrucoRuleDialog.ts","assets/bundle/plaza/common/Script/Component/rule/truco/TrucoRule.ts","assets/bundle/plaza/common/Script/Component/base/UIMgr.ts","assets/bundle/plaza/common/Script/universe/proto/UniverseProtoMap.ts","assets/bundle/plaza/common/Script/universe/proto/UniverseProto.ts","assets/bundle/plaza/common/Script/universe/UniverseServiceMgr.ts","assets/bundle/plaza/common/Script/universe/UniverseSocketMgr.ts","assets/bundle/plaza/common/Script/Component/amount/UserAmountComp.ts","assets/bundle/plaza/common/Script/Component/UserAvatar/UserAvatarMgr.ts","assets/bundle/plaza/common/Script/Component/UserAvatar/UserAvatarModel.ts","assets/bundle/plaza/common/Script/Component/UserAvatar/UserAvatar.ts"],"names":["ccclass","property","cc","_decorator","LabelFixedType","ALabelFixed","Label","[object Object]","this","fixedType","NONE","fixedValue","fixedString","aLabel","oldLabel","_string","label","refreshView","isRefresh","node","WIDTH","fixedWidthLengthModel","BYTE","fixedByteLengthModel","FONT_SIZE","fixedFontSizeModel","len","str","fontSize","width","labelWidth","getLabelByteLength","labelByte","overflow","Overflow","SHRINK","actualFontSize","labelFontSize","orgStr","split","i","length","substr","string","replaceStr","replace","__decorate","type","Enum","serializable","displayName","tooltip","prototype","exports","default","PopUpViewBase_1","__importDefault","require","UIMgr_1","Alert","btn_positive","btn_negative","btn_close","lab_positive","lab_negative","lab_title","lab_content","_negativeCallFunc","_positiveCallFunc","on","Node","EventType","TOUCH_END","onPositive","onNegative","onClickClose","parm","undefined","style","ALERT_STYLE","NEGATIVE_POSITIVE","active","POSITIVE","NEGATIVE_POSITIVE_CLOSE","negativeBtnText","positiveBtnText","titleText","negativeCallFunc","positiveCallFunc","horizontalAlign","_a","contextAlign","macro","TextAlignment","LEFT","countdown","startCountdown","contentText","format","countDown","schedule","countdownEndCallFunc","close","RichText","GameType_1","SceneControl_1","ApiErrorHelper","options","dealWithError","code","msg","showToast","showAlert","CENTER","CommonDepend","UserManager","clearAccount","clearAvailableAvatar","LocalStorageMgr","clearNewAvatarId","clearUserLoginData","SceneControl","getInstance","launchScene","GameType","LOGIN","HttpRequest_1","ApiReqPlain_1","ApiUrl_1","UserManager_1","CommonUserUtil_1","ApiProto_1","NewGameInfo_1","PlatformUtil_1","InstanceClassDecorator_1","CommonLaunchConfigObserver_1","ApiMgr","_instance","gameID","hostList","NewGameInfo","getGameHttpServer","concat","host","host_backup","getHostList","GAME_HALL","getHost","req_header","ApiProto","ReqHeader","message","request","fromObject","data","protoInfo","req_plain","createApiPlain","req_prototype","resp_prototype","response","Promise","resolve","reject","HttpRequest","post","api","success","res","Array","map","item","toObject","_b","call","_d","_c","httpCallBack","error","auto_login","createHallRequest","get_user_info","UserInfoReq","UserInfoResp","get_balance","GetBalanceReq","GetBalanceResp","aid","loginRequest","IdentityType","AT_AID","accountInfo","password","AT_ACCOUNT_NO","vcode","AT_PHONE_NO","identity","login","identity_info","cert","LoginReq","LoginResp","referId","register","IdentityInfo","Cert","refer_id","RegisterReq","RegisterResp","vipBonus_conf","VipBonusConfReq","VipBonusConfResp","page_no","page_size","return_total","vipBonus_record_list","pc","VipBonusRecordsReq","VipBonusRecordsResp","birthday","vipBonus_set_birthday","VipBonusSetBirthdayReq","VipBonusSetBirthdayResp","task_system_Info","TaskCenterInfoReq","TaskCenterInfoResp","online_bonus_conf","OnlineBonusConfReq","OnlineBonusConfResp","activity_reminder","ListActivityReq","ListActivityResp","promoter_info_req","PromoterInfoReq","PromoterInfoResp","promoter_receive_commission_req","PromoterReceiveCommissionReq","PromoterReceiveCommissionResp","promoter_commission_records_req","PromoterCommissionRecordsReq","PromoterCommissionRecordsResp","promoter_commission_conf_req","GetCommissionConfReq","GetCommissionConfResp","promoter_commission_desc_conf_req","GetCommissionDescConfReq","GetCommissionDescConfResp","promoter_daily_commission_req","PromoterDailyCommissionReq","PromoterDailyCommissionResp","start_time","end_time","order_by","order_type","promoter_sub_commission_req","PromoterSubCommissionReq","PromoterSubCommissionResp","promoter_daily_contribution_req","PromoterDailyContributionReq","PromoterDailyContributionResp","promoter_Sub_Detail_Contribution_Req","PromoterSubDetailContributionReq","PromoterSubDetailContributionResp","noticePull","NoticePullReq","NoticePullResp","lastMailId","mailPull","cursor_id","MailPullReq","MailPullResp","mailId","checkMail","mail_id","MailCheckReq","MailCheckResp","delOneMail","MailDeleteReq","MailDeleteResp","delAllMail","MailDelAllReq","MailDelAllResp","acceptMail","MailAcceptReq","MailAcceptResp","get_sms_code","SmsCodeReq","SmsCodeResp","bind_identity_req","BindIdentityReq","BindIdentityResp","modify_user_info","Object","assign","info","get","ModifyUserReq","ModifyUserResp","then","modify","verify_bind_phone","VerifyBindPhoneReq","VerifyBindPhoneResp","reset_password","ResetPassReq","ResetPassResp","CommonUserUtil","passwordLogin","new_password","get_kyc","GetKycReq","GetKycResp","set_kyc","SetKycReq","SetKycResp","gameId","game_info","GameInfoReq","game_id","GameInfoResp","pay_conf","PayConfReq","PayConfResp","pay_type","pay_amount","pay_submit","PaySubmitReq","adjust_info","appid","Instance","idfa","PlatformUtil","getIDFA","gps_adid","getGoogleADID","adjust_id","getAdjustDeviceID","PaySubmitResp","filter_type","page","size","pay_record_list","PayRecordListReq","PayRecordListResp","kind","pop_ups","PopUpsPullReq","PopUpsPullResp","newTripleGiftCont","NewTripleGiftConfReq","NewTripleGiftConfResp","activity_id","stage","newTripleGiftGetAward","NewTripleGiftAwardReq","NewTripleGiftAwardResp","replayList","GameReplaysReq","GameReplaysResp","replayDetail","GameReplayDetailReq","GameReplayDetailResp","promoterVerifyBrd","PromoterVerifyBrdReq","PromoterVerifyBrdResp","id","promoterVerifyReferId","PromoterVerifyReferIdReq","PromoterVerifyReferIdResp","NpmExport_1","GENDER","NewbieType","ResetPwdType","WithdrawAccountType","PixAccountType","WithdrawStatus","MailContactType","PayStatus","MedalLevel","MedalSubLevel","PromoterSubType","pb_1","Message","super","_one_of_decls","set","initialize","isArray","__classPrivateFieldGet","timestamp","user_id","auth_token","brand_code","getFieldWithDefault","value","setField","w","writer","BinaryWriter","writeInt64","writeString","getResultBuffer","bytes","reader","BinaryReader","nextField","isEndGroup","getFieldNumber","readInt64","readString","skipField","serialize","deserialize","RespHeader","_one_of_decls_1","trace_id","writeInt32","readInt32","PaginationCriteria","_one_of_decls_2","writeBool","readBool","UserInfo","_one_of_decls_3","chn","username","phone","avatar","gender","credit","safe_box","level","is_upgraded","available_avatar","GENDER_UNKNOWN","writeEnum","writePackedInt32","readEnum","readPackedInt32","_one_of_decls_4","header","getWrapperField","setWrapperField","has_header","getField","writeMessage","readMessage","_one_of_decls_5","has_data","_one_of_decls_6","_one_of_decls_7","UserBalance","_one_of_decls_8","_one_of_decls_9","_one_of_decls_10","_one_of_decls_11","fb_token","_one_of_decls_12","extra_info","has_cert","ExtraInfo","has_extra_info","_one_of_decls_143","fb_email","LoginInfo","_one_of_decls_13","token","newbie_type","newbie_award","NB_DEFAULT","_one_of_decls_14","has_identity_info","_one_of_decls_15","_one_of_decls_16","_one_of_decls_17","_one_of_decls_18","_one_of_decls_19","_one_of_decls_20","account_no","_one_of_decls_21","_one_of_decls_22","MODIFY_PWD","_one_of_decls_23","_one_of_decls_24","_one_of_decls_25","InKycExtra","_one_of_decls_26","CPF_OR_CNPJ","CEP","KycExtra","_one_of_decls_27","in_kyc_extra","setOneofWrapperField","has_in_kyc_extra","0","1","computeOneofCase","_one_of_decls_28","name","email","kyc_extra_info","has_kyc_extra_info","_one_of_decls_29","KycData","_one_of_decls_30","_one_of_decls_31","_one_of_decls_32","_one_of_decls_33","_one_of_decls_34","GameInfo","RoomInfo","base_amount","chips_amount","bet_limit_amount","enter_limit_amount","red_limit_amount","table_id","writePackedInt64","readPackedInt64","use_h5","frame_url","h5_url","hover_button","browser_direction","room_index","last_game","rooms_info","getRepeatedWrapperField","setRepeatedWrapperField","writeRepeatedMessage","addToRepeatedWrapperField","ExchangeCodeReq","_one_of_decls_35","ExchangeCodeResp","_one_of_decls_36","RespData","amount","title","WithdrawConfReq","_one_of_decls_37","WithdrawConfResp","_one_of_decls_38","Conf","Bank","icon","channel_id","withdraw_type","max_count","left_count","max_total","left_total","min_amount","max_amount","base","comment","remain_amount","need_bank_extra","banks","withdraw_comment","channel_list_id","UNKNOWN","WithdrawAccountPix","_one_of_decls_39","pix_account_type","pix_identity","PIX_UNKNOWN","WithdrawAccountBank","_one_of_decls_40","ifsc","bank_code","bank_branch","address","WithdrawAccount","_one_of_decls_41","account_name","is_default","pix","bank","has_pix","has_bank","WithdrawBindAccountReq","_one_of_decls_42","account","has_account","WithdrawBindAccountResp","_one_of_decls_43","WithdrawBindAccountRiskReq","_one_of_decls_44","WithdrawBindAccountRiskResp","_one_of_decls_45","is_risk","WithdrawUnbindAccountReq","_one_of_decls_46","WithdrawUnbindAccountResp","_one_of_decls_47","WithdrawAccountsReq","_one_of_decls_48","WithdrawAccountsResp","_one_of_decls_49","WithdrawSetDefaultAccountReq","_one_of_decls_50","WithdrawSetDefaultAccountResp","_one_of_decls_51","WithdrawExchangeReq","_one_of_decls_52","bind_id","validate_bind","WithdrawExchangeResp","_one_of_decls_53","WithdrawRecordsReq","_one_of_decls_54","has_page","WithdrawRecordsResp","_one_of_decls_55","WithdrawRecord","status","created_at","updated_at","type_name","WS_REVIEWING","total","records","WithdrawRecordsReqV2","_one_of_decls_56","WithdrawRecordsRespV2","_one_of_decls_57","SafeboxPutInReq","_one_of_decls_58","writeUint64","readUint64","SafeboxPutInResp","_one_of_decls_59","safe_amount","SafeboxTakeOutReq","_one_of_decls_60","SafeboxTakeOutResp","_one_of_decls_61","_one_of_decls_62","_one_of_decls_63","Mail","text","picture","accepted","checked","expired_at","recv_time","now_ts","annex_type","annex_count","contact_type","contact_no","MCT_DEFAULT","mails","del_mails","writeRepeatedString","addToRepeatedField","_one_of_decls_64","_one_of_decls_65","_one_of_decls_66","_one_of_decls_67","_one_of_decls_68","_one_of_decls_69","_one_of_decls_70","_one_of_decls_71","_one_of_decls_72","_one_of_decls_73","PropsBonus","props_id","need_level","LevelBonusAmountCfg","reach_amount","up_award_count","feedback_award_count","free_award_count","birthday_award_count","BonusDescription","bonus_type","distribute_description","tips_description","LevelInfo","props_bonus","level_bonus_amount_cfgs","bonus_descriptions","current_level_info","last_month_level","last_three_months_count","level_description","kind_tips","has_props_bonus","has_current_level_info","_one_of_decls_74","_one_of_decls_75","_one_of_decls_76","has_pc","_one_of_decls_77","VipBonusRecords","VipBonusRecord","count","_one_of_decls_78","notice_type","_one_of_decls_79","Notice","weight","display_type","jump_type","browser_type","tag_type","jump_url","content","frequency","_one_of_decls_80","_one_of_decls_81","tutorial_addr","button_title","jump_pay_type","_one_of_decls_82","_one_of_decls_83","ActivitiesInfo","Activity","activity_type","left_ts","ongoing_activities","unopened_activities","_one_of_decls_84","_one_of_decls_85","OnlineBonusConf","_one_of_decls_86","_one_of_decls_87","TaskCard","TaskStarLevel","BonusInfo","StageInfo","current","max","ScheduleInfo","task_item","condition","game_ids","pay_types","task_id","star_level","round_info","stage_info","bonus_info","schedule_info","desc","banner","DEFAULT","has_round_info","has_stage_info","_one_of_decls_88","_one_of_decls_89","PayChannelConf","amount_list","tag","android_url","ios_url","tag_tip","AdjustInfo","_one_of_decls_90","_one_of_decls_91","has_adjust_info","writeUint32","readUint32","_one_of_decls_92","Submit","pay_id","open_type","url","ReportAgencyReq","_one_of_decls_93","agency_account","ReportAgencyResp","_one_of_decls_94","_one_of_decls_95","FilterType","ALL","_one_of_decls_96","PayRecord","can_comment","comment_star","comment_content","_one_of_decls_97","_one_of_decls_98","NewTripleGiftStatus","GiftInfo","award_percent","receive_amount","UN_USED","gift_info_list","effected_at","_one_of_decls_99","_one_of_decls_100","award_amount","_one_of_decls_101","Msgs","_one_of_decls_102","msg_type","msg_info","SettleDetails","_one_of_decls_103","is_banker","award","GameReplayRecord","_one_of_decls_104","users","msgs","settle_info","ver","Map","entries","key","fromEntries","from","deserializeBinary","_one_of_decls_105","_one_of_decls_106","_one_of_decls_107","ProductConf","_one_of_decls_108","promotional_link","promotional_material_img","promotional_copy","PromoterProductConfReq","_one_of_decls_109","PromoterProductConfResp","_one_of_decls_110","PromoterShareConfReq","_one_of_decls_111","PromoterShareConfResp","_one_of_decls_112","ShareConf","facebook_appid","whatsapp_appid","_one_of_decls_113","_one_of_decls_114","_one_of_decls_115","_one_of_decls_116","LevelSubLevel","_one_of_decls_117","upper_contribution_amount","medal_sub_level","MSL_UNKNOWN","LevelRule","_one_of_decls_118","medal_level","sub_level_rules","ML_UNKNOWN","ContributionLevelConf","_one_of_decls_119","level_rules","RateRule","_one_of_decls_120","rate","CommissionConf","_one_of_decls_121","group_name","rate_rules","_one_of_decls_122","_one_of_decls_123","contribution_level_conf","commission_confs","has_contribution_level_conf","Question","_one_of_decls_124","question","answer","CommissionDescConf","_one_of_decls_125","commission_calc_desc_img","share_desc_img","terms_conditions","questions","_one_of_decls_126","_one_of_decls_127","User","_one_of_decls_128","parent","sub_user_count","cumulative_commission_amount","available_commission_amount","daily_contribution_amount","total_contribution_amount","contribution_level","has_parent","_one_of_decls_129","detail","_one_of_decls_130","enable","product_conf","user","has_product_conf","has_user","_one_of_decls_131","_one_of_decls_132","_one_of_decls_133","_one_of_decls_134","Record","total_amount","_one_of_decls_135","_one_of_decls_136","DailyStat","day","commission_amount","child_commission_amount","sub_commission_amount","total_commission_amount","total_child_commission_amount","total_sub_commission_amount","daily_stats","_one_of_decls_137","OrderBy","ORDER_BY_UNSPECIFIED","OrderType","ASC","_one_of_decls_138","SubCommission","child_amount","sub_amount","bind_at","sub_commissions","_one_of_decls_139","_one_of_decls_140","child_contribution_amount","sub_contribution_amount","_one_of_decls_141","_one_of_decls_142","GameDetailStat","SubContribution","game_stats","sub_contributions","HttpRequestUtil_1","ApiReqPlain","reqHeader","buildHeader","serializeBinary","appName","AppParamManager","getAppName","app_name","channleId","bindId","validataBind","channelListId","ApiErrorCode_1","BaseServiceErrorCenter_1","ServiceOperateType_1","ServiceErrorNetwordError_1","ServiceErrorNetwordTimeout_1","ServiceEnterHallFailedAlert_1","ServiceErrorShowToast_1","ServiceErrorToLoginScene_1","ServiceErrorUpgradeAccount_1","ServiceErrorWithdrawAlert_1","ServiceErrorNetwordErrorAlert_1","ApiServiceErrorCenter","applyDeflaultHandler","ServiceErrorShowToast","applyHandler","ServiceErrorToLoginScene","ServiceErrorUpgradeAccount","ServiceErrorWithdrawAlert","ApiErrorCode","TIMEOUT","HTTP_ERROR","OFFLINE","initializeLoginHandler","applyHandlerWithType","ServiceOperateType","Login","setInstance","safePutIn","safePutOut","pay_status","withdraw_conf","withdraw_set_defualt_account","bind_withdraw_account","unbind_withdraw_account","check_bind_account_risk","get_withdraw_accounts","withdrawExchange","withdrawRecords","exchangeCode","HeartCheck_1","defaultHandler","Symbol","_operateMap","onInitialize","None","handler","applyDeflaultHandlerWithType","has","getHandlerMap","getHandler","catchError","onCatchError","SocketInternalEvent_1","config","msgId","msgData","listener","emit","SocketInternalEvent","SEND_MESSAGE","CLOSE","DESTROY","RECONNECT","ERROR","option","msgType","lodash","includes","onMessage","Lighter_1","EventCode_1","Tools_1","BundleCommonMgr_1","CommonLanguage_1","TimerUtil_1","CommonSocketAttachment_1","DebugLogAttachment_1","ErrorStSocketAttachment_1","BaseSocket_1","SocketState","attachments","_listener","EventTarget","_configs","state","checkTimeKey","retryConnect","NetworkOnline","onNetworkOnline","bind","NetworkOffline","onNetworkOffline","setTimeout","initListen","initAttachments","send","reconnect","applyAttachment","applyConfig","log","blacklist","attachmentCtor","attachment","push","configs","merge","keys","forEach","targetConfig","filter","v","game","EVENT_HIDE","stopCheckConnect","attach","onBeforeUserClose","disconnect","EVENT_SHOW","window","addEventListener","targetOff","removeEventListener","UNIVERSE","networkClose","onClose","applyLoadingUi","onInit","TimerUtil","steup","checkConnect","stop","getState","WebSocket","OPEN","switchHost","curentHost","hostLenght","hideLoadingToast","networkError","showLoadingToast","Tools","formatString","trackEnd","getSocket","EVENT_CODE","RequestTimeout","_f","_e","Connect","initHost","enableNetworkEvent","connect","disableGameEvent","disableNetworkEvent","onError","onMessageHandle","ctor","getMessageCtor","onOpen","onAuthReq","destroy","BundleCommonMgr","getBundleNameDescForAlert","connectSuccess","Open","onSendMessage","CryptMgr_1","CommonSocket_1","CommonSocketUtil_1","aesKey","socket","console","onMessageHandler","onOpenHandler","onCloseHandler","decryptData","Uint8Array","CommonSocketUtil","getMessageId","buffer","slice","getDecodeClass","messageData","decode","e","addMessageId","encode","encryptData","isEncrypt","aes_decrypt","aes_encrypt","addCryptId","cryptId","CurrencyUtil_1","BetChip","Component","numItemListArr","atlas","chipIndex","faceValue","attr","chipFrame","getSpriteFrame","getComponent","Sprite","spriteFrame","arr","chipsNumType","initChipNumFrame","numItem","initNumItem","numSpriteFrame","numStr","CurrencyUtil","formatChipMoney","numCode","SpriteAtlas","BingoRuleDialog","BlackIpUtil","blackListFlag","chcekIsInBlackList","isInBlackList","BrcGraphicsMgr_1","SpriteManager_1","CommonSkin_1","BrcBigBattleDLTrendFrame","dlTrend","mainScrollView","mainContent","dlBall","loadingNode","_itemSize","_maxLine","_maxItem","_trendData","_dataInfoArr","_maxLineMinusArr","_clickCallback","_miniItem","self","isValid","row","column","itemSize","clickCallback","graphics","Graphics","drawTrendTableView","trendData","isUpdate","dataColumn","maxCount","maxIndex","bigCountIndexArr","jLen","index","diffValue","maxItem","bigCountInfo","j","maxWidth","x","y","disposeTrendDataAction","updateUIWithTrendData","drawCircleWithData","scheduleOnce","scrollToRight","isLoading","updateViewState","trendDatas","maxLine","indexOf","winIndex","win","heCount","he","lineIndex","rowIndex","ballInfo","trendBall","instantiate","addChild","updateTrendBall","childrenArr","children","childrenCount","dataInfoCount","childNode","removeChild","ballNode","shouldBlink","opacity","SpriteManager","loadSpriteBundle","LoadOnDemand","tk_room_quan_blue","tk_room_quan_red","heNode","getChildByName","setHeNodeColor","action","blink","runAction","color","Color","UIDepend","LabelManager","setLabelString","loading","ScrollView","tableBgColor","tableLineFillColor","tableLineStrokeColor","clear","fillColor","fromHEX","rectX","rectY","rectWidth","rectHeight","rect","fill","strokeColor","lineWidth","lineJoin","LineJoin","ROUND","lineCap","LineCap","line","moveTo","lineTo","stroke","BrcRedBlackDLTrendFrame","tk_room_quan_black","Injector_1","BaseSocketAttachment_1","UniverseProto_1","UniverseSocketMgr_1","CommonBroadCastObserver_1","MessageID","UniverseProto","CommonBroadCastSocketAttachment","observer","BROADCAST_NT","BROADCASTS_NT","ret","BroadCastList","Injector","Inject","H5Util_1","PlatformType_1","SkeletonHelper_1","BrowserUtil","BrowserType","DirectionType","transateBrowserType","H5Util","platform","PlatformType","H5","Browser","sys_url","app_url","WebView","open","direction","withUserInfo","hoverMenu","param","transateType","userid","uid","getBrandCode","getDeviceID","orientation","openBrowser","transateUrlParams","playPortraitAnim","openUrlByWebView","isSafari","openUrlByBrowser","Portrait","canvas","CocosUtils","getSceneCanvas","helper","createInParent","position","v3","load","Priority","JumpToAppealAnim","play","getAnimationNames","getNode","removeFromParent","queryStringEncoding","obj","p","hasOwnProperty","encodeURIComponent","join","commonGame","ToastUI","LoadingUI","StartAndStopAnim","backBtn","commonPeopleBtn","RechargeBtn","UnPriority","gameRuleContent","LoadingWithFont","CommonRuleLanguage_1","CachetaRuleDialog","closeN","left","right","pages","stopAutoScroll","scrollToTop","tween","to","start","onCloseClick","initText","texts","rule","cacheta","idx","pageTitle","find","title1","content1","title2","content2","title3","content3","content4","content5","CalendarDayType","CalendarEnum_1","CalendarItem","lbDay","spSel","curSelectDayColor","preOrNextMonthColor","nextMonthColor","greaterThanTodayColor","curMonthColor","_dayItemInfo","selectCallFunc","selectMinTimestampLimit","func","dayItemInfo","String","dayTimestamp","Date","inYear","inMonth","getTime","curTimestamp","curYear","curMonth","curDay","setDayLabColor","isSelect","setDayBG","setInteractable","Button","interactable","isCurSelectDay","belongTo","IN_NEXT_MONTH","IN_PRE_MONTH","CalendarItem_1","Calendar","lab_yearMonth","daysRoot","calendarItemNode","btn_right","btn_bigRight","btn_left","btn_bigLeft","_curSelectYear","_curSelectMonth","_curSelectDay","_curYear","_curMonth","_currDay","selectDateTimestamp","minSelectYearLimit","minSelectMonthLimit","minSelectDayLimit","_dayItemList","_daysItemInfo","selectDateLimit","DateUtils","getPreviousStartTimestamp","date","getFullYear","getMonth","getDate","initDayItem","initDate","updateDate","initBtnStatus","init","onSelectDate","year","month","getDay","totalDays","getDaysWithYeayAndNibth","fromWeek","getWeekInMonth","preMonth","preMonthInYear","preTotalDays","nextMonth","nextMonthInYear","curMonthStartDay","nexMonthStartDay","IN_CUR_MONTH","timeStamp","transformDateNoZone","calcDaysData","setDay","dayInfo","initView","checkBtnMonthLeft","setBtnMonthLeftDisable","setBtnYearLeftDisable","setBtnMonthRightEnable","setBtnYearRightEnable","checkBtnMonthRight","setBtnMonthRightDisable","setBtnYearRightDisable","setBtnMonthLeftEnable","setBtnYearLeftEnable","enableAutoGrayEffect","level_1","level_2","level_3","level_4","skeletonAnim","bone","CardTypeResultConfig_1","CardTypeResult","typeNode","animBgSp","spriteBgNode","_playingAnim","_currBone","resultSpriteFrame","showAnim","endCallback","scale","getRootNodeScale","showSpriteFrame","loadSpriteForNodeBundle","getResultSpriteBg","getSkeletonAnimAndBone","findBone","setAnimation","setCompleteListener","dt","setPosition","worldX","worldY","scaleX","scaleY","sp","Skeleton","ChipFrame","animNode","_status","_chipIndex","_value","getChipFrame","hideSelectedAnimAction","ChipTypeEnum","BundleMgr_1","ChipUtil","spriteName","commonChipType","BundleMgr","getResFromBundle","commonChipValue","ChipValueEnum","GameEnum_1","CommonEventName_1","FormatTestUtil_1","AppParamManager_1","CommonAccountUtil","addAccount","pwd","nickName","accountType","FormatTestUtil","MIN_ACCOUNT_LENGTH","newAccounts","auto","historyAccounts","getAllHistoryAccounts","foundItem","foundNickName","newNickName","unshift","initAccount","saveHistoryAccounts","director","LOGIN_SUCCESS","deleteAccount","clearGuestAccount","isGuestAccount","getLastAccount","getHistoryAccounts","getAllLastAccountObject","account2Object","getAllLastAccount","brand","updateLastAccount","updateAccountToLast","lastAccount","chain","remove","thru","array","newAccount","cloneDeep","getAccountByPhone","foundAccount","getAllAccountByUserId","userId","getAccountByUserId","loadOwnAccounts","isFacebookAccount","hasGuestAccount","hasGuest","isGuest","AccountType","TYPE_GUEST","testPhoneNumber","isFacebook","TYPE_FACEBOOK","startsWith","getHistoryAccountCount","historyArray","tap","historyAccountsText","getAccountInfo","JSON","parse","saveKeyChainAccount","loadKeyChainAccount","saveAccountInfo","stringify","CommonBroadCastEvents","Listener_1","CommonBroadCastEvents_1","CommonNetworkSwitchObserver_1","CommonBroadCastLogic","CommonBroadCastLogic_1","listenChange","onUpdateData","unListenChange","getSwitch","checkMessage","pop","show","Math","random","onCreate","create","Injectable","ValueObserver_1","CommonUserBroadCastObserver_1","CommonBroadCastObserver","MAX_COUNT","other","pushOnce","isSelf","UserID","toString","selfTotal","totalLength","otherTotal","getOld","evenyEmpty","obs","popMessage","CommonBroadCastUtil_1","menu","CommonBroadCastSet","setPostion","convertToWorldSpaceAR","reset","CommonBroadCastType","world","ObjectLabel_1","CommonBroadCastType_1","CommonBroadCast","mask","anim","logic","pos","_isMoveIng","addPersistRootNode","listen","onShow","onSetPosition","onResetPos","getCurrent","convertToNodeSpaceAR","listenOffTarget","unschedule","_updateNoticeMove","Template","element","Element","result","Value","formatMoney","Number","playAnim","object","delay","_endMovePosX","floor","showFinish","BroadCastType","VipLevelUp","playVipAnim","vipLevel","help","animName","loop","CommonEventName","EVENT_NAMING_ACCESSLIST_MSG","EVENT_NAMING_GATEWAY_MSG","EVENT_NAMING_SERVERLIST_MSG","EVENT_IM_NEW_MESSAGE","EVENT_NAMING_ST","PAY_SUCCESS","LOGIN_BONUS_MSG","FISHING_FULL_RESOURCES_LOADED","SHOW_CONTINUE_GAME","SHOW_TOPUP","SAVE_IMAGE_SUCCEED","SAVE_IMAGE_FAILED","SAVE_PROMOTION_MATERIAL_SUCCEED","SAVE_PROMOTION_MATERIAL_FAILED","SYNTHESIZE_PROMOTION_IMAGE_SUCCEED","SYNTHESIZE_PROMOTION_IMAGE_FAILED","MailGetRemoteData","MailSaveCureentList","MailRomoteDelList","MailRomoteDelOne","MailShowRedDot","ACTIVITY_REMINDER_SHOW_STATE","OPEN_ONLINE_BONUS_TIPS","PASSWORD_LOGIN_SUECECC","CUSTOMER_RED_DOT_REFRESH","WITHDRAW_SELECT_TAB_INDEX","EVENT_GET_AWARD","AUTH_SUCCESS","CLICK_PAGE_ITEM","SET_SAFARI_DESK_ICON","CommonFeatureSettingObserver","CommonGameListObserver","IntervalsDecorator_1","CommonGameReplay","speedBtnLb","playBtn","pause","ctrl","_speedIndex","resume","speeds","timeScale","IntervalsDecorator","LocalStorageMgr_1","LocalStorageObserver_1","HostListLogic_1","CommonHostListSwitchCountObserver_1","CommonHostListObserver","_wsHost","_httpHost","serviceHostList","ProjectInfo","DEFAULT_HOST","readHostList","saveHostList","list","RegExp","first","test","currentHost","shift","addSwitchCount","splice","game_list","gameCode","game_code","fromPairs","mergeGameCode","gameType","getHosts","CacheObserver_1","CommonHostListSwitchCountObserver","HttpObserver_1","ApiMgr_1","CommonKycInfoObserver","getKyc","phoneHead","BaseEnumComp_1","EnumActive_1","FormatConstUtil_1","FormatTemplateUtil_1","CommonKycInfoObserver_1","CommonKycInfo","cpf","cep","nameItem","kycObs","onRefreshUi","isEmpty","getComponentsInChildren","EditBox","edit","errorComp","nodeName","capitalize","query","c","activeIndex","EnumActiveType","HideAll","cpfEmpty","FormatTemplateUtil","cnpj","maxLength","ShowFirstChild","emailEmpty","testEmail","phoneEmpty","MAX_PHONE_LEN","MIN_PHONE_LEN","nameEmpty","isLimit","getComponentInChildren","every","setKyc","translate","CommonLanguageEn","version","accountBlackError","wrongAuthCode","accountRestrictIp","accountRestrictDevice","registerFail","accountRegistered","paySuccess","continuebet","betLimit","round","recent","gotIt","bindAccountTips","copySuccessTips","deleteAccountFailed","registerLogin","upgradeAccountSuccess","passworldLenLimit","passworldFormot","passwordDifferent","nickNameLenLimit","phoneNumberError","bindSuccess","accountRuleShort","accountRuleError","findPasswordSuccess","abnormalLaterRetry","codeInvalid","timeout","refreshSuccess","confirm","cancel","continueExit","continueGame","returnHall","confirmExit","recharge","downBankerWithExit","networkError4","networkError6","rechargeTip1","rechargeTip2","openSafebox","rechargeTip5","auto2","continueBet","trialRecharge","idleTimeoutMsg","gaming","gameLoadError","coinLock","iKnow","unknownError","timeoutTips","creditInsufficientrechargeTip","lessThanRedLimit","higherThanRedLimit","redLimit","stageBet","stageAward","bigBattleRoomName","redBlackRoomName","requsetError","computeing","redBlackCardType","allInAlert","iKonw","bindOther","rechargeTip6","invalidReferId","loadingResFailure","CommonLanguageHi","CommonLanguageId","CommonLanguagePt","CommonLanguageZh","LanguageType_1","BaseBundleLanguage_1","CommonLanguageEn_1","CommonLanguagePt_1","CommonLanguageHi_1","CommonLanguageId_1","CommonLanguageZh_1","language","LanguageType","EN","PT","HI","ID","ZH","CommonLaunchConfigObserver","CommonListenUiEvent","LISTEN_UI_HALL_VIEW_SHOW","CommonNetworkSwitchObserver","defaultValue","Pool","NodePool","prefab","put","parentNode","maxChildrenCount","firstChip","CommonPrefabMgr","PrefabManager","loadPrefabInsBundle","getBundleNameDescForLoadingUI","oldLoading","isRemoved","timeRemoveLoadingFirst","removeLogic","clearTimeout","timeRemoveLoading","child","completeCallback","prefabPath","getBundleNameDescForGameRuleContent","loadContent","removeCommonLoadingWithBrc","bundleDesc","getBundleNameDescForLoadingWithFont","posX","posY","CommonPromoterVerifyBrdObserver","args","CommonProto","STATUS","ConnectType","ChatType","Emotion","Ping","Timestamp","Pong","ErrorST","Status","Msg","OK","AuthReq","Token","RoomKind","RoomID","GameID","Lan","CONNECT_NORMAL","SyncCreditReq","ChatReq","Content","Type","ToUserID","PERSONAL","ChatNt","FromUserID","EnumController_1","CommonFeatureSettingObserver_1","CommonPromoterVerifyBrdObserver_1","CommonRegisterForGiftView","confirmPassword","inviteEdit","inviteNode","show4Name","launchAmount","getUpgradeAmount","toLower","containInvaildSymbol","checkReferId","bindIdentity","AdjustTrack","trackEvent","register_account","showUI","PasswordLogin","UserAvatarModel_1","PokerResEnum_1","ChipTypeEnum_1","ChipValueEnum_1","CommonResLight","priority","resPath","Prefab","font_bold","Font","btn_normal","SpriteFrame","btn_seleced","CHIP_TYPE_1","CHIP_VALUE_0","CHIP_VALUE_1","CHIP_VALUE_2","CHIP_VALUE_3","CHIP_VALUE_4","CHIP_VALUE_5","CHIP_VALUE_6","CHIP_VALUE_7","CHIP_VALUE_8","CHIP_VALUE_9","CHIP_VALUE_C","CHIP_VALUE_COMMA","CHIP_VALUE_K","CHIP_VALUE_M","CHIP_VALUE_POINT","CHIP_TYPE_2","CHIP_TYPE_3","CHIP_TYPE_4","CHIP_TYPE_5","CHIP_TYPE_6","CHIP_TYPE_7","loadingToast","tipsInfo","prop","1001","2001","3001","SkeletonData","AVATAR_ID","DYNAMIC_0","MALE","NORMAL_1","NORMAL_2","NORMAL_3","NORMAL_4","NORMAL_5","NORMAL_6","NORMAL_7","NORMAL_8","FEMALE","tag_1","tag_2","tag_3","tag_4","tag_5","safari_desk_icon","unpriority","UserAvatar","poker","PokerResEnum","POKER_BG","POKER_GRAY","POKER_NORMAL","SPADE_BIG","SPADE_SMALL","HEART_BIG","HEART_SMALL","DIAMOND_BIG","DIAMOND_SMALL","CLUB_BIG","CLUB_SMALL","BLACK_FLOWER_J","BLACK_FLOWER_Q","BLACK_FLOWER_K","RED_FLOWER_J","RED_FLOWER_Q","RED_FLOWER_K","BLACK_2","BLACK_3","BLACK_4","BLACK_5","BLACK_6","BLACK_7","BLACK_8","BLACK_9","BLACK_10","BLACK_J","BLACK_Q","BLACK_K","BLACK_A","RED_2","RED_3","RED_4","RED_5","RED_6","RED_7","RED_8","RED_9","RED_10","RED_J","RED_Q","RED_K","RED_A","loadOnDemand","hhdz_zs_bar_red","hhdz_zs_bar_black","windowOpen","AudioClip","windowClose","btnEffect","Poker","Show","Start","Stop","alert","CountDown","CommonUserSetting","Star","tk_dvst_ic_dragon","tk_dvst_ic_tiger","tk_dvst_ic_peace","Rule","SevenUpDownRule","ssp_bold","ssp_regular","ssp_semibold","CommonRetrievePassword","Register","getAwardDialog","Rules","LUDO","RUMMY_POINT","TEENPATTI","GameRule","Score","lose","CommonResWorldCup","CountDownTimer","TRUCO","BINGO","CACHETA","hall_bg","spin_bg","btn_bg","cs_regular","CommonResultType","InfoMosaicUtil_1","CommonAccountUtil_1","CommonUserLoginUiUtil_1","CommonSmsCode_1","accountEd","phoneEd","newPass","regioCodeEd","setGetSmsBtnClick","onGetSmsCode","InfoMosaicUtil","phone2Mosaic","requestCode","verifyBindPhone","resetPass","RETRIEVE_PWD","CommonUserLoginUiUtil","launchHall","brcBigbattle","contentRich","brcRedBlack","brcShark","bigsmall","CommonRuleLanguageEn_1","CommonRuleLanguagePt_1","CommonRule","BaseBundleSkin_1","BundleNames_1","SkinType_1","CommonResWorldCup_1","BundleNames","COMMON","skin","SkinType","WORLD_CUP","LIGHT","CommonSmsCode","codeEd","_phone","callfunc","smsCodeReq","toCodeCd","saveFormalUserAccount","DateUtils_1","CommonProto_1","BackHeartCheck_1","FrontHeartCheck_1","MsgType","_heartCheck","99","nowTimer","ping","createHearkCheck","updateLastTime","onPong","checkTimestampDiff","protobufData","DataView","getUint16","messageId","add2byteToBuffer","totalBuffer","byteLength","indexBuffer","ArrayBuffer","setUint16","STORAGE_TO_BOOLEAN","CommonStorageMgr","CommonStorageMgr_1","saveData","readData","isFirst","flag","saveActivityReminderShowState","redDotFlag","savaFirstOpenActivityReminderFlag","PosStr","taskId","localData","noticeReadRecordList","readRecordList","localStorageMgr","noticeSlapList","slapfaceLocalJson","upsConf","_saveSlapfaceData","clearData","topupSaveJson","visible","saveVisible","CommonUiLanguageEn","C1","C2","C3","C4","C5","C6","C7","C8","C9","C10","C11","C12","C13","C14","C15","C16","C17","D1","D2","D3","D4","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","H1","H2","H3","H4","H6","H7","H8","H9","H10","H11","CommonRegister","A1","A2","A3","A4","A5","A6","A7","A8","A9","A10","CommonPasswordLogin","B1","B2","B3","B4","B5","B6","B7","B8","D5","D6","D7","D8","D9","D10","D11","D12","D13","D14","D15","D16","D17","D18","D19","CommonUiLanguageHi","CommonUiLanguageId","CommonUiLanguagePt","CommonUiLanguageZh","CommonUiLanguageZh_1","CommonUiLanguageEn_1","CommonUiLanguagePt_1","CommonUiLanguageHi_1","CommonUiLanguageId_1","CommonUiLanguage","ProjectInfo_1","SceneType_1","CommonUpdateNewObserver","CommonUpdateNewObserver_1","newValue","onNotice","curent","target","vL","vR","a","parseInt","b","tryUpdate","saveUrl","GAME_VERSION","VersionName","UpdateUrl","saveGameUrl","gameVersion","compareVersion","UpdateType","UpdateTypeEnu","FORCE_HOT","NORMAL_HOT","scene","SceneType","Hall","onUpdateH5","loadUrl","MSG_TYPE_MAX_COUNT","sum","CashSuccess","OnlineReward","Game","del","otherCount","sumBy","reduce","pre","sortBy","parseData","Desc","CommonResultType_1","CommonUserInfoUtil","updateUserInfo","getUserInfoRequest","userInfo","initUser","Success","err","Failed","catch","updateUserBalance","getUserBalanceRequest","CommonUserLastLoginObserver","toUserId","userData","previous","nowTime","now","isToday","CommonUserLoginInfoObserver_1","CommonUserInfoUtil_1","CommonUserLoginBase_1","handlers","onEnterLoginSuccess","onLoginSuccess","AdjustTrack_1","CommonSocketModel_1","onLogin","__awaiter","onLoginFailure","pull","saveUserDataEvent","CommonSocketModel","NB_ANONYMOUS","user_active","onEnterLoginFailure","CommonUserLoginCheckUtil","checkAccount","checkPassword","resp","respHeader","guestLogin","CommonUserLoginInfoObserver","TYPE_ACCOUNT","Switch_1","BlackIpUtil_1","CommonUserLastLoginObserver_1","needTriggerHallStartupChain","AudioManager_1","PlayButtonSoundUtils_1","H5Page_1","MultLangLabel_1","versionLb","_content","initFunc","toggle","toggleComp","PlayButtonSoundUtils","addPlaySoundComp","addComponent","currentName","GAME_VERSION_V","AudioManager","isMusicOpen","setMusicOpen","isEffectOpen","setEffectOpen","readActivityReminderShowState","showState","H5Page","onPrivacyClicked","onTermsClicked","onRefundClicked","onAboutClicked","CommonUserLoginAuto_1","CommonUserLoginGuest_1","CommonUserLoginPassword_1","_passwordLogin","_guestLogin","_autoLogin","updateTime","removeHandler","autoLogin","logout","Z_ORDER","DIALOG","TOAST","timerLabel","boneName","_skeleton","_duration","_endCb","duration","endCountDownCallBack","playEffect","track","trackTime","animationEnd","toFixed","running_process","MoneyUtil_1","CurrencyBRL","money","digit","MoneyUtil","keepDigitPrecision","CurrencyIDR","CurrencyINR","Flavor_1","CurrencyBRL_1","CurrencyINR_1","CurrencyVND_1","liToYuan","Skin","isBall","CurrencyVND","isWorldCup","isLight","formatGold","roundDown","toThousandthsPass999999WithMWithD","toThousandthsPass999WithKWithD","formatMoneyPass999999999WithB","toThousandthsPass999999999WithB","formatShortMoney","formatMoneyPass999999WithM","formatMoneyForCount","toThousandthsPass999999999WithM","formatWithoutK","formatMoneyForAmount","formatLongMoney","toThousandthsPass999999WithK","toThousandthsPass999","toThousandthsPass999WithK","to999WithK","formatRoundUpMoney","roundUp","toRoundUpThousandthsPass999WithK","toThousandths","toMoney","thousandths","showGoldForBrcBalance","DEFALUT_NAVITEM_INDEX","DataCacheMgr","loginBonusData","navItemIndex","setNavItemIndex","DropDownItem","sprite","Toggle","DropDownOptionData","optionString","optionSf","DropDownOptionData_1","DropDownItem_1","DropDown","template","labelCaption","spriteCaption","labelItem","spriteItem","optionDatas","comboxTiggerNode","validTemplate","items","isShow","_selectedIndex","selectedIndex","refreshShownValue","js","setUpTemplate","_dropDown","createDropDownList","setParent","itemTemplate","addItem","isChecked","onSelectedItem","height","rotation","selected","dropDownItems","createItem","enabled","delayedDestroyDropdownList","destroyItem","destroyDropDownList","itemToggle","isChildOf","clamp","dropDownList","hide","onClick","off","min","DynamicMounNodeUtil_1","DynamicMounNodeComponent","spSkeletonNode","_spSkeleton","_DynamicMounNodeUtil","_mounNode","_boneName","mounNode","skeletonAnimName","completeListener","setEventListener","trackEntry","eventData","dataInfo","trackName","updateMountNode","spine","mountNode","updateScale","callFun","currBone","worldPos","getPosition","mounArr","mountObj","isFirstTrigger","firstTriggerFun","DynamicMultipleMounNodeComponent","_hasSafetyCorrective","_mounArr","_targetMultipleMounMap","targetMultipleMounMap","delayTimeAfterComplete","startSkeletonAnimationLogic","isLoop","noMount","timer","safetyCorrective","updateMultipleMountNode","findNotTrigger","findAllTargetArr","findAllTargetMount","allTargetArr","fun","directTriggerFunArr","ServiceErrorUtils_1","100","onErrorST","UNKNOWN_ERROR","PARAM_ERROR","NOT_AUTH","ROOM_IS_FULL","SERVER_CLOSED","DUP_LOGIN","TOKEN_INVALID","GOLDLOCK_CONFLICT","CUBE_ROOM_NOT_EXIST","CUBE_BANKER_FULL","CUBE_BET_OVER_LIMIT","CUBE_OFF_BANKER_FOR_CREDIT","CUBE_OFF_BANKER_FOR_COUNT","CUBE_BET_INSUFFICIENT","CUBE_BET_RED_LIMIT_LOW","CUBE_BET_RED_LIMIT_HIGH","CUBE_BANKER_INSUFFICIENT","CUBE_BET_OVER_CREDIT","ServiceErrorUtils","applySocketError","REDIRECT","INSUFFICIENT","CUBE_CHIP_ERROR","IDLE_TIMEOUT","PLAY_RULE","FormatConstBRL","PHONE_MOSAIC","reg","PHONE_FORMAT","FormatConstINR","FormatConstBRL_1","FormatConstINR_1","curMainSkin","evp","upi","upiStr","lengthCount","frontStr","tailStr","limtLength","bankStr","emailMosaic","emailStr","phoneMosaic","cpfMosaic","cnpjMosaic","removeEmoji","removeRedundantCharacter","maxLen","retStr","strLen","character","charAt","MAX_ACCOUNT_LENGTH","MIN_CODE_LENGTH","MAX_CODE_LENGTH","MIN_NAME_LEN","MAX_NAME_LEN","CPF_LEN","CNPJ_LEN","EVP_LEN","MAX_EMAIL_LEN","MIN_BANK_LEN","MAX_BANK_LEN","INDIA_PHONE_LEN","MIN_INDIA_ADDRESS_LEN","MAX_INDIA_ADDRESS_LEN","isPhoneValid","testValidCode","isCodeValid","containNumberAndLetter","testNickNameLength","testUpi","testIfsc","GameNavigation","gameTag","gameIds","tagType","GameTagType","TAG_TYPE_NEWBIE_GUIDE","gameTagTypeMap","GameReplayMessageItem","_message","State","ReplayState","ReplayOperate","_data","_options","_queue","_playIndex","_state","_delayTimeId","Play","Pause","createQueue","stopDelay","warn","toNext","delayTime","next","nextMessage","objectData","messageMap","_j","_h","_g","messageDelay","_l","_k","_s","_r","GetAwardItem_1","GetAwardDialog","awardListNode","awardListLayout","confirmeBtn","awardItemPerfab","confirmeBtnLabel","coinAnim","awardList","dialogData","refreshUI","removeAllChildren","vo","awardItemNode","setUIByVO","isShowCoinAnim","showCoinAnim","executeDoneCallBack","DialogActionType","Close","hideCoinAnim","actType","Confirm","Layout","GetAwardType_1","GetAwardFrameCtrl","TOUCH_START","_onTouchStart","FrameEvent","FRAME_TOUCH","MathUtils_1","PropConfMgr_1","TipsInfo_1","GetAwardItem","nameLabel","iconSprite","countLabel","tipsNode","_vo","getPropSpriteFrameById","saveTowDecimal","v2","iconScale","offsetHight","add","poopConf","getPropConfById","TipsInfoDir","UP","showUISync","GetAwardTipsCtrl","container","titleLabel","contentLabel","onOtherAwardItemTouch","getAwardUtils","openAwardDialog","BrowserUtil_1","H5Customer","customerInfo","pathAndFixedParams","getCustomerInfo","domain","fullUrl","Country","vip","getChn","game_version","getSvn","h5CustomerBase","orderid","onLaunchConfReq","needCheck","lastTime","connectCount","checkIntervalTimeId","reconnectIntervalTimeId","setInterval","tryReconnect","getNow","clearInterval","_template","_gameCode","hosts","I18nUtil","wroldPath","Error","langMap","getLanguageMap","_targetComponent","getValueByObjPath","placeholder","modulePath","SHARK","WALLET","__importStar","path","paths","tempPath","Integer","requireComponent","disallowMultiple","executeInEditMode","Gradient","OneColor","TwoColor","TriColor","LabelShader","_outlineUse","_outlineWidth","_outlineColor","_gradient","_color1","_color2","_color3","renderNextFrame","_mtl","outlineUse","outlineWidth","outlineColor","gradient","color1","color2","color3","once","Director","EVENT_AFTER_DRAW","updateMat","FLAG_COLOR","initMat","getMaterial","define","setMaterial","use","setProperty","r","g","Boolean","executionOrder","SelectedType","ListItem","selectedMode","selectedFlag","selectedSpriteFrame","_unselectedSpriteFrame","adaptiveSize","_selected","_eventReg","val","onSelectIndexChange","TOGGLE","SWITCH","btnCom","_btnCom","com","SIZE_CHANGED","_onSizeChange","clickEvents","createEvt","_onItemAdaptive","component","handlerName","match","evt","EventHandler","aniType","callFunc","t","by","_delSingleItem","n","displayData","listId","selectedId","CC_DEV","ListItem_1","TemplateType","SlideType","List","templateType","NODE","tmpNode","tmpPrefab","_slideMode","NORMAL","pageDistance","pageChangeEvent","_virtual","cyclic","lackCenter","lackSlide","_updateRate","frameByFrameRenderNum","renderEvent","repeatEventSingle","selectedEvent","_selectedId","_forceUpdate","_updateDone","_numItems","_inited","_needUpdateWidget","_aniDelRuning","_doneAfterUpdate","adhering","_adheringBarrier","curPageNum","slideMode","virtual","_onScrolling","updateRate","SINGLE","getItemByListId","listItem","_lastSelectedId","lastItem","emitEvents","_actualNumItems","MULT","bool","sub","multSelected","numItems","checkInited","_resizeContent","_cyclicNum","PAGE","nearestListId","layout","_delRedundantItem","firstListId","_createOrUpdateItem2","_updateCounter","displayItemNum","scrollView","_scrollView","_init","_itemTmp","_pool","_registerEvent","_aniDelItem","_aniDelBeforePos","_aniDelBeforeScale","_aniDelCB","_unregisterEvent","_onTouchUp","TOUCH_CANCEL","_onTouchCancelled","_onScrollBegan","_onScrollEnded","_onSizeChanged","_layout","_align","_resizeMode","resizeMode","_startAxis","startAxis","_topGap","paddingTop","_rightGap","paddingRight","_bottomGap","paddingBottom","_leftGap","paddingLeft","_columnGap","spacingX","_lineGap","spacingY","_colLineNum","_verticalDir","verticalDirection","_horizontalDir","horizontalDirection","setTemplateItem","PREFAB","ADHERING","inertia","_onMouseWheel","_lastDisplayData","_processAutoScrolling","_startBounceBackIfNeeded","HORIZONTAL","HorizontalDirection","LEFT_TO_RIGHT","_alignCalcType","RIGHT_TO_LEFT","VERTICAL","VerticalDirection","TOP_TO_BOTTOM","BOTTOM_TO_TOP","GRID","AxisDirection","percentage","time","newPosition","mul","EPSILON","reachedEnd","abs","deltaMove","getContentPosition","ResizeMode","CHILDREN","cellSize","Widget","_sizeType","trimW","trimH","printLog","_customSize","fixed","_getFixedSize","lineNum","ceil","colNum","_allItemSize","_allItemSizeNoEdge","totalSize","_cyclicPos1","spacing","_cyclicPos2","_cyclicAllItemSize","_cycilcAllItemSizeNoEdge","_lack","slideOffset","targetWH","ev","frameCount","scrollPos","addVal","isAutoScrolling","_calcViewPos","vTop","vRight","vBottom","vLeft","viewTop","viewBottom","viewRight","viewLeft","itemPos","curId","endId","breakFor","_calcItemPos","bottom","top","ww","hh","haveDataChange","sort","_createOrUpdateItem","_calcNearestItem","elasticLeft","elasticRight","elasticTop","elasticBottom","itemX","itemY","cs","anchorX","anchorY","colLine","_calcExistItemPos","_beganPos","curScrollIsTouch","scrollToListId","_pageAdhere","adhere","captureListeners","eventPhase","Event","AT_TARGET","itemNode","_listId","_scrollItem","_scrollPos","simulate","updateAll","_scrollToListId","_scrollToSo","scrollTo","_scrollToEndTime","curPos","dis","timeInSecond","prePage","nextPage","offset","_resetItemSize","canGet","setContentSize","widget","updateAlignment","setSiblingIndex","_updateListItem","listIdOrItem","isNaN","getItemPos","d","_getOutsideItem","isCached","m","curLastId","resetSelectedId","showAni","newId","haveCB","newData","newCustomSize","idNumber","posData","overStress","updateLayout","targetX","targetY","viewPos","comparePos","scrollToOffset","center","skipPage","pageNum","temp","Float","range","slide","LoadingSceneStateObserver","enterUi","bundleName","progress","FIRE_JOKER","WOLFGOLD","BIG_SMALL","HALL","LoadingToastUi","delayShow","stopAllActions","updateBgWidth","bgNode","LudoGameRule","CommonHostListObserver_1","CoreEvents_1","room","tableId","h5GameInfo","hoverButton","screenDirection","checkGoldLock","currentMiniGame","roomList","isFishingRestore","startGameManually","lastGameRoomId","CoreEvents","SWITCH_HOST","getHttpServer","getWsServer","curRoomList","getSeeRoomListByGameID","foundRoom","curRoom","roomlist","useH5","h5Url","frameUrl","PageItem","lab_pageNum","pageNun","posIndex","DropDownListEx_1","CommonUserLoginCheckUtil_1","accountNode","pwdNode","initUserDropList","accounts","dataList","initItems","onSelect","onDelete","event","clickManager","loginAccount","verifyData","accountStr","pwdStr","PokerCardEnum","PokerCardEnum_1","PokerResMgr_1","getPokerDiamondBig","number","getPokerRedA","flowerColor","getPokerDiamondSmall","getPokerRed2","getPokerRed3","getPokerRed4","getPokerRed5","getPokerRed6","getPokerRed7","getPokerRed8","getPokerRed9","getPokerRed10","getPokerRedFlowerJ","getPokerRedJ","getPokerRedFlowerQ","getPokerRedQ","getPokerRedFlowerK","getPokerRedK","getPokerClubBig","getPokerBlackA","getPokerClubSmall","getPokerBlack2","getPokerBlack3","getPokerBlack4","getPokerBlack5","getPokerBlack6","getPokerBlack7","getPokerBlack8","getPokerBlack9","getPokerBlack10","getPokerBlackFlowerJ","getPokerBlackJ","getPokerBlackFlowerQ","getPokerBlackQ","getPokerBlackFlowerK","getPokerBlackK","getPokerHeartBig","getPokerHeartSmall","getPokerSpadeBig","getPokerSpadeSmall","cardID","frames","DIAMOND_A","getDiamondAFrames","DIAMOND_2","getDiamond2Frames","DIAMOND_3","getDiamond3Frames","DIAMOND_4","getDiamond4Frames","DIAMOND_5","getDiamond5Frames","DIAMOND_6","getDiamond6Frames","DIAMOND_7","getDiamond7Frames","DIAMOND_8","getDiamond8Frames","DIAMOND_9","getDiamond9Frames","DIAMOND_10","getDiamond10Frames","DIAMOND_J","getDiamondJFrames","DIAMOND_Q","getDiamondQFrames","DIAMOND_K","getDiamondKFrames","CLUB_A","getClubAFrames","CLUB_2","getClub2Frames","CLUB_3","getClub3Frames","CLUB_4","getClub4Frames","CLUB_5","getClub5Frames","CLUB_6","getClub6Frames","CLUB_7","getClub7Frames","CLUB_8","getClub8Frames","CLUB_9","getClub9Frames","CLUB_10","getClub10Frames","CLUB_J","getClubJFrames","CLUB_Q","getClubQFrames","CLUB_K","getClubKFrames","HEART_A","getHeartAFrames","HEART_2","getHeart2Frames","HEART_3","getHeart3Frames","HEART_4","getHeart4Frames","HEART_5","getHeart5Frames","HEART_6","getHeart6Frames","HEART_7","getHeart7Frames","HEART_8","getHeart8Frames","HEART_9","getHeart9Frames","HEART_10","getHeart10Frames","HEART_J","getHeartJFrames","HEART_Q","getHeartQFrames","HEART_K","getHeartKFrames","SPADE_A","getSpadeAFrames","SPADE_2","getSpade2Frames","SPADE_3","getSpade3Frames","SPADE_4","getSpade4Frames","SPADE_5","getSpade5Frames","SPADE_6","getSpade6Frames","SPADE_7","getSpade7Frames","SPADE_8","getSpade8Frames","SPADE_9","getSpade9Frames","SPADE_10","getSpade10Frames","SPADE_J","getSpadeJFrames","SPADE_Q","getSpadeQFrames","SPADE_K","getSpadeKFrames","PokerFlowerEnum","BLACK_JOKER","RED_JOKER","PokerCardMgr_1","Rank","Suit","Card","suit","Spade","Heart","Club","Diamond","rank","RA","R2","R3","R4","R5","R6","R7","R8","R9","R10","RJ","RQ","RK","_isShowingCarFlower","flower","showMask","cardId","getCardId","cardFrames","getCardFrames","getPokerBg","hideMask","getPokerNormal","hideCardFlower","getPokerGray","PropConfMgr","_PropConf","propConf","resDesc","RedPointType","RedPointCacheKey_1","RedPointObserver","toIndex","setPoint","hasPoint","points","NewbieGuide","bar","HallBar","confirmPwdNode","confirmPwd","inviteCode","registerRequest","NB_REGISTER","editbox","textLabel","RuleItem_1","RuleContent","ruleItem","ruleItemRich","BIGBATTLE","REDBLACK","loadSpriteRule","fillContent","loadResFromBundle","getRect","ruleContent","contentDeploy","ruleItemNode","RuleItem","contentNode","tagColor","formatedContent","colorValue","toHEX","richTextLabel","RuleContent_1","loadPrefabBundle","newSafariDeskIcon","_platform","iconHandler","nativeURL","_texture","nativeUrl","link","document","createElement","rel","href","head","appendChild","BundleCenter_1","LoadingSceneStateObserver_1","loadingSceneStateObserver","_currentScene","GameDatabase","getBundleNameWithGameId","LOADING","onLaunchScene","isSwitchUi","onLoadingStart","onProgress","onSuccess","onLoadingSuccess","onFailed","tryAgain","PoolMgr_1","PageItem_1","CREATE_ITEM_DIR","SelectPageCom","lab_totalPage","pageEditBox","pageItemRoot","pageItem","maxPageItemNum","space","curSelectItemNode","totalPage","itemNodeList","itemNodePosList","isMoveing","itemCenterIndex","minSelectThreshold","maxSelectThreshold","onLeft","onRight","onPageEditBoxEnded","onCilckPageItem","initLeftAndRightBtnActive","initLeftAndRightBtnPos","curSelectPageNum","indexs","itemWidth","totalWidth","calcWidthWithItenNum","calcItemPos","createItems","initItemNodePosList","initItemsPos","initPageItemRootNodeSize","setScale","itemHeight","increaseWith","increaseHeight","destroyAllChildren","createNum","createPageItemNode","PoolMgr","itemNum","startPosX","preSelectPageNum","getPageNum","moveStep","calcMoveStep","changePage","RIGHT","dir","startPageNum","selectNode","moveItem","pageIndex","getPosIndex","setPosIndex","animList","toPos","getItemMoveToPos","updateItemPosIndex","all","putNode","difference","critical","trim","inputPageNum","calcStartPageNum","leftPageNum","clearPoolWithPrefab","ServiceCatchResult","ServiceErrorSelectAlert_1","ServiceErrorSelectAlert","enterHallFailed","ServiceErrorToHallScene_1","ServiceErrorCoinLock","ServiceErrorToHallScene","BaseServiceErrorHandler_1","ServiceErrorConfirmAlert","getDefaultShowNotice","getDefaultConfirmText","onConfirmBtnClick","ServiceErrorConfirmAlert_1","cancelText","comfirmeText","getScene","ServiceErrorUnkonw","ApiServiceErrorCenter_1","SocketServiceErrorCenter_1","promise","applyApiError","catchErrorWithType","applyApiErrorWitchType","onApiErrorWitchType","onApiError","onSocketError","accountColor","onCancalBtnClick","oddsLabs","oddsStr","readSevenUpDownOdds","odds","ServiceErrorCoinLock_1","SocketServiceErrorCenter","animSpine","_isShowEndBetAnim","callback","Switch","isSwitchAccount","loadingLaunch","timerMap","steupOnce","timeId","delete","TipsInfo","tips_up","tips_down","tips_left","tips_right","curTips","DOWN","lab_info","RESIZE_HEIGHT","nodePos","ToastItem","ToastItem_1","toastItemPrefab","toastList","toastItem","toastItemSizeChanged","setContent","deleteToast","satrtPos","allHeight","uuid","TrucoRuleDialog","trucoRule","TrucoRule","scrollToPercentVertical","PopupUtil_1","LoadingUI_1","ToastUI_1","UIMgr","toastUI","loadingUI","UILayer","POP","ALERT","MAX_ZINDEX","showLoadingCount","toastUIPrefab","getBundleNameDescForToastUI","addToast","propertyKey","descriptor","backCatch","showLoading","hideLoading","decorator","oldMethod","apply","loadingUIPrefab","applyAlert","oldValue","zIndex","new","showAlertAwait","preload","PopupUtil","showSync","showContinueBetAlert","coin","rechargeCallback","coinStr","showInsufficientAlert","checkDialogExits","popupNode","showGameAutoAlert","positiveCallback","showGameExitAlert","exitCallback","showGameNoNetworkAlert","showIdleCountDownAlert","countdownSeconds","countdownCallback","negativeCallback","showRechargeAlert","showRechargeAlert2","cancelCallback","showSafeBoxAlert","showSafeBoxAlert2","fightInsBalanceAlert","callBack","fightTimeOutAlert","showAllInAlert","betCoin","allInTips","chid","UniverseProtoMap","PING","AUTH_REQ","FEATURE_CONF_REQ","FeatureConfReq","LAUNCH_CONF_REQ","LaunchConfReq","CUSTOMER_CONF_REQ","CustomerConfReq","PROPS_CONF_REQ","PropsConfReq","POPUPS_CONF_REQ","PopUpsConfReq","NAMING_ST","NamingST","FEATURE_CONF_RESP","FeatureConfResp","LAUNCH_CONF_RESP","LaunchConfResp","CUSTOMER_CONF_RESP","CustomerConfResp","PROPS_CONF_RESP","PropsConfResp","POPUPS_CONF_RESP","PopUpsConfResp","BroadCastNT","IP_BLACK_LIST_NT","IPBlacklistNT","UNREAD_MSG_NT","UnreadMsgNT","MAIL_DELETE_NT","MailDeleteNT","UPDATE_NEW_NT","UpdateNewNT","ACTIVITY_AWARD_NT","ActivityAwardNT","ACTIVITY_STATUS_NT","ActivityStatusNT","LOGIN_AWARD_NT","LoginAwardNT","BroadCastsNT","GameNavNo","GameNavType","GameStatus","BarItem","UnreadMsgType","PopUpsKind","PackageTypeEnu","DeviceID","Package","Channel","VersionCode","BrandCode","Platform","PackageType","PACKAGE_NOT_USED","HostList","switch_conf","feature_settings","game_settings","BAR_RECHARGE","FeatureSetting","has_feature_settings","GameSetting","has_game_settings","writePackedEnum","readPackedEnum","anonymous","upgrade","nav_no","NAV_NO_HOT","NAV_TYPE_DEFAULT","GameTag","TAG_TYPE_HOT","RUNNING","navigation","game_tag","hide_new","homepage","fb_appid","adjust_conf","AdjustConf","has_adjust_conf","event_list","EventInfo","event_name","event_token","props_list","PropsInfo","sub_kind","PopUpInfo","is_jump","customize_frequency","PopUps","AdornElement","Name","Colour","Ip","ErrorMsg","ErrorCode","UnreadMsgList","UnreadMsgInfo","Count","DeletedAt","MailList","version_name","update_url","update_type","NOT_USED","ActAwardType","user_info","prop_info","has_user_info","has_prop_info","Avatar","Gender","PropsId","Amount","AwardAmount","DataCacheMgr_1","CommonListenUiEvent_1","GameNavigation_1","H5Customer_1","RedPointObserver_1","CommonGameListObserver_1","cacheOption","parseNamingMessage","onPropsConfReq","parseLaunchConfigResp","parseFeatureConfResp","parseUnreadMsgNT","parsePropsConfResp","parseUpsConfResp","setLoginBonusData","setCustomerInfo","storageMgr","topupUps","writeTopupUps","clearTopupUps","fishTopUpUps","writeFishTopUpUps","clearFishTopUpUps","topupFailUps","writeTopupFailUps","clearTopupFailUps","WithdrawUps","writeWithdrawUps","clearWithdrawUps","msgList","PAY_MSG","payResultAlert","ALERT_NAME","MAIL_MSG","KF_MSG","writeCustomerUnreadMsg","setPropConf","saveLauncherConfig","initAdjustConf","initGameTagTypeMap","loadGameInfo","initGameGuide","initBar","remoteHostList","loadServerHostList","Set","localHostList","BaseSocketMgr_1","UniverseProtoMap_1","getPackageName","getAppVersionCode","Unknow","H5Native","getTimeDiff","UserAmountComp","updateLabel","tmpNum","UserAvatar_1","getNormalAvatar","frame","limit","getNewAvatarId","newAvatar","ccNode","prefabIns","UserAvatarModel","UserAvatarMgr_1","avatarList","skeletonHelper","curAnim","unscheduleAllCallbacks","currentAvatar","avatarInfo","setSpriteFrame","getAvatar","playWaitAnim","onStart","onEnd","setData","tryPlay"],"mappings":"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","sourcesContent":["const { ccclass, property } = cc._decorator;\n\n/**固定类型 */\nenum LabelFixedType {\n    NONE, //默认值 不作处理\n    WIDTH, //固定宽度\n    BYTE, //固定字节长度  英文1个字节,中文（标点符号）2个字节\n    FONT_SIZE, //固定字号 适用于 shrink 模式\n}\n/**扩展 cc.Label 新增固定宽度属性 */\n@ccclass\nexport default class ALabelFixed extends cc.Label {\n    @property({\n        type: cc.Enum(LabelFixedType),\n        serializable: true,\n        displayName: \"文本固定类型\",\n        tooltip: \"WIDTH固定宽度\\nBYTE固定字节长度  英文1个字节,中文（标点符号）2个字节  \",\n    })\n    fixedType: LabelFixedType = LabelFixedType.NONE; //固定类型\n\n    @property({ serializable: true, displayName: \"文本固定值\" })\n    fixedValue: number = 10; //固定值 width宽度   byte字节数\n\n    @property({\n        serializable: true,\n        displayName: \"文本超出替换值 ...\",\n        tooltip: \"超出长度的替换值 123456   123...\",\n    })\n    fixedString: string = \"...\"; //超出长度的替换值 123456   123...\n\n    private aLabel: string = \"\";\n    public oldLabel: string = \"\";\n    private isRefresh: boolean;\n\n    private set _string(label: string) {\n        this.aLabel = label;\n        this.refreshView();\n    }\n    private get _string(): string {\n        return this.aLabel;\n    }\n\n    protected start(): void {\n        this.refreshView();\n    }\n\n    private refreshView(): void {\n        if (this.isRefresh || !this.node) {\n            return;\n        }\n        this.isRefresh = true;\n        switch (this.fixedType) {\n            case LabelFixedType.WIDTH:\n                this.fixedWidthLengthModel();\n                break;\n            case LabelFixedType.BYTE:\n                this.fixedByteLengthModel();\n                break;\n            case LabelFixedType.FONT_SIZE:\n                this.fixedFontSizeModel();\n                break;\n        }\n        this.isRefresh = false;\n    }\n\n    /**固定长度模式 */\n    private fixedWidthLengthModel() {\n        let str = (this.oldLabel = this.aLabel);\n        let len;\n\n        if (this.fixedValue < this.fontSize) {\n            //最小值\n            this.fixedValue = this.fontSize;\n        }\n        this[\"_forceUpdateRenderData\"]();\n        len = this.node.width;\n        len > this.fixedValue && this.labelWidth(str);\n    }\n\n    /**字节固定长度模式 */\n    private fixedByteLengthModel() {\n        let str = (this.oldLabel = this.aLabel);\n        let len;\n\n        if (this.fixedValue < 2) {\n            //最小值\n            this.fixedValue = 2;\n        }\n        len = this.getLabelByteLength(str);\n        len > this.fixedValue && this.labelByte(str);\n    }\n\n    /**字号大小固定模式 仅适用于 shrink 模式 */\n    private fixedFontSizeModel() {\n        let str = (this.oldLabel = this.aLabel);\n        //设置为SHRINK\n        if (this.overflow != cc.Label.Overflow.SHRINK) {\n            this.overflow = cc.Label.Overflow.SHRINK;\n        }\n\n        this[\"_forceUpdateRenderData\"]();\n        this.actualFontSize < this.fixedValue && this.labelFontSize(str + this.fixedString);\n    }\n\n    /**文本字号计算 */\n    private labelFontSize(label: string): void {\n        let str: string;\n        let orgStr = label.split(this.fixedString)[0];\n        let len = orgStr.length - 1;\n        for (var i = len; i > 0; i--) {\n            str = orgStr.substr(0, i);\n            this.string = str + this.fixedString;\n            this[\"_forceUpdateRenderData\"]();\n            if (this.actualFontSize >= this.fixedValue) return;\n        }\n    }\n\n    /**文本宽度计算 */\n    private labelWidth(label: string): void {\n        let len = label.length - 1;\n        let str: string;\n        for (var i = len; i > 0; i--) {\n            str = label.substr(0, i);\n            this.string = str;\n            this[\"_forceUpdateRenderData\"]();\n            if (this.node.width < this.fixedValue) {\n                this.string = str + this.fixedString;\n                return;\n            }\n        }\n    }\n\n    /**文本字节计算 */\n    private labelByte(label: string): void {\n        let len = label.length - 1;\n        let str: string;\n        for (var i = len; i > 0; i--) {\n            str = label.substr(0, i);\n            if (this.getLabelByteLength(str) <= this.fixedValue) {\n                this.string = str + this.fixedString;\n                return;\n            }\n        }\n    }\n\n    /**获取字符串 字节长度 */\n    private getLabelByteLength(label: string, replaceStr: string = \"**\"): number {\n        return label.replace(/[^\\x00-\\xff]/g, replaceStr).length;\n    }\n}\n","import PopUpViewBase from \"../../../../../../../main/core/popUpViewUtils/PopUpViewBase\";\nimport UIMgr from \"../UIMgr\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class Alert extends PopUpViewBase {\n    @property({ type: cc.Node, tooltip: \"积极的按钮节点\" })\n    btn_positive: cc.Node = null;\n\n    @property({ type: cc.Node, tooltip: \"消极的按钮节点\" })\n    btn_negative: cc.Node = null;\n\n    @property({ type: cc.Node, tooltip: \"右上角关闭按钮节点\" })\n    btn_close: cc.Node = null;\n\n    @property({ type: cc.Label, tooltip: \"积极的按钮上面的lab\" })\n    lab_positive: cc.Label = null;\n\n    @property({ type: cc.Label, tooltip: \"消极的按钮上面的lab\" })\n    lab_negative: cc.Label = null;\n\n    @property({ type: cc.Label, tooltip: \"标题lab\" })\n    lab_title: cc.Label = null;\n\n    @property({ type: cc.RichText, tooltip: \"内容lab\" })\n    lab_content: cc.RichText = null;\n\n    private _negativeCallFunc: () => void = null;\n    private _positiveCallFunc: () => void = null;\n\n    onLoad(): void {\n        this.btn_positive.on(cc.Node.EventType.TOUCH_END, this.onPositive, this);\n        this.btn_negative.on(cc.Node.EventType.TOUCH_END, this.onNegative, this);\n        this.btn_close.on(cc.Node.EventType.TOUCH_END, this.onClickClose, this);\n    }\n\n    public init(parm: IAlertParm) {\n        if (parm.style != undefined) {\n            switch (parm.style) {\n                case UIMgr.ALERT_STYLE.NEGATIVE_POSITIVE:\n                    this.btn_negative.active = true;\n                    this.btn_positive.active = true;\n                    this.btn_close.active = false;\n                    break;\n                case UIMgr.ALERT_STYLE.POSITIVE:\n                    this.btn_negative.active = false;\n                    this.btn_positive.active = true;\n                    this.btn_close.active = false;\n                    break;\n                case UIMgr.ALERT_STYLE.NEGATIVE_POSITIVE_CLOSE:\n                    this.btn_negative.active = true;\n                    this.btn_positive.active = true;\n                    this.btn_close.active = true;\n                    break;\n                default:\n                    this.btn_negative.active = true;\n                    this.btn_positive.active = true;\n                    this.btn_close.active = false;\n                    break;\n            }\n        } else {\n            this.btn_negative.active = true;\n            this.btn_positive.active = true;\n        }\n\n        if (parm.negativeBtnText) {\n            this.lab_negative.string = parm.negativeBtnText;\n        }\n\n        if (parm.positiveBtnText) {\n            this.lab_positive.string = parm.positiveBtnText;\n        }\n\n        if (parm.titleText) {\n            this.lab_title.string = parm.titleText;\n        }\n\n        if (parm.negativeCallFunc) {\n            this._negativeCallFunc = parm.negativeCallFunc;\n        }\n\n        if (parm.positiveCallFunc) {\n            this._positiveCallFunc = parm.positiveCallFunc;\n        }\n\n        this.lab_content.horizontalAlign = parm?.contextAlign ?? cc.macro.TextAlignment.LEFT;\n\n        if (parm.countdown) {\n            this.startCountdown(parm);\n        } else {\n            this.lab_content.string = parm.contentText || \"\";\n        }\n    }\n\n    private startCountdown(parm: IAlertParm) {\n        this.lab_content.string = parm.contentText.format(parm.countdown);\n\n        let countDown = parm.countdown;\n        if (countDown && countDown > 0) {\n            this.schedule(\n                () => {\n                    countDown--;\n                    this.lab_content.string = parm.contentText.format(countDown);\n                    if (countDown <= 0) {\n                        parm.countdownEndCallFunc && parm.countdownEndCallFunc();\n                        this.close();\n                    }\n                },\n                1,\n                parm.countdown - 1\n            );\n        }\n    }\n\n    private onClickClose() {\n        this.close(undefined);\n    }\n\n    private onNegative() {\n        this._negativeCallFunc && this._negativeCallFunc();\n        this.close(false);\n    }\n\n    private onPositive() {\n        this._positiveCallFunc && this._positiveCallFunc();\n        this.close(true);\n    }\n}\n","import { GameType } from \"../../../../../../main/core/conf/GameType\";\nimport UIMgr from \"../../Component/base/UIMgr\";\nimport CommonLanguage from \"../../conf/lang/CommonLanguage\";\nimport { SceneControl } from \"../../SceneControl\";\n\ntype IApiErrorOptions = RespHeader\n\nexport class ApiErrorHelper {\n    public static create(options: IApiErrorOptions) {\n        const error = new this(options);\n    }\n\n    constructor(private options: IApiErrorOptions) {\n        this.dealWithError();\n    }\n\n    private dealWithError() {\n        const { code, msg } = this.options;\n        switch (code) {\n            /** 操作太过频繁，请稍后再试。*/\n            case 1:\n            /** 密码错误*/\n            case 101:\n            /** 账号错误，请联系客服中心*/\n            case 102:\n            /** 帐号不存在*/\n            case 103:\n            /** 验证码错误*/\n            case 104:\n            /** 请用正式账号登录*/\n            case 105:\n            /** 服务器异常*/\n            case 106:\n            /** 此IP创建帐户已达到限制*/\n            case 107:\n            /** 此设备上创建帐户已达到限制*/\n            case 108:\n            /** 此帐户已被注册*/\n            case 109:\n            /** 保险箱余额不足*/\n            case 500:\n            /** 余额不足*/\n            case 501:\n            /** 该兑换码已兑换，请勿重复兑换*/\n            case 200:\n            /** 兑换码已过期*/\n            case 201:\n            /** 兑换码缺货，请联系客服*/\n            case 202:\n            /** 您的兑换次数已达上限，将机会留给他人！*/\n            case 203:\n            /** 兑换活动还未开始，请耐心等待*/\n            case 204:\n            /** 此礼品码只能 {cd_time} 后使用*/\n            case 205:\n            /** 不存在该兑换码*/\n            case 206:\n            /** 无效兑换码(其他渠道/品牌的)*/\n            case 207:\n            /** 邮件附件已领取，请勿重复领取*/\n            case 300:\n            /** 礼包过期了，下次记得马上领取哦~*/\n            case 301:\n            /** 礼品缺货，请联系客服*/\n            case 400:\n            /** 此游戏正在维护中*/\n            case 600:\n            /** 此游戏正在开发中*/\n            case 601:\n            /** 活动尚未开始，请耐心等待*/\n            case 700:\n            /** 绑定账号数量超过上限*/\n            case 800:\n            /** 提现服务暂时不可以，请稍后重试*/\n            case 801:\n            /** 您有游戏未结算，请稍后再试*/\n            case 802:\n            /** 请等待{cd_time}分钟后再提交或更换其他提现方式*/\n            case 804:\n            /** 无可用提现方式 */\n            case 805:\n            /** 该账号已存在 */\n            case 807:\n            /** 账号绑定失败 */\n            case 808: {\n                UIMgr.showToast(msg);\n                break;\n            }\n            /** 网络连接失效或账号在其它环境登录，请重新登录弹窗 ，点击确定回到登录界面 */\n            case 100: {\n                UIMgr.showAlert({\n                    contextAlign: cc.macro.TextAlignment.CENTER,\n                    contentText: msg,\n                    style: UIMgr.ALERT_STYLE.POSITIVE,\n                    positiveCallFunc: () => {\n                        CommonDepend.UserManager.clearAccount();\n                        CommonDepend.UserManager.clearAvailableAvatar();\n                        CommonDepend.LocalStorageMgr.clearNewAvatarId();\n                        CommonDepend.LocalStorageMgr.clearUserLoginData();\n                        SceneControl.getInstance().launchScene(GameType.LOGIN);\n                    },\n                });\n                break;\n            }\n            /** 您在{gameName}{roomStr}的游戏尚未结束，请等待游戏结算后再试\t弹窗 ，按钮取消，回到游戏 */\n            case 602: {\n                break;\n            }\n            /**抱歉，提现前请您注册正式账号\t这里没有提示是直接打开升级账号弹窗 */\n            case 803: {\n                break;\n            }\n            /** 您上次使用{account_no}提现失败，建议选择其它账号提现弹窗 */\n            case 806: {\n                UIMgr.showAlert({\n                    contextAlign: cc.macro.TextAlignment.CENTER,\n                    contentText: msg,\n                    style: UIMgr.ALERT_STYLE.POSITIVE,\n                });\n                break;\n            }\n            default: {\n                /** 不知道是啥 直接showToast */\n                msg && UIMgr.showToast(msg);\n                break;\n            }\n        }\n    }\n}\n","import { HttpRequest } from \"../../../../../../main/core/http/HttpRequest\";\nimport ApiReqPlain from \"./ApiReqPlain\";\nimport ApiUrl from \"./ApiUrl\";\n\nimport { GameType } from \"../../../../../../main/core/conf/GameType\";\nimport { UserManager } from \"../../../../../../main/core/user/UserManager\";\nimport { pb_1 } from \"../../../../../../main/core/utils/NpmExport\";\nimport { CommonUserUtil } from \"../../user/CommonUserUtil\";\nimport { ApiProto } from \"./ApiProto\";\nimport { NewGameInfo } from \"../../NewGameInfo\";\nimport { PlatformUtil } from \"../../../../../../main/core/platform/PlatformUtil\";\nimport { Instance } from \"../../../../../../main/core/utils/decorators/InstanceClassDecorator\";\nimport CommonLaunchConfigObserver from \"../../obs/CommonLaunchConfigObserver\";\n\nclass ApiMgr {\n    private static _instance: ApiMgr = null;\n\n    public static getInstance() {\n        if (!this._instance) {\n            this._instance = new ApiMgr();\n        }\n\n        return this._instance;\n    }\n\n    private constructor() {}\n\n    private getHostList(gameID): string[] {\n        let hostList = NewGameInfo.getInstance().getGameHttpServer(gameID);\n        return [].concat(hostList);\n    }\n\n    private getHost(hostList: string[]): string {\n        let host = null;\n        if (hostList) {\n            host = hostList[0];\n        }\n        return host;\n    }\n\n    private createHallRequest<\n        Req extends {\n            fromObject(data: ReqData): pb_1.Message;\n        },\n        Resp extends {\n            toObject();\n        },\n        ReqData extends ProtoObject<Req>\n    >(options: {\n        api: string;\n        data?: ReqData;\n        request: Req;\n        response: { new (): Resp };\n        httpCallBack?: IHttpCallback;\n    }): Promise<ProtoObject<Resp>[\"data\"]> {\n        let host_backup = this.getHostList(GameType.GAME_HALL);\n        let host = this.getHost(host_backup);\n        let req_header = new ApiProto.ReqHeader();\n\n        let message = options.request.fromObject(options.data || ({} as ReqData));\n        let protoInfo: IProtoInfo = {\n            req_plain: ApiReqPlain.createApiPlain(message),\n            req_header: req_header,\n            req_prototype: options.request,\n            resp_prototype: options.response,\n        };\n        return new Promise((resolve, reject) => {\n            if (CC_DEBUG) {\n                CC_DEBUG && cc.log(`${options.api} query:`, message.toObject());\n            }\n\n            new HttpRequest().post(host, host_backup, options.api, protoInfo, {\n                success: (res: Resp) => {\n                    if (res instanceof Array) {\n                        resolve(\n                            res.map((item) => {\n                                return item.toObject();\n                            })\n                        );\n                    } else {\n                        resolve(res?.toObject?.() ?? res);\n                    }\n\n                    options?.httpCallBack?.success?.(res);\n                },\n                error: (res) => {\n                    reject(res);\n                    options?.httpCallBack?.error?.(res);\n                },\n            });\n        });\n    }\n\n    /**\n     * /user/get_user_info/\n     */\n    public getUserInfoRequest(auto_login: boolean, httpCallBack: IHttpCallback) {\n        return this.createHallRequest({\n            httpCallBack: httpCallBack,\n            api: ApiUrl.get_user_info,\n            data: {\n                auto_login: auto_login,\n            },\n            request: ApiProto.UserInfoReq,\n            response: ApiProto.UserInfoResp,\n        });\n    }\n\n    /**\n     * /user/get_balance/\n     */\n    public getUserBalanceRequest(httpCallBack?: IHttpCallback) {\n        return this.createHallRequest({\n            api: ApiUrl.get_balance,\n            data: {},\n            request: ApiProto.GetBalanceReq,\n            response: ApiProto.GetBalanceResp,\n            httpCallBack,\n        });\n    }\n\n    /**\n     * /user/login/\n     */\n    public guestLogin(aid: string, httpCallBack: IHttpCallback) {\n        return this.loginRequest(ApiProto.IdentityType.AT_AID, aid, null, null, httpCallBack);\n    }\n\n    public passwordLogin(accountInfo: string, password: string, httpCallBack: IHttpCallback) {\n        return this.loginRequest(\n            ApiProto.IdentityType.AT_ACCOUNT_NO,\n            accountInfo,\n            password,\n            null,\n            httpCallBack\n        );\n    }\n\n    public vcodeLogin(accountInfo: string, vcode: string, httpCallBack: IHttpCallback) {\n        return this.loginRequest(\n            ApiProto.IdentityType.AT_PHONE_NO,\n            accountInfo,\n            null,\n            vcode,\n            httpCallBack\n        );\n    }\n\n    private loginRequest(\n        type: ApiProto.IdentityType,\n        identity: string,\n        password?: string,\n        vcode?: string,\n        httpCallBack?: IHttpCallback\n    ) {\n        return this.createHallRequest({\n            httpCallBack: httpCallBack,\n            api: ApiUrl.login,\n            data: {\n                identity_info: {\n                    type: type,\n                    identity: identity,\n                    cert: {\n                        password: password,\n                        vcode: vcode,\n                    },\n                },\n            },\n            request: ApiProto.LoginReq,\n            response: ApiProto.LoginResp,\n        });\n    }\n\n    /**\n     * /user/register/\n     */\n    public registerRequest(identity: string, password: string, referId: number) {\n        return this.createHallRequest({\n            api: ApiUrl.register,\n            data: {\n                identity_info: ApiProto.IdentityInfo.fromObject({\n                    type: ApiProto.IdentityType.AT_ACCOUNT_NO,\n                    identity: identity,\n                    cert: ApiProto.Cert.fromObject({\n                        password: password,\n                    }),\n                }),\n                refer_id: referId,\n            },\n            request: ApiProto.RegisterReq,\n            response: ApiProto.RegisterResp,\n        });\n    }\n\n    /** act/vip_bonus/conf/ */\n    public vipBonusConfRequest() {\n        return this.createHallRequest({\n            api: ApiUrl.vipBonus_conf,\n            request: ApiProto.VipBonusConfReq,\n            response: ApiProto.VipBonusConfResp,\n        });\n    }\n\n    /** act/vip_bonus/record/list/ */\n    public vipBonusRecordListRequest(page_no: number, page_size: number, return_total: boolean) {\n        return this.createHallRequest({\n            api: ApiUrl.vipBonus_record_list,\n            data: {\n                pc: {\n                    page_no: page_no,\n                    page_size: page_size,\n                    return_total: return_total,\n                },\n            },\n            request: ApiProto.VipBonusRecordsReq,\n            response: ApiProto.VipBonusRecordsResp,\n        });\n    }\n\n    /** act/vip_bonus/set_birthday/ */\n    public vipBonusSetBirthdayRequest(birthday: string, httpCallBack: IHttpCallback) {\n        let api = ApiUrl.vipBonus_set_birthday;\n        return this.createHallRequest({\n            api,\n            httpCallBack,\n            data: {\n                birthday: birthday,\n            },\n            request: ApiProto.VipBonusSetBirthdayReq,\n            response: ApiProto.VipBonusSetBirthdayResp,\n        });\n    }\n\n    /** act/task_center/info/ */\n    public taskSystemInfoRequest(httpCallBack: IHttpCallback) {\n        let api = ApiUrl.task_system_Info;\n\n        return this.createHallRequest({\n            api,\n            httpCallBack,\n            request: ApiProto.TaskCenterInfoReq,\n            response: ApiProto.TaskCenterInfoResp,\n        });\n    }\n\n    /** act/online_bonus/conf/ */\n    public onlineBonusConfRequest(httpCallBack: IHttpCallback) {\n        let api = ApiUrl.online_bonus_conf;\n\n        return this.createHallRequest({\n            api,\n            httpCallBack,\n            request: ApiProto.OnlineBonusConfReq,\n            response: ApiProto.OnlineBonusConfResp,\n        });\n    }\n\n    /** act/activity_center/list/ */\n    public activityReminderRequest() {\n        let api = ApiUrl.activity_reminder;\n        return this.createHallRequest({\n            api,\n            request: ApiProto.ListActivityReq,\n            response: ApiProto.ListActivityResp,\n        });\n    }\n\n    public promoterInfoReq(data: ProtoObject<ApiProto.PromoterInfoReq>) {\n        return this.createHallRequest({\n            api: ApiUrl.promoter_info_req,\n            data: data,\n            request: ApiProto.PromoterInfoReq,\n            response: ApiProto.PromoterInfoResp,\n        });\n    }\n\n    public promoterReceiveCommissionReq() {\n        return this.createHallRequest({\n            api: ApiUrl.promoter_receive_commission_req,\n            request: ApiProto.PromoterReceiveCommissionReq,\n            response: ApiProto.PromoterReceiveCommissionResp,\n        });\n    }\n\n    public promoterCommissionRecordsReq(data: ProtoObject<ApiProto.PromoterCommissionRecordsReq>) {\n        return this.createHallRequest({\n            api: ApiUrl.promoter_commission_records_req,\n            data: data,\n            request: ApiProto.PromoterCommissionRecordsReq,\n            response: ApiProto.PromoterCommissionRecordsResp,\n        });\n    }\n\n    public promoterCommissionConfReq() {\n        return this.createHallRequest({\n            api: ApiUrl.promoter_commission_conf_req,\n            request: ApiProto.GetCommissionConfReq,\n            response: ApiProto.GetCommissionConfResp,\n        });\n    }\n\n    public promoterCommissionDescConfReq() {\n        return this.createHallRequest({\n            api: ApiUrl.promoter_commission_desc_conf_req,\n            request: ApiProto.GetCommissionDescConfReq,\n            response: ApiProto.GetCommissionDescConfResp,\n        });\n    }\n\n    /** 代理业绩-我的佣金view 获取每日佣金记录请求 */\n    public promoterDailyCommissionReq(page_no: number, page_size: number) {\n        return this.createHallRequest({\n            api: ApiUrl.promoter_daily_commission_req,\n            data: { page_no: page_no, page_size: page_size },\n            request: ApiProto.PromoterDailyCommissionReq,\n            response: ApiProto.PromoterDailyCommissionResp,\n        });\n    }\n\n    /** 代理业绩-我的下级view 获取我的下级佣金贡献数据 */\n    public promoterSubCommissionReq(\n        page_no: number,\n        page_size: number,\n        start_time: number,\n        end_time: number,\n        order_by: ApiProto.PromoterSubCommissionReq.OrderBy,\n        order_type: ApiProto.PromoterSubCommissionReq.OrderType\n    ) {\n        return this.createHallRequest({\n            api: ApiUrl.promoter_sub_commission_req,\n            data: {\n                page_no: page_no,\n                page_size: page_size,\n                start_time: start_time,\n                end_time: end_time,\n                order_by: order_by,\n                order_type: order_type,\n            },\n            request: ApiProto.PromoterSubCommissionReq,\n            response: ApiProto.PromoterSubCommissionResp,\n        });\n    }\n\n    /** 代理业绩-我的业绩view 获取我的每日业绩 */\n    public promoterDailyContributionReq(\n        page_no: number,\n        page_size: number,\n        start_time: number,\n        end_time: number\n    ) {\n        return this.createHallRequest({\n            api: ApiUrl.promoter_daily_contribution_req,\n            data: {\n                page_no: page_no,\n                page_size: page_size,\n                start_time: start_time,\n                end_time: end_time,\n            },\n            request: ApiProto.PromoterDailyContributionReq,\n            response: ApiProto.PromoterDailyContributionResp,\n        });\n    }\n\n    /** 代理业绩-我的下级view 获取我的下级业绩详情 */\n    public promoterSubDetailContributionReq(\n        page_no: number,\n        page_size: number,\n        start_time: number,\n        end_time: number\n    ) {\n        return this.createHallRequest({\n            api: ApiUrl.promoter_Sub_Detail_Contribution_Req,\n            data: {\n                page_no: page_no,\n                page_size: page_size,\n                start_time: start_time,\n                end_time: end_time,\n            },\n            request: ApiProto.PromoterSubDetailContributionReq,\n            response: ApiProto.PromoterSubDetailContributionResp,\n        });\n    }\n\n    /** /msg/notice/pull */\n    public noticePullReq(data: ProtoObject<ApiProto.NoticePullReq>, httpCallBack?: IHttpCallback) {\n        return this.createHallRequest({\n            api: ApiUrl.noticePull,\n            data: data,\n            request: ApiProto.NoticePullReq,\n            response: ApiProto.NoticePullResp,\n            httpCallBack,\n        });\n    }\n\n    /** /msg/notice/pull */\n    public mailPullReq(lastMailId, httpCallBack: IHttpCallback) {\n        let api = ApiUrl.mailPull;\n\n        return this.createHallRequest({\n            api,\n            httpCallBack,\n            data: {\n                cursor_id: lastMailId,\n            },\n            request: ApiProto.MailPullReq,\n            response: ApiProto.MailPullResp,\n        });\n    }\n\n    /** /msg/notice/check/ */\n    public mailCheck(mailId, httpCallBack: IHttpCallback) {\n        let api = ApiUrl.checkMail;\n\n        return this.createHallRequest({\n            api,\n            httpCallBack: httpCallBack,\n            data: {\n                mail_id: mailId,\n            },\n\n            request: ApiProto.MailCheckReq,\n            response: ApiProto.MailCheckResp,\n        });\n    }\n\n    /** /msg/notice/delete/ */\n    public delOneMail(mailId) {\n        return this.createHallRequest({\n            data: {\n                mail_id: mailId,\n            },\n            api: ApiUrl.delOneMail,\n            request: ApiProto.MailDeleteReq,\n            response: ApiProto.MailDeleteResp,\n        });\n    }\n\n    /** /msg/notice/delete_all/ */\n    public dalAllMial() {\n        return this.createHallRequest({\n            api: ApiUrl.delAllMail,\n            request: ApiProto.MailDelAllReq,\n            response: ApiProto.MailDelAllResp,\n        });\n    }\n\n    /** /msg/notice/accept/ */\n    public getMailProps(mailId, httpCallBack: IHttpCallback) {\n        let api = ApiUrl.acceptMail;\n\n        return this.createHallRequest({\n            api,\n            httpCallBack,\n            data: {\n                mail_id: mailId,\n            },\n            request: ApiProto.MailAcceptReq,\n            response: ApiProto.MailAcceptResp,\n        });\n    }\n\n    /**\n     * user/get_sms_code/\n     * @param data\n     * @returns\n     */\n    public smsCodeReq(data: ProtoObject<ApiProto.SmsCodeReq>) {\n        return this.createHallRequest({\n            api: ApiUrl.get_sms_code,\n            data: data,\n            request: ApiProto.SmsCodeReq,\n            response: ApiProto.SmsCodeResp,\n        });\n    }\n\n    /** user/bind_identity/ */\n    public bindIdentity(data: ProtoObject<ApiProto.BindIdentityReq>) {\n        return this.createHallRequest({\n            api: ApiUrl.bind_identity_req,\n            data: data,\n            request: ApiProto.BindIdentityReq,\n            response: ApiProto.BindIdentityResp,\n        });\n    }\n\n    /** /user/modify_user_info/*/\n    public modifyUserReq(data: ProtoObject<ApiProto.ModifyUserReq>) {\n        return this.createHallRequest({\n            api: ApiUrl.modify_user_info,\n            data: { ...UserManager.getInstance().info.get(), ...data },\n            request: ApiProto.ModifyUserReq,\n            response: ApiProto.ModifyUserResp,\n        }).then(() => {\n            UserManager.getInstance().info.modify(data);\n        });\n    }\n\n    public verifyBindPhone(data: ProtoObject<ApiProto.VerifyBindPhoneReq>) {\n        return this.createHallRequest({\n            api: ApiUrl.verify_bind_phone,\n            data: data,\n            request: ApiProto.VerifyBindPhoneReq,\n            response: ApiProto.VerifyBindPhoneResp,\n        });\n    }\n\n    public resetPass(data: ProtoObject<ApiProto.ResetPassReq>) {\n        return this.createHallRequest({\n            api: ApiUrl.reset_password,\n            data: data,\n            request: ApiProto.ResetPassReq,\n            response: ApiProto.ResetPassResp,\n        }).then(() => {\n            CommonUserUtil.passwordLogin({\n                password: data.new_password,\n            });\n        });\n    }\n\n    public getKyc() {\n        return this.createHallRequest({\n            api: ApiUrl.get_kyc,\n            request: ApiProto.GetKycReq,\n            response: ApiProto.GetKycResp,\n        });\n    }\n\n    public setKyc(data: ProtoObject<ApiProto.SetKycReq>) {\n        return this.createHallRequest({\n            api: ApiUrl.set_kyc,\n            data: data,\n            request: ApiProto.SetKycReq,\n            response: ApiProto.SetKycResp,\n        });\n    }\n\n    public getRoomInfo(gameId: number) {\n        return this.createHallRequest({\n            api: ApiUrl.game_info,\n            data: ApiProto.GameInfoReq.fromObject({\n                game_id: gameId,\n            }),\n            request: ApiProto.GameInfoReq,\n            response: ApiProto.GameInfoResp,\n        });\n    }\n\n    /** pay/pay_conf */\n    public payConf(httpCallBack: IHttpCallback) {\n        return this.createHallRequest({\n            api: ApiUrl.pay_conf,\n            request: ApiProto.PayConfReq,\n            response: ApiProto.PayConfResp,\n            httpCallBack,\n        });\n    }\n\n    /** pay/submit */\n    public paySubmit(pay_type: number, pay_amount: number, httpCallBack: IHttpCallback) {\n        return this.createHallRequest({\n            api: ApiUrl.pay_submit,\n            data: ApiProto.PaySubmitReq.fromObject({\n                pay_type: pay_type,\n                pay_amount: pay_amount * 1000,\n                adjust_info: {\n                    appid: Instance(CommonLaunchConfigObserver).get(\"adjust_conf\")?.appid,\n                    idfa: PlatformUtil.getInstance().getIDFA(),\n                    gps_adid: PlatformUtil.getInstance().getGoogleADID(),\n                    adjust_id: PlatformUtil.getInstance().getAdjustDeviceID(),\n                },\n            }),\n            request: ApiProto.PaySubmitReq,\n            response: ApiProto.PaySubmitResp,\n            httpCallBack,\n        });\n    }\n\n    /** pay/record/list */\n    public payRecordList(\n        filter_type: ApiProto.PayRecordListReq.FilterType,\n        page: number,\n        size: number,\n        httpCallBack: IHttpCallback\n    ) {\n        return this.createHallRequest({\n            api: ApiUrl.pay_record_list,\n            data: ApiProto.PayRecordListReq.fromObject({\n                filter_type: filter_type,\n                page: page,\n                size: size,\n            }),\n            request: ApiProto.PayRecordListReq,\n            response: ApiProto.PayRecordListResp,\n            httpCallBack,\n        });\n    }\n\n    /** pay/record/list */\n    public popUps(kind: number, httpCallBack: IHttpCallback) {\n        return this.createHallRequest({\n            api: ApiUrl.pop_ups,\n            data: ApiProto.PopUpsPullReq.fromObject({\n                kind: kind,\n            }),\n            request: ApiProto.PopUpsPullReq,\n            response: ApiProto.PopUpsPullResp,\n            httpCallBack,\n        });\n    }\n\n    /** act/new_triple_gift/conf/ */\n    public newTripleGiftConf() {\n        return this.createHallRequest({\n            api: ApiUrl.newTripleGiftCont,\n            request: ApiProto.NewTripleGiftConfReq,\n            response: ApiProto.NewTripleGiftConfResp,\n        });\n    }\n\n    /** act/new_triple_gift/get_award/ */\n    public newTripleGiftAward(activity_id: string, stage: number, httpCallBack: IHttpCallback) {\n        return this.createHallRequest({\n            api: ApiUrl.newTripleGiftGetAward,\n            data: ApiProto.NewTripleGiftAwardReq.fromObject({\n                activity_id: activity_id,\n                stage: stage,\n            }),\n            request: ApiProto.NewTripleGiftAwardReq,\n            response: ApiProto.NewTripleGiftAwardResp,\n            httpCallBack,\n        });\n    }\n\n    /** game/replays */\n    public replayList(data: ProtoObject<ApiProto.GameReplaysReq>) {\n        return this.createHallRequest({\n            api: ApiUrl.replayList,\n            data,\n            request: ApiProto.GameReplaysReq,\n            response: ApiProto.GameReplaysResp,\n        });\n    }\n    /** /game/replay/ */\n    public replayDetail(data: ProtoObject<ApiProto.GameReplayDetailReq>) {\n        return this.createHallRequest({\n            api: ApiUrl.replayDetail,\n            data,\n            request: ApiProto.GameReplayDetailReq,\n            response: ApiProto.GameReplayDetailResp,\n        });\n    }\n\n    /** /promoter/verify_brd/ */\n    public promoterVerifyBrd() {\n        return this.createHallRequest({\n            api: ApiUrl.promoterVerifyBrd,\n            request: ApiProto.PromoterVerifyBrdReq,\n            response: ApiProto.PromoterVerifyBrdResp,\n        });\n    }\n    /** /promoter/verify_refer_id/ */\n    public promoterVerifyReferId(id: number) {\n        return this.createHallRequest({\n            api: ApiUrl.promoterVerifyReferId,\n            data: {\n                refer_id: id,\n            },\n            request: ApiProto.PromoterVerifyReferIdReq,\n            response: ApiProto.PromoterVerifyReferIdResp,\n        });\n    }\n}\n\nexport default ApiMgr;\n","/**\n * Generated by the protoc-gen-ts.  DO NOT EDIT!\n * compiler version: 3.19.4\n * source: int/http/hall/api.proto\n * git: https://github.com/thesayyn/protoc-gen-ts */\n\nimport { pb_1 } from \"../../../../../../main/core/utils/NpmExport\";\n\n/*\n  此处请修改为Creator NpmExport路径\n  请注意路径的层级\n   */\nexport namespace ApiProto {\n    /** \n      /////////////////////////\n       user\n       **/\n    export enum GENDER {\n        GENDER_UNKNOWN = 0,\n        FEMALE = 1,\n        MALE = 2,\n    }\n\n    /** \n      登录认证类型\n       **/\n    export enum IdentityType {\n        AT_PHONE_NO = 0,\n        AT_FB_ID = 1,\n        AT_ACCOUNT_NO = 2,\n        AT_AID = 3,\n        AT_FB_EMAIL = 4,\n    }\n    export enum NewbieType {\n        /** \n          默认 老用户\n           **/\n        NB_DEFAULT = 0,\n\n        /** \n          新增游客账户\n           **/\n        NB_ANONYMOUS = 1,\n\n        /** \n          游客升级正式账户\n           **/\n        NB_UPGRADE = 2,\n\n        /** \n          直接注册正式账户\n           **/\n        NB_REGISTER = 3,\n    }\n    export enum ResetPwdType {\n        /** \n          修改密码\n           **/\n        MODIFY_PWD = 0,\n\n        /** \n          找回密码\n           **/\n        RETRIEVE_PWD = 1,\n    }\n\n    /** \n      ----------------------------提现-----------------------------\n       提现账号类型\n       **/\n    export enum WithdrawAccountType {\n        UNKNOWN = 0,\n\n        /** \n          银行卡\n           **/\n        BANKCARD = 201,\n\n        /** \n          电话卡\n           **/\n        PhoneCard = 202,\n\n        /** \n          momo pay\n           **/\n        MOMO = 203,\n\n        /** \n          zalo pay\n           **/\n        ZALO = 204,\n\n        /** \n          one pay\n           **/\n        ONEPAY = 205,\n\n        /** \n          Ngan luong\n           **/\n        NganLuong = 206,\n\n        /** \n          PIX\n           **/\n        PIX = 207,\n\n        /** \n          UPI\n           **/\n        UPI = 208,\n    }\n\n    /** \n      PIX账号类型\n       **/\n    export enum PixAccountType {\n        PIX_UNKNOWN = 0,\n\n        /** \n          手机号\n           **/\n        PIX_PHONE = 1,\n\n        /** \n          邮箱\n           **/\n        PIX_EMAIL = 2,\n\n        /** \n          EVP\n           **/\n        PIX_EVP = 3,\n\n        /** \n          CPF\n           **/\n        PIX_CPF = 4,\n\n        /** \n          CNPJ\n           **/\n        PIX_CNPJ = 5,\n    }\n\n    /** \n      提现状态\n       **/\n    export enum WithdrawStatus {\n        /** \n          审核中\n           **/\n        WS_REVIEWING = 0,\n\n        /** \n          审核不通过冻结金额\n           **/\n        WS_REVIEW_FAIL_UNREFUND = 1,\n\n        /** \n          审核不通过返还金额\n           **/\n        WS_REVIEW_FAIL_REFUND = 2,\n\n        /** \n          出款中\n           **/\n        WS_IN_PAYMENT = 3,\n\n        /** \n          出款失败返还金额\n           **/\n        WS_PAYMENT_FAIL_REFUND = 4,\n\n        /** \n          出款成功\n           **/\n        WS_PAYMENT_SUCCESS = 5,\n    }\n\n    /** \n      /////////////////////////\n       **/\n    export enum MailContactType {\n        /** \n          默认，不使用\n           **/\n        MCT_DEFAULT = 0,\n\n        /** \n          通用联系方式\n           **/\n        MCT_COMMON = 3,\n\n        /** \n          facebook\n           **/\n        MCT_FB = 4,\n\n        /** \n          zalo\n           **/\n        MCT_ZALO = 5,\n\n        /** \n          whatsapp\n           **/\n        MCT_WHATS = 6,\n    }\n\n    /** \n      充值列表\n       pay/record/list\n       **/\n    export enum PayStatus {\n        DEFAULT = 0,\n        PROCESSING = 1,\n        DONE = 2,\n        FAIL = 3,\n    }\n\n    /** \n      promoter/commission_conf/ 佣金等级配置\n       **/\n    export enum MedalLevel {\n        ML_UNKNOWN = 0,\n\n        /** \n          1 << 5\n           **/\n        ML_BRONZE = 32,\n\n        /** \n          1 << 6\n           **/\n        ML_SILVER = 64,\n\n        /** \n          1 << 7\n           **/\n        ML_GOLD = 128,\n\n        /** \n          1 << 8\n           **/\n        ML_DIAMOND = 256,\n\n        /** \n          1 << 9\n           **/\n        ML_KING = 512,\n    }\n    export enum MedalSubLevel {\n        MSL_UNKNOWN = 0,\n\n        /** \n          1 << 0\n           **/\n        MSL_I = 1,\n\n        /** \n          1 << 1\n           **/\n        MSL_II = 2,\n\n        /** \n          1 << 2\n           **/\n        MSL_III = 4,\n\n        /** \n          1 << 3\n           **/\n        MSL_IV = 8,\n\n        /** \n          1 << 4\n           **/\n        MSL_V = 16,\n    }\n    export enum PromoterSubType {\n        PROMOTER_SUB_TYPE_UNSPECIFIED = 0,\n        PROMOTER_SUB_TYPE_CHILD = 1,\n        PROMOTER_SUB_TYPE_SUB = 2,\n    }\n\n    /** \n      通用请求头\n       **/\n    export class ReqHeader extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      timestamp?: number;\n                      user_id?: number;\n                      auth_token?: string;\n                      brand_code?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"timestamp\" in data && data.timestamp != undefined) {\n                    this.timestamp = data.timestamp;\n                }\n                if (\"user_id\" in data && data.user_id != undefined) {\n                    this.user_id = data.user_id;\n                }\n                if (\"auth_token\" in data && data.auth_token != undefined) {\n                    this.auth_token = data.auth_token;\n                }\n                if (\"brand_code\" in data && data.brand_code != undefined) {\n                    this.brand_code = data.brand_code;\n                }\n            }\n        }\n\n        /** \n          当前时间截\n           **/\n        get timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n\n        /** \n          当前时间截\n           **/\n        set timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          当前登录用户id\n           **/\n        get user_id() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n\n        /** \n          当前登录用户id\n           **/\n        set user_id(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          授权凭证\n           **/\n        get auth_token() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n\n        /** \n          授权凭证\n           **/\n        set auth_token(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n\n        /** \n          品牌号\n           **/\n        get brand_code() {\n            return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n        }\n\n        /** \n          品牌号\n           **/\n        set brand_code(value: string) {\n            pb_1.Message.setField(this, 4, value);\n        }\n        static fromObject(data: {\n            timestamp?: number;\n            user_id?: number;\n            auth_token?: string;\n            brand_code?: string;\n        }): ReqHeader {\n            const message = new ReqHeader({});\n            if (data.timestamp != null) {\n                message.timestamp = data.timestamp;\n            }\n            if (data.user_id != null) {\n                message.user_id = data.user_id;\n            }\n            if (data.auth_token != null) {\n                message.auth_token = data.auth_token;\n            }\n            if (data.brand_code != null) {\n                message.brand_code = data.brand_code;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                timestamp?: number;\n                user_id?: number;\n                auth_token?: string;\n                brand_code?: string;\n            } = {};\n            if (this.timestamp != null) {\n                data.timestamp = this.timestamp;\n            }\n            if (this.user_id != null) {\n                data.user_id = this.user_id;\n            }\n            if (this.auth_token != null) {\n                data.auth_token = this.auth_token;\n            }\n            if (this.brand_code != null) {\n                data.brand_code = this.brand_code;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.timestamp != 0) writer.writeInt64(1, this.timestamp);\n            if (this.user_id != 0) writer.writeInt64(2, this.user_id);\n            if (this.auth_token.length) writer.writeString(3, this.auth_token);\n            if (this.brand_code.length) writer.writeString(4, this.brand_code);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReqHeader {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new ReqHeader();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.timestamp = reader.readInt64();\n                        break;\n                    case 2:\n                        message.user_id = reader.readInt64();\n                        break;\n                    case 3:\n                        message.auth_token = reader.readString();\n                        break;\n                    case 4:\n                        message.brand_code = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): ReqHeader {\n            return ReqHeader.deserialize(bytes);\n        }\n    }\n\n    /** \n      通用应答头\n       **/\n    export class RespHeader extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      code?: number;\n                      trace_id?: string;\n                      msg?: string;\n                      timestamp?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"code\" in data && data.code != undefined) {\n                    this.code = data.code;\n                }\n                if (\"trace_id\" in data && data.trace_id != undefined) {\n                    this.trace_id = data.trace_id;\n                }\n                if (\"msg\" in data && data.msg != undefined) {\n                    this.msg = data.msg;\n                }\n                if (\"timestamp\" in data && data.timestamp != undefined) {\n                    this.timestamp = data.timestamp;\n                }\n            }\n        }\n\n        /** \n          各模块接口定义的业务异常码\n           **/\n        get code() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n\n        /** \n          各模块接口定义的业务异常码\n           **/\n        set code(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          本次请求唯一事务id，用于问题追踪定位\n           **/\n        get trace_id() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n\n        /** \n          本次请求唯一事务id，用于问题追踪定位\n           **/\n        set trace_id(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          错误信息\n           **/\n        get msg() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n\n        /** \n          错误信息\n           **/\n        set msg(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n\n        /** \n          当前时间截\n           **/\n        get timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n        }\n\n        /** \n          当前时间截\n           **/\n        set timestamp(value: number) {\n            pb_1.Message.setField(this, 4, value);\n        }\n        static fromObject(data: {\n            code?: number;\n            trace_id?: string;\n            msg?: string;\n            timestamp?: number;\n        }): RespHeader {\n            const message = new RespHeader({});\n            if (data.code != null) {\n                message.code = data.code;\n            }\n            if (data.trace_id != null) {\n                message.trace_id = data.trace_id;\n            }\n            if (data.msg != null) {\n                message.msg = data.msg;\n            }\n            if (data.timestamp != null) {\n                message.timestamp = data.timestamp;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                code?: number;\n                trace_id?: string;\n                msg?: string;\n                timestamp?: number;\n            } = {};\n            if (this.code != null) {\n                data.code = this.code;\n            }\n            if (this.trace_id != null) {\n                data.trace_id = this.trace_id;\n            }\n            if (this.msg != null) {\n                data.msg = this.msg;\n            }\n            if (this.timestamp != null) {\n                data.timestamp = this.timestamp;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.code != 0) writer.writeInt32(1, this.code);\n            if (this.trace_id.length) writer.writeString(2, this.trace_id);\n            if (this.msg.length) writer.writeString(3, this.msg);\n            if (this.timestamp != 0) writer.writeInt64(4, this.timestamp);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespHeader {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new RespHeader();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.code = reader.readInt32();\n                        break;\n                    case 2:\n                        message.trace_id = reader.readString();\n                        break;\n                    case 3:\n                        message.msg = reader.readString();\n                        break;\n                    case 4:\n                        message.timestamp = reader.readInt64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): RespHeader {\n            return RespHeader.deserialize(bytes);\n        }\n    }\n\n    /** \n      分页参数\n       **/\n    export class PaginationCriteria extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      page_no?: number;\n                      page_size?: number;\n                      return_total?: boolean;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"page_no\" in data && data.page_no != undefined) {\n                    this.page_no = data.page_no;\n                }\n                if (\"page_size\" in data && data.page_size != undefined) {\n                    this.page_size = data.page_size;\n                }\n                if (\"return_total\" in data && data.return_total != undefined) {\n                    this.return_total = data.return_total;\n                }\n            }\n        }\n        get page_no() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set page_no(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get page_size() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n        set page_size(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get return_total() {\n            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;\n        }\n        set return_total(value: boolean) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: {\n            page_no?: number;\n            page_size?: number;\n            return_total?: boolean;\n        }): PaginationCriteria {\n            const message = new PaginationCriteria({});\n            if (data.page_no != null) {\n                message.page_no = data.page_no;\n            }\n            if (data.page_size != null) {\n                message.page_size = data.page_size;\n            }\n            if (data.return_total != null) {\n                message.return_total = data.return_total;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                page_no?: number;\n                page_size?: number;\n                return_total?: boolean;\n            } = {};\n            if (this.page_no != null) {\n                data.page_no = this.page_no;\n            }\n            if (this.page_size != null) {\n                data.page_size = this.page_size;\n            }\n            if (this.return_total != null) {\n                data.return_total = this.return_total;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.page_no != 0) writer.writeInt32(1, this.page_no);\n            if (this.page_size != 0) writer.writeInt32(2, this.page_size);\n            if (this.return_total != false) writer.writeBool(3, this.return_total);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PaginationCriteria {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PaginationCriteria();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.page_no = reader.readInt32();\n                        break;\n                    case 2:\n                        message.page_size = reader.readInt32();\n                        break;\n                    case 3:\n                        message.return_total = reader.readBool();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PaginationCriteria {\n            return PaginationCriteria.deserialize(bytes);\n        }\n    }\n    export class UserInfo extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      user_id?: number;\n                      brand_code?: string;\n                      chn?: string;\n                      username?: string;\n                      phone?: string;\n                      avatar?: number;\n                      gender?: GENDER;\n                      credit?: number;\n                      safe_box?: number;\n                      level?: number;\n                      is_upgraded?: boolean;\n                      available_avatar?: number[];\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [12],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"user_id\" in data && data.user_id != undefined) {\n                    this.user_id = data.user_id;\n                }\n                if (\"brand_code\" in data && data.brand_code != undefined) {\n                    this.brand_code = data.brand_code;\n                }\n                if (\"chn\" in data && data.chn != undefined) {\n                    this.chn = data.chn;\n                }\n                if (\"username\" in data && data.username != undefined) {\n                    this.username = data.username;\n                }\n                if (\"phone\" in data && data.phone != undefined) {\n                    this.phone = data.phone;\n                }\n                if (\"avatar\" in data && data.avatar != undefined) {\n                    this.avatar = data.avatar;\n                }\n                if (\"gender\" in data && data.gender != undefined) {\n                    this.gender = data.gender;\n                }\n                if (\"credit\" in data && data.credit != undefined) {\n                    this.credit = data.credit;\n                }\n                if (\"safe_box\" in data && data.safe_box != undefined) {\n                    this.safe_box = data.safe_box;\n                }\n                if (\"level\" in data && data.level != undefined) {\n                    this.level = data.level;\n                }\n                if (\"is_upgraded\" in data && data.is_upgraded != undefined) {\n                    this.is_upgraded = data.is_upgraded;\n                }\n                if (\"available_avatar\" in data && data.available_avatar != undefined) {\n                    this.available_avatar = data.available_avatar;\n                }\n            }\n        }\n        get user_id() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set user_id(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get brand_code() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set brand_code(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get chn() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n        set chn(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        get username() {\n            return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n        }\n        set username(value: string) {\n            pb_1.Message.setField(this, 4, value);\n        }\n        get phone() {\n            return pb_1.Message.getFieldWithDefault(this, 5, \"\") as string;\n        }\n        set phone(value: string) {\n            pb_1.Message.setField(this, 5, value);\n        }\n        get avatar() {\n            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;\n        }\n        set avatar(value: number) {\n            pb_1.Message.setField(this, 6, value);\n        }\n        get gender() {\n            return pb_1.Message.getFieldWithDefault(this, 7, GENDER.GENDER_UNKNOWN) as GENDER;\n        }\n        set gender(value: GENDER) {\n            pb_1.Message.setField(this, 7, value);\n        }\n        get credit() {\n            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;\n        }\n        set credit(value: number) {\n            pb_1.Message.setField(this, 8, value);\n        }\n        get safe_box() {\n            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;\n        }\n        set safe_box(value: number) {\n            pb_1.Message.setField(this, 9, value);\n        }\n        get level() {\n            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;\n        }\n        set level(value: number) {\n            pb_1.Message.setField(this, 10, value);\n        }\n        get is_upgraded() {\n            return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;\n        }\n        set is_upgraded(value: boolean) {\n            pb_1.Message.setField(this, 11, value);\n        }\n        get available_avatar() {\n            return pb_1.Message.getFieldWithDefault(this, 12, []) as number[];\n        }\n        set available_avatar(value: number[]) {\n            pb_1.Message.setField(this, 12, value);\n        }\n        static fromObject(data: {\n            user_id?: number;\n            brand_code?: string;\n            chn?: string;\n            username?: string;\n            phone?: string;\n            avatar?: number;\n            gender?: GENDER;\n            credit?: number;\n            safe_box?: number;\n            level?: number;\n            is_upgraded?: boolean;\n            available_avatar?: number[];\n        }): UserInfo {\n            const message = new UserInfo({});\n            if (data.user_id != null) {\n                message.user_id = data.user_id;\n            }\n            if (data.brand_code != null) {\n                message.brand_code = data.brand_code;\n            }\n            if (data.chn != null) {\n                message.chn = data.chn;\n            }\n            if (data.username != null) {\n                message.username = data.username;\n            }\n            if (data.phone != null) {\n                message.phone = data.phone;\n            }\n            if (data.avatar != null) {\n                message.avatar = data.avatar;\n            }\n            if (data.gender != null) {\n                message.gender = data.gender;\n            }\n            if (data.credit != null) {\n                message.credit = data.credit;\n            }\n            if (data.safe_box != null) {\n                message.safe_box = data.safe_box;\n            }\n            if (data.level != null) {\n                message.level = data.level;\n            }\n            if (data.is_upgraded != null) {\n                message.is_upgraded = data.is_upgraded;\n            }\n            if (data.available_avatar != null) {\n                message.available_avatar = data.available_avatar;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                user_id?: number;\n                brand_code?: string;\n                chn?: string;\n                username?: string;\n                phone?: string;\n                avatar?: number;\n                gender?: GENDER;\n                credit?: number;\n                safe_box?: number;\n                level?: number;\n                is_upgraded?: boolean;\n                available_avatar?: number[];\n            } = {};\n            if (this.user_id != null) {\n                data.user_id = this.user_id;\n            }\n            if (this.brand_code != null) {\n                data.brand_code = this.brand_code;\n            }\n            if (this.chn != null) {\n                data.chn = this.chn;\n            }\n            if (this.username != null) {\n                data.username = this.username;\n            }\n            if (this.phone != null) {\n                data.phone = this.phone;\n            }\n            if (this.avatar != null) {\n                data.avatar = this.avatar;\n            }\n            if (this.gender != null) {\n                data.gender = this.gender;\n            }\n            if (this.credit != null) {\n                data.credit = this.credit;\n            }\n            if (this.safe_box != null) {\n                data.safe_box = this.safe_box;\n            }\n            if (this.level != null) {\n                data.level = this.level;\n            }\n            if (this.is_upgraded != null) {\n                data.is_upgraded = this.is_upgraded;\n            }\n            if (this.available_avatar != null) {\n                data.available_avatar = this.available_avatar;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.user_id != 0) writer.writeInt64(1, this.user_id);\n            if (this.brand_code.length) writer.writeString(2, this.brand_code);\n            if (this.chn.length) writer.writeString(3, this.chn);\n            if (this.username.length) writer.writeString(4, this.username);\n            if (this.phone.length) writer.writeString(5, this.phone);\n            if (this.avatar != 0) writer.writeInt32(6, this.avatar);\n            if (this.gender != GENDER.GENDER_UNKNOWN) writer.writeEnum(7, this.gender);\n            if (this.credit != 0) writer.writeInt64(8, this.credit);\n            if (this.safe_box != 0) writer.writeInt64(9, this.safe_box);\n            if (this.level != 0) writer.writeInt32(10, this.level);\n            if (this.is_upgraded != false) writer.writeBool(11, this.is_upgraded);\n            if (this.available_avatar.length) writer.writePackedInt32(12, this.available_avatar);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserInfo {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new UserInfo();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.user_id = reader.readInt64();\n                        break;\n                    case 2:\n                        message.brand_code = reader.readString();\n                        break;\n                    case 3:\n                        message.chn = reader.readString();\n                        break;\n                    case 4:\n                        message.username = reader.readString();\n                        break;\n                    case 5:\n                        message.phone = reader.readString();\n                        break;\n                    case 6:\n                        message.avatar = reader.readInt32();\n                        break;\n                    case 7:\n                        message.gender = reader.readEnum();\n                        break;\n                    case 8:\n                        message.credit = reader.readInt64();\n                        break;\n                    case 9:\n                        message.safe_box = reader.readInt64();\n                        break;\n                    case 10:\n                        message.level = reader.readInt32();\n                        break;\n                    case 11:\n                        message.is_upgraded = reader.readBool();\n                        break;\n                    case 12:\n                        message.available_avatar = reader.readPackedInt32();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): UserInfo {\n            return UserInfo.deserialize(bytes);\n        }\n    }\n\n    /** \n      获取用户信息\n       /user/get_user_info/\n       **/\n    export class UserInfoReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      auto_login?: boolean;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"auto_login\" in data && data.auto_login != undefined) {\n                    this.auto_login = data.auto_login;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get auto_login() {\n            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;\n        }\n        set auto_login(value: boolean) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            auto_login?: boolean;\n        }): UserInfoReq {\n            const message = new UserInfoReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.auto_login != null) {\n                message.auto_login = data.auto_login;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                auto_login?: boolean;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.auto_login != null) {\n                data.auto_login = this.auto_login;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.auto_login != false) writer.writeBool(2, this.auto_login);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserInfoReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new UserInfoReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.auto_login = reader.readBool();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): UserInfoReq {\n            return UserInfoReq.deserialize(bytes);\n        }\n    }\n    export class UserInfoResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: UserInfo;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(this, UserInfo, 2) as UserInfo;\n        }\n        set data(value: UserInfo) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof UserInfo.prototype.toObject>;\n        }): UserInfoResp {\n            const message = new UserInfoResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = UserInfo.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof UserInfo.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserInfoResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new UserInfoResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () => (message.data = UserInfo.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): UserInfoResp {\n            return UserInfoResp.deserialize(bytes);\n        }\n    }\n\n    /** \n      修改用户信息\n       /user/modify_user_info/\n       **/\n    export class ModifyUserReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      gender?: GENDER;\n                      avatar?: number;\n                      username?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"gender\" in data && data.gender != undefined) {\n                    this.gender = data.gender;\n                }\n                if (\"avatar\" in data && data.avatar != undefined) {\n                    this.avatar = data.avatar;\n                }\n                if (\"username\" in data && data.username != undefined) {\n                    this.username = data.username;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get gender() {\n            return pb_1.Message.getFieldWithDefault(this, 2, GENDER.GENDER_UNKNOWN) as GENDER;\n        }\n        set gender(value: GENDER) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get avatar() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n        set avatar(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        get username() {\n            return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n        }\n        set username(value: string) {\n            pb_1.Message.setField(this, 4, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            gender?: GENDER;\n            avatar?: number;\n            username?: string;\n        }): ModifyUserReq {\n            const message = new ModifyUserReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.gender != null) {\n                message.gender = data.gender;\n            }\n            if (data.avatar != null) {\n                message.avatar = data.avatar;\n            }\n            if (data.username != null) {\n                message.username = data.username;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                gender?: GENDER;\n                avatar?: number;\n                username?: string;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.gender != null) {\n                data.gender = this.gender;\n            }\n            if (this.avatar != null) {\n                data.avatar = this.avatar;\n            }\n            if (this.username != null) {\n                data.username = this.username;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.gender != GENDER.GENDER_UNKNOWN) writer.writeEnum(2, this.gender);\n            if (this.avatar != 0) writer.writeInt32(3, this.avatar);\n            if (this.username.length) writer.writeString(4, this.username);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModifyUserReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new ModifyUserReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.gender = reader.readEnum();\n                        break;\n                    case 3:\n                        message.avatar = reader.readInt32();\n                        break;\n                    case 4:\n                        message.username = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): ModifyUserReq {\n            return ModifyUserReq.deserialize(bytes);\n        }\n    }\n    export class ModifyUserResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n        }): ModifyUserResp {\n            const message = new ModifyUserResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModifyUserResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new ModifyUserResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): ModifyUserResp {\n            return ModifyUserResp.deserialize(bytes);\n        }\n    }\n\n    /** \n      获取用户余额\n       /user/get_balance/\n       **/\n    export class UserBalance extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      credit?: number;\n                      safe_box?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"credit\" in data && data.credit != undefined) {\n                    this.credit = data.credit;\n                }\n                if (\"safe_box\" in data && data.safe_box != undefined) {\n                    this.safe_box = data.safe_box;\n                }\n            }\n        }\n        get credit() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set credit(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get safe_box() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n        set safe_box(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: { credit?: number; safe_box?: number }): UserBalance {\n            const message = new UserBalance({});\n            if (data.credit != null) {\n                message.credit = data.credit;\n            }\n            if (data.safe_box != null) {\n                message.safe_box = data.safe_box;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                credit?: number;\n                safe_box?: number;\n            } = {};\n            if (this.credit != null) {\n                data.credit = this.credit;\n            }\n            if (this.safe_box != null) {\n                data.safe_box = this.safe_box;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.credit != 0) writer.writeInt64(1, this.credit);\n            if (this.safe_box != 0) writer.writeInt64(2, this.safe_box);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserBalance {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new UserBalance();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.credit = reader.readInt64();\n                        break;\n                    case 2:\n                        message.safe_box = reader.readInt64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): UserBalance {\n            return UserBalance.deserialize(bytes);\n        }\n    }\n    export class GetBalanceReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n        }): GetBalanceReq {\n            const message = new GetBalanceReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBalanceReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new GetBalanceReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): GetBalanceReq {\n            return GetBalanceReq.deserialize(bytes);\n        }\n    }\n    export class GetBalanceResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: UserBalance;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(this, UserBalance, 2) as UserBalance;\n        }\n        set data(value: UserBalance) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof UserBalance.prototype.toObject>;\n        }): GetBalanceResp {\n            const message = new GetBalanceResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = UserBalance.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof UserBalance.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBalanceResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new GetBalanceResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () => (message.data = UserBalance.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): GetBalanceResp {\n            return GetBalanceResp.deserialize(bytes);\n        }\n    }\n    export class Cert extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      password?: string;\n                      vcode?: string;\n                      fb_token?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"password\" in data && data.password != undefined) {\n                    this.password = data.password;\n                }\n                if (\"vcode\" in data && data.vcode != undefined) {\n                    this.vcode = data.vcode;\n                }\n                if (\"fb_token\" in data && data.fb_token != undefined) {\n                    this.fb_token = data.fb_token;\n                }\n            }\n        }\n        get password() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n        }\n        set password(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get vcode() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set vcode(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get fb_token() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n        set fb_token(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: { password?: string; vcode?: string; fb_token?: string }): Cert {\n            const message = new Cert({});\n            if (data.password != null) {\n                message.password = data.password;\n            }\n            if (data.vcode != null) {\n                message.vcode = data.vcode;\n            }\n            if (data.fb_token != null) {\n                message.fb_token = data.fb_token;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                password?: string;\n                vcode?: string;\n                fb_token?: string;\n            } = {};\n            if (this.password != null) {\n                data.password = this.password;\n            }\n            if (this.vcode != null) {\n                data.vcode = this.vcode;\n            }\n            if (this.fb_token != null) {\n                data.fb_token = this.fb_token;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.password.length) writer.writeString(1, this.password);\n            if (this.vcode.length) writer.writeString(2, this.vcode);\n            if (this.fb_token.length) writer.writeString(3, this.fb_token);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Cert {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new Cert();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.password = reader.readString();\n                        break;\n                    case 2:\n                        message.vcode = reader.readString();\n                        break;\n                    case 3:\n                        message.fb_token = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): Cert {\n            return Cert.deserialize(bytes);\n        }\n    }\n    export class IdentityInfo extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      type?: IdentityType;\n                      identity?: string;\n                      cert?: Cert;\n                      extra_info?: IdentityInfo.ExtraInfo;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"type\" in data && data.type != undefined) {\n                    this.type = data.type;\n                }\n                if (\"identity\" in data && data.identity != undefined) {\n                    this.identity = data.identity;\n                }\n                if (\"cert\" in data && data.cert != undefined) {\n                    this.cert = data.cert;\n                }\n                if (\"extra_info\" in data && data.extra_info != undefined) {\n                    this.extra_info = data.extra_info;\n                }\n            }\n        }\n        get type() {\n            return pb_1.Message.getFieldWithDefault(\n                this,\n                1,\n                IdentityType.AT_PHONE_NO\n            ) as IdentityType;\n        }\n        set type(value: IdentityType) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get identity() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set identity(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get cert() {\n            return pb_1.Message.getWrapperField(this, Cert, 3) as Cert;\n        }\n        set cert(value: Cert) {\n            pb_1.Message.setWrapperField(this, 3, value);\n        }\n        get has_cert() {\n            return pb_1.Message.getField(this, 3) != null;\n        }\n        get extra_info() {\n            return pb_1.Message.getWrapperField(\n                this,\n                IdentityInfo.ExtraInfo,\n                4\n            ) as IdentityInfo.ExtraInfo;\n        }\n        set extra_info(value: IdentityInfo.ExtraInfo) {\n            pb_1.Message.setWrapperField(this, 4, value);\n        }\n        get has_extra_info() {\n            return pb_1.Message.getField(this, 4) != null;\n        }\n        static fromObject(data: {\n            type?: IdentityType;\n            identity?: string;\n            cert?: ReturnType<typeof Cert.prototype.toObject>;\n            extra_info?: ReturnType<typeof IdentityInfo.ExtraInfo.prototype.toObject>;\n        }): IdentityInfo {\n            const message = new IdentityInfo({});\n            if (data.type != null) {\n                message.type = data.type;\n            }\n            if (data.identity != null) {\n                message.identity = data.identity;\n            }\n            if (data.cert != null) {\n                message.cert = Cert.fromObject(data.cert);\n            }\n            if (data.extra_info != null) {\n                message.extra_info = IdentityInfo.ExtraInfo.fromObject(data.extra_info);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                type?: IdentityType;\n                identity?: string;\n                cert?: ReturnType<typeof Cert.prototype.toObject>;\n                extra_info?: ReturnType<typeof IdentityInfo.ExtraInfo.prototype.toObject>;\n            } = {};\n            if (this.type != null) {\n                data.type = this.type;\n            }\n            if (this.identity != null) {\n                data.identity = this.identity;\n            }\n            if (this.cert != null) {\n                data.cert = this.cert.toObject();\n            }\n            if (this.extra_info != null) {\n                data.extra_info = this.extra_info.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.type != IdentityType.AT_PHONE_NO) writer.writeEnum(1, this.type);\n            if (this.identity.length) writer.writeString(2, this.identity);\n            if (this.has_cert) writer.writeMessage(3, this.cert, () => this.cert.serialize(writer));\n            if (this.has_extra_info)\n                writer.writeMessage(4, this.extra_info, () => this.extra_info.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IdentityInfo {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new IdentityInfo();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.type = reader.readEnum();\n                        break;\n                    case 2:\n                        message.identity = reader.readString();\n                        break;\n                    case 3:\n                        reader.readMessage(\n                            message.cert,\n                            () => (message.cert = Cert.deserialize(reader))\n                        );\n                        break;\n                    case 4:\n                        reader.readMessage(\n                            message.extra_info,\n                            () => (message.extra_info = IdentityInfo.ExtraInfo.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): IdentityInfo {\n            return IdentityInfo.deserialize(bytes);\n        }\n    }\n    export namespace IdentityInfo {\n        export class ExtraInfo extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          fb_email?: string;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"fb_email\" in data && data.fb_email != undefined) {\n                        this.fb_email = data.fb_email;\n                    }\n                }\n            }\n            get fb_email() {\n                return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n            }\n            set fb_email(value: string) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            static fromObject(data: { fb_email?: string }): ExtraInfo {\n                const message = new ExtraInfo({});\n                if (data.fb_email != null) {\n                    message.fb_email = data.fb_email;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    fb_email?: string;\n                } = {};\n                if (this.fb_email != null) {\n                    data.fb_email = this.fb_email;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.fb_email.length) writer.writeString(1, this.fb_email);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExtraInfo {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new ExtraInfo();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.fb_email = reader.readString();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): ExtraInfo {\n                return ExtraInfo.deserialize(bytes);\n            }\n        }\n    }\n    export class LoginInfo extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      user_id?: number;\n                      token?: string;\n                      newbie_type?: NewbieType;\n                      newbie_award?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"user_id\" in data && data.user_id != undefined) {\n                    this.user_id = data.user_id;\n                }\n                if (\"token\" in data && data.token != undefined) {\n                    this.token = data.token;\n                }\n                if (\"newbie_type\" in data && data.newbie_type != undefined) {\n                    this.newbie_type = data.newbie_type;\n                }\n                if (\"newbie_award\" in data && data.newbie_award != undefined) {\n                    this.newbie_award = data.newbie_award;\n                }\n            }\n        }\n        get user_id() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set user_id(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get token() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set token(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          新增或者升级\n           **/\n        get newbie_type() {\n            return pb_1.Message.getFieldWithDefault(this, 4, NewbieType.NB_DEFAULT) as NewbieType;\n        }\n\n        /** \n          新增或者升级\n           **/\n        set newbie_type(value: NewbieType) {\n            pb_1.Message.setField(this, 4, value);\n        }\n        get newbie_award() {\n            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;\n        }\n        set newbie_award(value: number) {\n            pb_1.Message.setField(this, 5, value);\n        }\n        static fromObject(data: {\n            user_id?: number;\n            token?: string;\n            newbie_type?: NewbieType;\n            newbie_award?: number;\n        }): LoginInfo {\n            const message = new LoginInfo({});\n            if (data.user_id != null) {\n                message.user_id = data.user_id;\n            }\n            if (data.token != null) {\n                message.token = data.token;\n            }\n            if (data.newbie_type != null) {\n                message.newbie_type = data.newbie_type;\n            }\n            if (data.newbie_award != null) {\n                message.newbie_award = data.newbie_award;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                user_id?: number;\n                token?: string;\n                newbie_type?: NewbieType;\n                newbie_award?: number;\n            } = {};\n            if (this.user_id != null) {\n                data.user_id = this.user_id;\n            }\n            if (this.token != null) {\n                data.token = this.token;\n            }\n            if (this.newbie_type != null) {\n                data.newbie_type = this.newbie_type;\n            }\n            if (this.newbie_award != null) {\n                data.newbie_award = this.newbie_award;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.user_id != 0) writer.writeInt64(1, this.user_id);\n            if (this.token.length) writer.writeString(2, this.token);\n            if (this.newbie_type != NewbieType.NB_DEFAULT) writer.writeEnum(4, this.newbie_type);\n            if (this.newbie_award != 0) writer.writeInt64(5, this.newbie_award);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginInfo {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new LoginInfo();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.user_id = reader.readInt64();\n                        break;\n                    case 2:\n                        message.token = reader.readString();\n                        break;\n                    case 4:\n                        message.newbie_type = reader.readEnum();\n                        break;\n                    case 5:\n                        message.newbie_award = reader.readInt64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): LoginInfo {\n            return LoginInfo.deserialize(bytes);\n        }\n    }\n\n    /** \n      登录\n       user/login/\n       **/\n    export class LoginReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      identity_info?: IdentityInfo;\n                      refer_id?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"identity_info\" in data && data.identity_info != undefined) {\n                    this.identity_info = data.identity_info;\n                }\n                if (\"refer_id\" in data && data.refer_id != undefined) {\n                    this.refer_id = data.refer_id;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get identity_info() {\n            return pb_1.Message.getWrapperField(this, IdentityInfo, 2) as IdentityInfo;\n        }\n        set identity_info(value: IdentityInfo) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_identity_info() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        get refer_id() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n        set refer_id(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            identity_info?: ReturnType<typeof IdentityInfo.prototype.toObject>;\n            refer_id?: number;\n        }): LoginReq {\n            const message = new LoginReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.identity_info != null) {\n                message.identity_info = IdentityInfo.fromObject(data.identity_info);\n            }\n            if (data.refer_id != null) {\n                message.refer_id = data.refer_id;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                identity_info?: ReturnType<typeof IdentityInfo.prototype.toObject>;\n                refer_id?: number;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.identity_info != null) {\n                data.identity_info = this.identity_info.toObject();\n            }\n            if (this.refer_id != null) {\n                data.refer_id = this.refer_id;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_identity_info)\n                writer.writeMessage(2, this.identity_info, () =>\n                    this.identity_info.serialize(writer)\n                );\n            if (this.refer_id != 0) writer.writeInt64(3, this.refer_id);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new LoginReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.identity_info,\n                            () => (message.identity_info = IdentityInfo.deserialize(reader))\n                        );\n                        break;\n                    case 3:\n                        message.refer_id = reader.readInt64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): LoginReq {\n            return LoginReq.deserialize(bytes);\n        }\n    }\n    export class LoginResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: LoginInfo;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(this, LoginInfo, 2) as LoginInfo;\n        }\n        set data(value: LoginInfo) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof LoginInfo.prototype.toObject>;\n        }): LoginResp {\n            const message = new LoginResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = LoginInfo.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof LoginInfo.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new LoginResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () => (message.data = LoginInfo.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): LoginResp {\n            return LoginResp.deserialize(bytes);\n        }\n    }\n\n    /** \n      注册用户\n       user/register/\n       **/\n    export class RegisterReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      identity_info?: IdentityInfo;\n                      refer_id?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"identity_info\" in data && data.identity_info != undefined) {\n                    this.identity_info = data.identity_info;\n                }\n                if (\"refer_id\" in data && data.refer_id != undefined) {\n                    this.refer_id = data.refer_id;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get identity_info() {\n            return pb_1.Message.getWrapperField(this, IdentityInfo, 2) as IdentityInfo;\n        }\n        set identity_info(value: IdentityInfo) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_identity_info() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        get refer_id() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n        set refer_id(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            identity_info?: ReturnType<typeof IdentityInfo.prototype.toObject>;\n            refer_id?: number;\n        }): RegisterReq {\n            const message = new RegisterReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.identity_info != null) {\n                message.identity_info = IdentityInfo.fromObject(data.identity_info);\n            }\n            if (data.refer_id != null) {\n                message.refer_id = data.refer_id;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                identity_info?: ReturnType<typeof IdentityInfo.prototype.toObject>;\n                refer_id?: number;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.identity_info != null) {\n                data.identity_info = this.identity_info.toObject();\n            }\n            if (this.refer_id != null) {\n                data.refer_id = this.refer_id;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_identity_info)\n                writer.writeMessage(2, this.identity_info, () =>\n                    this.identity_info.serialize(writer)\n                );\n            if (this.refer_id != 0) writer.writeInt64(3, this.refer_id);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new RegisterReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.identity_info,\n                            () => (message.identity_info = IdentityInfo.deserialize(reader))\n                        );\n                        break;\n                    case 3:\n                        message.refer_id = reader.readInt64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): RegisterReq {\n            return RegisterReq.deserialize(bytes);\n        }\n    }\n    export class RegisterResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: LoginInfo;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(this, LoginInfo, 2) as LoginInfo;\n        }\n        set data(value: LoginInfo) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof LoginInfo.prototype.toObject>;\n        }): RegisterResp {\n            const message = new RegisterResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = LoginInfo.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof LoginInfo.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RegisterResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new RegisterResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () => (message.data = LoginInfo.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): RegisterResp {\n            return RegisterResp.deserialize(bytes);\n        }\n    }\n\n    /** \n      账号绑定升级\n       user/bind_identity/\n       **/\n    export class BindIdentityReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      identity_info?: IdentityInfo;\n                      refer_id?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"identity_info\" in data && data.identity_info != undefined) {\n                    this.identity_info = data.identity_info;\n                }\n                if (\"refer_id\" in data && data.refer_id != undefined) {\n                    this.refer_id = data.refer_id;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get identity_info() {\n            return pb_1.Message.getWrapperField(this, IdentityInfo, 2) as IdentityInfo;\n        }\n        set identity_info(value: IdentityInfo) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_identity_info() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        get refer_id() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n        set refer_id(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            identity_info?: ReturnType<typeof IdentityInfo.prototype.toObject>;\n            refer_id?: number;\n        }): BindIdentityReq {\n            const message = new BindIdentityReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.identity_info != null) {\n                message.identity_info = IdentityInfo.fromObject(data.identity_info);\n            }\n            if (data.refer_id != null) {\n                message.refer_id = data.refer_id;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                identity_info?: ReturnType<typeof IdentityInfo.prototype.toObject>;\n                refer_id?: number;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.identity_info != null) {\n                data.identity_info = this.identity_info.toObject();\n            }\n            if (this.refer_id != null) {\n                data.refer_id = this.refer_id;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_identity_info)\n                writer.writeMessage(2, this.identity_info, () =>\n                    this.identity_info.serialize(writer)\n                );\n            if (this.refer_id != 0) writer.writeInt64(3, this.refer_id);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BindIdentityReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new BindIdentityReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.identity_info,\n                            () => (message.identity_info = IdentityInfo.deserialize(reader))\n                        );\n                        break;\n                    case 3:\n                        message.refer_id = reader.readInt64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): BindIdentityReq {\n            return BindIdentityReq.deserialize(bytes);\n        }\n    }\n    export class BindIdentityResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n        }): BindIdentityResp {\n            const message = new BindIdentityResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BindIdentityResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new BindIdentityResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): BindIdentityResp {\n            return BindIdentityResp.deserialize(bytes);\n        }\n    }\n\n    /** \n      检查账号和手机号是否绑定关系\n       user/verify_bind_phone/\n       **/\n    export class VerifyBindPhoneReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      account_no?: string;\n                      phone?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"account_no\" in data && data.account_no != undefined) {\n                    this.account_no = data.account_no;\n                }\n                if (\"phone\" in data && data.phone != undefined) {\n                    this.phone = data.phone;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get account_no() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set account_no(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get phone() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n        set phone(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            account_no?: string;\n            phone?: string;\n        }): VerifyBindPhoneReq {\n            const message = new VerifyBindPhoneReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.account_no != null) {\n                message.account_no = data.account_no;\n            }\n            if (data.phone != null) {\n                message.phone = data.phone;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                account_no?: string;\n                phone?: string;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.account_no != null) {\n                data.account_no = this.account_no;\n            }\n            if (this.phone != null) {\n                data.phone = this.phone;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.account_no.length) writer.writeString(2, this.account_no);\n            if (this.phone.length) writer.writeString(3, this.phone);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyBindPhoneReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new VerifyBindPhoneReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.account_no = reader.readString();\n                        break;\n                    case 3:\n                        message.phone = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): VerifyBindPhoneReq {\n            return VerifyBindPhoneReq.deserialize(bytes);\n        }\n    }\n    export class VerifyBindPhoneResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n        }): VerifyBindPhoneResp {\n            const message = new VerifyBindPhoneResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyBindPhoneResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new VerifyBindPhoneResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): VerifyBindPhoneResp {\n            return VerifyBindPhoneResp.deserialize(bytes);\n        }\n    }\n\n    /** \n      重置密码\n       user/reset_password/\n       **/\n    export class ResetPassReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      type?: ResetPwdType;\n                      cert?: Cert;\n                      new_password?: string;\n                      account_no?: string;\n                      phone?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"type\" in data && data.type != undefined) {\n                    this.type = data.type;\n                }\n                if (\"cert\" in data && data.cert != undefined) {\n                    this.cert = data.cert;\n                }\n                if (\"new_password\" in data && data.new_password != undefined) {\n                    this.new_password = data.new_password;\n                }\n                if (\"account_no\" in data && data.account_no != undefined) {\n                    this.account_no = data.account_no;\n                }\n                if (\"phone\" in data && data.phone != undefined) {\n                    this.phone = data.phone;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get type() {\n            return pb_1.Message.getFieldWithDefault(\n                this,\n                2,\n                ResetPwdType.MODIFY_PWD\n            ) as ResetPwdType;\n        }\n        set type(value: ResetPwdType) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get cert() {\n            return pb_1.Message.getWrapperField(this, Cert, 3) as Cert;\n        }\n        set cert(value: Cert) {\n            pb_1.Message.setWrapperField(this, 3, value);\n        }\n        get has_cert() {\n            return pb_1.Message.getField(this, 3) != null;\n        }\n        get new_password() {\n            return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n        }\n        set new_password(value: string) {\n            pb_1.Message.setField(this, 4, value);\n        }\n\n        /** \n          need field if not login\n           **/\n        get account_no() {\n            return pb_1.Message.getFieldWithDefault(this, 5, \"\") as string;\n        }\n\n        /** \n          need field if not login\n           **/\n        set account_no(value: string) {\n            pb_1.Message.setField(this, 5, value);\n        }\n        get phone() {\n            return pb_1.Message.getFieldWithDefault(this, 6, \"\") as string;\n        }\n        set phone(value: string) {\n            pb_1.Message.setField(this, 6, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            type?: ResetPwdType;\n            cert?: ReturnType<typeof Cert.prototype.toObject>;\n            new_password?: string;\n            account_no?: string;\n            phone?: string;\n        }): ResetPassReq {\n            const message = new ResetPassReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.type != null) {\n                message.type = data.type;\n            }\n            if (data.cert != null) {\n                message.cert = Cert.fromObject(data.cert);\n            }\n            if (data.new_password != null) {\n                message.new_password = data.new_password;\n            }\n            if (data.account_no != null) {\n                message.account_no = data.account_no;\n            }\n            if (data.phone != null) {\n                message.phone = data.phone;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                type?: ResetPwdType;\n                cert?: ReturnType<typeof Cert.prototype.toObject>;\n                new_password?: string;\n                account_no?: string;\n                phone?: string;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.type != null) {\n                data.type = this.type;\n            }\n            if (this.cert != null) {\n                data.cert = this.cert.toObject();\n            }\n            if (this.new_password != null) {\n                data.new_password = this.new_password;\n            }\n            if (this.account_no != null) {\n                data.account_no = this.account_no;\n            }\n            if (this.phone != null) {\n                data.phone = this.phone;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.type != ResetPwdType.MODIFY_PWD) writer.writeEnum(2, this.type);\n            if (this.has_cert) writer.writeMessage(3, this.cert, () => this.cert.serialize(writer));\n            if (this.new_password.length) writer.writeString(4, this.new_password);\n            if (this.account_no.length) writer.writeString(5, this.account_no);\n            if (this.phone.length) writer.writeString(6, this.phone);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetPassReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new ResetPassReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.type = reader.readEnum();\n                        break;\n                    case 3:\n                        reader.readMessage(\n                            message.cert,\n                            () => (message.cert = Cert.deserialize(reader))\n                        );\n                        break;\n                    case 4:\n                        message.new_password = reader.readString();\n                        break;\n                    case 5:\n                        message.account_no = reader.readString();\n                        break;\n                    case 6:\n                        message.phone = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): ResetPassReq {\n            return ResetPassReq.deserialize(bytes);\n        }\n    }\n    export class ResetPassResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n        }): ResetPassResp {\n            const message = new ResetPassResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResetPassResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new ResetPassResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): ResetPassResp {\n            return ResetPassResp.deserialize(bytes);\n        }\n    }\n\n    /** \n      获取手机验证码\n       user/get_sms_code/\n       **/\n    export class SmsCodeReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      phone?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"phone\" in data && data.phone != undefined) {\n                    this.phone = data.phone;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get phone() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set phone(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            phone?: string;\n        }): SmsCodeReq {\n            const message = new SmsCodeReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.phone != null) {\n                message.phone = data.phone;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                phone?: string;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.phone != null) {\n                data.phone = this.phone;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.phone.length) writer.writeString(2, this.phone);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SmsCodeReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new SmsCodeReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.phone = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): SmsCodeReq {\n            return SmsCodeReq.deserialize(bytes);\n        }\n    }\n    export class SmsCodeResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n        }): SmsCodeResp {\n            const message = new SmsCodeResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SmsCodeResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new SmsCodeResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): SmsCodeResp {\n            return SmsCodeResp.deserialize(bytes);\n        }\n    }\n\n    /** \n      KYC\n       **/\n    export class InKycExtra extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      CPF_OR_CNPJ?: string;\n                      CEP?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"CPF_OR_CNPJ\" in data && data.CPF_OR_CNPJ != undefined) {\n                    this.CPF_OR_CNPJ = data.CPF_OR_CNPJ;\n                }\n                if (\"CEP\" in data && data.CEP != undefined) {\n                    this.CEP = data.CEP;\n                }\n            }\n        }\n\n        /** \n          长度12或者14\n           **/\n        get CPF_OR_CNPJ() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n        }\n\n        /** \n          长度12或者14\n           **/\n        set CPF_OR_CNPJ(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          长度8\n           **/\n        get CEP() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n\n        /** \n          长度8\n           **/\n        set CEP(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: { CPF_OR_CNPJ?: string; CEP?: string }): InKycExtra {\n            const message = new InKycExtra({});\n            if (data.CPF_OR_CNPJ != null) {\n                message.CPF_OR_CNPJ = data.CPF_OR_CNPJ;\n            }\n            if (data.CEP != null) {\n                message.CEP = data.CEP;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                CPF_OR_CNPJ?: string;\n                CEP?: string;\n            } = {};\n            if (this.CPF_OR_CNPJ != null) {\n                data.CPF_OR_CNPJ = this.CPF_OR_CNPJ;\n            }\n            if (this.CEP != null) {\n                data.CEP = this.CEP;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.CPF_OR_CNPJ.length) writer.writeString(1, this.CPF_OR_CNPJ);\n            if (this.CEP.length) writer.writeString(2, this.CEP);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InKycExtra {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new InKycExtra();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.CPF_OR_CNPJ = reader.readString();\n                        break;\n                    case 2:\n                        message.CEP = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): InKycExtra {\n            return InKycExtra.deserialize(bytes);\n        }\n    }\n    export class KycExtra extends pb_1.Message {\n        #one_of_decls: number[][] = [[1]];\n        constructor(\n            data?:\n                | any[]\n                | ({} & {\n                      in_kyc_extra?: InKycExtra;\n                  })\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"in_kyc_extra\" in data && data.in_kyc_extra != undefined) {\n                    this.in_kyc_extra = data.in_kyc_extra;\n                }\n            }\n        }\n        get in_kyc_extra() {\n            return pb_1.Message.getWrapperField(this, InKycExtra, 1) as InKycExtra;\n        }\n        set in_kyc_extra(value: InKycExtra) {\n            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);\n        }\n        get has_in_kyc_extra() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get extra_info() {\n            const cases: {\n                [index: number]: \"none\" | \"in_kyc_extra\";\n            } = {\n                0: \"none\",\n                1: \"in_kyc_extra\",\n            };\n            return cases[pb_1.Message.computeOneofCase(this, [1])];\n        }\n        static fromObject(data: {\n            in_kyc_extra?: ReturnType<typeof InKycExtra.prototype.toObject>;\n        }): KycExtra {\n            const message = new KycExtra({});\n            if (data.in_kyc_extra != null) {\n                message.in_kyc_extra = InKycExtra.fromObject(data.in_kyc_extra);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                in_kyc_extra?: ReturnType<typeof InKycExtra.prototype.toObject>;\n            } = {};\n            if (this.in_kyc_extra != null) {\n                data.in_kyc_extra = this.in_kyc_extra.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_in_kyc_extra)\n                writer.writeMessage(1, this.in_kyc_extra, () =>\n                    this.in_kyc_extra.serialize(writer)\n                );\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KycExtra {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new KycExtra();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.in_kyc_extra,\n                            () => (message.in_kyc_extra = InKycExtra.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): KycExtra {\n            return KycExtra.deserialize(bytes);\n        }\n    }\n\n    /** \n      user/set_kyc/\n       **/\n    export class SetKycReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      name?: string;\n                      phone?: string;\n                      email?: string;\n                      kyc_extra_info?: KycExtra;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"name\" in data && data.name != undefined) {\n                    this.name = data.name;\n                }\n                if (\"phone\" in data && data.phone != undefined) {\n                    this.phone = data.phone;\n                }\n                if (\"email\" in data && data.email != undefined) {\n                    this.email = data.email;\n                }\n                if (\"kyc_extra_info\" in data && data.kyc_extra_info != undefined) {\n                    this.kyc_extra_info = data.kyc_extra_info;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get name() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set name(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get phone() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n        set phone(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        get email() {\n            return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n        }\n        set email(value: string) {\n            pb_1.Message.setField(this, 4, value);\n        }\n        get kyc_extra_info() {\n            return pb_1.Message.getWrapperField(this, KycExtra, 5) as KycExtra;\n        }\n        set kyc_extra_info(value: KycExtra) {\n            pb_1.Message.setWrapperField(this, 5, value);\n        }\n        get has_kyc_extra_info() {\n            return pb_1.Message.getField(this, 5) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            name?: string;\n            phone?: string;\n            email?: string;\n            kyc_extra_info?: ReturnType<typeof KycExtra.prototype.toObject>;\n        }): SetKycReq {\n            const message = new SetKycReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.name != null) {\n                message.name = data.name;\n            }\n            if (data.phone != null) {\n                message.phone = data.phone;\n            }\n            if (data.email != null) {\n                message.email = data.email;\n            }\n            if (data.kyc_extra_info != null) {\n                message.kyc_extra_info = KycExtra.fromObject(data.kyc_extra_info);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                name?: string;\n                phone?: string;\n                email?: string;\n                kyc_extra_info?: ReturnType<typeof KycExtra.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.name != null) {\n                data.name = this.name;\n            }\n            if (this.phone != null) {\n                data.phone = this.phone;\n            }\n            if (this.email != null) {\n                data.email = this.email;\n            }\n            if (this.kyc_extra_info != null) {\n                data.kyc_extra_info = this.kyc_extra_info.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.name.length) writer.writeString(2, this.name);\n            if (this.phone.length) writer.writeString(3, this.phone);\n            if (this.email.length) writer.writeString(4, this.email);\n            if (this.has_kyc_extra_info)\n                writer.writeMessage(5, this.kyc_extra_info, () =>\n                    this.kyc_extra_info.serialize(writer)\n                );\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetKycReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new SetKycReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.name = reader.readString();\n                        break;\n                    case 3:\n                        message.phone = reader.readString();\n                        break;\n                    case 4:\n                        message.email = reader.readString();\n                        break;\n                    case 5:\n                        reader.readMessage(\n                            message.kyc_extra_info,\n                            () => (message.kyc_extra_info = KycExtra.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): SetKycReq {\n            return SetKycReq.deserialize(bytes);\n        }\n    }\n    export class SetKycResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n        }): SetKycResp {\n            const message = new SetKycResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetKycResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new SetKycResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): SetKycResp {\n            return SetKycResp.deserialize(bytes);\n        }\n    }\n    export class KycData extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      name?: string;\n                      phone?: string;\n                      email?: string;\n                      kyc_extra_info?: KycExtra;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"name\" in data && data.name != undefined) {\n                    this.name = data.name;\n                }\n                if (\"phone\" in data && data.phone != undefined) {\n                    this.phone = data.phone;\n                }\n                if (\"email\" in data && data.email != undefined) {\n                    this.email = data.email;\n                }\n                if (\"kyc_extra_info\" in data && data.kyc_extra_info != undefined) {\n                    this.kyc_extra_info = data.kyc_extra_info;\n                }\n            }\n        }\n        get name() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n        }\n        set name(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get phone() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set phone(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get email() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n        set email(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        get kyc_extra_info() {\n            return pb_1.Message.getWrapperField(this, KycExtra, 4) as KycExtra;\n        }\n        set kyc_extra_info(value: KycExtra) {\n            pb_1.Message.setWrapperField(this, 4, value);\n        }\n        get has_kyc_extra_info() {\n            return pb_1.Message.getField(this, 4) != null;\n        }\n        static fromObject(data: {\n            name?: string;\n            phone?: string;\n            email?: string;\n            kyc_extra_info?: ReturnType<typeof KycExtra.prototype.toObject>;\n        }): KycData {\n            const message = new KycData({});\n            if (data.name != null) {\n                message.name = data.name;\n            }\n            if (data.phone != null) {\n                message.phone = data.phone;\n            }\n            if (data.email != null) {\n                message.email = data.email;\n            }\n            if (data.kyc_extra_info != null) {\n                message.kyc_extra_info = KycExtra.fromObject(data.kyc_extra_info);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                name?: string;\n                phone?: string;\n                email?: string;\n                kyc_extra_info?: ReturnType<typeof KycExtra.prototype.toObject>;\n            } = {};\n            if (this.name != null) {\n                data.name = this.name;\n            }\n            if (this.phone != null) {\n                data.phone = this.phone;\n            }\n            if (this.email != null) {\n                data.email = this.email;\n            }\n            if (this.kyc_extra_info != null) {\n                data.kyc_extra_info = this.kyc_extra_info.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.name.length) writer.writeString(1, this.name);\n            if (this.phone.length) writer.writeString(2, this.phone);\n            if (this.email.length) writer.writeString(3, this.email);\n            if (this.has_kyc_extra_info)\n                writer.writeMessage(4, this.kyc_extra_info, () =>\n                    this.kyc_extra_info.serialize(writer)\n                );\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KycData {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new KycData();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.name = reader.readString();\n                        break;\n                    case 2:\n                        message.phone = reader.readString();\n                        break;\n                    case 3:\n                        message.email = reader.readString();\n                        break;\n                    case 4:\n                        reader.readMessage(\n                            message.kyc_extra_info,\n                            () => (message.kyc_extra_info = KycExtra.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): KycData {\n            return KycData.deserialize(bytes);\n        }\n    }\n\n    /** \n      user/get_kyc/\n       **/\n    export class GetKycReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n        }): GetKycReq {\n            const message = new GetKycReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetKycReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new GetKycReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): GetKycReq {\n            return GetKycReq.deserialize(bytes);\n        }\n    }\n    export class GetKycResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: KycData;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(this, KycData, 2) as KycData;\n        }\n        set data(value: KycData) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof KycData.prototype.toObject>;\n        }): GetKycResp {\n            const message = new GetKycResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = KycData.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof KycData.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetKycResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new GetKycResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () => (message.data = KycData.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): GetKycResp {\n            return GetKycResp.deserialize(bytes);\n        }\n    }\n\n    /** \n      ----------------------------游戏-----------------------------\n       获取单个游戏信息\n       game/info\n       **/\n    export class GameInfoReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      game_id?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"game_id\" in data && data.game_id != undefined) {\n                    this.game_id = data.game_id;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get game_id() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n        set game_id(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            game_id?: number;\n        }): GameInfoReq {\n            const message = new GameInfoReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.game_id != null) {\n                message.game_id = data.game_id;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                game_id?: number;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.game_id != null) {\n                data.game_id = this.game_id;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.game_id != 0) writer.writeInt32(2, this.game_id);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameInfoReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new GameInfoReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.game_id = reader.readInt32();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): GameInfoReq {\n            return GameInfoReq.deserialize(bytes);\n        }\n    }\n    export class GameInfoResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: GameInfoResp.GameInfo;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(\n                this,\n                GameInfoResp.GameInfo,\n                2\n            ) as GameInfoResp.GameInfo;\n        }\n        set data(value: GameInfoResp.GameInfo) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof GameInfoResp.GameInfo.prototype.toObject>;\n        }): GameInfoResp {\n            const message = new GameInfoResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = GameInfoResp.GameInfo.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof GameInfoResp.GameInfo.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameInfoResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new GameInfoResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () => (message.data = GameInfoResp.GameInfo.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): GameInfoResp {\n            return GameInfoResp.deserialize(bytes);\n        }\n    }\n    export namespace GameInfoResp {\n        export class RoomInfo extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          id?: number;\n                          base_amount?: number;\n                          chips_amount?: number[];\n                          bet_limit_amount?: number;\n                          enter_limit_amount?: number;\n                          red_limit_amount?: number[];\n                          table_id?: number;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [3, 6],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"id\" in data && data.id != undefined) {\n                        this.id = data.id;\n                    }\n                    if (\"base_amount\" in data && data.base_amount != undefined) {\n                        this.base_amount = data.base_amount;\n                    }\n                    if (\"chips_amount\" in data && data.chips_amount != undefined) {\n                        this.chips_amount = data.chips_amount;\n                    }\n                    if (\"bet_limit_amount\" in data && data.bet_limit_amount != undefined) {\n                        this.bet_limit_amount = data.bet_limit_amount;\n                    }\n                    if (\"enter_limit_amount\" in data && data.enter_limit_amount != undefined) {\n                        this.enter_limit_amount = data.enter_limit_amount;\n                    }\n                    if (\"red_limit_amount\" in data && data.red_limit_amount != undefined) {\n                        this.red_limit_amount = data.red_limit_amount;\n                    }\n                    if (\"table_id\" in data && data.table_id != undefined) {\n                        this.table_id = data.table_id;\n                    }\n                }\n            }\n            get id() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n            set id(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n\n            /** \n              基础筹码\n               **/\n            get base_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n            }\n\n            /** \n              基础筹码\n               **/\n            set base_amount(value: number) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            get chips_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];\n            }\n            set chips_amount(value: number[]) {\n                pb_1.Message.setField(this, 3, value);\n            }\n\n            /** \n              下注余额门槛\n               **/\n            get bet_limit_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n            }\n\n            /** \n              下注余额门槛\n               **/\n            set bet_limit_amount(value: number) {\n                pb_1.Message.setField(this, 4, value);\n            }\n\n            /** \n              进入房间门槛\n               **/\n            get enter_limit_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;\n            }\n\n            /** \n              进入房间门槛\n               **/\n            set enter_limit_amount(value: number) {\n                pb_1.Message.setField(this, 5, value);\n            }\n\n            /** \n              限红\n               **/\n            get red_limit_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 6, []) as number[];\n            }\n\n            /** \n              限红\n               **/\n            set red_limit_amount(value: number[]) {\n                pb_1.Message.setField(this, 6, value);\n            }\n\n            /** \n              固定桌子桌号\n               **/\n            get table_id() {\n                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;\n            }\n\n            /** \n              固定桌子桌号\n               **/\n            set table_id(value: number) {\n                pb_1.Message.setField(this, 7, value);\n            }\n            static fromObject(data: {\n                id?: number;\n                base_amount?: number;\n                chips_amount?: number[];\n                bet_limit_amount?: number;\n                enter_limit_amount?: number;\n                red_limit_amount?: number[];\n                table_id?: number;\n            }): RoomInfo {\n                const message = new RoomInfo({});\n                if (data.id != null) {\n                    message.id = data.id;\n                }\n                if (data.base_amount != null) {\n                    message.base_amount = data.base_amount;\n                }\n                if (data.chips_amount != null) {\n                    message.chips_amount = data.chips_amount;\n                }\n                if (data.bet_limit_amount != null) {\n                    message.bet_limit_amount = data.bet_limit_amount;\n                }\n                if (data.enter_limit_amount != null) {\n                    message.enter_limit_amount = data.enter_limit_amount;\n                }\n                if (data.red_limit_amount != null) {\n                    message.red_limit_amount = data.red_limit_amount;\n                }\n                if (data.table_id != null) {\n                    message.table_id = data.table_id;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    id?: number;\n                    base_amount?: number;\n                    chips_amount?: number[];\n                    bet_limit_amount?: number;\n                    enter_limit_amount?: number;\n                    red_limit_amount?: number[];\n                    table_id?: number;\n                } = {};\n                if (this.id != null) {\n                    data.id = this.id;\n                }\n                if (this.base_amount != null) {\n                    data.base_amount = this.base_amount;\n                }\n                if (this.chips_amount != null) {\n                    data.chips_amount = this.chips_amount;\n                }\n                if (this.bet_limit_amount != null) {\n                    data.bet_limit_amount = this.bet_limit_amount;\n                }\n                if (this.enter_limit_amount != null) {\n                    data.enter_limit_amount = this.enter_limit_amount;\n                }\n                if (this.red_limit_amount != null) {\n                    data.red_limit_amount = this.red_limit_amount;\n                }\n                if (this.table_id != null) {\n                    data.table_id = this.table_id;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.id != 0) writer.writeInt32(1, this.id);\n                if (this.base_amount != 0) writer.writeInt64(2, this.base_amount);\n                if (this.chips_amount.length) writer.writePackedInt64(3, this.chips_amount);\n                if (this.bet_limit_amount != 0) writer.writeInt64(4, this.bet_limit_amount);\n                if (this.enter_limit_amount != 0) writer.writeInt64(5, this.enter_limit_amount);\n                if (this.red_limit_amount.length) writer.writePackedInt64(6, this.red_limit_amount);\n                if (this.table_id != 0) writer.writeInt32(7, this.table_id);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoomInfo {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new RoomInfo();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.id = reader.readInt32();\n                            break;\n                        case 2:\n                            message.base_amount = reader.readInt64();\n                            break;\n                        case 3:\n                            message.chips_amount = reader.readPackedInt64();\n                            break;\n                        case 4:\n                            message.bet_limit_amount = reader.readInt64();\n                            break;\n                        case 5:\n                            message.enter_limit_amount = reader.readInt64();\n                            break;\n                        case 6:\n                            message.red_limit_amount = reader.readPackedInt64();\n                            break;\n                        case 7:\n                            message.table_id = reader.readInt32();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): RoomInfo {\n                return RoomInfo.deserialize(bytes);\n            }\n        }\n        export class GameInfo extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          use_h5?: boolean;\n                          frame_url?: string;\n                          h5_url?: string;\n                          hover_button?: boolean;\n                          browser_direction?: number;\n                          room_index?: number;\n                          last_game?: number;\n                          rooms_info?: GameInfoResp.RoomInfo[];\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [8],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"use_h5\" in data && data.use_h5 != undefined) {\n                        this.use_h5 = data.use_h5;\n                    }\n                    if (\"frame_url\" in data && data.frame_url != undefined) {\n                        this.frame_url = data.frame_url;\n                    }\n                    if (\"h5_url\" in data && data.h5_url != undefined) {\n                        this.h5_url = data.h5_url;\n                    }\n                    if (\"hover_button\" in data && data.hover_button != undefined) {\n                        this.hover_button = data.hover_button;\n                    }\n                    if (\"browser_direction\" in data && data.browser_direction != undefined) {\n                        this.browser_direction = data.browser_direction;\n                    }\n                    if (\"room_index\" in data && data.room_index != undefined) {\n                        this.room_index = data.room_index;\n                    }\n                    if (\"last_game\" in data && data.last_game != undefined) {\n                        this.last_game = data.last_game;\n                    }\n                    if (\"rooms_info\" in data && data.rooms_info != undefined) {\n                        this.rooms_info = data.rooms_info;\n                    }\n                }\n            }\n            get use_h5() {\n                return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;\n            }\n            set use_h5(value: boolean) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get frame_url() {\n                return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n            }\n            set frame_url(value: string) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            get h5_url() {\n                return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n            }\n            set h5_url(value: string) {\n                pb_1.Message.setField(this, 3, value);\n            }\n            get hover_button() {\n                return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;\n            }\n            set hover_button(value: boolean) {\n                pb_1.Message.setField(this, 4, value);\n            }\n            get browser_direction() {\n                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;\n            }\n            set browser_direction(value: number) {\n                pb_1.Message.setField(this, 5, value);\n            }\n            get room_index() {\n                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;\n            }\n            set room_index(value: number) {\n                pb_1.Message.setField(this, 6, value);\n            }\n            get last_game() {\n                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;\n            }\n            set last_game(value: number) {\n                pb_1.Message.setField(this, 7, value);\n            }\n            get rooms_info() {\n                return pb_1.Message.getRepeatedWrapperField(\n                    this,\n                    GameInfoResp.RoomInfo,\n                    8\n                ) as GameInfoResp.RoomInfo[];\n            }\n            set rooms_info(value: GameInfoResp.RoomInfo[]) {\n                pb_1.Message.setRepeatedWrapperField(this, 8, value);\n            }\n            static fromObject(data: {\n                use_h5?: boolean;\n                frame_url?: string;\n                h5_url?: string;\n                hover_button?: boolean;\n                browser_direction?: number;\n                room_index?: number;\n                last_game?: number;\n                rooms_info?: ReturnType<typeof GameInfoResp.RoomInfo.prototype.toObject>[];\n            }): GameInfo {\n                const message = new GameInfo({});\n                if (data.use_h5 != null) {\n                    message.use_h5 = data.use_h5;\n                }\n                if (data.frame_url != null) {\n                    message.frame_url = data.frame_url;\n                }\n                if (data.h5_url != null) {\n                    message.h5_url = data.h5_url;\n                }\n                if (data.hover_button != null) {\n                    message.hover_button = data.hover_button;\n                }\n                if (data.browser_direction != null) {\n                    message.browser_direction = data.browser_direction;\n                }\n                if (data.room_index != null) {\n                    message.room_index = data.room_index;\n                }\n                if (data.last_game != null) {\n                    message.last_game = data.last_game;\n                }\n                if (data.rooms_info != null) {\n                    message.rooms_info = data.rooms_info.map((item) =>\n                        GameInfoResp.RoomInfo.fromObject(item)\n                    );\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    use_h5?: boolean;\n                    frame_url?: string;\n                    h5_url?: string;\n                    hover_button?: boolean;\n                    browser_direction?: number;\n                    room_index?: number;\n                    last_game?: number;\n                    rooms_info?: ReturnType<typeof GameInfoResp.RoomInfo.prototype.toObject>[];\n                } = {};\n                if (this.use_h5 != null) {\n                    data.use_h5 = this.use_h5;\n                }\n                if (this.frame_url != null) {\n                    data.frame_url = this.frame_url;\n                }\n                if (this.h5_url != null) {\n                    data.h5_url = this.h5_url;\n                }\n                if (this.hover_button != null) {\n                    data.hover_button = this.hover_button;\n                }\n                if (this.browser_direction != null) {\n                    data.browser_direction = this.browser_direction;\n                }\n                if (this.room_index != null) {\n                    data.room_index = this.room_index;\n                }\n                if (this.last_game != null) {\n                    data.last_game = this.last_game;\n                }\n                if (this.rooms_info != null) {\n                    data.rooms_info = this.rooms_info.map((item: GameInfoResp.RoomInfo) =>\n                        item.toObject()\n                    );\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.use_h5 != false) writer.writeBool(1, this.use_h5);\n                if (this.frame_url.length) writer.writeString(2, this.frame_url);\n                if (this.h5_url.length) writer.writeString(3, this.h5_url);\n                if (this.hover_button != false) writer.writeBool(4, this.hover_button);\n                if (this.browser_direction != 0) writer.writeInt32(5, this.browser_direction);\n                if (this.room_index != 0) writer.writeInt32(6, this.room_index);\n                if (this.last_game != 0) writer.writeInt32(7, this.last_game);\n                if (this.rooms_info.length)\n                    writer.writeRepeatedMessage(8, this.rooms_info, (item: GameInfoResp.RoomInfo) =>\n                        item.serialize(writer)\n                    );\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameInfo {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new GameInfo();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.use_h5 = reader.readBool();\n                            break;\n                        case 2:\n                            message.frame_url = reader.readString();\n                            break;\n                        case 3:\n                            message.h5_url = reader.readString();\n                            break;\n                        case 4:\n                            message.hover_button = reader.readBool();\n                            break;\n                        case 5:\n                            message.browser_direction = reader.readInt32();\n                            break;\n                        case 6:\n                            message.room_index = reader.readInt32();\n                            break;\n                        case 7:\n                            message.last_game = reader.readInt32();\n                            break;\n                        case 8:\n                            reader.readMessage(message.rooms_info, () =>\n                                pb_1.Message.addToRepeatedWrapperField(\n                                    message,\n                                    8,\n                                    GameInfoResp.RoomInfo.deserialize(reader),\n                                    GameInfoResp.RoomInfo\n                                )\n                            );\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): GameInfo {\n                return GameInfo.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      兑换码\n       act/exchange_code/\n       error code: 200 兑换码已被兑换\n       error code: 201 兑换码已过期\n       error code: 202 剩余可兑换次数不足\n       error code: 203 兑换次数已达上限\n       error code: 204 兑换活动已关闭\n       error code: 205 兑换太频繁\n       error code: 206 兑换码不存在\n       error code: 207 无效兑换码(其他品牌/渠道的)\n       **/\n    export class ExchangeCodeReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      code?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"code\" in data && data.code != undefined) {\n                    this.code = data.code;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get code() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set code(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            code?: string;\n        }): ExchangeCodeReq {\n            const message = new ExchangeCodeReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.code != null) {\n                message.code = data.code;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                code?: string;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.code != null) {\n                data.code = this.code;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.code.length) writer.writeString(2, this.code);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExchangeCodeReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new ExchangeCodeReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.code = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): ExchangeCodeReq {\n            return ExchangeCodeReq.deserialize(bytes);\n        }\n    }\n    export class ExchangeCodeResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: ExchangeCodeResp.RespData;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(\n                this,\n                ExchangeCodeResp.RespData,\n                2\n            ) as ExchangeCodeResp.RespData;\n        }\n        set data(value: ExchangeCodeResp.RespData) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof ExchangeCodeResp.RespData.prototype.toObject>;\n        }): ExchangeCodeResp {\n            const message = new ExchangeCodeResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = ExchangeCodeResp.RespData.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof ExchangeCodeResp.RespData.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExchangeCodeResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new ExchangeCodeResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () => (message.data = ExchangeCodeResp.RespData.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): ExchangeCodeResp {\n            return ExchangeCodeResp.deserialize(bytes);\n        }\n    }\n    export namespace ExchangeCodeResp {\n        export class RespData extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          amount?: number;\n                          title?: string;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"amount\" in data && data.amount != undefined) {\n                        this.amount = data.amount;\n                    }\n                    if (\"title\" in data && data.title != undefined) {\n                        this.title = data.title;\n                    }\n                }\n            }\n            get amount() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n            set amount(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get title() {\n                return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n            }\n            set title(value: string) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            static fromObject(data: { amount?: number; title?: string }): RespData {\n                const message = new RespData({});\n                if (data.amount != null) {\n                    message.amount = data.amount;\n                }\n                if (data.title != null) {\n                    message.title = data.title;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    amount?: number;\n                    title?: string;\n                } = {};\n                if (this.amount != null) {\n                    data.amount = this.amount;\n                }\n                if (this.title != null) {\n                    data.title = this.title;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.amount != 0) writer.writeInt64(1, this.amount);\n                if (this.title.length) writer.writeString(2, this.title);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new RespData();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.amount = reader.readInt64();\n                            break;\n                        case 2:\n                            message.title = reader.readString();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): RespData {\n                return RespData.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      获取提现配置\n       withdraw/conf/\n       **/\n    export class WithdrawConfReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n        }): WithdrawConfReq {\n            const message = new WithdrawConfReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawConfReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new WithdrawConfReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): WithdrawConfReq {\n            return WithdrawConfReq.deserialize(bytes);\n        }\n    }\n    export class WithdrawConfResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: WithdrawConfResp.Conf[];\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [2],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getRepeatedWrapperField(\n                this,\n                WithdrawConfResp.Conf,\n                2\n            ) as WithdrawConfResp.Conf[];\n        }\n        set data(value: WithdrawConfResp.Conf[]) {\n            pb_1.Message.setRepeatedWrapperField(this, 2, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof WithdrawConfResp.Conf.prototype.toObject>[];\n        }): WithdrawConfResp {\n            const message = new WithdrawConfResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = data.data.map((item) => WithdrawConfResp.Conf.fromObject(item));\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof WithdrawConfResp.Conf.prototype.toObject>[];\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.map((item: WithdrawConfResp.Conf) => item.toObject());\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.data.length)\n                writer.writeRepeatedMessage(2, this.data, (item: WithdrawConfResp.Conf) =>\n                    item.serialize(writer)\n                );\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawConfResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new WithdrawConfResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(message.data, () =>\n                            pb_1.Message.addToRepeatedWrapperField(\n                                message,\n                                2,\n                                WithdrawConfResp.Conf.deserialize(reader),\n                                WithdrawConfResp.Conf\n                            )\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): WithdrawConfResp {\n            return WithdrawConfResp.deserialize(bytes);\n        }\n    }\n    export namespace WithdrawConfResp {\n        export class Bank extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          name?: string;\n                          code?: string;\n                          icon?: number;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"name\" in data && data.name != undefined) {\n                        this.name = data.name;\n                    }\n                    if (\"code\" in data && data.code != undefined) {\n                        this.code = data.code;\n                    }\n                    if (\"icon\" in data && data.icon != undefined) {\n                        this.icon = data.icon;\n                    }\n                }\n            }\n            get name() {\n                return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n            }\n            set name(value: string) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get code() {\n                return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n            }\n            set code(value: string) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            get icon() {\n                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n            }\n            set icon(value: number) {\n                pb_1.Message.setField(this, 3, value);\n            }\n            static fromObject(data: { name?: string; code?: string; icon?: number }): Bank {\n                const message = new Bank({});\n                if (data.name != null) {\n                    message.name = data.name;\n                }\n                if (data.code != null) {\n                    message.code = data.code;\n                }\n                if (data.icon != null) {\n                    message.icon = data.icon;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    name?: string;\n                    code?: string;\n                    icon?: number;\n                } = {};\n                if (this.name != null) {\n                    data.name = this.name;\n                }\n                if (this.code != null) {\n                    data.code = this.code;\n                }\n                if (this.icon != null) {\n                    data.icon = this.icon;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.name.length) writer.writeString(1, this.name);\n                if (this.code.length) writer.writeString(2, this.code);\n                if (this.icon != 0) writer.writeInt32(3, this.icon);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Bank {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new Bank();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.name = reader.readString();\n                            break;\n                        case 2:\n                            message.code = reader.readString();\n                            break;\n                        case 3:\n                            message.icon = reader.readInt32();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): Bank {\n                return Bank.deserialize(bytes);\n            }\n        }\n        export class Conf extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          name?: string;\n                          channel_id?: string;\n                          withdraw_type?: WithdrawAccountType;\n                          max_count?: number;\n                          left_count?: number;\n                          max_total?: number;\n                          left_total?: number;\n                          min_amount?: number;\n                          max_amount?: number;\n                          base?: number;\n                          comment?: string;\n                          remain_amount?: number;\n                          need_bank_extra?: number;\n                          banks?: WithdrawConfResp.Bank[];\n                          withdraw_comment?: string;\n                          channel_list_id?: string;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [14],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"name\" in data && data.name != undefined) {\n                        this.name = data.name;\n                    }\n                    if (\"channel_id\" in data && data.channel_id != undefined) {\n                        this.channel_id = data.channel_id;\n                    }\n                    if (\"withdraw_type\" in data && data.withdraw_type != undefined) {\n                        this.withdraw_type = data.withdraw_type;\n                    }\n                    if (\"max_count\" in data && data.max_count != undefined) {\n                        this.max_count = data.max_count;\n                    }\n                    if (\"left_count\" in data && data.left_count != undefined) {\n                        this.left_count = data.left_count;\n                    }\n                    if (\"max_total\" in data && data.max_total != undefined) {\n                        this.max_total = data.max_total;\n                    }\n                    if (\"left_total\" in data && data.left_total != undefined) {\n                        this.left_total = data.left_total;\n                    }\n                    if (\"min_amount\" in data && data.min_amount != undefined) {\n                        this.min_amount = data.min_amount;\n                    }\n                    if (\"max_amount\" in data && data.max_amount != undefined) {\n                        this.max_amount = data.max_amount;\n                    }\n                    if (\"base\" in data && data.base != undefined) {\n                        this.base = data.base;\n                    }\n                    if (\"comment\" in data && data.comment != undefined) {\n                        this.comment = data.comment;\n                    }\n                    if (\"remain_amount\" in data && data.remain_amount != undefined) {\n                        this.remain_amount = data.remain_amount;\n                    }\n                    if (\"need_bank_extra\" in data && data.need_bank_extra != undefined) {\n                        this.need_bank_extra = data.need_bank_extra;\n                    }\n                    if (\"banks\" in data && data.banks != undefined) {\n                        this.banks = data.banks;\n                    }\n                    if (\"withdraw_comment\" in data && data.withdraw_comment != undefined) {\n                        this.withdraw_comment = data.withdraw_comment;\n                    }\n                    if (\"channel_list_id\" in data && data.channel_list_id != undefined) {\n                        this.channel_list_id = data.channel_list_id;\n                    }\n                }\n            }\n\n            /** \n              通道名称\n               **/\n            get name() {\n                return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n            }\n\n            /** \n              通道名称\n               **/\n            set name(value: string) {\n                pb_1.Message.setField(this, 1, value);\n            }\n\n            /** \n              提现通道id\n               **/\n            get channel_id() {\n                return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n            }\n\n            /** \n              提现通道id\n               **/\n            set channel_id(value: string) {\n                pb_1.Message.setField(this, 2, value);\n            }\n\n            /** \n              渠道类型\n               **/\n            get withdraw_type() {\n                return pb_1.Message.getFieldWithDefault(\n                    this,\n                    3,\n                    WithdrawAccountType.UNKNOWN\n                ) as WithdrawAccountType;\n            }\n\n            /** \n              渠道类型\n               **/\n            set withdraw_type(value: WithdrawAccountType) {\n                pb_1.Message.setField(this, 3, value);\n            }\n\n            /** \n              单日次数上限\n               **/\n            get max_count() {\n                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n            }\n\n            /** \n              单日次数上限\n               **/\n            set max_count(value: number) {\n                pb_1.Message.setField(this, 4, value);\n            }\n\n            /** \n              单日剩余可用次数\n               **/\n            get left_count() {\n                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;\n            }\n\n            /** \n              单日剩余可用次数\n               **/\n            set left_count(value: number) {\n                pb_1.Message.setField(this, 5, value);\n            }\n\n            /** \n              单日最大金额\n               **/\n            get max_total() {\n                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;\n            }\n\n            /** \n              单日最大金额\n               **/\n            set max_total(value: number) {\n                pb_1.Message.setField(this, 6, value);\n            }\n\n            /** \n              剩下可用金额\n               **/\n            get left_total() {\n                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;\n            }\n\n            /** \n              剩下可用金额\n               **/\n            set left_total(value: number) {\n                pb_1.Message.setField(this, 7, value);\n            }\n\n            /** \n              单笔最小金额\n               **/\n            get min_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;\n            }\n\n            /** \n              单笔最小金额\n               **/\n            set min_amount(value: number) {\n                pb_1.Message.setField(this, 8, value);\n            }\n\n            /** \n              单笔最大金额\n               **/\n            get max_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;\n            }\n\n            /** \n              单笔最大金额\n               **/\n            set max_amount(value: number) {\n                pb_1.Message.setField(this, 9, value);\n            }\n\n            /** \n              兑换倍数基数\n               **/\n            get base() {\n                return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;\n            }\n\n            /** \n              兑换倍数基数\n               **/\n            set base(value: number) {\n                pb_1.Message.setField(this, 10, value);\n            }\n\n            /** \n              客户端提示\n               **/\n            get comment() {\n                return pb_1.Message.getFieldWithDefault(this, 11, \"\") as string;\n            }\n\n            /** \n              客户端提示\n               **/\n            set comment(value: string) {\n                pb_1.Message.setField(this, 11, value);\n            }\n\n            /** \n              提现保留金额\n               **/\n            get remain_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;\n            }\n\n            /** \n              提现保留金额\n               **/\n            set remain_amount(value: number) {\n                pb_1.Message.setField(this, 12, value);\n            }\n\n            /** \n              是否需要银行扩展信息: 0:默认值(不需要额外信息)，1：需要开户支行 2：需要银行账户\n               **/\n            get need_bank_extra() {\n                return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;\n            }\n\n            /** \n              是否需要银行扩展信息: 0:默认值(不需要额外信息)，1：需要开户支行 2：需要银行账户\n               **/\n            set need_bank_extra(value: number) {\n                pb_1.Message.setField(this, 13, value);\n            }\n\n            /** \n              支持的银行列表\n               **/\n            get banks() {\n                return pb_1.Message.getRepeatedWrapperField(\n                    this,\n                    WithdrawConfResp.Bank,\n                    14\n                ) as WithdrawConfResp.Bank[];\n            }\n\n            /** \n              支持的银行列表\n               **/\n            set banks(value: WithdrawConfResp.Bank[]) {\n                pb_1.Message.setRepeatedWrapperField(this, 14, value);\n            }\n\n            /** \n              可提现余额说明\n               **/\n            get withdraw_comment() {\n                return pb_1.Message.getFieldWithDefault(this, 15, \"\") as string;\n            }\n\n            /** \n              可提现余额说明\n               **/\n            set withdraw_comment(value: string) {\n                pb_1.Message.setField(this, 15, value);\n            }\n\n            /** \n              提现通道列表id\n               **/\n            get channel_list_id() {\n                return pb_1.Message.getFieldWithDefault(this, 16, \"\") as string;\n            }\n\n            /** \n              提现通道列表id\n               **/\n            set channel_list_id(value: string) {\n                pb_1.Message.setField(this, 16, value);\n            }\n            static fromObject(data: {\n                name?: string;\n                channel_id?: string;\n                withdraw_type?: WithdrawAccountType;\n                max_count?: number;\n                left_count?: number;\n                max_total?: number;\n                left_total?: number;\n                min_amount?: number;\n                max_amount?: number;\n                base?: number;\n                comment?: string;\n                remain_amount?: number;\n                need_bank_extra?: number;\n                banks?: ReturnType<typeof WithdrawConfResp.Bank.prototype.toObject>[];\n                withdraw_comment?: string;\n                channel_list_id?: string;\n            }): Conf {\n                const message = new Conf({});\n                if (data.name != null) {\n                    message.name = data.name;\n                }\n                if (data.channel_id != null) {\n                    message.channel_id = data.channel_id;\n                }\n                if (data.withdraw_type != null) {\n                    message.withdraw_type = data.withdraw_type;\n                }\n                if (data.max_count != null) {\n                    message.max_count = data.max_count;\n                }\n                if (data.left_count != null) {\n                    message.left_count = data.left_count;\n                }\n                if (data.max_total != null) {\n                    message.max_total = data.max_total;\n                }\n                if (data.left_total != null) {\n                    message.left_total = data.left_total;\n                }\n                if (data.min_amount != null) {\n                    message.min_amount = data.min_amount;\n                }\n                if (data.max_amount != null) {\n                    message.max_amount = data.max_amount;\n                }\n                if (data.base != null) {\n                    message.base = data.base;\n                }\n                if (data.comment != null) {\n                    message.comment = data.comment;\n                }\n                if (data.remain_amount != null) {\n                    message.remain_amount = data.remain_amount;\n                }\n                if (data.need_bank_extra != null) {\n                    message.need_bank_extra = data.need_bank_extra;\n                }\n                if (data.banks != null) {\n                    message.banks = data.banks.map((item) =>\n                        WithdrawConfResp.Bank.fromObject(item)\n                    );\n                }\n                if (data.withdraw_comment != null) {\n                    message.withdraw_comment = data.withdraw_comment;\n                }\n                if (data.channel_list_id != null) {\n                    message.channel_list_id = data.channel_list_id;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    name?: string;\n                    channel_id?: string;\n                    withdraw_type?: WithdrawAccountType;\n                    max_count?: number;\n                    left_count?: number;\n                    max_total?: number;\n                    left_total?: number;\n                    min_amount?: number;\n                    max_amount?: number;\n                    base?: number;\n                    comment?: string;\n                    remain_amount?: number;\n                    need_bank_extra?: number;\n                    banks?: ReturnType<typeof WithdrawConfResp.Bank.prototype.toObject>[];\n                    withdraw_comment?: string;\n                    channel_list_id?: string;\n                } = {};\n                if (this.name != null) {\n                    data.name = this.name;\n                }\n                if (this.channel_id != null) {\n                    data.channel_id = this.channel_id;\n                }\n                if (this.withdraw_type != null) {\n                    data.withdraw_type = this.withdraw_type;\n                }\n                if (this.max_count != null) {\n                    data.max_count = this.max_count;\n                }\n                if (this.left_count != null) {\n                    data.left_count = this.left_count;\n                }\n                if (this.max_total != null) {\n                    data.max_total = this.max_total;\n                }\n                if (this.left_total != null) {\n                    data.left_total = this.left_total;\n                }\n                if (this.min_amount != null) {\n                    data.min_amount = this.min_amount;\n                }\n                if (this.max_amount != null) {\n                    data.max_amount = this.max_amount;\n                }\n                if (this.base != null) {\n                    data.base = this.base;\n                }\n                if (this.comment != null) {\n                    data.comment = this.comment;\n                }\n                if (this.remain_amount != null) {\n                    data.remain_amount = this.remain_amount;\n                }\n                if (this.need_bank_extra != null) {\n                    data.need_bank_extra = this.need_bank_extra;\n                }\n                if (this.banks != null) {\n                    data.banks = this.banks.map((item: WithdrawConfResp.Bank) => item.toObject());\n                }\n                if (this.withdraw_comment != null) {\n                    data.withdraw_comment = this.withdraw_comment;\n                }\n                if (this.channel_list_id != null) {\n                    data.channel_list_id = this.channel_list_id;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.name.length) writer.writeString(1, this.name);\n                if (this.channel_id.length) writer.writeString(2, this.channel_id);\n                if (this.withdraw_type != WithdrawAccountType.UNKNOWN)\n                    writer.writeEnum(3, this.withdraw_type);\n                if (this.max_count != 0) writer.writeInt32(4, this.max_count);\n                if (this.left_count != 0) writer.writeInt32(5, this.left_count);\n                if (this.max_total != 0) writer.writeInt64(6, this.max_total);\n                if (this.left_total != 0) writer.writeInt64(7, this.left_total);\n                if (this.min_amount != 0) writer.writeInt64(8, this.min_amount);\n                if (this.max_amount != 0) writer.writeInt64(9, this.max_amount);\n                if (this.base != 0) writer.writeInt64(10, this.base);\n                if (this.comment.length) writer.writeString(11, this.comment);\n                if (this.remain_amount != 0) writer.writeInt64(12, this.remain_amount);\n                if (this.need_bank_extra != 0) writer.writeInt32(13, this.need_bank_extra);\n                if (this.banks.length)\n                    writer.writeRepeatedMessage(14, this.banks, (item: WithdrawConfResp.Bank) =>\n                        item.serialize(writer)\n                    );\n                if (this.withdraw_comment.length) writer.writeString(15, this.withdraw_comment);\n                if (this.channel_list_id.length) writer.writeString(16, this.channel_list_id);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Conf {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new Conf();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.name = reader.readString();\n                            break;\n                        case 2:\n                            message.channel_id = reader.readString();\n                            break;\n                        case 3:\n                            message.withdraw_type = reader.readEnum();\n                            break;\n                        case 4:\n                            message.max_count = reader.readInt32();\n                            break;\n                        case 5:\n                            message.left_count = reader.readInt32();\n                            break;\n                        case 6:\n                            message.max_total = reader.readInt64();\n                            break;\n                        case 7:\n                            message.left_total = reader.readInt64();\n                            break;\n                        case 8:\n                            message.min_amount = reader.readInt64();\n                            break;\n                        case 9:\n                            message.max_amount = reader.readInt64();\n                            break;\n                        case 10:\n                            message.base = reader.readInt64();\n                            break;\n                        case 11:\n                            message.comment = reader.readString();\n                            break;\n                        case 12:\n                            message.remain_amount = reader.readInt64();\n                            break;\n                        case 13:\n                            message.need_bank_extra = reader.readInt32();\n                            break;\n                        case 14:\n                            reader.readMessage(message.banks, () =>\n                                pb_1.Message.addToRepeatedWrapperField(\n                                    message,\n                                    14,\n                                    WithdrawConfResp.Bank.deserialize(reader),\n                                    WithdrawConfResp.Bank\n                                )\n                            );\n                            break;\n                        case 15:\n                            message.withdraw_comment = reader.readString();\n                            break;\n                        case 16:\n                            message.channel_list_id = reader.readString();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): Conf {\n                return Conf.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      PIX账号信息\n       **/\n    export class WithdrawAccountPix extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      pix_account_type?: PixAccountType;\n                      pix_identity?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"pix_account_type\" in data && data.pix_account_type != undefined) {\n                    this.pix_account_type = data.pix_account_type;\n                }\n                if (\"pix_identity\" in data && data.pix_identity != undefined) {\n                    this.pix_identity = data.pix_identity;\n                }\n            }\n        }\n\n        /** \n          PIX账号类型\n           **/\n        get pix_account_type() {\n            return pb_1.Message.getFieldWithDefault(\n                this,\n                1,\n                PixAccountType.PIX_UNKNOWN\n            ) as PixAccountType;\n        }\n\n        /** \n          PIX账号类型\n           **/\n        set pix_account_type(value: PixAccountType) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          PIX身份验证 CPF/CNPJ\n           **/\n        get pix_identity() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n\n        /** \n          PIX身份验证 CPF/CNPJ\n           **/\n        set pix_identity(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            pix_account_type?: PixAccountType;\n            pix_identity?: string;\n        }): WithdrawAccountPix {\n            const message = new WithdrawAccountPix({});\n            if (data.pix_account_type != null) {\n                message.pix_account_type = data.pix_account_type;\n            }\n            if (data.pix_identity != null) {\n                message.pix_identity = data.pix_identity;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                pix_account_type?: PixAccountType;\n                pix_identity?: string;\n            } = {};\n            if (this.pix_account_type != null) {\n                data.pix_account_type = this.pix_account_type;\n            }\n            if (this.pix_identity != null) {\n                data.pix_identity = this.pix_identity;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.pix_account_type != PixAccountType.PIX_UNKNOWN)\n                writer.writeEnum(1, this.pix_account_type);\n            if (this.pix_identity.length) writer.writeString(2, this.pix_identity);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawAccountPix {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new WithdrawAccountPix();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.pix_account_type = reader.readEnum();\n                        break;\n                    case 2:\n                        message.pix_identity = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): WithdrawAccountPix {\n            return WithdrawAccountPix.deserialize(bytes);\n        }\n    }\n\n    /** \n      银行账号信息\n       **/\n    export class WithdrawAccountBank extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      ifsc?: string;\n                      bank_code?: string;\n                      bank_branch?: string;\n                      address?: string;\n                      phone?: string;\n                      email?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"ifsc\" in data && data.ifsc != undefined) {\n                    this.ifsc = data.ifsc;\n                }\n                if (\"bank_code\" in data && data.bank_code != undefined) {\n                    this.bank_code = data.bank_code;\n                }\n                if (\"bank_branch\" in data && data.bank_branch != undefined) {\n                    this.bank_branch = data.bank_branch;\n                }\n                if (\"address\" in data && data.address != undefined) {\n                    this.address = data.address;\n                }\n                if (\"phone\" in data && data.phone != undefined) {\n                    this.phone = data.phone;\n                }\n                if (\"email\" in data && data.email != undefined) {\n                    this.email = data.email;\n                }\n            }\n        }\n\n        /** \n          IFSC code\n           **/\n        get ifsc() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n        }\n\n        /** \n          IFSC code\n           **/\n        set ifsc(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          银行代码\n           **/\n        get bank_code() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n\n        /** \n          银行代码\n           **/\n        set bank_code(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          银行支行\n           **/\n        get bank_branch() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n\n        /** \n          银行支行\n           **/\n        set bank_branch(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n\n        /** \n          用户地址\n           **/\n        get address() {\n            return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n        }\n\n        /** \n          用户地址\n           **/\n        set address(value: string) {\n            pb_1.Message.setField(this, 4, value);\n        }\n\n        /** \n          用户手机号\n           **/\n        get phone() {\n            return pb_1.Message.getFieldWithDefault(this, 5, \"\") as string;\n        }\n\n        /** \n          用户手机号\n           **/\n        set phone(value: string) {\n            pb_1.Message.setField(this, 5, value);\n        }\n\n        /** \n          用户邮箱\n           **/\n        get email() {\n            return pb_1.Message.getFieldWithDefault(this, 6, \"\") as string;\n        }\n\n        /** \n          用户邮箱\n           **/\n        set email(value: string) {\n            pb_1.Message.setField(this, 6, value);\n        }\n        static fromObject(data: {\n            ifsc?: string;\n            bank_code?: string;\n            bank_branch?: string;\n            address?: string;\n            phone?: string;\n            email?: string;\n        }): WithdrawAccountBank {\n            const message = new WithdrawAccountBank({});\n            if (data.ifsc != null) {\n                message.ifsc = data.ifsc;\n            }\n            if (data.bank_code != null) {\n                message.bank_code = data.bank_code;\n            }\n            if (data.bank_branch != null) {\n                message.bank_branch = data.bank_branch;\n            }\n            if (data.address != null) {\n                message.address = data.address;\n            }\n            if (data.phone != null) {\n                message.phone = data.phone;\n            }\n            if (data.email != null) {\n                message.email = data.email;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                ifsc?: string;\n                bank_code?: string;\n                bank_branch?: string;\n                address?: string;\n                phone?: string;\n                email?: string;\n            } = {};\n            if (this.ifsc != null) {\n                data.ifsc = this.ifsc;\n            }\n            if (this.bank_code != null) {\n                data.bank_code = this.bank_code;\n            }\n            if (this.bank_branch != null) {\n                data.bank_branch = this.bank_branch;\n            }\n            if (this.address != null) {\n                data.address = this.address;\n            }\n            if (this.phone != null) {\n                data.phone = this.phone;\n            }\n            if (this.email != null) {\n                data.email = this.email;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.ifsc.length) writer.writeString(1, this.ifsc);\n            if (this.bank_code.length) writer.writeString(2, this.bank_code);\n            if (this.bank_branch.length) writer.writeString(3, this.bank_branch);\n            if (this.address.length) writer.writeString(4, this.address);\n            if (this.phone.length) writer.writeString(5, this.phone);\n            if (this.email.length) writer.writeString(6, this.email);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawAccountBank {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new WithdrawAccountBank();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.ifsc = reader.readString();\n                        break;\n                    case 2:\n                        message.bank_code = reader.readString();\n                        break;\n                    case 3:\n                        message.bank_branch = reader.readString();\n                        break;\n                    case 4:\n                        message.address = reader.readString();\n                        break;\n                    case 5:\n                        message.phone = reader.readString();\n                        break;\n                    case 6:\n                        message.email = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): WithdrawAccountBank {\n            return WithdrawAccountBank.deserialize(bytes);\n        }\n    }\n\n    /** \n      提现账号信息\n       **/\n    export class WithdrawAccount extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      id?: string;\n                      type?: WithdrawAccountType;\n                      account_no?: string;\n                      account_name?: string;\n                      is_default?: boolean;\n                      pix?: WithdrawAccountPix;\n                      bank?: WithdrawAccountBank;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"id\" in data && data.id != undefined) {\n                    this.id = data.id;\n                }\n                if (\"type\" in data && data.type != undefined) {\n                    this.type = data.type;\n                }\n                if (\"account_no\" in data && data.account_no != undefined) {\n                    this.account_no = data.account_no;\n                }\n                if (\"account_name\" in data && data.account_name != undefined) {\n                    this.account_name = data.account_name;\n                }\n                if (\"is_default\" in data && data.is_default != undefined) {\n                    this.is_default = data.is_default;\n                }\n                if (\"pix\" in data && data.pix != undefined) {\n                    this.pix = data.pix;\n                }\n                if (\"bank\" in data && data.bank != undefined) {\n                    this.bank = data.bank;\n                }\n            }\n        }\n\n        /** \n          账号id\n           **/\n        get id() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n        }\n\n        /** \n          账号id\n           **/\n        set id(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          账号类型\n           **/\n        get type() {\n            return pb_1.Message.getFieldWithDefault(\n                this,\n                2,\n                WithdrawAccountType.UNKNOWN\n            ) as WithdrawAccountType;\n        }\n\n        /** \n          账号类型\n           **/\n        set type(value: WithdrawAccountType) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          账号\n           **/\n        get account_no() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n\n        /** \n          账号\n           **/\n        set account_no(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n\n        /** \n          姓名\n           **/\n        get account_name() {\n            return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n        }\n\n        /** \n          姓名\n           **/\n        set account_name(value: string) {\n            pb_1.Message.setField(this, 4, value);\n        }\n\n        /** \n          是否是默认账号\n           **/\n        get is_default() {\n            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;\n        }\n\n        /** \n          是否是默认账号\n           **/\n        set is_default(value: boolean) {\n            pb_1.Message.setField(this, 5, value);\n        }\n\n        /** \n          PIX账号信息\n           **/\n        get pix() {\n            return pb_1.Message.getWrapperField(this, WithdrawAccountPix, 6) as WithdrawAccountPix;\n        }\n\n        /** \n          PIX账号信息\n           **/\n        set pix(value: WithdrawAccountPix) {\n            pb_1.Message.setWrapperField(this, 6, value);\n        }\n        get has_pix() {\n            return pb_1.Message.getField(this, 6) != null;\n        }\n\n        /** \n          银行账号信息\n           **/\n        get bank() {\n            return pb_1.Message.getWrapperField(\n                this,\n                WithdrawAccountBank,\n                7\n            ) as WithdrawAccountBank;\n        }\n\n        /** \n          银行账号信息\n           **/\n        set bank(value: WithdrawAccountBank) {\n            pb_1.Message.setWrapperField(this, 7, value);\n        }\n        get has_bank() {\n            return pb_1.Message.getField(this, 7) != null;\n        }\n        static fromObject(data: {\n            id?: string;\n            type?: WithdrawAccountType;\n            account_no?: string;\n            account_name?: string;\n            is_default?: boolean;\n            pix?: ReturnType<typeof WithdrawAccountPix.prototype.toObject>;\n            bank?: ReturnType<typeof WithdrawAccountBank.prototype.toObject>;\n        }): WithdrawAccount {\n            const message = new WithdrawAccount({});\n            if (data.id != null) {\n                message.id = data.id;\n            }\n            if (data.type != null) {\n                message.type = data.type;\n            }\n            if (data.account_no != null) {\n                message.account_no = data.account_no;\n            }\n            if (data.account_name != null) {\n                message.account_name = data.account_name;\n            }\n            if (data.is_default != null) {\n                message.is_default = data.is_default;\n            }\n            if (data.pix != null) {\n                message.pix = WithdrawAccountPix.fromObject(data.pix);\n            }\n            if (data.bank != null) {\n                message.bank = WithdrawAccountBank.fromObject(data.bank);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                id?: string;\n                type?: WithdrawAccountType;\n                account_no?: string;\n                account_name?: string;\n                is_default?: boolean;\n                pix?: ReturnType<typeof WithdrawAccountPix.prototype.toObject>;\n                bank?: ReturnType<typeof WithdrawAccountBank.prototype.toObject>;\n            } = {};\n            if (this.id != null) {\n                data.id = this.id;\n            }\n            if (this.type != null) {\n                data.type = this.type;\n            }\n            if (this.account_no != null) {\n                data.account_no = this.account_no;\n            }\n            if (this.account_name != null) {\n                data.account_name = this.account_name;\n            }\n            if (this.is_default != null) {\n                data.is_default = this.is_default;\n            }\n            if (this.pix != null) {\n                data.pix = this.pix.toObject();\n            }\n            if (this.bank != null) {\n                data.bank = this.bank.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.id.length) writer.writeString(1, this.id);\n            if (this.type != WithdrawAccountType.UNKNOWN) writer.writeEnum(2, this.type);\n            if (this.account_no.length) writer.writeString(3, this.account_no);\n            if (this.account_name.length) writer.writeString(4, this.account_name);\n            if (this.is_default != false) writer.writeBool(5, this.is_default);\n            if (this.has_pix) writer.writeMessage(6, this.pix, () => this.pix.serialize(writer));\n            if (this.has_bank) writer.writeMessage(7, this.bank, () => this.bank.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawAccount {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new WithdrawAccount();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.id = reader.readString();\n                        break;\n                    case 2:\n                        message.type = reader.readEnum();\n                        break;\n                    case 3:\n                        message.account_no = reader.readString();\n                        break;\n                    case 4:\n                        message.account_name = reader.readString();\n                        break;\n                    case 5:\n                        message.is_default = reader.readBool();\n                        break;\n                    case 6:\n                        reader.readMessage(\n                            message.pix,\n                            () => (message.pix = WithdrawAccountPix.deserialize(reader))\n                        );\n                        break;\n                    case 7:\n                        reader.readMessage(\n                            message.bank,\n                            () => (message.bank = WithdrawAccountBank.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): WithdrawAccount {\n            return WithdrawAccount.deserialize(bytes);\n        }\n    }\n\n    /** \n      绑定提现帐号\n       withdraw/bind_account/\n       **/\n    export class WithdrawBindAccountReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      account?: WithdrawAccount;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"account\" in data && data.account != undefined) {\n                    this.account = data.account;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get account() {\n            return pb_1.Message.getWrapperField(this, WithdrawAccount, 2) as WithdrawAccount;\n        }\n        set account(value: WithdrawAccount) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_account() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            account?: ReturnType<typeof WithdrawAccount.prototype.toObject>;\n        }): WithdrawBindAccountReq {\n            const message = new WithdrawBindAccountReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.account != null) {\n                message.account = WithdrawAccount.fromObject(data.account);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                account?: ReturnType<typeof WithdrawAccount.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.account != null) {\n                data.account = this.account.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_account)\n                writer.writeMessage(2, this.account, () => this.account.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawBindAccountReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new WithdrawBindAccountReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.account,\n                            () => (message.account = WithdrawAccount.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): WithdrawBindAccountReq {\n            return WithdrawBindAccountReq.deserialize(bytes);\n        }\n    }\n    export class WithdrawBindAccountResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n        }): WithdrawBindAccountResp {\n            const message = new WithdrawBindAccountResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawBindAccountResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new WithdrawBindAccountResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): WithdrawBindAccountResp {\n            return WithdrawBindAccountResp.deserialize(bytes);\n        }\n    }\n\n    /** \n      绑定提现帐号风险检测\n       withdraw/bind_account_risk/\n       **/\n    export class WithdrawBindAccountRiskReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n        }): WithdrawBindAccountRiskReq {\n            const message = new WithdrawBindAccountRiskReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawBindAccountRiskReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new WithdrawBindAccountRiskReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): WithdrawBindAccountRiskReq {\n            return WithdrawBindAccountRiskReq.deserialize(bytes);\n        }\n    }\n    export class WithdrawBindAccountRiskResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: WithdrawBindAccountRiskResp.RespData;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(\n                this,\n                WithdrawBindAccountRiskResp.RespData,\n                2\n            ) as WithdrawBindAccountRiskResp.RespData;\n        }\n        set data(value: WithdrawBindAccountRiskResp.RespData) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof WithdrawBindAccountRiskResp.RespData.prototype.toObject>;\n        }): WithdrawBindAccountRiskResp {\n            const message = new WithdrawBindAccountRiskResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = WithdrawBindAccountRiskResp.RespData.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof WithdrawBindAccountRiskResp.RespData.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawBindAccountRiskResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new WithdrawBindAccountRiskResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () =>\n                                (message.data =\n                                    WithdrawBindAccountRiskResp.RespData.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): WithdrawBindAccountRiskResp {\n            return WithdrawBindAccountRiskResp.deserialize(bytes);\n        }\n    }\n    export namespace WithdrawBindAccountRiskResp {\n        export class RespData extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          is_risk?: boolean;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"is_risk\" in data && data.is_risk != undefined) {\n                        this.is_risk = data.is_risk;\n                    }\n                }\n            }\n\n            /** \n              是否有风险：true:有风险，false:无风险\n               **/\n            get is_risk() {\n                return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;\n            }\n\n            /** \n              是否有风险：true:有风险，false:无风险\n               **/\n            set is_risk(value: boolean) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            static fromObject(data: { is_risk?: boolean }): RespData {\n                const message = new RespData({});\n                if (data.is_risk != null) {\n                    message.is_risk = data.is_risk;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    is_risk?: boolean;\n                } = {};\n                if (this.is_risk != null) {\n                    data.is_risk = this.is_risk;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.is_risk != false) writer.writeBool(1, this.is_risk);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new RespData();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.is_risk = reader.readBool();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): RespData {\n                return RespData.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      解绑提现账号\n       withdraw/unbind_account/\n       **/\n    export class WithdrawUnbindAccountReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      id?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"id\" in data && data.id != undefined) {\n                    this.id = data.id;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get id() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set id(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            id?: string;\n        }): WithdrawUnbindAccountReq {\n            const message = new WithdrawUnbindAccountReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.id != null) {\n                message.id = data.id;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                id?: string;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.id != null) {\n                data.id = this.id;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.id.length) writer.writeString(2, this.id);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawUnbindAccountReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new WithdrawUnbindAccountReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.id = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): WithdrawUnbindAccountReq {\n            return WithdrawUnbindAccountReq.deserialize(bytes);\n        }\n    }\n    export class WithdrawUnbindAccountResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n        }): WithdrawUnbindAccountResp {\n            const message = new WithdrawUnbindAccountResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawUnbindAccountResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new WithdrawUnbindAccountResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): WithdrawUnbindAccountResp {\n            return WithdrawUnbindAccountResp.deserialize(bytes);\n        }\n    }\n\n    /** \n      提现账号列表\n       withdraw/accounts/\n       **/\n    export class WithdrawAccountsReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      type?: WithdrawAccountType;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"type\" in data && data.type != undefined) {\n                    this.type = data.type;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get type() {\n            return pb_1.Message.getFieldWithDefault(\n                this,\n                2,\n                WithdrawAccountType.UNKNOWN\n            ) as WithdrawAccountType;\n        }\n        set type(value: WithdrawAccountType) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            type?: WithdrawAccountType;\n        }): WithdrawAccountsReq {\n            const message = new WithdrawAccountsReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.type != null) {\n                message.type = data.type;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                type?: WithdrawAccountType;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.type != null) {\n                data.type = this.type;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.type != WithdrawAccountType.UNKNOWN) writer.writeEnum(2, this.type);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawAccountsReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new WithdrawAccountsReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.type = reader.readEnum();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): WithdrawAccountsReq {\n            return WithdrawAccountsReq.deserialize(bytes);\n        }\n    }\n    export class WithdrawAccountsResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: WithdrawAccount[];\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [2],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getRepeatedWrapperField(\n                this,\n                WithdrawAccount,\n                2\n            ) as WithdrawAccount[];\n        }\n        set data(value: WithdrawAccount[]) {\n            pb_1.Message.setRepeatedWrapperField(this, 2, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof WithdrawAccount.prototype.toObject>[];\n        }): WithdrawAccountsResp {\n            const message = new WithdrawAccountsResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = data.data.map((item) => WithdrawAccount.fromObject(item));\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof WithdrawAccount.prototype.toObject>[];\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.map((item: WithdrawAccount) => item.toObject());\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.data.length)\n                writer.writeRepeatedMessage(2, this.data, (item: WithdrawAccount) =>\n                    item.serialize(writer)\n                );\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawAccountsResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new WithdrawAccountsResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(message.data, () =>\n                            pb_1.Message.addToRepeatedWrapperField(\n                                message,\n                                2,\n                                WithdrawAccount.deserialize(reader),\n                                WithdrawAccount\n                            )\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): WithdrawAccountsResp {\n            return WithdrawAccountsResp.deserialize(bytes);\n        }\n    }\n\n    /** \n      设置默认提现账号\n       withdraw/set_default_account/\n       **/\n    export class WithdrawSetDefaultAccountReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      id?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"id\" in data && data.id != undefined) {\n                    this.id = data.id;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n\n        /** \n          账号id\n           **/\n        get id() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n\n        /** \n          账号id\n           **/\n        set id(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            id?: string;\n        }): WithdrawSetDefaultAccountReq {\n            const message = new WithdrawSetDefaultAccountReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.id != null) {\n                message.id = data.id;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                id?: string;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.id != null) {\n                data.id = this.id;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.id.length) writer.writeString(2, this.id);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawSetDefaultAccountReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new WithdrawSetDefaultAccountReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.id = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): WithdrawSetDefaultAccountReq {\n            return WithdrawSetDefaultAccountReq.deserialize(bytes);\n        }\n    }\n    export class WithdrawSetDefaultAccountResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n        }): WithdrawSetDefaultAccountResp {\n            const message = new WithdrawSetDefaultAccountResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawSetDefaultAccountResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new WithdrawSetDefaultAccountResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): WithdrawSetDefaultAccountResp {\n            return WithdrawSetDefaultAccountResp.deserialize(bytes);\n        }\n    }\n\n    /** \n      创建提现订单\n       withdraw/exchange/\n       error code: 5015 请切换提现账号\n       **/\n    export class WithdrawExchangeReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      channel_id?: string;\n                      amount?: number;\n                      bind_id?: string;\n                      validate_bind?: boolean;\n                      channel_list_id?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"channel_id\" in data && data.channel_id != undefined) {\n                    this.channel_id = data.channel_id;\n                }\n                if (\"amount\" in data && data.amount != undefined) {\n                    this.amount = data.amount;\n                }\n                if (\"bind_id\" in data && data.bind_id != undefined) {\n                    this.bind_id = data.bind_id;\n                }\n                if (\"validate_bind\" in data && data.validate_bind != undefined) {\n                    this.validate_bind = data.validate_bind;\n                }\n                if (\"channel_list_id\" in data && data.channel_list_id != undefined) {\n                    this.channel_list_id = data.channel_list_id;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get channel_id() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set channel_id(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          兑换金额\n           **/\n        get amount() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n\n        /** \n          兑换金额\n           **/\n        set amount(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n\n        /** \n          账号 id ，如果不填，使用默认提现账号\n           **/\n        get bind_id() {\n            return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n        }\n\n        /** \n          账号 id ，如果不填，使用默认提现账号\n           **/\n        set bind_id(value: string) {\n            pb_1.Message.setField(this, 4, value);\n        }\n\n        /** \n          是否检验提现账号有效，如果检测且无效时，抛出 5015\n           **/\n        get validate_bind() {\n            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;\n        }\n\n        /** \n          是否检验提现账号有效，如果检测且无效时，抛出 5015\n           **/\n        set validate_bind(value: boolean) {\n            pb_1.Message.setField(this, 5, value);\n        }\n\n        /** \n          提现通道列表id\n           **/\n        get channel_list_id() {\n            return pb_1.Message.getFieldWithDefault(this, 6, \"\") as string;\n        }\n\n        /** \n          提现通道列表id\n           **/\n        set channel_list_id(value: string) {\n            pb_1.Message.setField(this, 6, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            channel_id?: string;\n            amount?: number;\n            bind_id?: string;\n            validate_bind?: boolean;\n            channel_list_id?: string;\n        }): WithdrawExchangeReq {\n            const message = new WithdrawExchangeReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.channel_id != null) {\n                message.channel_id = data.channel_id;\n            }\n            if (data.amount != null) {\n                message.amount = data.amount;\n            }\n            if (data.bind_id != null) {\n                message.bind_id = data.bind_id;\n            }\n            if (data.validate_bind != null) {\n                message.validate_bind = data.validate_bind;\n            }\n            if (data.channel_list_id != null) {\n                message.channel_list_id = data.channel_list_id;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                channel_id?: string;\n                amount?: number;\n                bind_id?: string;\n                validate_bind?: boolean;\n                channel_list_id?: string;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.channel_id != null) {\n                data.channel_id = this.channel_id;\n            }\n            if (this.amount != null) {\n                data.amount = this.amount;\n            }\n            if (this.bind_id != null) {\n                data.bind_id = this.bind_id;\n            }\n            if (this.validate_bind != null) {\n                data.validate_bind = this.validate_bind;\n            }\n            if (this.channel_list_id != null) {\n                data.channel_list_id = this.channel_list_id;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.channel_id.length) writer.writeString(2, this.channel_id);\n            if (this.amount != 0) writer.writeInt64(3, this.amount);\n            if (this.bind_id.length) writer.writeString(4, this.bind_id);\n            if (this.validate_bind != false) writer.writeBool(5, this.validate_bind);\n            if (this.channel_list_id.length) writer.writeString(6, this.channel_list_id);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawExchangeReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new WithdrawExchangeReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.channel_id = reader.readString();\n                        break;\n                    case 3:\n                        message.amount = reader.readInt64();\n                        break;\n                    case 4:\n                        message.bind_id = reader.readString();\n                        break;\n                    case 5:\n                        message.validate_bind = reader.readBool();\n                        break;\n                    case 6:\n                        message.channel_list_id = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): WithdrawExchangeReq {\n            return WithdrawExchangeReq.deserialize(bytes);\n        }\n    }\n    export class WithdrawExchangeResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n        }): WithdrawExchangeResp {\n            const message = new WithdrawExchangeResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawExchangeResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new WithdrawExchangeResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): WithdrawExchangeResp {\n            return WithdrawExchangeResp.deserialize(bytes);\n        }\n    }\n\n    /** \n      获取提现记录\n       withdraw/records/\n       **/\n    export class WithdrawRecordsReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      page?: PaginationCriteria;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"page\" in data && data.page != undefined) {\n                    this.page = data.page;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get page() {\n            return pb_1.Message.getWrapperField(this, PaginationCriteria, 2) as PaginationCriteria;\n        }\n        set page(value: PaginationCriteria) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_page() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            page?: ReturnType<typeof PaginationCriteria.prototype.toObject>;\n        }): WithdrawRecordsReq {\n            const message = new WithdrawRecordsReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.page != null) {\n                message.page = PaginationCriteria.fromObject(data.page);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                page?: ReturnType<typeof PaginationCriteria.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.page != null) {\n                data.page = this.page.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_page) writer.writeMessage(2, this.page, () => this.page.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawRecordsReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new WithdrawRecordsReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.page,\n                            () => (message.page = PaginationCriteria.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): WithdrawRecordsReq {\n            return WithdrawRecordsReq.deserialize(bytes);\n        }\n    }\n    export class WithdrawRecordsResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: WithdrawRecordsResp.RespData;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(\n                this,\n                WithdrawRecordsResp.RespData,\n                2\n            ) as WithdrawRecordsResp.RespData;\n        }\n        set data(value: WithdrawRecordsResp.RespData) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof WithdrawRecordsResp.RespData.prototype.toObject>;\n        }): WithdrawRecordsResp {\n            const message = new WithdrawRecordsResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = WithdrawRecordsResp.RespData.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof WithdrawRecordsResp.RespData.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawRecordsResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new WithdrawRecordsResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () => (message.data = WithdrawRecordsResp.RespData.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): WithdrawRecordsResp {\n            return WithdrawRecordsResp.deserialize(bytes);\n        }\n    }\n    export namespace WithdrawRecordsResp {\n        export class WithdrawRecord extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          id?: number;\n                          status?: WithdrawStatus;\n                          amount?: number;\n                          type?: WithdrawAccountType;\n                          account_no?: string;\n                          account_name?: string;\n                          created_at?: number;\n                          updated_at?: number;\n                          type_name?: string;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"id\" in data && data.id != undefined) {\n                        this.id = data.id;\n                    }\n                    if (\"status\" in data && data.status != undefined) {\n                        this.status = data.status;\n                    }\n                    if (\"amount\" in data && data.amount != undefined) {\n                        this.amount = data.amount;\n                    }\n                    if (\"type\" in data && data.type != undefined) {\n                        this.type = data.type;\n                    }\n                    if (\"account_no\" in data && data.account_no != undefined) {\n                        this.account_no = data.account_no;\n                    }\n                    if (\"account_name\" in data && data.account_name != undefined) {\n                        this.account_name = data.account_name;\n                    }\n                    if (\"created_at\" in data && data.created_at != undefined) {\n                        this.created_at = data.created_at;\n                    }\n                    if (\"updated_at\" in data && data.updated_at != undefined) {\n                        this.updated_at = data.updated_at;\n                    }\n                    if (\"type_name\" in data && data.type_name != undefined) {\n                        this.type_name = data.type_name;\n                    }\n                }\n            }\n            get id() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n            set id(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n\n            /** \n              提现状态\n               **/\n            get status() {\n                return pb_1.Message.getFieldWithDefault(\n                    this,\n                    2,\n                    WithdrawStatus.WS_REVIEWING\n                ) as WithdrawStatus;\n            }\n\n            /** \n              提现状态\n               **/\n            set status(value: WithdrawStatus) {\n                pb_1.Message.setField(this, 2, value);\n            }\n\n            /** \n              提现金额\n               **/\n            get amount() {\n                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n            }\n\n            /** \n              提现金额\n               **/\n            set amount(value: number) {\n                pb_1.Message.setField(this, 3, value);\n            }\n\n            /** \n              提现账号类型\n               **/\n            get type() {\n                return pb_1.Message.getFieldWithDefault(\n                    this,\n                    4,\n                    WithdrawAccountType.UNKNOWN\n                ) as WithdrawAccountType;\n            }\n\n            /** \n              提现账号类型\n               **/\n            set type(value: WithdrawAccountType) {\n                pb_1.Message.setField(this, 4, value);\n            }\n\n            /** \n              提现账号\n               **/\n            get account_no() {\n                return pb_1.Message.getFieldWithDefault(this, 5, \"\") as string;\n            }\n\n            /** \n              提现账号\n               **/\n            set account_no(value: string) {\n                pb_1.Message.setField(this, 5, value);\n            }\n\n            /** \n              提现账号姓名\n               **/\n            get account_name() {\n                return pb_1.Message.getFieldWithDefault(this, 6, \"\") as string;\n            }\n\n            /** \n              提现账号姓名\n               **/\n            set account_name(value: string) {\n                pb_1.Message.setField(this, 6, value);\n            }\n            get created_at() {\n                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;\n            }\n            set created_at(value: number) {\n                pb_1.Message.setField(this, 7, value);\n            }\n            get updated_at() {\n                return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;\n            }\n            set updated_at(value: number) {\n                pb_1.Message.setField(this, 8, value);\n            }\n\n            /** \n              提现账号类型名称\n               **/\n            get type_name() {\n                return pb_1.Message.getFieldWithDefault(this, 9, \"\") as string;\n            }\n\n            /** \n              提现账号类型名称\n               **/\n            set type_name(value: string) {\n                pb_1.Message.setField(this, 9, value);\n            }\n            static fromObject(data: {\n                id?: number;\n                status?: WithdrawStatus;\n                amount?: number;\n                type?: WithdrawAccountType;\n                account_no?: string;\n                account_name?: string;\n                created_at?: number;\n                updated_at?: number;\n                type_name?: string;\n            }): WithdrawRecord {\n                const message = new WithdrawRecord({});\n                if (data.id != null) {\n                    message.id = data.id;\n                }\n                if (data.status != null) {\n                    message.status = data.status;\n                }\n                if (data.amount != null) {\n                    message.amount = data.amount;\n                }\n                if (data.type != null) {\n                    message.type = data.type;\n                }\n                if (data.account_no != null) {\n                    message.account_no = data.account_no;\n                }\n                if (data.account_name != null) {\n                    message.account_name = data.account_name;\n                }\n                if (data.created_at != null) {\n                    message.created_at = data.created_at;\n                }\n                if (data.updated_at != null) {\n                    message.updated_at = data.updated_at;\n                }\n                if (data.type_name != null) {\n                    message.type_name = data.type_name;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    id?: number;\n                    status?: WithdrawStatus;\n                    amount?: number;\n                    type?: WithdrawAccountType;\n                    account_no?: string;\n                    account_name?: string;\n                    created_at?: number;\n                    updated_at?: number;\n                    type_name?: string;\n                } = {};\n                if (this.id != null) {\n                    data.id = this.id;\n                }\n                if (this.status != null) {\n                    data.status = this.status;\n                }\n                if (this.amount != null) {\n                    data.amount = this.amount;\n                }\n                if (this.type != null) {\n                    data.type = this.type;\n                }\n                if (this.account_no != null) {\n                    data.account_no = this.account_no;\n                }\n                if (this.account_name != null) {\n                    data.account_name = this.account_name;\n                }\n                if (this.created_at != null) {\n                    data.created_at = this.created_at;\n                }\n                if (this.updated_at != null) {\n                    data.updated_at = this.updated_at;\n                }\n                if (this.type_name != null) {\n                    data.type_name = this.type_name;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.id != 0) writer.writeInt64(1, this.id);\n                if (this.status != WithdrawStatus.WS_REVIEWING) writer.writeEnum(2, this.status);\n                if (this.amount != 0) writer.writeInt64(3, this.amount);\n                if (this.type != WithdrawAccountType.UNKNOWN) writer.writeEnum(4, this.type);\n                if (this.account_no.length) writer.writeString(5, this.account_no);\n                if (this.account_name.length) writer.writeString(6, this.account_name);\n                if (this.created_at != 0) writer.writeInt64(7, this.created_at);\n                if (this.updated_at != 0) writer.writeInt64(8, this.updated_at);\n                if (this.type_name.length) writer.writeString(9, this.type_name);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawRecord {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new WithdrawRecord();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.id = reader.readInt64();\n                            break;\n                        case 2:\n                            message.status = reader.readEnum();\n                            break;\n                        case 3:\n                            message.amount = reader.readInt64();\n                            break;\n                        case 4:\n                            message.type = reader.readEnum();\n                            break;\n                        case 5:\n                            message.account_no = reader.readString();\n                            break;\n                        case 6:\n                            message.account_name = reader.readString();\n                            break;\n                        case 7:\n                            message.created_at = reader.readInt64();\n                            break;\n                        case 8:\n                            message.updated_at = reader.readInt64();\n                            break;\n                        case 9:\n                            message.type_name = reader.readString();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): WithdrawRecord {\n                return WithdrawRecord.deserialize(bytes);\n            }\n        }\n        export class RespData extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          total?: number;\n                          records?: WithdrawRecordsResp.WithdrawRecord[];\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [2],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"total\" in data && data.total != undefined) {\n                        this.total = data.total;\n                    }\n                    if (\"records\" in data && data.records != undefined) {\n                        this.records = data.records;\n                    }\n                }\n            }\n\n            /** \n              数据数量\n               **/\n            get total() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n\n            /** \n              数据数量\n               **/\n            set total(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get records() {\n                return pb_1.Message.getRepeatedWrapperField(\n                    this,\n                    WithdrawRecordsResp.WithdrawRecord,\n                    2\n                ) as WithdrawRecordsResp.WithdrawRecord[];\n            }\n            set records(value: WithdrawRecordsResp.WithdrawRecord[]) {\n                pb_1.Message.setRepeatedWrapperField(this, 2, value);\n            }\n            static fromObject(data: {\n                total?: number;\n                records?: ReturnType<\n                    typeof WithdrawRecordsResp.WithdrawRecord.prototype.toObject\n                >[];\n            }): RespData {\n                const message = new RespData({});\n                if (data.total != null) {\n                    message.total = data.total;\n                }\n                if (data.records != null) {\n                    message.records = data.records.map((item) =>\n                        WithdrawRecordsResp.WithdrawRecord.fromObject(item)\n                    );\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    total?: number;\n                    records?: ReturnType<\n                        typeof WithdrawRecordsResp.WithdrawRecord.prototype.toObject\n                    >[];\n                } = {};\n                if (this.total != null) {\n                    data.total = this.total;\n                }\n                if (this.records != null) {\n                    data.records = this.records.map((item: WithdrawRecordsResp.WithdrawRecord) =>\n                        item.toObject()\n                    );\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.total != 0) writer.writeInt32(1, this.total);\n                if (this.records.length)\n                    writer.writeRepeatedMessage(\n                        2,\n                        this.records,\n                        (item: WithdrawRecordsResp.WithdrawRecord) => item.serialize(writer)\n                    );\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new RespData();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.total = reader.readInt32();\n                            break;\n                        case 2:\n                            reader.readMessage(message.records, () =>\n                                pb_1.Message.addToRepeatedWrapperField(\n                                    message,\n                                    2,\n                                    WithdrawRecordsResp.WithdrawRecord.deserialize(reader),\n                                    WithdrawRecordsResp.WithdrawRecord\n                                )\n                            );\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): RespData {\n                return RespData.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      获取提现记录\n       withdraw/records_v2/\n       **/\n    export class WithdrawRecordsReqV2 extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      page?: PaginationCriteria;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"page\" in data && data.page != undefined) {\n                    this.page = data.page;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get page() {\n            return pb_1.Message.getWrapperField(this, PaginationCriteria, 2) as PaginationCriteria;\n        }\n        set page(value: PaginationCriteria) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_page() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            page?: ReturnType<typeof PaginationCriteria.prototype.toObject>;\n        }): WithdrawRecordsReqV2 {\n            const message = new WithdrawRecordsReqV2({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.page != null) {\n                message.page = PaginationCriteria.fromObject(data.page);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                page?: ReturnType<typeof PaginationCriteria.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.page != null) {\n                data.page = this.page.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_page) writer.writeMessage(2, this.page, () => this.page.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawRecordsReqV2 {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new WithdrawRecordsReqV2();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.page,\n                            () => (message.page = PaginationCriteria.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): WithdrawRecordsReqV2 {\n            return WithdrawRecordsReqV2.deserialize(bytes);\n        }\n    }\n    export class WithdrawRecordsRespV2 extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: WithdrawRecordsRespV2.RespData;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(\n                this,\n                WithdrawRecordsRespV2.RespData,\n                2\n            ) as WithdrawRecordsRespV2.RespData;\n        }\n        set data(value: WithdrawRecordsRespV2.RespData) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof WithdrawRecordsRespV2.RespData.prototype.toObject>;\n        }): WithdrawRecordsRespV2 {\n            const message = new WithdrawRecordsRespV2({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = WithdrawRecordsRespV2.RespData.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof WithdrawRecordsRespV2.RespData.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawRecordsRespV2 {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new WithdrawRecordsRespV2();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () =>\n                                (message.data = WithdrawRecordsRespV2.RespData.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): WithdrawRecordsRespV2 {\n            return WithdrawRecordsRespV2.deserialize(bytes);\n        }\n    }\n    export namespace WithdrawRecordsRespV2 {\n        export class WithdrawRecord extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          id?: number;\n                          status?: WithdrawStatus;\n                          amount?: number;\n                          type?: WithdrawAccountType;\n                          type_name?: string;\n                          account?: WithdrawAccount;\n                          created_at?: number;\n                          updated_at?: number;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"id\" in data && data.id != undefined) {\n                        this.id = data.id;\n                    }\n                    if (\"status\" in data && data.status != undefined) {\n                        this.status = data.status;\n                    }\n                    if (\"amount\" in data && data.amount != undefined) {\n                        this.amount = data.amount;\n                    }\n                    if (\"type\" in data && data.type != undefined) {\n                        this.type = data.type;\n                    }\n                    if (\"type_name\" in data && data.type_name != undefined) {\n                        this.type_name = data.type_name;\n                    }\n                    if (\"account\" in data && data.account != undefined) {\n                        this.account = data.account;\n                    }\n                    if (\"created_at\" in data && data.created_at != undefined) {\n                        this.created_at = data.created_at;\n                    }\n                    if (\"updated_at\" in data && data.updated_at != undefined) {\n                        this.updated_at = data.updated_at;\n                    }\n                }\n            }\n            get id() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n            set id(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n\n            /** \n              提现状态\n               **/\n            get status() {\n                return pb_1.Message.getFieldWithDefault(\n                    this,\n                    2,\n                    WithdrawStatus.WS_REVIEWING\n                ) as WithdrawStatus;\n            }\n\n            /** \n              提现状态\n               **/\n            set status(value: WithdrawStatus) {\n                pb_1.Message.setField(this, 2, value);\n            }\n\n            /** \n              提现金额\n               **/\n            get amount() {\n                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n            }\n\n            /** \n              提现金额\n               **/\n            set amount(value: number) {\n                pb_1.Message.setField(this, 3, value);\n            }\n\n            /** \n              提现账号类型\n               **/\n            get type() {\n                return pb_1.Message.getFieldWithDefault(\n                    this,\n                    4,\n                    WithdrawAccountType.UNKNOWN\n                ) as WithdrawAccountType;\n            }\n\n            /** \n              提现账号类型\n               **/\n            set type(value: WithdrawAccountType) {\n                pb_1.Message.setField(this, 4, value);\n            }\n\n            /** \n              提现账号类型名称\n               **/\n            get type_name() {\n                return pb_1.Message.getFieldWithDefault(this, 5, \"\") as string;\n            }\n\n            /** \n              提现账号类型名称\n               **/\n            set type_name(value: string) {\n                pb_1.Message.setField(this, 5, value);\n            }\n\n            /** \n              提现账号信息\n               **/\n            get account() {\n                return pb_1.Message.getWrapperField(this, WithdrawAccount, 6) as WithdrawAccount;\n            }\n\n            /** \n              提现账号信息\n               **/\n            set account(value: WithdrawAccount) {\n                pb_1.Message.setWrapperField(this, 6, value);\n            }\n            get has_account() {\n                return pb_1.Message.getField(this, 6) != null;\n            }\n            get created_at() {\n                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;\n            }\n            set created_at(value: number) {\n                pb_1.Message.setField(this, 7, value);\n            }\n            get updated_at() {\n                return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;\n            }\n            set updated_at(value: number) {\n                pb_1.Message.setField(this, 8, value);\n            }\n            static fromObject(data: {\n                id?: number;\n                status?: WithdrawStatus;\n                amount?: number;\n                type?: WithdrawAccountType;\n                type_name?: string;\n                account?: ReturnType<typeof WithdrawAccount.prototype.toObject>;\n                created_at?: number;\n                updated_at?: number;\n            }): WithdrawRecord {\n                const message = new WithdrawRecord({});\n                if (data.id != null) {\n                    message.id = data.id;\n                }\n                if (data.status != null) {\n                    message.status = data.status;\n                }\n                if (data.amount != null) {\n                    message.amount = data.amount;\n                }\n                if (data.type != null) {\n                    message.type = data.type;\n                }\n                if (data.type_name != null) {\n                    message.type_name = data.type_name;\n                }\n                if (data.account != null) {\n                    message.account = WithdrawAccount.fromObject(data.account);\n                }\n                if (data.created_at != null) {\n                    message.created_at = data.created_at;\n                }\n                if (data.updated_at != null) {\n                    message.updated_at = data.updated_at;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    id?: number;\n                    status?: WithdrawStatus;\n                    amount?: number;\n                    type?: WithdrawAccountType;\n                    type_name?: string;\n                    account?: ReturnType<typeof WithdrawAccount.prototype.toObject>;\n                    created_at?: number;\n                    updated_at?: number;\n                } = {};\n                if (this.id != null) {\n                    data.id = this.id;\n                }\n                if (this.status != null) {\n                    data.status = this.status;\n                }\n                if (this.amount != null) {\n                    data.amount = this.amount;\n                }\n                if (this.type != null) {\n                    data.type = this.type;\n                }\n                if (this.type_name != null) {\n                    data.type_name = this.type_name;\n                }\n                if (this.account != null) {\n                    data.account = this.account.toObject();\n                }\n                if (this.created_at != null) {\n                    data.created_at = this.created_at;\n                }\n                if (this.updated_at != null) {\n                    data.updated_at = this.updated_at;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.id != 0) writer.writeInt64(1, this.id);\n                if (this.status != WithdrawStatus.WS_REVIEWING) writer.writeEnum(2, this.status);\n                if (this.amount != 0) writer.writeInt64(3, this.amount);\n                if (this.type != WithdrawAccountType.UNKNOWN) writer.writeEnum(4, this.type);\n                if (this.type_name.length) writer.writeString(5, this.type_name);\n                if (this.has_account)\n                    writer.writeMessage(6, this.account, () => this.account.serialize(writer));\n                if (this.created_at != 0) writer.writeInt64(7, this.created_at);\n                if (this.updated_at != 0) writer.writeInt64(8, this.updated_at);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WithdrawRecord {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new WithdrawRecord();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.id = reader.readInt64();\n                            break;\n                        case 2:\n                            message.status = reader.readEnum();\n                            break;\n                        case 3:\n                            message.amount = reader.readInt64();\n                            break;\n                        case 4:\n                            message.type = reader.readEnum();\n                            break;\n                        case 5:\n                            message.type_name = reader.readString();\n                            break;\n                        case 6:\n                            reader.readMessage(\n                                message.account,\n                                () => (message.account = WithdrawAccount.deserialize(reader))\n                            );\n                            break;\n                        case 7:\n                            message.created_at = reader.readInt64();\n                            break;\n                        case 8:\n                            message.updated_at = reader.readInt64();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): WithdrawRecord {\n                return WithdrawRecord.deserialize(bytes);\n            }\n        }\n        export class RespData extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          total?: number;\n                          records?: WithdrawRecordsRespV2.WithdrawRecord[];\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [2],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"total\" in data && data.total != undefined) {\n                        this.total = data.total;\n                    }\n                    if (\"records\" in data && data.records != undefined) {\n                        this.records = data.records;\n                    }\n                }\n            }\n\n            /** \n              数据数量\n               **/\n            get total() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n\n            /** \n              数据数量\n               **/\n            set total(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get records() {\n                return pb_1.Message.getRepeatedWrapperField(\n                    this,\n                    WithdrawRecordsRespV2.WithdrawRecord,\n                    2\n                ) as WithdrawRecordsRespV2.WithdrawRecord[];\n            }\n            set records(value: WithdrawRecordsRespV2.WithdrawRecord[]) {\n                pb_1.Message.setRepeatedWrapperField(this, 2, value);\n            }\n            static fromObject(data: {\n                total?: number;\n                records?: ReturnType<\n                    typeof WithdrawRecordsRespV2.WithdrawRecord.prototype.toObject\n                >[];\n            }): RespData {\n                const message = new RespData({});\n                if (data.total != null) {\n                    message.total = data.total;\n                }\n                if (data.records != null) {\n                    message.records = data.records.map((item) =>\n                        WithdrawRecordsRespV2.WithdrawRecord.fromObject(item)\n                    );\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    total?: number;\n                    records?: ReturnType<\n                        typeof WithdrawRecordsRespV2.WithdrawRecord.prototype.toObject\n                    >[];\n                } = {};\n                if (this.total != null) {\n                    data.total = this.total;\n                }\n                if (this.records != null) {\n                    data.records = this.records.map((item: WithdrawRecordsRespV2.WithdrawRecord) =>\n                        item.toObject()\n                    );\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.total != 0) writer.writeInt32(1, this.total);\n                if (this.records.length)\n                    writer.writeRepeatedMessage(\n                        2,\n                        this.records,\n                        (item: WithdrawRecordsRespV2.WithdrawRecord) => item.serialize(writer)\n                    );\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new RespData();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.total = reader.readInt32();\n                            break;\n                        case 2:\n                            reader.readMessage(message.records, () =>\n                                pb_1.Message.addToRepeatedWrapperField(\n                                    message,\n                                    2,\n                                    WithdrawRecordsRespV2.WithdrawRecord.deserialize(reader),\n                                    WithdrawRecordsRespV2.WithdrawRecord\n                                )\n                            );\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): RespData {\n                return RespData.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      /////////////////////////\n       存入保险箱\n       safebox/put_in/\n       error code: 501 账户余额不足\n       **/\n    export class SafeboxPutInReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      amount?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"amount\" in data && data.amount != undefined) {\n                    this.amount = data.amount;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get amount() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n        set amount(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            amount?: number;\n        }): SafeboxPutInReq {\n            const message = new SafeboxPutInReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.amount != null) {\n                message.amount = data.amount;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                amount?: number;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.amount != null) {\n                data.amount = this.amount;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.amount != 0) writer.writeUint64(2, this.amount);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SafeboxPutInReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new SafeboxPutInReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.amount = reader.readUint64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): SafeboxPutInReq {\n            return SafeboxPutInReq.deserialize(bytes);\n        }\n    }\n    export class SafeboxPutInResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: SafeboxPutInResp.RespData;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(\n                this,\n                SafeboxPutInResp.RespData,\n                2\n            ) as SafeboxPutInResp.RespData;\n        }\n        set data(value: SafeboxPutInResp.RespData) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof SafeboxPutInResp.RespData.prototype.toObject>;\n        }): SafeboxPutInResp {\n            const message = new SafeboxPutInResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = SafeboxPutInResp.RespData.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof SafeboxPutInResp.RespData.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SafeboxPutInResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new SafeboxPutInResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () => (message.data = SafeboxPutInResp.RespData.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): SafeboxPutInResp {\n            return SafeboxPutInResp.deserialize(bytes);\n        }\n    }\n    export namespace SafeboxPutInResp {\n        export class RespData extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          credit?: number;\n                          safe_amount?: number;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"credit\" in data && data.credit != undefined) {\n                        this.credit = data.credit;\n                    }\n                    if (\"safe_amount\" in data && data.safe_amount != undefined) {\n                        this.safe_amount = data.safe_amount;\n                    }\n                }\n            }\n            get credit() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n            set credit(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get safe_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n            }\n            set safe_amount(value: number) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            static fromObject(data: { credit?: number; safe_amount?: number }): RespData {\n                const message = new RespData({});\n                if (data.credit != null) {\n                    message.credit = data.credit;\n                }\n                if (data.safe_amount != null) {\n                    message.safe_amount = data.safe_amount;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    credit?: number;\n                    safe_amount?: number;\n                } = {};\n                if (this.credit != null) {\n                    data.credit = this.credit;\n                }\n                if (this.safe_amount != null) {\n                    data.safe_amount = this.safe_amount;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.credit != 0) writer.writeInt64(1, this.credit);\n                if (this.safe_amount != 0) writer.writeInt64(2, this.safe_amount);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new RespData();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.credit = reader.readInt64();\n                            break;\n                        case 2:\n                            message.safe_amount = reader.readInt64();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): RespData {\n                return RespData.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      从保险箱取出\n       safebox/take_out/\n       error code: 501 保险箱余额不足\n       **/\n    export class SafeboxTakeOutReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      amount?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"amount\" in data && data.amount != undefined) {\n                    this.amount = data.amount;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get amount() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n        set amount(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            amount?: number;\n        }): SafeboxTakeOutReq {\n            const message = new SafeboxTakeOutReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.amount != null) {\n                message.amount = data.amount;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                amount?: number;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.amount != null) {\n                data.amount = this.amount;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.amount != 0) writer.writeUint64(2, this.amount);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SafeboxTakeOutReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new SafeboxTakeOutReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.amount = reader.readUint64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): SafeboxTakeOutReq {\n            return SafeboxTakeOutReq.deserialize(bytes);\n        }\n    }\n    export class SafeboxTakeOutResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: SafeboxTakeOutResp.RespData;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(\n                this,\n                SafeboxTakeOutResp.RespData,\n                2\n            ) as SafeboxTakeOutResp.RespData;\n        }\n        set data(value: SafeboxTakeOutResp.RespData) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof SafeboxTakeOutResp.RespData.prototype.toObject>;\n        }): SafeboxTakeOutResp {\n            const message = new SafeboxTakeOutResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = SafeboxTakeOutResp.RespData.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof SafeboxTakeOutResp.RespData.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SafeboxTakeOutResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new SafeboxTakeOutResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () => (message.data = SafeboxTakeOutResp.RespData.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): SafeboxTakeOutResp {\n            return SafeboxTakeOutResp.deserialize(bytes);\n        }\n    }\n    export namespace SafeboxTakeOutResp {\n        export class RespData extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          credit?: number;\n                          safe_amount?: number;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"credit\" in data && data.credit != undefined) {\n                        this.credit = data.credit;\n                    }\n                    if (\"safe_amount\" in data && data.safe_amount != undefined) {\n                        this.safe_amount = data.safe_amount;\n                    }\n                }\n            }\n            get credit() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n            set credit(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get safe_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n            }\n            set safe_amount(value: number) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            static fromObject(data: { credit?: number; safe_amount?: number }): RespData {\n                const message = new RespData({});\n                if (data.credit != null) {\n                    message.credit = data.credit;\n                }\n                if (data.safe_amount != null) {\n                    message.safe_amount = data.safe_amount;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    credit?: number;\n                    safe_amount?: number;\n                } = {};\n                if (this.credit != null) {\n                    data.credit = this.credit;\n                }\n                if (this.safe_amount != null) {\n                    data.safe_amount = this.safe_amount;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.credit != 0) writer.writeInt64(1, this.credit);\n                if (this.safe_amount != 0) writer.writeInt64(2, this.safe_amount);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new RespData();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.credit = reader.readInt64();\n                            break;\n                        case 2:\n                            message.safe_amount = reader.readInt64();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): RespData {\n                return RespData.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      mail/pull/\n       **/\n    export class MailPullReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      cursor_id?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"cursor_id\" in data && data.cursor_id != undefined) {\n                    this.cursor_id = data.cursor_id;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n\n        /** \n          本地缓存最后一封邮件mail_id\n           **/\n        get cursor_id() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n\n        /** \n          本地缓存最后一封邮件mail_id\n           **/\n        set cursor_id(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            cursor_id?: string;\n        }): MailPullReq {\n            const message = new MailPullReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.cursor_id != null) {\n                message.cursor_id = data.cursor_id;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                cursor_id?: string;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.cursor_id != null) {\n                data.cursor_id = this.cursor_id;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.cursor_id.length) writer.writeString(2, this.cursor_id);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MailPullReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new MailPullReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.cursor_id = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): MailPullReq {\n            return MailPullReq.deserialize(bytes);\n        }\n    }\n    export class MailPullResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: MailPullResp.RespData;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(\n                this,\n                MailPullResp.RespData,\n                2\n            ) as MailPullResp.RespData;\n        }\n        set data(value: MailPullResp.RespData) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof MailPullResp.RespData.prototype.toObject>;\n        }): MailPullResp {\n            const message = new MailPullResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = MailPullResp.RespData.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof MailPullResp.RespData.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MailPullResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new MailPullResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () => (message.data = MailPullResp.RespData.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): MailPullResp {\n            return MailPullResp.deserialize(bytes);\n        }\n    }\n    export namespace MailPullResp {\n        export class Mail extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          mail_id?: string;\n                          title?: string;\n                          text?: string;\n                          picture?: string;\n                          accepted?: boolean;\n                          checked?: boolean;\n                          expired_at?: number;\n                          recv_time?: number;\n                          now_ts?: number;\n                          annex_type?: number;\n                          annex_count?: string;\n                          contact_type?: MailContactType;\n                          contact_no?: string;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"mail_id\" in data && data.mail_id != undefined) {\n                        this.mail_id = data.mail_id;\n                    }\n                    if (\"title\" in data && data.title != undefined) {\n                        this.title = data.title;\n                    }\n                    if (\"text\" in data && data.text != undefined) {\n                        this.text = data.text;\n                    }\n                    if (\"picture\" in data && data.picture != undefined) {\n                        this.picture = data.picture;\n                    }\n                    if (\"accepted\" in data && data.accepted != undefined) {\n                        this.accepted = data.accepted;\n                    }\n                    if (\"checked\" in data && data.checked != undefined) {\n                        this.checked = data.checked;\n                    }\n                    if (\"expired_at\" in data && data.expired_at != undefined) {\n                        this.expired_at = data.expired_at;\n                    }\n                    if (\"recv_time\" in data && data.recv_time != undefined) {\n                        this.recv_time = data.recv_time;\n                    }\n                    if (\"now_ts\" in data && data.now_ts != undefined) {\n                        this.now_ts = data.now_ts;\n                    }\n                    if (\"annex_type\" in data && data.annex_type != undefined) {\n                        this.annex_type = data.annex_type;\n                    }\n                    if (\"annex_count\" in data && data.annex_count != undefined) {\n                        this.annex_count = data.annex_count;\n                    }\n                    if (\"contact_type\" in data && data.contact_type != undefined) {\n                        this.contact_type = data.contact_type;\n                    }\n                    if (\"contact_no\" in data && data.contact_no != undefined) {\n                        this.contact_no = data.contact_no;\n                    }\n                }\n            }\n            get mail_id() {\n                return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n            }\n            set mail_id(value: string) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get title() {\n                return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n            }\n            set title(value: string) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            get text() {\n                return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n            }\n            set text(value: string) {\n                pb_1.Message.setField(this, 3, value);\n            }\n            get picture() {\n                return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n            }\n            set picture(value: string) {\n                pb_1.Message.setField(this, 4, value);\n            }\n            get accepted() {\n                return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;\n            }\n            set accepted(value: boolean) {\n                pb_1.Message.setField(this, 5, value);\n            }\n            get checked() {\n                return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;\n            }\n            set checked(value: boolean) {\n                pb_1.Message.setField(this, 6, value);\n            }\n            get expired_at() {\n                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;\n            }\n            set expired_at(value: number) {\n                pb_1.Message.setField(this, 7, value);\n            }\n            get recv_time() {\n                return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;\n            }\n            set recv_time(value: number) {\n                pb_1.Message.setField(this, 8, value);\n            }\n            get now_ts() {\n                return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;\n            }\n            set now_ts(value: number) {\n                pb_1.Message.setField(this, 9, value);\n            }\n            get annex_type() {\n                return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;\n            }\n            set annex_type(value: number) {\n                pb_1.Message.setField(this, 10, value);\n            }\n            get annex_count() {\n                return pb_1.Message.getFieldWithDefault(this, 11, \"\") as string;\n            }\n            set annex_count(value: string) {\n                pb_1.Message.setField(this, 11, value);\n            }\n            get contact_type() {\n                return pb_1.Message.getFieldWithDefault(\n                    this,\n                    12,\n                    MailContactType.MCT_DEFAULT\n                ) as MailContactType;\n            }\n            set contact_type(value: MailContactType) {\n                pb_1.Message.setField(this, 12, value);\n            }\n            get contact_no() {\n                return pb_1.Message.getFieldWithDefault(this, 13, \"\") as string;\n            }\n            set contact_no(value: string) {\n                pb_1.Message.setField(this, 13, value);\n            }\n            static fromObject(data: {\n                mail_id?: string;\n                title?: string;\n                text?: string;\n                picture?: string;\n                accepted?: boolean;\n                checked?: boolean;\n                expired_at?: number;\n                recv_time?: number;\n                now_ts?: number;\n                annex_type?: number;\n                annex_count?: string;\n                contact_type?: MailContactType;\n                contact_no?: string;\n            }): Mail {\n                const message = new Mail({});\n                if (data.mail_id != null) {\n                    message.mail_id = data.mail_id;\n                }\n                if (data.title != null) {\n                    message.title = data.title;\n                }\n                if (data.text != null) {\n                    message.text = data.text;\n                }\n                if (data.picture != null) {\n                    message.picture = data.picture;\n                }\n                if (data.accepted != null) {\n                    message.accepted = data.accepted;\n                }\n                if (data.checked != null) {\n                    message.checked = data.checked;\n                }\n                if (data.expired_at != null) {\n                    message.expired_at = data.expired_at;\n                }\n                if (data.recv_time != null) {\n                    message.recv_time = data.recv_time;\n                }\n                if (data.now_ts != null) {\n                    message.now_ts = data.now_ts;\n                }\n                if (data.annex_type != null) {\n                    message.annex_type = data.annex_type;\n                }\n                if (data.annex_count != null) {\n                    message.annex_count = data.annex_count;\n                }\n                if (data.contact_type != null) {\n                    message.contact_type = data.contact_type;\n                }\n                if (data.contact_no != null) {\n                    message.contact_no = data.contact_no;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    mail_id?: string;\n                    title?: string;\n                    text?: string;\n                    picture?: string;\n                    accepted?: boolean;\n                    checked?: boolean;\n                    expired_at?: number;\n                    recv_time?: number;\n                    now_ts?: number;\n                    annex_type?: number;\n                    annex_count?: string;\n                    contact_type?: MailContactType;\n                    contact_no?: string;\n                } = {};\n                if (this.mail_id != null) {\n                    data.mail_id = this.mail_id;\n                }\n                if (this.title != null) {\n                    data.title = this.title;\n                }\n                if (this.text != null) {\n                    data.text = this.text;\n                }\n                if (this.picture != null) {\n                    data.picture = this.picture;\n                }\n                if (this.accepted != null) {\n                    data.accepted = this.accepted;\n                }\n                if (this.checked != null) {\n                    data.checked = this.checked;\n                }\n                if (this.expired_at != null) {\n                    data.expired_at = this.expired_at;\n                }\n                if (this.recv_time != null) {\n                    data.recv_time = this.recv_time;\n                }\n                if (this.now_ts != null) {\n                    data.now_ts = this.now_ts;\n                }\n                if (this.annex_type != null) {\n                    data.annex_type = this.annex_type;\n                }\n                if (this.annex_count != null) {\n                    data.annex_count = this.annex_count;\n                }\n                if (this.contact_type != null) {\n                    data.contact_type = this.contact_type;\n                }\n                if (this.contact_no != null) {\n                    data.contact_no = this.contact_no;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.mail_id.length) writer.writeString(1, this.mail_id);\n                if (this.title.length) writer.writeString(2, this.title);\n                if (this.text.length) writer.writeString(3, this.text);\n                if (this.picture.length) writer.writeString(4, this.picture);\n                if (this.accepted != false) writer.writeBool(5, this.accepted);\n                if (this.checked != false) writer.writeBool(6, this.checked);\n                if (this.expired_at != 0) writer.writeInt64(7, this.expired_at);\n                if (this.recv_time != 0) writer.writeInt64(8, this.recv_time);\n                if (this.now_ts != 0) writer.writeInt64(9, this.now_ts);\n                if (this.annex_type != 0) writer.writeInt32(10, this.annex_type);\n                if (this.annex_count.length) writer.writeString(11, this.annex_count);\n                if (this.contact_type != MailContactType.MCT_DEFAULT)\n                    writer.writeEnum(12, this.contact_type);\n                if (this.contact_no.length) writer.writeString(13, this.contact_no);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Mail {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new Mail();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.mail_id = reader.readString();\n                            break;\n                        case 2:\n                            message.title = reader.readString();\n                            break;\n                        case 3:\n                            message.text = reader.readString();\n                            break;\n                        case 4:\n                            message.picture = reader.readString();\n                            break;\n                        case 5:\n                            message.accepted = reader.readBool();\n                            break;\n                        case 6:\n                            message.checked = reader.readBool();\n                            break;\n                        case 7:\n                            message.expired_at = reader.readInt64();\n                            break;\n                        case 8:\n                            message.recv_time = reader.readInt64();\n                            break;\n                        case 9:\n                            message.now_ts = reader.readInt64();\n                            break;\n                        case 10:\n                            message.annex_type = reader.readInt32();\n                            break;\n                        case 11:\n                            message.annex_count = reader.readString();\n                            break;\n                        case 12:\n                            message.contact_type = reader.readEnum();\n                            break;\n                        case 13:\n                            message.contact_no = reader.readString();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): Mail {\n                return Mail.deserialize(bytes);\n            }\n        }\n        export class RespData extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          mails?: MailPullResp.Mail[];\n                          del_mails?: string[];\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [1, 2],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"mails\" in data && data.mails != undefined) {\n                        this.mails = data.mails;\n                    }\n                    if (\"del_mails\" in data && data.del_mails != undefined) {\n                        this.del_mails = data.del_mails;\n                    }\n                }\n            }\n            get mails() {\n                return pb_1.Message.getRepeatedWrapperField(\n                    this,\n                    MailPullResp.Mail,\n                    1\n                ) as MailPullResp.Mail[];\n            }\n            set mails(value: MailPullResp.Mail[]) {\n                pb_1.Message.setRepeatedWrapperField(this, 1, value);\n            }\n            get del_mails() {\n                return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];\n            }\n            set del_mails(value: string[]) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            static fromObject(data: {\n                mails?: ReturnType<typeof MailPullResp.Mail.prototype.toObject>[];\n                del_mails?: string[];\n            }): RespData {\n                const message = new RespData({});\n                if (data.mails != null) {\n                    message.mails = data.mails.map((item) => MailPullResp.Mail.fromObject(item));\n                }\n                if (data.del_mails != null) {\n                    message.del_mails = data.del_mails;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    mails?: ReturnType<typeof MailPullResp.Mail.prototype.toObject>[];\n                    del_mails?: string[];\n                } = {};\n                if (this.mails != null) {\n                    data.mails = this.mails.map((item: MailPullResp.Mail) => item.toObject());\n                }\n                if (this.del_mails != null) {\n                    data.del_mails = this.del_mails;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.mails.length)\n                    writer.writeRepeatedMessage(1, this.mails, (item: MailPullResp.Mail) =>\n                        item.serialize(writer)\n                    );\n                if (this.del_mails.length) writer.writeRepeatedString(2, this.del_mails);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new RespData();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            reader.readMessage(message.mails, () =>\n                                pb_1.Message.addToRepeatedWrapperField(\n                                    message,\n                                    1,\n                                    MailPullResp.Mail.deserialize(reader),\n                                    MailPullResp.Mail\n                                )\n                            );\n                            break;\n                        case 2:\n                            pb_1.Message.addToRepeatedField(message, 2, reader.readString());\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): RespData {\n                return RespData.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      mail/accept/\n       error code: 300 附件已领取\n       error code: 300 邮件已过期\n       **/\n    export class MailAcceptReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      mail_id?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"mail_id\" in data && data.mail_id != undefined) {\n                    this.mail_id = data.mail_id;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get mail_id() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set mail_id(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            mail_id?: string;\n        }): MailAcceptReq {\n            const message = new MailAcceptReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.mail_id != null) {\n                message.mail_id = data.mail_id;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                mail_id?: string;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.mail_id != null) {\n                data.mail_id = this.mail_id;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.mail_id.length) writer.writeString(2, this.mail_id);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MailAcceptReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new MailAcceptReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.mail_id = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): MailAcceptReq {\n            return MailAcceptReq.deserialize(bytes);\n        }\n    }\n    export class MailAcceptResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: MailAcceptResp.RespData;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(\n                this,\n                MailAcceptResp.RespData,\n                2\n            ) as MailAcceptResp.RespData;\n        }\n        set data(value: MailAcceptResp.RespData) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof MailAcceptResp.RespData.prototype.toObject>;\n        }): MailAcceptResp {\n            const message = new MailAcceptResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = MailAcceptResp.RespData.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof MailAcceptResp.RespData.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MailAcceptResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new MailAcceptResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () => (message.data = MailAcceptResp.RespData.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): MailAcceptResp {\n            return MailAcceptResp.deserialize(bytes);\n        }\n    }\n    export namespace MailAcceptResp {\n        export class RespData extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          annex_type?: number;\n                          annex_count?: string;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"annex_type\" in data && data.annex_type != undefined) {\n                        this.annex_type = data.annex_type;\n                    }\n                    if (\"annex_count\" in data && data.annex_count != undefined) {\n                        this.annex_count = data.annex_count;\n                    }\n                }\n            }\n\n            /** \n              is props_id\n               **/\n            get annex_type() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n\n            /** \n              is props_id\n               **/\n            set annex_type(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get annex_count() {\n                return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n            }\n            set annex_count(value: string) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            static fromObject(data: { annex_type?: number; annex_count?: string }): RespData {\n                const message = new RespData({});\n                if (data.annex_type != null) {\n                    message.annex_type = data.annex_type;\n                }\n                if (data.annex_count != null) {\n                    message.annex_count = data.annex_count;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    annex_type?: number;\n                    annex_count?: string;\n                } = {};\n                if (this.annex_type != null) {\n                    data.annex_type = this.annex_type;\n                }\n                if (this.annex_count != null) {\n                    data.annex_count = this.annex_count;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.annex_type != 0) writer.writeInt32(1, this.annex_type);\n                if (this.annex_count.length) writer.writeString(2, this.annex_count);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new RespData();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.annex_type = reader.readInt32();\n                            break;\n                        case 2:\n                            message.annex_count = reader.readString();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): RespData {\n                return RespData.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      mail/delete_all/\n       **/\n    export class MailDelAllReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n        }): MailDelAllReq {\n            const message = new MailDelAllReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MailDelAllReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new MailDelAllReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): MailDelAllReq {\n            return MailDelAllReq.deserialize(bytes);\n        }\n    }\n    export class MailDelAllResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n        }): MailDelAllResp {\n            const message = new MailDelAllResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MailDelAllResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new MailDelAllResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): MailDelAllResp {\n            return MailDelAllResp.deserialize(bytes);\n        }\n    }\n\n    /** \n      mail/check/\n       **/\n    export class MailCheckReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      mail_id?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"mail_id\" in data && data.mail_id != undefined) {\n                    this.mail_id = data.mail_id;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get mail_id() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set mail_id(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            mail_id?: string;\n        }): MailCheckReq {\n            const message = new MailCheckReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.mail_id != null) {\n                message.mail_id = data.mail_id;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                mail_id?: string;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.mail_id != null) {\n                data.mail_id = this.mail_id;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.mail_id.length) writer.writeString(2, this.mail_id);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MailCheckReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new MailCheckReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.mail_id = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): MailCheckReq {\n            return MailCheckReq.deserialize(bytes);\n        }\n    }\n    export class MailCheckResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n        }): MailCheckResp {\n            const message = new MailCheckResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MailCheckResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new MailCheckResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): MailCheckResp {\n            return MailCheckResp.deserialize(bytes);\n        }\n    }\n\n    /** \n      mail/delete/\n       **/\n    export class MailDeleteReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      mail_id?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"mail_id\" in data && data.mail_id != undefined) {\n                    this.mail_id = data.mail_id;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get mail_id() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set mail_id(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            mail_id?: string;\n        }): MailDeleteReq {\n            const message = new MailDeleteReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.mail_id != null) {\n                message.mail_id = data.mail_id;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                mail_id?: string;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.mail_id != null) {\n                data.mail_id = this.mail_id;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.mail_id.length) writer.writeString(2, this.mail_id);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MailDeleteReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new MailDeleteReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.mail_id = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): MailDeleteReq {\n            return MailDeleteReq.deserialize(bytes);\n        }\n    }\n    export class MailDeleteResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n        }): MailDeleteResp {\n            const message = new MailDeleteResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MailDeleteResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new MailDeleteResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): MailDeleteResp {\n            return MailDeleteResp.deserialize(bytes);\n        }\n    }\n\n    /** \n      vip 配置\n       act/vip_bonus/conf\n       **/\n    export class VipBonusConfReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n        }): VipBonusConfReq {\n            const message = new VipBonusConfReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VipBonusConfReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new VipBonusConfReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): VipBonusConfReq {\n            return VipBonusConfReq.deserialize(bytes);\n        }\n    }\n    export class VipBonusConfResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: VipBonusConfResp.RespData;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(\n                this,\n                VipBonusConfResp.RespData,\n                2\n            ) as VipBonusConfResp.RespData;\n        }\n        set data(value: VipBonusConfResp.RespData) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof VipBonusConfResp.RespData.prototype.toObject>;\n        }): VipBonusConfResp {\n            const message = new VipBonusConfResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = VipBonusConfResp.RespData.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof VipBonusConfResp.RespData.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VipBonusConfResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new VipBonusConfResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () => (message.data = VipBonusConfResp.RespData.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): VipBonusConfResp {\n            return VipBonusConfResp.deserialize(bytes);\n        }\n    }\n    export namespace VipBonusConfResp {\n        export class PropsBonus extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          props_id?: number;\n                          need_level?: number;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"props_id\" in data && data.props_id != undefined) {\n                        this.props_id = data.props_id;\n                    }\n                    if (\"need_level\" in data && data.need_level != undefined) {\n                        this.need_level = data.need_level;\n                    }\n                }\n            }\n            get props_id() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n            set props_id(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get need_level() {\n                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n            }\n            set need_level(value: number) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            static fromObject(data: { props_id?: number; need_level?: number }): PropsBonus {\n                const message = new PropsBonus({});\n                if (data.props_id != null) {\n                    message.props_id = data.props_id;\n                }\n                if (data.need_level != null) {\n                    message.need_level = data.need_level;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    props_id?: number;\n                    need_level?: number;\n                } = {};\n                if (this.props_id != null) {\n                    data.props_id = this.props_id;\n                }\n                if (this.need_level != null) {\n                    data.need_level = this.need_level;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.props_id != 0) writer.writeInt32(1, this.props_id);\n                if (this.need_level != 0) writer.writeInt32(2, this.need_level);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PropsBonus {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new PropsBonus();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.props_id = reader.readInt32();\n                            break;\n                        case 2:\n                            message.need_level = reader.readInt32();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): PropsBonus {\n                return PropsBonus.deserialize(bytes);\n            }\n        }\n        export class LevelBonusAmountCfg extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          reach_amount?: number;\n                          up_award_count?: string;\n                          feedback_award_count?: string;\n                          free_award_count?: string;\n                          birthday_award_count?: string;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"reach_amount\" in data && data.reach_amount != undefined) {\n                        this.reach_amount = data.reach_amount;\n                    }\n                    if (\"up_award_count\" in data && data.up_award_count != undefined) {\n                        this.up_award_count = data.up_award_count;\n                    }\n                    if (\"feedback_award_count\" in data && data.feedback_award_count != undefined) {\n                        this.feedback_award_count = data.feedback_award_count;\n                    }\n                    if (\"free_award_count\" in data && data.free_award_count != undefined) {\n                        this.free_award_count = data.free_award_count;\n                    }\n                    if (\"birthday_award_count\" in data && data.birthday_award_count != undefined) {\n                        this.birthday_award_count = data.birthday_award_count;\n                    }\n                }\n            }\n            get reach_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n            set reach_amount(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get up_award_count() {\n                return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n            }\n            set up_award_count(value: string) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            get feedback_award_count() {\n                return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n            }\n            set feedback_award_count(value: string) {\n                pb_1.Message.setField(this, 3, value);\n            }\n            get free_award_count() {\n                return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n            }\n            set free_award_count(value: string) {\n                pb_1.Message.setField(this, 4, value);\n            }\n            get birthday_award_count() {\n                return pb_1.Message.getFieldWithDefault(this, 5, \"\") as string;\n            }\n            set birthday_award_count(value: string) {\n                pb_1.Message.setField(this, 5, value);\n            }\n            static fromObject(data: {\n                reach_amount?: number;\n                up_award_count?: string;\n                feedback_award_count?: string;\n                free_award_count?: string;\n                birthday_award_count?: string;\n            }): LevelBonusAmountCfg {\n                const message = new LevelBonusAmountCfg({});\n                if (data.reach_amount != null) {\n                    message.reach_amount = data.reach_amount;\n                }\n                if (data.up_award_count != null) {\n                    message.up_award_count = data.up_award_count;\n                }\n                if (data.feedback_award_count != null) {\n                    message.feedback_award_count = data.feedback_award_count;\n                }\n                if (data.free_award_count != null) {\n                    message.free_award_count = data.free_award_count;\n                }\n                if (data.birthday_award_count != null) {\n                    message.birthday_award_count = data.birthday_award_count;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    reach_amount?: number;\n                    up_award_count?: string;\n                    feedback_award_count?: string;\n                    free_award_count?: string;\n                    birthday_award_count?: string;\n                } = {};\n                if (this.reach_amount != null) {\n                    data.reach_amount = this.reach_amount;\n                }\n                if (this.up_award_count != null) {\n                    data.up_award_count = this.up_award_count;\n                }\n                if (this.feedback_award_count != null) {\n                    data.feedback_award_count = this.feedback_award_count;\n                }\n                if (this.free_award_count != null) {\n                    data.free_award_count = this.free_award_count;\n                }\n                if (this.birthday_award_count != null) {\n                    data.birthday_award_count = this.birthday_award_count;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.reach_amount != 0) writer.writeInt64(1, this.reach_amount);\n                if (this.up_award_count.length) writer.writeString(2, this.up_award_count);\n                if (this.feedback_award_count.length)\n                    writer.writeString(3, this.feedback_award_count);\n                if (this.free_award_count.length) writer.writeString(4, this.free_award_count);\n                if (this.birthday_award_count.length)\n                    writer.writeString(5, this.birthday_award_count);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LevelBonusAmountCfg {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new LevelBonusAmountCfg();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.reach_amount = reader.readInt64();\n                            break;\n                        case 2:\n                            message.up_award_count = reader.readString();\n                            break;\n                        case 3:\n                            message.feedback_award_count = reader.readString();\n                            break;\n                        case 4:\n                            message.free_award_count = reader.readString();\n                            break;\n                        case 5:\n                            message.birthday_award_count = reader.readString();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): LevelBonusAmountCfg {\n                return LevelBonusAmountCfg.deserialize(bytes);\n            }\n        }\n        export class BonusDescription extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          bonus_type?: number;\n                          title?: string;\n                          distribute_description?: string;\n                          tips_description?: string;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"bonus_type\" in data && data.bonus_type != undefined) {\n                        this.bonus_type = data.bonus_type;\n                    }\n                    if (\"title\" in data && data.title != undefined) {\n                        this.title = data.title;\n                    }\n                    if (\n                        \"distribute_description\" in data &&\n                        data.distribute_description != undefined\n                    ) {\n                        this.distribute_description = data.distribute_description;\n                    }\n                    if (\"tips_description\" in data && data.tips_description != undefined) {\n                        this.tips_description = data.tips_description;\n                    }\n                }\n            }\n            get bonus_type() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n            set bonus_type(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get title() {\n                return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n            }\n            set title(value: string) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            get distribute_description() {\n                return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n            }\n            set distribute_description(value: string) {\n                pb_1.Message.setField(this, 3, value);\n            }\n            get tips_description() {\n                return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n            }\n            set tips_description(value: string) {\n                pb_1.Message.setField(this, 4, value);\n            }\n            static fromObject(data: {\n                bonus_type?: number;\n                title?: string;\n                distribute_description?: string;\n                tips_description?: string;\n            }): BonusDescription {\n                const message = new BonusDescription({});\n                if (data.bonus_type != null) {\n                    message.bonus_type = data.bonus_type;\n                }\n                if (data.title != null) {\n                    message.title = data.title;\n                }\n                if (data.distribute_description != null) {\n                    message.distribute_description = data.distribute_description;\n                }\n                if (data.tips_description != null) {\n                    message.tips_description = data.tips_description;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    bonus_type?: number;\n                    title?: string;\n                    distribute_description?: string;\n                    tips_description?: string;\n                } = {};\n                if (this.bonus_type != null) {\n                    data.bonus_type = this.bonus_type;\n                }\n                if (this.title != null) {\n                    data.title = this.title;\n                }\n                if (this.distribute_description != null) {\n                    data.distribute_description = this.distribute_description;\n                }\n                if (this.tips_description != null) {\n                    data.tips_description = this.tips_description;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.bonus_type != 0) writer.writeInt32(1, this.bonus_type);\n                if (this.title.length) writer.writeString(2, this.title);\n                if (this.distribute_description.length)\n                    writer.writeString(3, this.distribute_description);\n                if (this.tips_description.length) writer.writeString(4, this.tips_description);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BonusDescription {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new BonusDescription();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.bonus_type = reader.readInt32();\n                            break;\n                        case 2:\n                            message.title = reader.readString();\n                            break;\n                        case 3:\n                            message.distribute_description = reader.readString();\n                            break;\n                        case 4:\n                            message.tips_description = reader.readString();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): BonusDescription {\n                return BonusDescription.deserialize(bytes);\n            }\n        }\n        export class LevelInfo extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          level?: number;\n                          amount?: number;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"level\" in data && data.level != undefined) {\n                        this.level = data.level;\n                    }\n                    if (\"amount\" in data && data.amount != undefined) {\n                        this.amount = data.amount;\n                    }\n                }\n            }\n            get level() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n            set level(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get amount() {\n                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n            }\n            set amount(value: number) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            static fromObject(data: { level?: number; amount?: number }): LevelInfo {\n                const message = new LevelInfo({});\n                if (data.level != null) {\n                    message.level = data.level;\n                }\n                if (data.amount != null) {\n                    message.amount = data.amount;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    level?: number;\n                    amount?: number;\n                } = {};\n                if (this.level != null) {\n                    data.level = this.level;\n                }\n                if (this.amount != null) {\n                    data.amount = this.amount;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.level != 0) writer.writeInt32(1, this.level);\n                if (this.amount != 0) writer.writeInt64(2, this.amount);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LevelInfo {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new LevelInfo();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.level = reader.readInt32();\n                            break;\n                        case 2:\n                            message.amount = reader.readInt64();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): LevelInfo {\n                return LevelInfo.deserialize(bytes);\n            }\n        }\n        export class RespData extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          props_bonus?: VipBonusConfResp.PropsBonus;\n                          level_bonus_amount_cfgs?: VipBonusConfResp.LevelBonusAmountCfg[];\n                          bonus_descriptions?: VipBonusConfResp.BonusDescription[];\n                          current_level_info?: VipBonusConfResp.LevelInfo;\n                          last_month_level?: number;\n                          last_three_months_count?: string;\n                          birthday?: string;\n                          level_description?: string;\n                          kind_tips?: string;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [2, 3],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"props_bonus\" in data && data.props_bonus != undefined) {\n                        this.props_bonus = data.props_bonus;\n                    }\n                    if (\n                        \"level_bonus_amount_cfgs\" in data &&\n                        data.level_bonus_amount_cfgs != undefined\n                    ) {\n                        this.level_bonus_amount_cfgs = data.level_bonus_amount_cfgs;\n                    }\n                    if (\"bonus_descriptions\" in data && data.bonus_descriptions != undefined) {\n                        this.bonus_descriptions = data.bonus_descriptions;\n                    }\n                    if (\"current_level_info\" in data && data.current_level_info != undefined) {\n                        this.current_level_info = data.current_level_info;\n                    }\n                    if (\"last_month_level\" in data && data.last_month_level != undefined) {\n                        this.last_month_level = data.last_month_level;\n                    }\n                    if (\n                        \"last_three_months_count\" in data &&\n                        data.last_three_months_count != undefined\n                    ) {\n                        this.last_three_months_count = data.last_three_months_count;\n                    }\n                    if (\"birthday\" in data && data.birthday != undefined) {\n                        this.birthday = data.birthday;\n                    }\n                    if (\"level_description\" in data && data.level_description != undefined) {\n                        this.level_description = data.level_description;\n                    }\n                    if (\"kind_tips\" in data && data.kind_tips != undefined) {\n                        this.kind_tips = data.kind_tips;\n                    }\n                }\n            }\n            get props_bonus() {\n                return pb_1.Message.getWrapperField(\n                    this,\n                    VipBonusConfResp.PropsBonus,\n                    1\n                ) as VipBonusConfResp.PropsBonus;\n            }\n            set props_bonus(value: VipBonusConfResp.PropsBonus) {\n                pb_1.Message.setWrapperField(this, 1, value);\n            }\n            get has_props_bonus() {\n                return pb_1.Message.getField(this, 1) != null;\n            }\n            get level_bonus_amount_cfgs() {\n                return pb_1.Message.getRepeatedWrapperField(\n                    this,\n                    VipBonusConfResp.LevelBonusAmountCfg,\n                    2\n                ) as VipBonusConfResp.LevelBonusAmountCfg[];\n            }\n            set level_bonus_amount_cfgs(value: VipBonusConfResp.LevelBonusAmountCfg[]) {\n                pb_1.Message.setRepeatedWrapperField(this, 2, value);\n            }\n            get bonus_descriptions() {\n                return pb_1.Message.getRepeatedWrapperField(\n                    this,\n                    VipBonusConfResp.BonusDescription,\n                    3\n                ) as VipBonusConfResp.BonusDescription[];\n            }\n            set bonus_descriptions(value: VipBonusConfResp.BonusDescription[]) {\n                pb_1.Message.setRepeatedWrapperField(this, 3, value);\n            }\n            get current_level_info() {\n                return pb_1.Message.getWrapperField(\n                    this,\n                    VipBonusConfResp.LevelInfo,\n                    4\n                ) as VipBonusConfResp.LevelInfo;\n            }\n            set current_level_info(value: VipBonusConfResp.LevelInfo) {\n                pb_1.Message.setWrapperField(this, 4, value);\n            }\n            get has_current_level_info() {\n                return pb_1.Message.getField(this, 4) != null;\n            }\n            get last_month_level() {\n                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;\n            }\n            set last_month_level(value: number) {\n                pb_1.Message.setField(this, 5, value);\n            }\n            get last_three_months_count() {\n                return pb_1.Message.getFieldWithDefault(this, 6, \"\") as string;\n            }\n            set last_three_months_count(value: string) {\n                pb_1.Message.setField(this, 6, value);\n            }\n            get birthday() {\n                return pb_1.Message.getFieldWithDefault(this, 7, \"\") as string;\n            }\n            set birthday(value: string) {\n                pb_1.Message.setField(this, 7, value);\n            }\n            get level_description() {\n                return pb_1.Message.getFieldWithDefault(this, 8, \"\") as string;\n            }\n            set level_description(value: string) {\n                pb_1.Message.setField(this, 8, value);\n            }\n            get kind_tips() {\n                return pb_1.Message.getFieldWithDefault(this, 9, \"\") as string;\n            }\n            set kind_tips(value: string) {\n                pb_1.Message.setField(this, 9, value);\n            }\n            static fromObject(data: {\n                props_bonus?: ReturnType<typeof VipBonusConfResp.PropsBonus.prototype.toObject>;\n                level_bonus_amount_cfgs?: ReturnType<\n                    typeof VipBonusConfResp.LevelBonusAmountCfg.prototype.toObject\n                >[];\n                bonus_descriptions?: ReturnType<\n                    typeof VipBonusConfResp.BonusDescription.prototype.toObject\n                >[];\n                current_level_info?: ReturnType<\n                    typeof VipBonusConfResp.LevelInfo.prototype.toObject\n                >;\n                last_month_level?: number;\n                last_three_months_count?: string;\n                birthday?: string;\n                level_description?: string;\n                kind_tips?: string;\n            }): RespData {\n                const message = new RespData({});\n                if (data.props_bonus != null) {\n                    message.props_bonus = VipBonusConfResp.PropsBonus.fromObject(data.props_bonus);\n                }\n                if (data.level_bonus_amount_cfgs != null) {\n                    message.level_bonus_amount_cfgs = data.level_bonus_amount_cfgs.map((item) =>\n                        VipBonusConfResp.LevelBonusAmountCfg.fromObject(item)\n                    );\n                }\n                if (data.bonus_descriptions != null) {\n                    message.bonus_descriptions = data.bonus_descriptions.map((item) =>\n                        VipBonusConfResp.BonusDescription.fromObject(item)\n                    );\n                }\n                if (data.current_level_info != null) {\n                    message.current_level_info = VipBonusConfResp.LevelInfo.fromObject(\n                        data.current_level_info\n                    );\n                }\n                if (data.last_month_level != null) {\n                    message.last_month_level = data.last_month_level;\n                }\n                if (data.last_three_months_count != null) {\n                    message.last_three_months_count = data.last_three_months_count;\n                }\n                if (data.birthday != null) {\n                    message.birthday = data.birthday;\n                }\n                if (data.level_description != null) {\n                    message.level_description = data.level_description;\n                }\n                if (data.kind_tips != null) {\n                    message.kind_tips = data.kind_tips;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    props_bonus?: ReturnType<typeof VipBonusConfResp.PropsBonus.prototype.toObject>;\n                    level_bonus_amount_cfgs?: ReturnType<\n                        typeof VipBonusConfResp.LevelBonusAmountCfg.prototype.toObject\n                    >[];\n                    bonus_descriptions?: ReturnType<\n                        typeof VipBonusConfResp.BonusDescription.prototype.toObject\n                    >[];\n                    current_level_info?: ReturnType<\n                        typeof VipBonusConfResp.LevelInfo.prototype.toObject\n                    >;\n                    last_month_level?: number;\n                    last_three_months_count?: string;\n                    birthday?: string;\n                    level_description?: string;\n                    kind_tips?: string;\n                } = {};\n                if (this.props_bonus != null) {\n                    data.props_bonus = this.props_bonus.toObject();\n                }\n                if (this.level_bonus_amount_cfgs != null) {\n                    data.level_bonus_amount_cfgs = this.level_bonus_amount_cfgs.map(\n                        (item: VipBonusConfResp.LevelBonusAmountCfg) => item.toObject()\n                    );\n                }\n                if (this.bonus_descriptions != null) {\n                    data.bonus_descriptions = this.bonus_descriptions.map(\n                        (item: VipBonusConfResp.BonusDescription) => item.toObject()\n                    );\n                }\n                if (this.current_level_info != null) {\n                    data.current_level_info = this.current_level_info.toObject();\n                }\n                if (this.last_month_level != null) {\n                    data.last_month_level = this.last_month_level;\n                }\n                if (this.last_three_months_count != null) {\n                    data.last_three_months_count = this.last_three_months_count;\n                }\n                if (this.birthday != null) {\n                    data.birthday = this.birthday;\n                }\n                if (this.level_description != null) {\n                    data.level_description = this.level_description;\n                }\n                if (this.kind_tips != null) {\n                    data.kind_tips = this.kind_tips;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.has_props_bonus)\n                    writer.writeMessage(1, this.props_bonus, () =>\n                        this.props_bonus.serialize(writer)\n                    );\n                if (this.level_bonus_amount_cfgs.length)\n                    writer.writeRepeatedMessage(\n                        2,\n                        this.level_bonus_amount_cfgs,\n                        (item: VipBonusConfResp.LevelBonusAmountCfg) => item.serialize(writer)\n                    );\n                if (this.bonus_descriptions.length)\n                    writer.writeRepeatedMessage(\n                        3,\n                        this.bonus_descriptions,\n                        (item: VipBonusConfResp.BonusDescription) => item.serialize(writer)\n                    );\n                if (this.has_current_level_info)\n                    writer.writeMessage(4, this.current_level_info, () =>\n                        this.current_level_info.serialize(writer)\n                    );\n                if (this.last_month_level != 0) writer.writeInt32(5, this.last_month_level);\n                if (this.last_three_months_count.length)\n                    writer.writeString(6, this.last_three_months_count);\n                if (this.birthday.length) writer.writeString(7, this.birthday);\n                if (this.level_description.length) writer.writeString(8, this.level_description);\n                if (this.kind_tips.length) writer.writeString(9, this.kind_tips);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new RespData();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            reader.readMessage(\n                                message.props_bonus,\n                                () =>\n                                    (message.props_bonus =\n                                        VipBonusConfResp.PropsBonus.deserialize(reader))\n                            );\n                            break;\n                        case 2:\n                            reader.readMessage(message.level_bonus_amount_cfgs, () =>\n                                pb_1.Message.addToRepeatedWrapperField(\n                                    message,\n                                    2,\n                                    VipBonusConfResp.LevelBonusAmountCfg.deserialize(reader),\n                                    VipBonusConfResp.LevelBonusAmountCfg\n                                )\n                            );\n                            break;\n                        case 3:\n                            reader.readMessage(message.bonus_descriptions, () =>\n                                pb_1.Message.addToRepeatedWrapperField(\n                                    message,\n                                    3,\n                                    VipBonusConfResp.BonusDescription.deserialize(reader),\n                                    VipBonusConfResp.BonusDescription\n                                )\n                            );\n                            break;\n                        case 4:\n                            reader.readMessage(\n                                message.current_level_info,\n                                () =>\n                                    (message.current_level_info =\n                                        VipBonusConfResp.LevelInfo.deserialize(reader))\n                            );\n                            break;\n                        case 5:\n                            message.last_month_level = reader.readInt32();\n                            break;\n                        case 6:\n                            message.last_three_months_count = reader.readString();\n                            break;\n                        case 7:\n                            message.birthday = reader.readString();\n                            break;\n                        case 8:\n                            message.level_description = reader.readString();\n                            break;\n                        case 9:\n                            message.kind_tips = reader.readString();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): RespData {\n                return RespData.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      vip 生日设置\n       act/vip_bonus/set_birthday\n       **/\n    export class VipBonusSetBirthdayReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      birthday?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"birthday\" in data && data.birthday != undefined) {\n                    this.birthday = data.birthday;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get birthday() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set birthday(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            birthday?: string;\n        }): VipBonusSetBirthdayReq {\n            const message = new VipBonusSetBirthdayReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.birthday != null) {\n                message.birthday = data.birthday;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                birthday?: string;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.birthday != null) {\n                data.birthday = this.birthday;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.birthday.length) writer.writeString(2, this.birthday);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VipBonusSetBirthdayReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new VipBonusSetBirthdayReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.birthday = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): VipBonusSetBirthdayReq {\n            return VipBonusSetBirthdayReq.deserialize(bytes);\n        }\n    }\n    export class VipBonusSetBirthdayResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n        }): VipBonusSetBirthdayResp {\n            const message = new VipBonusSetBirthdayResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VipBonusSetBirthdayResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new VipBonusSetBirthdayResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): VipBonusSetBirthdayResp {\n            return VipBonusSetBirthdayResp.deserialize(bytes);\n        }\n    }\n\n    /** \n      vip 礼金发放记录\n       act/vip_bonus/records\n       **/\n    export class VipBonusRecordsReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      pc?: PaginationCriteria;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"pc\" in data && data.pc != undefined) {\n                    this.pc = data.pc;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get pc() {\n            return pb_1.Message.getWrapperField(this, PaginationCriteria, 2) as PaginationCriteria;\n        }\n        set pc(value: PaginationCriteria) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_pc() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            pc?: ReturnType<typeof PaginationCriteria.prototype.toObject>;\n        }): VipBonusRecordsReq {\n            const message = new VipBonusRecordsReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.pc != null) {\n                message.pc = PaginationCriteria.fromObject(data.pc);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                pc?: ReturnType<typeof PaginationCriteria.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.pc != null) {\n                data.pc = this.pc.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_pc) writer.writeMessage(2, this.pc, () => this.pc.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VipBonusRecordsReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new VipBonusRecordsReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.pc,\n                            () => (message.pc = PaginationCriteria.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): VipBonusRecordsReq {\n            return VipBonusRecordsReq.deserialize(bytes);\n        }\n    }\n    export class VipBonusRecordsResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: VipBonusRecordsResp.VipBonusRecords;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(\n                this,\n                VipBonusRecordsResp.VipBonusRecords,\n                2\n            ) as VipBonusRecordsResp.VipBonusRecords;\n        }\n        set data(value: VipBonusRecordsResp.VipBonusRecords) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof VipBonusRecordsResp.VipBonusRecords.prototype.toObject>;\n        }): VipBonusRecordsResp {\n            const message = new VipBonusRecordsResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = VipBonusRecordsResp.VipBonusRecords.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof VipBonusRecordsResp.VipBonusRecords.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VipBonusRecordsResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new VipBonusRecordsResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () =>\n                                (message.data =\n                                    VipBonusRecordsResp.VipBonusRecords.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): VipBonusRecordsResp {\n            return VipBonusRecordsResp.deserialize(bytes);\n        }\n    }\n    export namespace VipBonusRecordsResp {\n        export class VipBonusRecords extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          records?: VipBonusRecordsResp.VipBonusRecords.VipBonusRecord[];\n                          total?: number;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [1],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"records\" in data && data.records != undefined) {\n                        this.records = data.records;\n                    }\n                    if (\"total\" in data && data.total != undefined) {\n                        this.total = data.total;\n                    }\n                }\n            }\n            get records() {\n                return pb_1.Message.getRepeatedWrapperField(\n                    this,\n                    VipBonusRecordsResp.VipBonusRecords.VipBonusRecord,\n                    1\n                ) as VipBonusRecordsResp.VipBonusRecords.VipBonusRecord[];\n            }\n            set records(value: VipBonusRecordsResp.VipBonusRecords.VipBonusRecord[]) {\n                pb_1.Message.setRepeatedWrapperField(this, 1, value);\n            }\n            get total() {\n                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n            }\n            set total(value: number) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            static fromObject(data: {\n                records?: ReturnType<\n                    typeof VipBonusRecordsResp.VipBonusRecords.VipBonusRecord.prototype.toObject\n                >[];\n                total?: number;\n            }): VipBonusRecords {\n                const message = new VipBonusRecords({});\n                if (data.records != null) {\n                    message.records = data.records.map((item) =>\n                        VipBonusRecordsResp.VipBonusRecords.VipBonusRecord.fromObject(item)\n                    );\n                }\n                if (data.total != null) {\n                    message.total = data.total;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    records?: ReturnType<\n                        typeof VipBonusRecordsResp.VipBonusRecords.VipBonusRecord.prototype.toObject\n                    >[];\n                    total?: number;\n                } = {};\n                if (this.records != null) {\n                    data.records = this.records.map(\n                        (item: VipBonusRecordsResp.VipBonusRecords.VipBonusRecord) =>\n                            item.toObject()\n                    );\n                }\n                if (this.total != null) {\n                    data.total = this.total;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.records.length)\n                    writer.writeRepeatedMessage(\n                        1,\n                        this.records,\n                        (item: VipBonusRecordsResp.VipBonusRecords.VipBonusRecord) =>\n                            item.serialize(writer)\n                    );\n                if (this.total != 0) writer.writeInt32(2, this.total);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VipBonusRecords {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new VipBonusRecords();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            reader.readMessage(message.records, () =>\n                                pb_1.Message.addToRepeatedWrapperField(\n                                    message,\n                                    1,\n                                    VipBonusRecordsResp.VipBonusRecords.VipBonusRecord.deserialize(\n                                        reader\n                                    ),\n                                    VipBonusRecordsResp.VipBonusRecords.VipBonusRecord\n                                )\n                            );\n                            break;\n                        case 2:\n                            message.total = reader.readInt32();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): VipBonusRecords {\n                return VipBonusRecords.deserialize(bytes);\n            }\n        }\n        export namespace VipBonusRecords {\n            export class VipBonusRecord extends pb_1.Message {\n                #one_of_decls: number[][] = [];\n                constructor(\n                    data?:\n                        | any[]\n                        | {\n                              type?: number;\n                              level?: number;\n                              count?: string;\n                              created_at?: number;\n                          }\n                ) {\n                    super();\n                    pb_1.Message.initialize(\n                        this,\n                        Array.isArray(data) ? data : [],\n                        0,\n                        -1,\n                        [],\n                        this.#one_of_decls\n                    );\n                    if (!Array.isArray(data) && typeof data == \"object\") {\n                        if (\"type\" in data && data.type != undefined) {\n                            this.type = data.type;\n                        }\n                        if (\"level\" in data && data.level != undefined) {\n                            this.level = data.level;\n                        }\n                        if (\"count\" in data && data.count != undefined) {\n                            this.count = data.count;\n                        }\n                        if (\"created_at\" in data && data.created_at != undefined) {\n                            this.created_at = data.created_at;\n                        }\n                    }\n                }\n                get type() {\n                    return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n                }\n                set type(value: number) {\n                    pb_1.Message.setField(this, 1, value);\n                }\n                get level() {\n                    return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n                }\n                set level(value: number) {\n                    pb_1.Message.setField(this, 2, value);\n                }\n                get count() {\n                    return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n                }\n                set count(value: string) {\n                    pb_1.Message.setField(this, 3, value);\n                }\n                get created_at() {\n                    return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n                }\n                set created_at(value: number) {\n                    pb_1.Message.setField(this, 4, value);\n                }\n                static fromObject(data: {\n                    type?: number;\n                    level?: number;\n                    count?: string;\n                    created_at?: number;\n                }): VipBonusRecord {\n                    const message = new VipBonusRecord({});\n                    if (data.type != null) {\n                        message.type = data.type;\n                    }\n                    if (data.level != null) {\n                        message.level = data.level;\n                    }\n                    if (data.count != null) {\n                        message.count = data.count;\n                    }\n                    if (data.created_at != null) {\n                        message.created_at = data.created_at;\n                    }\n                    return message;\n                }\n                toObject() {\n                    const data: {\n                        type?: number;\n                        level?: number;\n                        count?: string;\n                        created_at?: number;\n                    } = {};\n                    if (this.type != null) {\n                        data.type = this.type;\n                    }\n                    if (this.level != null) {\n                        data.level = this.level;\n                    }\n                    if (this.count != null) {\n                        data.count = this.count;\n                    }\n                    if (this.created_at != null) {\n                        data.created_at = this.created_at;\n                    }\n                    return data;\n                }\n                serialize(): Uint8Array;\n                serialize(w: pb_1.BinaryWriter): void;\n                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                    const writer = w || new pb_1.BinaryWriter();\n                    if (this.type != 0) writer.writeInt32(1, this.type);\n                    if (this.level != 0) writer.writeInt32(2, this.level);\n                    if (this.count.length) writer.writeString(3, this.count);\n                    if (this.created_at != 0) writer.writeInt64(4, this.created_at);\n                    if (!w) return writer.getResultBuffer();\n                }\n                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VipBonusRecord {\n                    const reader =\n                            bytes instanceof pb_1.BinaryReader\n                                ? bytes\n                                : new pb_1.BinaryReader(bytes),\n                        message = new VipBonusRecord();\n                    while (reader.nextField()) {\n                        if (reader.isEndGroup()) break;\n                        switch (reader.getFieldNumber()) {\n                            case 1:\n                                message.type = reader.readInt32();\n                                break;\n                            case 2:\n                                message.level = reader.readInt32();\n                                break;\n                            case 3:\n                                message.count = reader.readString();\n                                break;\n                            case 4:\n                                message.created_at = reader.readInt64();\n                                break;\n                            default:\n                                reader.skipField();\n                        }\n                    }\n                    return message;\n                }\n                serializeBinary(): Uint8Array {\n                    return this.serialize();\n                }\n                static deserializeBinary(bytes: Uint8Array): VipBonusRecord {\n                    return VipBonusRecord.deserialize(bytes);\n                }\n            }\n        }\n    }\n\n    /** \n      公告/公告牌 msg/notice/pull/\n       WARNING: 公告/公告牌，当 notice_type = 3 时，返回的是公告牌数据，否则返回的是活动+公告数据\n       **/\n    export class NoticePullReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      notice_type?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"notice_type\" in data && data.notice_type != undefined) {\n                    this.notice_type = data.notice_type;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get notice_type() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n        set notice_type(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            notice_type?: number;\n        }): NoticePullReq {\n            const message = new NoticePullReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.notice_type != null) {\n                message.notice_type = data.notice_type;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                notice_type?: number;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.notice_type != null) {\n                data.notice_type = this.notice_type;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.notice_type != 0) writer.writeInt32(2, this.notice_type);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NoticePullReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new NoticePullReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.notice_type = reader.readInt32();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): NoticePullReq {\n            return NoticePullReq.deserialize(bytes);\n        }\n    }\n    export class NoticePullResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: NoticePullResp.Notice[];\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [2],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getRepeatedWrapperField(\n                this,\n                NoticePullResp.Notice,\n                2\n            ) as NoticePullResp.Notice[];\n        }\n        set data(value: NoticePullResp.Notice[]) {\n            pb_1.Message.setRepeatedWrapperField(this, 2, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof NoticePullResp.Notice.prototype.toObject>[];\n        }): NoticePullResp {\n            const message = new NoticePullResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = data.data.map((item) => NoticePullResp.Notice.fromObject(item));\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof NoticePullResp.Notice.prototype.toObject>[];\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.map((item: NoticePullResp.Notice) => item.toObject());\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.data.length)\n                writer.writeRepeatedMessage(2, this.data, (item: NoticePullResp.Notice) =>\n                    item.serialize(writer)\n                );\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NoticePullResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new NoticePullResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(message.data, () =>\n                            pb_1.Message.addToRepeatedWrapperField(\n                                message,\n                                2,\n                                NoticePullResp.Notice.deserialize(reader),\n                                NoticePullResp.Notice\n                            )\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): NoticePullResp {\n            return NoticePullResp.deserialize(bytes);\n        }\n    }\n    export namespace NoticePullResp {\n        export class Notice extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          id?: string;\n                          notice_type?: number;\n                          weight?: number;\n                          display_type?: number;\n                          jump_type?: number;\n                          browser_type?: number;\n                          browser_direction?: number;\n                          tag_type?: number;\n                          jump_url?: string;\n                          title?: string;\n                          content?: string;\n                          picture?: string;\n                          frequency?: number;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"id\" in data && data.id != undefined) {\n                        this.id = data.id;\n                    }\n                    if (\"notice_type\" in data && data.notice_type != undefined) {\n                        this.notice_type = data.notice_type;\n                    }\n                    if (\"weight\" in data && data.weight != undefined) {\n                        this.weight = data.weight;\n                    }\n                    if (\"display_type\" in data && data.display_type != undefined) {\n                        this.display_type = data.display_type;\n                    }\n                    if (\"jump_type\" in data && data.jump_type != undefined) {\n                        this.jump_type = data.jump_type;\n                    }\n                    if (\"browser_type\" in data && data.browser_type != undefined) {\n                        this.browser_type = data.browser_type;\n                    }\n                    if (\"browser_direction\" in data && data.browser_direction != undefined) {\n                        this.browser_direction = data.browser_direction;\n                    }\n                    if (\"tag_type\" in data && data.tag_type != undefined) {\n                        this.tag_type = data.tag_type;\n                    }\n                    if (\"jump_url\" in data && data.jump_url != undefined) {\n                        this.jump_url = data.jump_url;\n                    }\n                    if (\"title\" in data && data.title != undefined) {\n                        this.title = data.title;\n                    }\n                    if (\"content\" in data && data.content != undefined) {\n                        this.content = data.content;\n                    }\n                    if (\"picture\" in data && data.picture != undefined) {\n                        this.picture = data.picture;\n                    }\n                    if (\"frequency\" in data && data.frequency != undefined) {\n                        this.frequency = data.frequency;\n                    }\n                }\n            }\n            get id() {\n                return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n            }\n            set id(value: string) {\n                pb_1.Message.setField(this, 1, value);\n            }\n\n            /** \n              公告类型 1:活动 2:公告 3: 公告牌\n               **/\n            get notice_type() {\n                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n            }\n\n            /** \n              公告类型 1:活动 2:公告 3: 公告牌\n               **/\n            set notice_type(value: number) {\n                pb_1.Message.setField(this, 2, value);\n            }\n\n            /** \n              权重\n               **/\n            get weight() {\n                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n            }\n\n            /** \n              权重\n               **/\n            set weight(value: number) {\n                pb_1.Message.setField(this, 3, value);\n            }\n\n            /** \n              展示类型 1:文本 2:图片\n               **/\n            get display_type() {\n                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n            }\n\n            /** \n              展示类型 1:文本 2:图片\n               **/\n            set display_type(value: number) {\n                pb_1.Message.setField(this, 4, value);\n            }\n\n            /** \n              跳转类型 1:无跳转 2:复制 3:网页跳转 4:复制并打开官网 5:打开应用内页面 6:跳转公告 7: 保存至相册 8:跳转充值申诉 9:跳客服 10:跳提现申诉\n               **/\n            get jump_type() {\n                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;\n            }\n\n            /** \n              跳转类型 1:无跳转 2:复制 3:网页跳转 4:复制并打开官网 5:打开应用内页面 6:跳转公告 7: 保存至相册 8:跳转充值申诉 9:跳客服 10:跳提现申诉\n               **/\n            set jump_type(value: number) {\n                pb_1.Message.setField(this, 5, value);\n            }\n\n            /** \n              浏览器类型 1:内置 2:外部\n               **/\n            get browser_type() {\n                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;\n            }\n\n            /** \n              浏览器类型 1:内置 2:外部\n               **/\n            set browser_type(value: number) {\n                pb_1.Message.setField(this, 6, value);\n            }\n\n            /** \n              浏览器方向 1:水平 2:垂直\n               **/\n            get browser_direction() {\n                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;\n            }\n\n            /** \n              浏览器方向 1:水平 2:垂直\n               **/\n            set browser_direction(value: number) {\n                pb_1.Message.setField(this, 7, value);\n            }\n\n            /** \n              标签类型 1:普通 2:VIP 3:最新 4:最热\n               **/\n            get tag_type() {\n                return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;\n            }\n\n            /** \n              标签类型 1:普通 2:VIP 3:最新 4:最热\n               **/\n            set tag_type(value: number) {\n                pb_1.Message.setField(this, 8, value);\n            }\n            get jump_url() {\n                return pb_1.Message.getFieldWithDefault(this, 9, \"\") as string;\n            }\n            set jump_url(value: string) {\n                pb_1.Message.setField(this, 9, value);\n            }\n            get title() {\n                return pb_1.Message.getFieldWithDefault(this, 10, \"\") as string;\n            }\n            set title(value: string) {\n                pb_1.Message.setField(this, 10, value);\n            }\n            get content() {\n                return pb_1.Message.getFieldWithDefault(this, 11, \"\") as string;\n            }\n            set content(value: string) {\n                pb_1.Message.setField(this, 11, value);\n            }\n            get picture() {\n                return pb_1.Message.getFieldWithDefault(this, 12, \"\") as string;\n            }\n            set picture(value: string) {\n                pb_1.Message.setField(this, 12, value);\n            }\n\n            /** \n              打脸频率 1:不打脸 2:每日一次 3:每日多次\n               **/\n            get frequency() {\n                return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;\n            }\n\n            /** \n              打脸频率 1:不打脸 2:每日一次 3:每日多次\n               **/\n            set frequency(value: number) {\n                pb_1.Message.setField(this, 13, value);\n            }\n            static fromObject(data: {\n                id?: string;\n                notice_type?: number;\n                weight?: number;\n                display_type?: number;\n                jump_type?: number;\n                browser_type?: number;\n                browser_direction?: number;\n                tag_type?: number;\n                jump_url?: string;\n                title?: string;\n                content?: string;\n                picture?: string;\n                frequency?: number;\n            }): Notice {\n                const message = new Notice({});\n                if (data.id != null) {\n                    message.id = data.id;\n                }\n                if (data.notice_type != null) {\n                    message.notice_type = data.notice_type;\n                }\n                if (data.weight != null) {\n                    message.weight = data.weight;\n                }\n                if (data.display_type != null) {\n                    message.display_type = data.display_type;\n                }\n                if (data.jump_type != null) {\n                    message.jump_type = data.jump_type;\n                }\n                if (data.browser_type != null) {\n                    message.browser_type = data.browser_type;\n                }\n                if (data.browser_direction != null) {\n                    message.browser_direction = data.browser_direction;\n                }\n                if (data.tag_type != null) {\n                    message.tag_type = data.tag_type;\n                }\n                if (data.jump_url != null) {\n                    message.jump_url = data.jump_url;\n                }\n                if (data.title != null) {\n                    message.title = data.title;\n                }\n                if (data.content != null) {\n                    message.content = data.content;\n                }\n                if (data.picture != null) {\n                    message.picture = data.picture;\n                }\n                if (data.frequency != null) {\n                    message.frequency = data.frequency;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    id?: string;\n                    notice_type?: number;\n                    weight?: number;\n                    display_type?: number;\n                    jump_type?: number;\n                    browser_type?: number;\n                    browser_direction?: number;\n                    tag_type?: number;\n                    jump_url?: string;\n                    title?: string;\n                    content?: string;\n                    picture?: string;\n                    frequency?: number;\n                } = {};\n                if (this.id != null) {\n                    data.id = this.id;\n                }\n                if (this.notice_type != null) {\n                    data.notice_type = this.notice_type;\n                }\n                if (this.weight != null) {\n                    data.weight = this.weight;\n                }\n                if (this.display_type != null) {\n                    data.display_type = this.display_type;\n                }\n                if (this.jump_type != null) {\n                    data.jump_type = this.jump_type;\n                }\n                if (this.browser_type != null) {\n                    data.browser_type = this.browser_type;\n                }\n                if (this.browser_direction != null) {\n                    data.browser_direction = this.browser_direction;\n                }\n                if (this.tag_type != null) {\n                    data.tag_type = this.tag_type;\n                }\n                if (this.jump_url != null) {\n                    data.jump_url = this.jump_url;\n                }\n                if (this.title != null) {\n                    data.title = this.title;\n                }\n                if (this.content != null) {\n                    data.content = this.content;\n                }\n                if (this.picture != null) {\n                    data.picture = this.picture;\n                }\n                if (this.frequency != null) {\n                    data.frequency = this.frequency;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.id.length) writer.writeString(1, this.id);\n                if (this.notice_type != 0) writer.writeInt32(2, this.notice_type);\n                if (this.weight != 0) writer.writeInt32(3, this.weight);\n                if (this.display_type != 0) writer.writeInt32(4, this.display_type);\n                if (this.jump_type != 0) writer.writeInt32(5, this.jump_type);\n                if (this.browser_type != 0) writer.writeInt32(6, this.browser_type);\n                if (this.browser_direction != 0) writer.writeInt32(7, this.browser_direction);\n                if (this.tag_type != 0) writer.writeInt32(8, this.tag_type);\n                if (this.jump_url.length) writer.writeString(9, this.jump_url);\n                if (this.title.length) writer.writeString(10, this.title);\n                if (this.content.length) writer.writeString(11, this.content);\n                if (this.picture.length) writer.writeString(12, this.picture);\n                if (this.frequency != 0) writer.writeInt32(13, this.frequency);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Notice {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new Notice();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.id = reader.readString();\n                            break;\n                        case 2:\n                            message.notice_type = reader.readInt32();\n                            break;\n                        case 3:\n                            message.weight = reader.readInt32();\n                            break;\n                        case 4:\n                            message.display_type = reader.readInt32();\n                            break;\n                        case 5:\n                            message.jump_type = reader.readInt32();\n                            break;\n                        case 6:\n                            message.browser_type = reader.readInt32();\n                            break;\n                        case 7:\n                            message.browser_direction = reader.readInt32();\n                            break;\n                        case 8:\n                            message.tag_type = reader.readInt32();\n                            break;\n                        case 9:\n                            message.jump_url = reader.readString();\n                            break;\n                        case 10:\n                            message.title = reader.readString();\n                            break;\n                        case 11:\n                            message.content = reader.readString();\n                            break;\n                        case 12:\n                            message.picture = reader.readString();\n                            break;\n                        case 13:\n                            message.frequency = reader.readInt32();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): Notice {\n                return Notice.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      弹窗\n       msg/pop_ups/pull/\n       **/\n    export class PopUpsPullReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      kind?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"kind\" in data && data.kind != undefined) {\n                    this.kind = data.kind;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n\n        /** \n          1 支付公告弹窗 2 捕鱼新手充值弹窗 3 充值下单失败引导 4 兑换提醒\n           **/\n        get kind() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n\n        /** \n          1 支付公告弹窗 2 捕鱼新手充值弹窗 3 充值下单失败引导 4 兑换提醒\n           **/\n        set kind(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            kind?: number;\n        }): PopUpsPullReq {\n            const message = new PopUpsPullReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.kind != null) {\n                message.kind = data.kind;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                kind?: number;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.kind != null) {\n                data.kind = this.kind;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.kind != 0) writer.writeInt32(2, this.kind);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PopUpsPullReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PopUpsPullReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.kind = reader.readInt32();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PopUpsPullReq {\n            return PopUpsPullReq.deserialize(bytes);\n        }\n    }\n    export class PopUpsPullResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      content?: string;\n                      frequency?: number;\n                      tutorial_addr?: string;\n                      button_title?: string;\n                      jump_pay_type?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"content\" in data && data.content != undefined) {\n                    this.content = data.content;\n                }\n                if (\"frequency\" in data && data.frequency != undefined) {\n                    this.frequency = data.frequency;\n                }\n                if (\"tutorial_addr\" in data && data.tutorial_addr != undefined) {\n                    this.tutorial_addr = data.tutorial_addr;\n                }\n                if (\"button_title\" in data && data.button_title != undefined) {\n                    this.button_title = data.button_title;\n                }\n                if (\"jump_pay_type\" in data && data.jump_pay_type != undefined) {\n                    this.jump_pay_type = data.jump_pay_type;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n\n        /** \n          弹窗文案\n           **/\n        get content() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n\n        /** \n          弹窗文案\n           **/\n        set content(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          弹窗频率\n           **/\n        get frequency() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n\n        /** \n          弹窗频率\n           **/\n        set frequency(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n\n        /** \n          教程地址\n           **/\n        get tutorial_addr() {\n            return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n        }\n\n        /** \n          教程地址\n           **/\n        set tutorial_addr(value: string) {\n            pb_1.Message.setField(this, 4, value);\n        }\n\n        /** \n          跳转按钮文案\n           **/\n        get button_title() {\n            return pb_1.Message.getFieldWithDefault(this, 5, \"\") as string;\n        }\n\n        /** \n          跳转按钮文案\n           **/\n        set button_title(value: string) {\n            pb_1.Message.setField(this, 5, value);\n        }\n\n        /** \n          跳转支付类型\n           **/\n        get jump_pay_type() {\n            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;\n        }\n\n        /** \n          跳转支付类型\n           **/\n        set jump_pay_type(value: number) {\n            pb_1.Message.setField(this, 6, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            content?: string;\n            frequency?: number;\n            tutorial_addr?: string;\n            button_title?: string;\n            jump_pay_type?: number;\n        }): PopUpsPullResp {\n            const message = new PopUpsPullResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.content != null) {\n                message.content = data.content;\n            }\n            if (data.frequency != null) {\n                message.frequency = data.frequency;\n            }\n            if (data.tutorial_addr != null) {\n                message.tutorial_addr = data.tutorial_addr;\n            }\n            if (data.button_title != null) {\n                message.button_title = data.button_title;\n            }\n            if (data.jump_pay_type != null) {\n                message.jump_pay_type = data.jump_pay_type;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                content?: string;\n                frequency?: number;\n                tutorial_addr?: string;\n                button_title?: string;\n                jump_pay_type?: number;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.content != null) {\n                data.content = this.content;\n            }\n            if (this.frequency != null) {\n                data.frequency = this.frequency;\n            }\n            if (this.tutorial_addr != null) {\n                data.tutorial_addr = this.tutorial_addr;\n            }\n            if (this.button_title != null) {\n                data.button_title = this.button_title;\n            }\n            if (this.jump_pay_type != null) {\n                data.jump_pay_type = this.jump_pay_type;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.content.length) writer.writeString(2, this.content);\n            if (this.frequency != 0) writer.writeInt32(3, this.frequency);\n            if (this.tutorial_addr.length) writer.writeString(4, this.tutorial_addr);\n            if (this.button_title.length) writer.writeString(5, this.button_title);\n            if (this.jump_pay_type != 0) writer.writeInt32(6, this.jump_pay_type);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PopUpsPullResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PopUpsPullResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.content = reader.readString();\n                        break;\n                    case 3:\n                        message.frequency = reader.readInt32();\n                        break;\n                    case 4:\n                        message.tutorial_addr = reader.readString();\n                        break;\n                    case 5:\n                        message.button_title = reader.readString();\n                        break;\n                    case 6:\n                        message.jump_pay_type = reader.readInt32();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PopUpsPullResp {\n            return PopUpsPullResp.deserialize(bytes);\n        }\n    }\n\n    /** \n      /////////////////////////\n       活动提醒中心\n       act/activity_center/list/\n       **/\n    export class ListActivityReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n        }): ListActivityReq {\n            const message = new ListActivityReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListActivityReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new ListActivityReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): ListActivityReq {\n            return ListActivityReq.deserialize(bytes);\n        }\n    }\n    export class ListActivityResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: ListActivityResp.ActivitiesInfo;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(\n                this,\n                ListActivityResp.ActivitiesInfo,\n                2\n            ) as ListActivityResp.ActivitiesInfo;\n        }\n        set data(value: ListActivityResp.ActivitiesInfo) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof ListActivityResp.ActivitiesInfo.prototype.toObject>;\n        }): ListActivityResp {\n            const message = new ListActivityResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = ListActivityResp.ActivitiesInfo.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof ListActivityResp.ActivitiesInfo.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListActivityResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new ListActivityResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () =>\n                                (message.data = ListActivityResp.ActivitiesInfo.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): ListActivityResp {\n            return ListActivityResp.deserialize(bytes);\n        }\n    }\n    export namespace ListActivityResp {\n        export class Activity extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          activity_id?: string;\n                          activity_type?: string;\n                          left_ts?: number;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"activity_id\" in data && data.activity_id != undefined) {\n                        this.activity_id = data.activity_id;\n                    }\n                    if (\"activity_type\" in data && data.activity_type != undefined) {\n                        this.activity_type = data.activity_type;\n                    }\n                    if (\"left_ts\" in data && data.left_ts != undefined) {\n                        this.left_ts = data.left_ts;\n                    }\n                }\n            }\n            get activity_id() {\n                return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n            }\n            set activity_id(value: string) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get activity_type() {\n                return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n            }\n            set activity_type(value: string) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            get left_ts() {\n                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n            }\n            set left_ts(value: number) {\n                pb_1.Message.setField(this, 3, value);\n            }\n            static fromObject(data: {\n                activity_id?: string;\n                activity_type?: string;\n                left_ts?: number;\n            }): Activity {\n                const message = new Activity({});\n                if (data.activity_id != null) {\n                    message.activity_id = data.activity_id;\n                }\n                if (data.activity_type != null) {\n                    message.activity_type = data.activity_type;\n                }\n                if (data.left_ts != null) {\n                    message.left_ts = data.left_ts;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    activity_id?: string;\n                    activity_type?: string;\n                    left_ts?: number;\n                } = {};\n                if (this.activity_id != null) {\n                    data.activity_id = this.activity_id;\n                }\n                if (this.activity_type != null) {\n                    data.activity_type = this.activity_type;\n                }\n                if (this.left_ts != null) {\n                    data.left_ts = this.left_ts;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.activity_id.length) writer.writeString(1, this.activity_id);\n                if (this.activity_type.length) writer.writeString(2, this.activity_type);\n                if (this.left_ts != 0) writer.writeInt64(3, this.left_ts);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Activity {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new Activity();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.activity_id = reader.readString();\n                            break;\n                        case 2:\n                            message.activity_type = reader.readString();\n                            break;\n                        case 3:\n                            message.left_ts = reader.readInt64();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): Activity {\n                return Activity.deserialize(bytes);\n            }\n        }\n        export class ActivitiesInfo extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          ongoing_activities?: ListActivityResp.Activity[];\n                          unopened_activities?: ListActivityResp.Activity[];\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [1, 2],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"ongoing_activities\" in data && data.ongoing_activities != undefined) {\n                        this.ongoing_activities = data.ongoing_activities;\n                    }\n                    if (\"unopened_activities\" in data && data.unopened_activities != undefined) {\n                        this.unopened_activities = data.unopened_activities;\n                    }\n                }\n            }\n            get ongoing_activities() {\n                return pb_1.Message.getRepeatedWrapperField(\n                    this,\n                    ListActivityResp.Activity,\n                    1\n                ) as ListActivityResp.Activity[];\n            }\n            set ongoing_activities(value: ListActivityResp.Activity[]) {\n                pb_1.Message.setRepeatedWrapperField(this, 1, value);\n            }\n            get unopened_activities() {\n                return pb_1.Message.getRepeatedWrapperField(\n                    this,\n                    ListActivityResp.Activity,\n                    2\n                ) as ListActivityResp.Activity[];\n            }\n            set unopened_activities(value: ListActivityResp.Activity[]) {\n                pb_1.Message.setRepeatedWrapperField(this, 2, value);\n            }\n            static fromObject(data: {\n                ongoing_activities?: ReturnType<\n                    typeof ListActivityResp.Activity.prototype.toObject\n                >[];\n                unopened_activities?: ReturnType<\n                    typeof ListActivityResp.Activity.prototype.toObject\n                >[];\n            }): ActivitiesInfo {\n                const message = new ActivitiesInfo({});\n                if (data.ongoing_activities != null) {\n                    message.ongoing_activities = data.ongoing_activities.map((item) =>\n                        ListActivityResp.Activity.fromObject(item)\n                    );\n                }\n                if (data.unopened_activities != null) {\n                    message.unopened_activities = data.unopened_activities.map((item) =>\n                        ListActivityResp.Activity.fromObject(item)\n                    );\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    ongoing_activities?: ReturnType<\n                        typeof ListActivityResp.Activity.prototype.toObject\n                    >[];\n                    unopened_activities?: ReturnType<\n                        typeof ListActivityResp.Activity.prototype.toObject\n                    >[];\n                } = {};\n                if (this.ongoing_activities != null) {\n                    data.ongoing_activities = this.ongoing_activities.map(\n                        (item: ListActivityResp.Activity) => item.toObject()\n                    );\n                }\n                if (this.unopened_activities != null) {\n                    data.unopened_activities = this.unopened_activities.map(\n                        (item: ListActivityResp.Activity) => item.toObject()\n                    );\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.ongoing_activities.length)\n                    writer.writeRepeatedMessage(\n                        1,\n                        this.ongoing_activities,\n                        (item: ListActivityResp.Activity) => item.serialize(writer)\n                    );\n                if (this.unopened_activities.length)\n                    writer.writeRepeatedMessage(\n                        2,\n                        this.unopened_activities,\n                        (item: ListActivityResp.Activity) => item.serialize(writer)\n                    );\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActivitiesInfo {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new ActivitiesInfo();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            reader.readMessage(message.ongoing_activities, () =>\n                                pb_1.Message.addToRepeatedWrapperField(\n                                    message,\n                                    1,\n                                    ListActivityResp.Activity.deserialize(reader),\n                                    ListActivityResp.Activity\n                                )\n                            );\n                            break;\n                        case 2:\n                            reader.readMessage(message.unopened_activities, () =>\n                                pb_1.Message.addToRepeatedWrapperField(\n                                    message,\n                                    2,\n                                    ListActivityResp.Activity.deserialize(reader),\n                                    ListActivityResp.Activity\n                                )\n                            );\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): ActivitiesInfo {\n                return ActivitiesInfo.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      在线奖励活动列表\n       act/online_bonus/conf/\n       **/\n    export class OnlineBonusConfReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n        }): OnlineBonusConfReq {\n            const message = new OnlineBonusConfReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnlineBonusConfReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new OnlineBonusConfReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): OnlineBonusConfReq {\n            return OnlineBonusConfReq.deserialize(bytes);\n        }\n    }\n    export class OnlineBonusConfResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: OnlineBonusConfResp.OnlineBonusConf[];\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [2],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getRepeatedWrapperField(\n                this,\n                OnlineBonusConfResp.OnlineBonusConf,\n                2\n            ) as OnlineBonusConfResp.OnlineBonusConf[];\n        }\n        set data(value: OnlineBonusConfResp.OnlineBonusConf[]) {\n            pb_1.Message.setRepeatedWrapperField(this, 2, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof OnlineBonusConfResp.OnlineBonusConf.prototype.toObject>[];\n        }): OnlineBonusConfResp {\n            const message = new OnlineBonusConfResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = data.data.map((item) =>\n                    OnlineBonusConfResp.OnlineBonusConf.fromObject(item)\n                );\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof OnlineBonusConfResp.OnlineBonusConf.prototype.toObject>[];\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.map((item: OnlineBonusConfResp.OnlineBonusConf) =>\n                    item.toObject()\n                );\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.data.length)\n                writer.writeRepeatedMessage(\n                    2,\n                    this.data,\n                    (item: OnlineBonusConfResp.OnlineBonusConf) => item.serialize(writer)\n                );\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnlineBonusConfResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new OnlineBonusConfResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(message.data, () =>\n                            pb_1.Message.addToRepeatedWrapperField(\n                                message,\n                                2,\n                                OnlineBonusConfResp.OnlineBonusConf.deserialize(reader),\n                                OnlineBonusConfResp.OnlineBonusConf\n                            )\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): OnlineBonusConfResp {\n            return OnlineBonusConfResp.deserialize(bytes);\n        }\n    }\n    export namespace OnlineBonusConfResp {\n        export class OnlineBonusConf extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          left_ts?: number;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"left_ts\" in data && data.left_ts != undefined) {\n                        this.left_ts = data.left_ts;\n                    }\n                }\n            }\n            get left_ts() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n            set left_ts(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            static fromObject(data: { left_ts?: number }): OnlineBonusConf {\n                const message = new OnlineBonusConf({});\n                if (data.left_ts != null) {\n                    message.left_ts = data.left_ts;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    left_ts?: number;\n                } = {};\n                if (this.left_ts != null) {\n                    data.left_ts = this.left_ts;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.left_ts != 0) writer.writeInt64(1, this.left_ts);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OnlineBonusConf {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new OnlineBonusConf();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.left_ts = reader.readInt64();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): OnlineBonusConf {\n                return OnlineBonusConf.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      任务系统\n       act/task_center/info/\n       **/\n    export class TaskCenterInfoReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n        }): TaskCenterInfoReq {\n            const message = new TaskCenterInfoReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TaskCenterInfoReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new TaskCenterInfoReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): TaskCenterInfoReq {\n            return TaskCenterInfoReq.deserialize(bytes);\n        }\n    }\n    export class TaskCenterInfoResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: TaskCenterInfoResp.TaskCard;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(\n                this,\n                TaskCenterInfoResp.TaskCard,\n                2\n            ) as TaskCenterInfoResp.TaskCard;\n        }\n        set data(value: TaskCenterInfoResp.TaskCard) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof TaskCenterInfoResp.TaskCard.prototype.toObject>;\n        }): TaskCenterInfoResp {\n            const message = new TaskCenterInfoResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = TaskCenterInfoResp.TaskCard.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof TaskCenterInfoResp.TaskCard.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TaskCenterInfoResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new TaskCenterInfoResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () => (message.data = TaskCenterInfoResp.TaskCard.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): TaskCenterInfoResp {\n            return TaskCenterInfoResp.deserialize(bytes);\n        }\n    }\n    export namespace TaskCenterInfoResp {\n        export enum TaskStarLevel {\n            DEFAULT = 0,\n\n            /** \n              1星\n               **/\n            ONE_STAR = 1,\n\n            /** \n              2星\n               **/\n            TWO_STAR = 2,\n\n            /** \n              3星\n               **/\n            THREE_STAR = 3,\n        }\n        export class BonusInfo extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          props_id?: number;\n                          count?: string;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"props_id\" in data && data.props_id != undefined) {\n                        this.props_id = data.props_id;\n                    }\n                    if (\"count\" in data && data.count != undefined) {\n                        this.count = data.count;\n                    }\n                }\n            }\n            get props_id() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n            set props_id(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get count() {\n                return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n            }\n            set count(value: string) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            static fromObject(data: { props_id?: number; count?: string }): BonusInfo {\n                const message = new BonusInfo({});\n                if (data.props_id != null) {\n                    message.props_id = data.props_id;\n                }\n                if (data.count != null) {\n                    message.count = data.count;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    props_id?: number;\n                    count?: string;\n                } = {};\n                if (this.props_id != null) {\n                    data.props_id = this.props_id;\n                }\n                if (this.count != null) {\n                    data.count = this.count;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.props_id != 0) writer.writeInt32(1, this.props_id);\n                if (this.count.length) writer.writeString(2, this.count);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BonusInfo {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new BonusInfo();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.props_id = reader.readInt32();\n                            break;\n                        case 2:\n                            message.count = reader.readString();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): BonusInfo {\n                return BonusInfo.deserialize(bytes);\n            }\n        }\n        export class StageInfo extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          current?: number;\n                          max?: number;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"current\" in data && data.current != undefined) {\n                        this.current = data.current;\n                    }\n                    if (\"max\" in data && data.max != undefined) {\n                        this.max = data.max;\n                    }\n                }\n            }\n            get current() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n            set current(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get max() {\n                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n            }\n            set max(value: number) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            static fromObject(data: { current?: number; max?: number }): StageInfo {\n                const message = new StageInfo({});\n                if (data.current != null) {\n                    message.current = data.current;\n                }\n                if (data.max != null) {\n                    message.max = data.max;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    current?: number;\n                    max?: number;\n                } = {};\n                if (this.current != null) {\n                    data.current = this.current;\n                }\n                if (this.max != null) {\n                    data.max = this.max;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.current != 0) writer.writeInt32(1, this.current);\n                if (this.max != 0) writer.writeInt32(2, this.max);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StageInfo {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new StageInfo();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.current = reader.readInt32();\n                            break;\n                        case 2:\n                            message.max = reader.readInt32();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): StageInfo {\n                return StageInfo.deserialize(bytes);\n            }\n        }\n        export class ScheduleInfo extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          task_item?: string;\n                          condition?: number;\n                          schedule?: number;\n                          game_ids?: number[];\n                          pay_types?: number[];\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [4, 5],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"task_item\" in data && data.task_item != undefined) {\n                        this.task_item = data.task_item;\n                    }\n                    if (\"condition\" in data && data.condition != undefined) {\n                        this.condition = data.condition;\n                    }\n                    if (\"schedule\" in data && data.schedule != undefined) {\n                        this.schedule = data.schedule;\n                    }\n                    if (\"game_ids\" in data && data.game_ids != undefined) {\n                        this.game_ids = data.game_ids;\n                    }\n                    if (\"pay_types\" in data && data.pay_types != undefined) {\n                        this.pay_types = data.pay_types;\n                    }\n                }\n            }\n\n            /** \n              任务类型\n               **/\n            get task_item() {\n                return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n            }\n\n            /** \n              任务类型\n               **/\n            set task_item(value: string) {\n                pb_1.Message.setField(this, 1, value);\n            }\n\n            /** \n              任务条件\n               **/\n            get condition() {\n                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n            }\n\n            /** \n              任务条件\n               **/\n            set condition(value: number) {\n                pb_1.Message.setField(this, 2, value);\n            }\n\n            /** \n              任务进度\n               **/\n            get schedule() {\n                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n            }\n\n            /** \n              任务进度\n               **/\n            set schedule(value: number) {\n                pb_1.Message.setField(this, 3, value);\n            }\n\n            /** \n              下注任务需要下注的游戏\n               **/\n            get game_ids() {\n                return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];\n            }\n\n            /** \n              下注任务需要下注的游戏\n               **/\n            set game_ids(value: number[]) {\n                pb_1.Message.setField(this, 4, value);\n            }\n\n            /** \n              充值任务需要的充值类型\n               **/\n            get pay_types() {\n                return pb_1.Message.getFieldWithDefault(this, 5, []) as number[];\n            }\n\n            /** \n              充值任务需要的充值类型\n               **/\n            set pay_types(value: number[]) {\n                pb_1.Message.setField(this, 5, value);\n            }\n            static fromObject(data: {\n                task_item?: string;\n                condition?: number;\n                schedule?: number;\n                game_ids?: number[];\n                pay_types?: number[];\n            }): ScheduleInfo {\n                const message = new ScheduleInfo({});\n                if (data.task_item != null) {\n                    message.task_item = data.task_item;\n                }\n                if (data.condition != null) {\n                    message.condition = data.condition;\n                }\n                if (data.schedule != null) {\n                    message.schedule = data.schedule;\n                }\n                if (data.game_ids != null) {\n                    message.game_ids = data.game_ids;\n                }\n                if (data.pay_types != null) {\n                    message.pay_types = data.pay_types;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    task_item?: string;\n                    condition?: number;\n                    schedule?: number;\n                    game_ids?: number[];\n                    pay_types?: number[];\n                } = {};\n                if (this.task_item != null) {\n                    data.task_item = this.task_item;\n                }\n                if (this.condition != null) {\n                    data.condition = this.condition;\n                }\n                if (this.schedule != null) {\n                    data.schedule = this.schedule;\n                }\n                if (this.game_ids != null) {\n                    data.game_ids = this.game_ids;\n                }\n                if (this.pay_types != null) {\n                    data.pay_types = this.pay_types;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.task_item.length) writer.writeString(1, this.task_item);\n                if (this.condition != 0) writer.writeInt64(2, this.condition);\n                if (this.schedule != 0) writer.writeInt64(3, this.schedule);\n                if (this.game_ids.length) writer.writePackedInt32(4, this.game_ids);\n                if (this.pay_types.length) writer.writePackedInt32(5, this.pay_types);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ScheduleInfo {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new ScheduleInfo();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.task_item = reader.readString();\n                            break;\n                        case 2:\n                            message.condition = reader.readInt64();\n                            break;\n                        case 3:\n                            message.schedule = reader.readInt64();\n                            break;\n                        case 4:\n                            message.game_ids = reader.readPackedInt32();\n                            break;\n                        case 5:\n                            message.pay_types = reader.readPackedInt32();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): ScheduleInfo {\n                return ScheduleInfo.deserialize(bytes);\n            }\n        }\n        export class TaskCard extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          task_id?: string;\n                          left_ts?: number;\n                          star_level?: TaskCenterInfoResp.TaskStarLevel;\n                          round_info?: TaskCenterInfoResp.StageInfo;\n                          stage_info?: TaskCenterInfoResp.StageInfo;\n                          bonus_info?: TaskCenterInfoResp.BonusInfo[];\n                          schedule_info?: TaskCenterInfoResp.ScheduleInfo[];\n                          desc?: string;\n                          banner?: string;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [6, 7],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"task_id\" in data && data.task_id != undefined) {\n                        this.task_id = data.task_id;\n                    }\n                    if (\"left_ts\" in data && data.left_ts != undefined) {\n                        this.left_ts = data.left_ts;\n                    }\n                    if (\"star_level\" in data && data.star_level != undefined) {\n                        this.star_level = data.star_level;\n                    }\n                    if (\"round_info\" in data && data.round_info != undefined) {\n                        this.round_info = data.round_info;\n                    }\n                    if (\"stage_info\" in data && data.stage_info != undefined) {\n                        this.stage_info = data.stage_info;\n                    }\n                    if (\"bonus_info\" in data && data.bonus_info != undefined) {\n                        this.bonus_info = data.bonus_info;\n                    }\n                    if (\"schedule_info\" in data && data.schedule_info != undefined) {\n                        this.schedule_info = data.schedule_info;\n                    }\n                    if (\"desc\" in data && data.desc != undefined) {\n                        this.desc = data.desc;\n                    }\n                    if (\"banner\" in data && data.banner != undefined) {\n                        this.banner = data.banner;\n                    }\n                }\n            }\n            get task_id() {\n                return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n            }\n            set task_id(value: string) {\n                pb_1.Message.setField(this, 1, value);\n            }\n\n            /** \n              剩余时间 时间戳\n               **/\n            get left_ts() {\n                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n            }\n\n            /** \n              剩余时间 时间戳\n               **/\n            set left_ts(value: number) {\n                pb_1.Message.setField(this, 2, value);\n            }\n\n            /** \n              星级\n               **/\n            get star_level() {\n                return pb_1.Message.getFieldWithDefault(\n                    this,\n                    3,\n                    TaskCenterInfoResp.TaskStarLevel.DEFAULT\n                ) as TaskCenterInfoResp.TaskStarLevel;\n            }\n\n            /** \n              星级\n               **/\n            set star_level(value: TaskCenterInfoResp.TaskStarLevel) {\n                pb_1.Message.setField(this, 3, value);\n            }\n\n            /** \n              重复任务\n               **/\n            get round_info() {\n                return pb_1.Message.getWrapperField(\n                    this,\n                    TaskCenterInfoResp.StageInfo,\n                    4\n                ) as TaskCenterInfoResp.StageInfo;\n            }\n\n            /** \n              重复任务\n               **/\n            set round_info(value: TaskCenterInfoResp.StageInfo) {\n                pb_1.Message.setWrapperField(this, 4, value);\n            }\n            get has_round_info() {\n                return pb_1.Message.getField(this, 4) != null;\n            }\n\n            /** \n              连环任务\n               **/\n            get stage_info() {\n                return pb_1.Message.getWrapperField(\n                    this,\n                    TaskCenterInfoResp.StageInfo,\n                    5\n                ) as TaskCenterInfoResp.StageInfo;\n            }\n\n            /** \n              连环任务\n               **/\n            set stage_info(value: TaskCenterInfoResp.StageInfo) {\n                pb_1.Message.setWrapperField(this, 5, value);\n            }\n            get has_stage_info() {\n                return pb_1.Message.getField(this, 5) != null;\n            }\n            get bonus_info() {\n                return pb_1.Message.getRepeatedWrapperField(\n                    this,\n                    TaskCenterInfoResp.BonusInfo,\n                    6\n                ) as TaskCenterInfoResp.BonusInfo[];\n            }\n            set bonus_info(value: TaskCenterInfoResp.BonusInfo[]) {\n                pb_1.Message.setRepeatedWrapperField(this, 6, value);\n            }\n            get schedule_info() {\n                return pb_1.Message.getRepeatedWrapperField(\n                    this,\n                    TaskCenterInfoResp.ScheduleInfo,\n                    7\n                ) as TaskCenterInfoResp.ScheduleInfo[];\n            }\n            set schedule_info(value: TaskCenterInfoResp.ScheduleInfo[]) {\n                pb_1.Message.setRepeatedWrapperField(this, 7, value);\n            }\n\n            /** \n              完成条件说明 如果不是空字符串 就使用这个显示说明 否则就自己拼接\n               **/\n            get desc() {\n                return pb_1.Message.getFieldWithDefault(this, 8, \"\") as string;\n            }\n\n            /** \n              完成条件说明 如果不是空字符串 就使用这个显示说明 否则就自己拼接\n               **/\n            set desc(value: string) {\n                pb_1.Message.setField(this, 8, value);\n            }\n            get banner() {\n                return pb_1.Message.getFieldWithDefault(this, 9, \"\") as string;\n            }\n            set banner(value: string) {\n                pb_1.Message.setField(this, 9, value);\n            }\n            static fromObject(data: {\n                task_id?: string;\n                left_ts?: number;\n                star_level?: TaskCenterInfoResp.TaskStarLevel;\n                round_info?: ReturnType<typeof TaskCenterInfoResp.StageInfo.prototype.toObject>;\n                stage_info?: ReturnType<typeof TaskCenterInfoResp.StageInfo.prototype.toObject>;\n                bonus_info?: ReturnType<typeof TaskCenterInfoResp.BonusInfo.prototype.toObject>[];\n                schedule_info?: ReturnType<\n                    typeof TaskCenterInfoResp.ScheduleInfo.prototype.toObject\n                >[];\n                desc?: string;\n                banner?: string;\n            }): TaskCard {\n                const message = new TaskCard({});\n                if (data.task_id != null) {\n                    message.task_id = data.task_id;\n                }\n                if (data.left_ts != null) {\n                    message.left_ts = data.left_ts;\n                }\n                if (data.star_level != null) {\n                    message.star_level = data.star_level;\n                }\n                if (data.round_info != null) {\n                    message.round_info = TaskCenterInfoResp.StageInfo.fromObject(data.round_info);\n                }\n                if (data.stage_info != null) {\n                    message.stage_info = TaskCenterInfoResp.StageInfo.fromObject(data.stage_info);\n                }\n                if (data.bonus_info != null) {\n                    message.bonus_info = data.bonus_info.map((item) =>\n                        TaskCenterInfoResp.BonusInfo.fromObject(item)\n                    );\n                }\n                if (data.schedule_info != null) {\n                    message.schedule_info = data.schedule_info.map((item) =>\n                        TaskCenterInfoResp.ScheduleInfo.fromObject(item)\n                    );\n                }\n                if (data.desc != null) {\n                    message.desc = data.desc;\n                }\n                if (data.banner != null) {\n                    message.banner = data.banner;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    task_id?: string;\n                    left_ts?: number;\n                    star_level?: TaskCenterInfoResp.TaskStarLevel;\n                    round_info?: ReturnType<typeof TaskCenterInfoResp.StageInfo.prototype.toObject>;\n                    stage_info?: ReturnType<typeof TaskCenterInfoResp.StageInfo.prototype.toObject>;\n                    bonus_info?: ReturnType<\n                        typeof TaskCenterInfoResp.BonusInfo.prototype.toObject\n                    >[];\n                    schedule_info?: ReturnType<\n                        typeof TaskCenterInfoResp.ScheduleInfo.prototype.toObject\n                    >[];\n                    desc?: string;\n                    banner?: string;\n                } = {};\n                if (this.task_id != null) {\n                    data.task_id = this.task_id;\n                }\n                if (this.left_ts != null) {\n                    data.left_ts = this.left_ts;\n                }\n                if (this.star_level != null) {\n                    data.star_level = this.star_level;\n                }\n                if (this.round_info != null) {\n                    data.round_info = this.round_info.toObject();\n                }\n                if (this.stage_info != null) {\n                    data.stage_info = this.stage_info.toObject();\n                }\n                if (this.bonus_info != null) {\n                    data.bonus_info = this.bonus_info.map((item: TaskCenterInfoResp.BonusInfo) =>\n                        item.toObject()\n                    );\n                }\n                if (this.schedule_info != null) {\n                    data.schedule_info = this.schedule_info.map(\n                        (item: TaskCenterInfoResp.ScheduleInfo) => item.toObject()\n                    );\n                }\n                if (this.desc != null) {\n                    data.desc = this.desc;\n                }\n                if (this.banner != null) {\n                    data.banner = this.banner;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.task_id.length) writer.writeString(1, this.task_id);\n                if (this.left_ts != 0) writer.writeInt64(2, this.left_ts);\n                if (this.star_level != TaskCenterInfoResp.TaskStarLevel.DEFAULT)\n                    writer.writeEnum(3, this.star_level);\n                if (this.has_round_info)\n                    writer.writeMessage(4, this.round_info, () =>\n                        this.round_info.serialize(writer)\n                    );\n                if (this.has_stage_info)\n                    writer.writeMessage(5, this.stage_info, () =>\n                        this.stage_info.serialize(writer)\n                    );\n                if (this.bonus_info.length)\n                    writer.writeRepeatedMessage(\n                        6,\n                        this.bonus_info,\n                        (item: TaskCenterInfoResp.BonusInfo) => item.serialize(writer)\n                    );\n                if (this.schedule_info.length)\n                    writer.writeRepeatedMessage(\n                        7,\n                        this.schedule_info,\n                        (item: TaskCenterInfoResp.ScheduleInfo) => item.serialize(writer)\n                    );\n                if (this.desc.length) writer.writeString(8, this.desc);\n                if (this.banner.length) writer.writeString(9, this.banner);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TaskCard {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new TaskCard();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.task_id = reader.readString();\n                            break;\n                        case 2:\n                            message.left_ts = reader.readInt64();\n                            break;\n                        case 3:\n                            message.star_level = reader.readEnum();\n                            break;\n                        case 4:\n                            reader.readMessage(\n                                message.round_info,\n                                () =>\n                                    (message.round_info =\n                                        TaskCenterInfoResp.StageInfo.deserialize(reader))\n                            );\n                            break;\n                        case 5:\n                            reader.readMessage(\n                                message.stage_info,\n                                () =>\n                                    (message.stage_info =\n                                        TaskCenterInfoResp.StageInfo.deserialize(reader))\n                            );\n                            break;\n                        case 6:\n                            reader.readMessage(message.bonus_info, () =>\n                                pb_1.Message.addToRepeatedWrapperField(\n                                    message,\n                                    6,\n                                    TaskCenterInfoResp.BonusInfo.deserialize(reader),\n                                    TaskCenterInfoResp.BonusInfo\n                                )\n                            );\n                            break;\n                        case 7:\n                            reader.readMessage(message.schedule_info, () =>\n                                pb_1.Message.addToRepeatedWrapperField(\n                                    message,\n                                    7,\n                                    TaskCenterInfoResp.ScheduleInfo.deserialize(reader),\n                                    TaskCenterInfoResp.ScheduleInfo\n                                )\n                            );\n                            break;\n                        case 8:\n                            message.desc = reader.readString();\n                            break;\n                        case 9:\n                            message.banner = reader.readString();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): TaskCard {\n                return TaskCard.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      支付配置\n       pay/pay_conf/\n       **/\n    export class PayConfReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n        }): PayConfReq {\n            const message = new PayConfReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PayConfReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PayConfReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PayConfReq {\n            return PayConfReq.deserialize(bytes);\n        }\n    }\n    export class PayConfResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: PayConfResp.PayChannelConf[];\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [2],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getRepeatedWrapperField(\n                this,\n                PayConfResp.PayChannelConf,\n                2\n            ) as PayConfResp.PayChannelConf[];\n        }\n        set data(value: PayConfResp.PayChannelConf[]) {\n            pb_1.Message.setRepeatedWrapperField(this, 2, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof PayConfResp.PayChannelConf.prototype.toObject>[];\n        }): PayConfResp {\n            const message = new PayConfResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = data.data.map((item) => PayConfResp.PayChannelConf.fromObject(item));\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof PayConfResp.PayChannelConf.prototype.toObject>[];\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.map((item: PayConfResp.PayChannelConf) => item.toObject());\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.data.length)\n                writer.writeRepeatedMessage(2, this.data, (item: PayConfResp.PayChannelConf) =>\n                    item.serialize(writer)\n                );\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PayConfResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PayConfResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(message.data, () =>\n                            pb_1.Message.addToRepeatedWrapperField(\n                                message,\n                                2,\n                                PayConfResp.PayChannelConf.deserialize(reader),\n                                PayConfResp.PayChannelConf\n                            )\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PayConfResp {\n            return PayConfResp.deserialize(bytes);\n        }\n    }\n    export namespace PayConfResp {\n        export class Bank extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          name?: string;\n                          code?: string;\n                          icon?: number;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"name\" in data && data.name != undefined) {\n                        this.name = data.name;\n                    }\n                    if (\"code\" in data && data.code != undefined) {\n                        this.code = data.code;\n                    }\n                    if (\"icon\" in data && data.icon != undefined) {\n                        this.icon = data.icon;\n                    }\n                }\n            }\n            get name() {\n                return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n            }\n            set name(value: string) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get code() {\n                return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n            }\n            set code(value: string) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            get icon() {\n                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n            }\n            set icon(value: number) {\n                pb_1.Message.setField(this, 3, value);\n            }\n            static fromObject(data: { name?: string; code?: string; icon?: number }): Bank {\n                const message = new Bank({});\n                if (data.name != null) {\n                    message.name = data.name;\n                }\n                if (data.code != null) {\n                    message.code = data.code;\n                }\n                if (data.icon != null) {\n                    message.icon = data.icon;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    name?: string;\n                    code?: string;\n                    icon?: number;\n                } = {};\n                if (this.name != null) {\n                    data.name = this.name;\n                }\n                if (this.code != null) {\n                    data.code = this.code;\n                }\n                if (this.icon != null) {\n                    data.icon = this.icon;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.name.length) writer.writeString(1, this.name);\n                if (this.code.length) writer.writeString(2, this.code);\n                if (this.icon != 0) writer.writeInt32(3, this.icon);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Bank {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new Bank();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.name = reader.readString();\n                            break;\n                        case 2:\n                            message.code = reader.readString();\n                            break;\n                        case 3:\n                            message.icon = reader.readInt32();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): Bank {\n                return Bank.deserialize(bytes);\n            }\n        }\n        export class PayChannelConf extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          name?: string;\n                          pay_type?: number;\n                          amount_list?: number[];\n                          min_amount?: number;\n                          max_amount?: number;\n                          base?: number;\n                          tag?: number;\n                          comment?: string;\n                          android_url?: string;\n                          ios_url?: string;\n                          banks?: PayConfResp.Bank[];\n                          tag_tip?: string;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [3, 11],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"name\" in data && data.name != undefined) {\n                        this.name = data.name;\n                    }\n                    if (\"pay_type\" in data && data.pay_type != undefined) {\n                        this.pay_type = data.pay_type;\n                    }\n                    if (\"amount_list\" in data && data.amount_list != undefined) {\n                        this.amount_list = data.amount_list;\n                    }\n                    if (\"min_amount\" in data && data.min_amount != undefined) {\n                        this.min_amount = data.min_amount;\n                    }\n                    if (\"max_amount\" in data && data.max_amount != undefined) {\n                        this.max_amount = data.max_amount;\n                    }\n                    if (\"base\" in data && data.base != undefined) {\n                        this.base = data.base;\n                    }\n                    if (\"tag\" in data && data.tag != undefined) {\n                        this.tag = data.tag;\n                    }\n                    if (\"comment\" in data && data.comment != undefined) {\n                        this.comment = data.comment;\n                    }\n                    if (\"android_url\" in data && data.android_url != undefined) {\n                        this.android_url = data.android_url;\n                    }\n                    if (\"ios_url\" in data && data.ios_url != undefined) {\n                        this.ios_url = data.ios_url;\n                    }\n                    if (\"banks\" in data && data.banks != undefined) {\n                        this.banks = data.banks;\n                    }\n                    if (\"tag_tip\" in data && data.tag_tip != undefined) {\n                        this.tag_tip = data.tag_tip;\n                    }\n                }\n            }\n\n            /** \n              名称（客户端显示的名称）\n               **/\n            get name() {\n                return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n            }\n\n            /** \n              名称（客户端显示的名称）\n               **/\n            set name(value: string) {\n                pb_1.Message.setField(this, 1, value);\n            }\n\n            /** \n              支付类型\n               **/\n            get pay_type() {\n                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n            }\n\n            /** \n              支付类型\n               **/\n            set pay_type(value: number) {\n                pb_1.Message.setField(this, 2, value);\n            }\n\n            /** \n              定额支付 金额列表\n               **/\n            get amount_list() {\n                return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];\n            }\n\n            /** \n              定额支付 金额列表\n               **/\n            set amount_list(value: number[]) {\n                pb_1.Message.setField(this, 3, value);\n            }\n\n            /** \n              非定额支付 最小金额\n               **/\n            get min_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n            }\n\n            /** \n              非定额支付 最小金额\n               **/\n            set min_amount(value: number) {\n                pb_1.Message.setField(this, 4, value);\n            }\n\n            /** \n              非定额支付 最大金额\n               **/\n            get max_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;\n            }\n\n            /** \n              非定额支付 最大金额\n               **/\n            set max_amount(value: number) {\n                pb_1.Message.setField(this, 5, value);\n            }\n\n            /** \n              金额基数 * 1000\n               **/\n            get base() {\n                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;\n            }\n\n            /** \n              金额基数 * 1000\n               **/\n            set base(value: number) {\n                pb_1.Message.setField(this, 6, value);\n            }\n\n            /** \n              1:大额，2：稳定，3：限时返利，4：官方推荐, 5：快速\n               **/\n            get tag() {\n                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;\n            }\n\n            /** \n              1:大额，2：稳定，3：限时返利，4：官方推荐, 5：快速\n               **/\n            set tag(value: number) {\n                pb_1.Message.setField(this, 7, value);\n            }\n            get comment() {\n                return pb_1.Message.getFieldWithDefault(this, 8, \"\") as string;\n            }\n            set comment(value: string) {\n                pb_1.Message.setField(this, 8, value);\n            }\n            get android_url() {\n                return pb_1.Message.getFieldWithDefault(this, 9, \"\") as string;\n            }\n            set android_url(value: string) {\n                pb_1.Message.setField(this, 9, value);\n            }\n            get ios_url() {\n                return pb_1.Message.getFieldWithDefault(this, 10, \"\") as string;\n            }\n            set ios_url(value: string) {\n                pb_1.Message.setField(this, 10, value);\n            }\n            get banks() {\n                return pb_1.Message.getRepeatedWrapperField(\n                    this,\n                    PayConfResp.Bank,\n                    11\n                ) as PayConfResp.Bank[];\n            }\n            set banks(value: PayConfResp.Bank[]) {\n                pb_1.Message.setRepeatedWrapperField(this, 11, value);\n            }\n            get tag_tip() {\n                return pb_1.Message.getFieldWithDefault(this, 12, \"\") as string;\n            }\n            set tag_tip(value: string) {\n                pb_1.Message.setField(this, 12, value);\n            }\n            static fromObject(data: {\n                name?: string;\n                pay_type?: number;\n                amount_list?: number[];\n                min_amount?: number;\n                max_amount?: number;\n                base?: number;\n                tag?: number;\n                comment?: string;\n                android_url?: string;\n                ios_url?: string;\n                banks?: ReturnType<typeof PayConfResp.Bank.prototype.toObject>[];\n                tag_tip?: string;\n            }): PayChannelConf {\n                const message = new PayChannelConf({});\n                if (data.name != null) {\n                    message.name = data.name;\n                }\n                if (data.pay_type != null) {\n                    message.pay_type = data.pay_type;\n                }\n                if (data.amount_list != null) {\n                    message.amount_list = data.amount_list;\n                }\n                if (data.min_amount != null) {\n                    message.min_amount = data.min_amount;\n                }\n                if (data.max_amount != null) {\n                    message.max_amount = data.max_amount;\n                }\n                if (data.base != null) {\n                    message.base = data.base;\n                }\n                if (data.tag != null) {\n                    message.tag = data.tag;\n                }\n                if (data.comment != null) {\n                    message.comment = data.comment;\n                }\n                if (data.android_url != null) {\n                    message.android_url = data.android_url;\n                }\n                if (data.ios_url != null) {\n                    message.ios_url = data.ios_url;\n                }\n                if (data.banks != null) {\n                    message.banks = data.banks.map((item) => PayConfResp.Bank.fromObject(item));\n                }\n                if (data.tag_tip != null) {\n                    message.tag_tip = data.tag_tip;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    name?: string;\n                    pay_type?: number;\n                    amount_list?: number[];\n                    min_amount?: number;\n                    max_amount?: number;\n                    base?: number;\n                    tag?: number;\n                    comment?: string;\n                    android_url?: string;\n                    ios_url?: string;\n                    banks?: ReturnType<typeof PayConfResp.Bank.prototype.toObject>[];\n                    tag_tip?: string;\n                } = {};\n                if (this.name != null) {\n                    data.name = this.name;\n                }\n                if (this.pay_type != null) {\n                    data.pay_type = this.pay_type;\n                }\n                if (this.amount_list != null) {\n                    data.amount_list = this.amount_list;\n                }\n                if (this.min_amount != null) {\n                    data.min_amount = this.min_amount;\n                }\n                if (this.max_amount != null) {\n                    data.max_amount = this.max_amount;\n                }\n                if (this.base != null) {\n                    data.base = this.base;\n                }\n                if (this.tag != null) {\n                    data.tag = this.tag;\n                }\n                if (this.comment != null) {\n                    data.comment = this.comment;\n                }\n                if (this.android_url != null) {\n                    data.android_url = this.android_url;\n                }\n                if (this.ios_url != null) {\n                    data.ios_url = this.ios_url;\n                }\n                if (this.banks != null) {\n                    data.banks = this.banks.map((item: PayConfResp.Bank) => item.toObject());\n                }\n                if (this.tag_tip != null) {\n                    data.tag_tip = this.tag_tip;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.name.length) writer.writeString(1, this.name);\n                if (this.pay_type != 0) writer.writeInt32(2, this.pay_type);\n                if (this.amount_list.length) writer.writePackedInt64(3, this.amount_list);\n                if (this.min_amount != 0) writer.writeInt64(4, this.min_amount);\n                if (this.max_amount != 0) writer.writeInt64(5, this.max_amount);\n                if (this.base != 0) writer.writeInt64(6, this.base);\n                if (this.tag != 0) writer.writeInt32(7, this.tag);\n                if (this.comment.length) writer.writeString(8, this.comment);\n                if (this.android_url.length) writer.writeString(9, this.android_url);\n                if (this.ios_url.length) writer.writeString(10, this.ios_url);\n                if (this.banks.length)\n                    writer.writeRepeatedMessage(11, this.banks, (item: PayConfResp.Bank) =>\n                        item.serialize(writer)\n                    );\n                if (this.tag_tip.length) writer.writeString(12, this.tag_tip);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PayChannelConf {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new PayChannelConf();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.name = reader.readString();\n                            break;\n                        case 2:\n                            message.pay_type = reader.readInt32();\n                            break;\n                        case 3:\n                            message.amount_list = reader.readPackedInt64();\n                            break;\n                        case 4:\n                            message.min_amount = reader.readInt64();\n                            break;\n                        case 5:\n                            message.max_amount = reader.readInt64();\n                            break;\n                        case 6:\n                            message.base = reader.readInt64();\n                            break;\n                        case 7:\n                            message.tag = reader.readInt32();\n                            break;\n                        case 8:\n                            message.comment = reader.readString();\n                            break;\n                        case 9:\n                            message.android_url = reader.readString();\n                            break;\n                        case 10:\n                            message.ios_url = reader.readString();\n                            break;\n                        case 11:\n                            reader.readMessage(message.banks, () =>\n                                pb_1.Message.addToRepeatedWrapperField(\n                                    message,\n                                    11,\n                                    PayConfResp.Bank.deserialize(reader),\n                                    PayConfResp.Bank\n                                )\n                            );\n                            break;\n                        case 12:\n                            message.tag_tip = reader.readString();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): PayChannelConf {\n                return PayChannelConf.deserialize(bytes);\n            }\n        }\n    }\n    export class AdjustInfo extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      appid?: string;\n                      adjust_id?: string;\n                      idfa?: string;\n                      gps_adid?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"appid\" in data && data.appid != undefined) {\n                    this.appid = data.appid;\n                }\n                if (\"adjust_id\" in data && data.adjust_id != undefined) {\n                    this.adjust_id = data.adjust_id;\n                }\n                if (\"idfa\" in data && data.idfa != undefined) {\n                    this.idfa = data.idfa;\n                }\n                if (\"gps_adid\" in data && data.gps_adid != undefined) {\n                    this.gps_adid = data.gps_adid;\n                }\n            }\n        }\n        get appid() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n        }\n        set appid(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get adjust_id() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set adjust_id(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          IOS广告ID\n           **/\n        get idfa() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n\n        /** \n          IOS广告ID\n           **/\n        set idfa(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n\n        /** \n          Google广告ID\n           **/\n        get gps_adid() {\n            return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n        }\n\n        /** \n          Google广告ID\n           **/\n        set gps_adid(value: string) {\n            pb_1.Message.setField(this, 4, value);\n        }\n        static fromObject(data: {\n            appid?: string;\n            adjust_id?: string;\n            idfa?: string;\n            gps_adid?: string;\n        }): AdjustInfo {\n            const message = new AdjustInfo({});\n            if (data.appid != null) {\n                message.appid = data.appid;\n            }\n            if (data.adjust_id != null) {\n                message.adjust_id = data.adjust_id;\n            }\n            if (data.idfa != null) {\n                message.idfa = data.idfa;\n            }\n            if (data.gps_adid != null) {\n                message.gps_adid = data.gps_adid;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                appid?: string;\n                adjust_id?: string;\n                idfa?: string;\n                gps_adid?: string;\n            } = {};\n            if (this.appid != null) {\n                data.appid = this.appid;\n            }\n            if (this.adjust_id != null) {\n                data.adjust_id = this.adjust_id;\n            }\n            if (this.idfa != null) {\n                data.idfa = this.idfa;\n            }\n            if (this.gps_adid != null) {\n                data.gps_adid = this.gps_adid;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.appid.length) writer.writeString(1, this.appid);\n            if (this.adjust_id.length) writer.writeString(2, this.adjust_id);\n            if (this.idfa.length) writer.writeString(3, this.idfa);\n            if (this.gps_adid.length) writer.writeString(4, this.gps_adid);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdjustInfo {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new AdjustInfo();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.appid = reader.readString();\n                        break;\n                    case 2:\n                        message.adjust_id = reader.readString();\n                        break;\n                    case 3:\n                        message.idfa = reader.readString();\n                        break;\n                    case 4:\n                        message.gps_adid = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): AdjustInfo {\n            return AdjustInfo.deserialize(bytes);\n        }\n    }\n\n    /** \n      提交订单\n       pay/submit\n       **/\n    export class PaySubmitReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      pay_type?: number;\n                      pay_amount?: number;\n                      bank_code?: string;\n                      adjust_info?: AdjustInfo;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"pay_type\" in data && data.pay_type != undefined) {\n                    this.pay_type = data.pay_type;\n                }\n                if (\"pay_amount\" in data && data.pay_amount != undefined) {\n                    this.pay_amount = data.pay_amount;\n                }\n                if (\"bank_code\" in data && data.bank_code != undefined) {\n                    this.bank_code = data.bank_code;\n                }\n                if (\"adjust_info\" in data && data.adjust_info != undefined) {\n                    this.adjust_info = data.adjust_info;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get pay_type() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n        set pay_type(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get pay_amount() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n        set pay_amount(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        get bank_code() {\n            return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n        }\n        set bank_code(value: string) {\n            pb_1.Message.setField(this, 4, value);\n        }\n        get adjust_info() {\n            return pb_1.Message.getWrapperField(this, AdjustInfo, 5) as AdjustInfo;\n        }\n        set adjust_info(value: AdjustInfo) {\n            pb_1.Message.setWrapperField(this, 5, value);\n        }\n        get has_adjust_info() {\n            return pb_1.Message.getField(this, 5) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            pay_type?: number;\n            pay_amount?: number;\n            bank_code?: string;\n            adjust_info?: ReturnType<typeof AdjustInfo.prototype.toObject>;\n        }): PaySubmitReq {\n            const message = new PaySubmitReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.pay_type != null) {\n                message.pay_type = data.pay_type;\n            }\n            if (data.pay_amount != null) {\n                message.pay_amount = data.pay_amount;\n            }\n            if (data.bank_code != null) {\n                message.bank_code = data.bank_code;\n            }\n            if (data.adjust_info != null) {\n                message.adjust_info = AdjustInfo.fromObject(data.adjust_info);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                pay_type?: number;\n                pay_amount?: number;\n                bank_code?: string;\n                adjust_info?: ReturnType<typeof AdjustInfo.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.pay_type != null) {\n                data.pay_type = this.pay_type;\n            }\n            if (this.pay_amount != null) {\n                data.pay_amount = this.pay_amount;\n            }\n            if (this.bank_code != null) {\n                data.bank_code = this.bank_code;\n            }\n            if (this.adjust_info != null) {\n                data.adjust_info = this.adjust_info.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.pay_type != 0) writer.writeUint32(2, this.pay_type);\n            if (this.pay_amount != 0) writer.writeUint64(3, this.pay_amount);\n            if (this.bank_code.length) writer.writeString(4, this.bank_code);\n            if (this.has_adjust_info)\n                writer.writeMessage(5, this.adjust_info, () => this.adjust_info.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PaySubmitReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PaySubmitReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.pay_type = reader.readUint32();\n                        break;\n                    case 3:\n                        message.pay_amount = reader.readUint64();\n                        break;\n                    case 4:\n                        message.bank_code = reader.readString();\n                        break;\n                    case 5:\n                        reader.readMessage(\n                            message.adjust_info,\n                            () => (message.adjust_info = AdjustInfo.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PaySubmitReq {\n            return PaySubmitReq.deserialize(bytes);\n        }\n    }\n    export class PaySubmitResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: PaySubmitResp.Submit;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(\n                this,\n                PaySubmitResp.Submit,\n                2\n            ) as PaySubmitResp.Submit;\n        }\n        set data(value: PaySubmitResp.Submit) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof PaySubmitResp.Submit.prototype.toObject>;\n        }): PaySubmitResp {\n            const message = new PaySubmitResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = PaySubmitResp.Submit.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof PaySubmitResp.Submit.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PaySubmitResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PaySubmitResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () => (message.data = PaySubmitResp.Submit.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PaySubmitResp {\n            return PaySubmitResp.deserialize(bytes);\n        }\n    }\n    export namespace PaySubmitResp {\n        export class Submit extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          pay_id?: string;\n                          open_type?: string;\n                          url?: string;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"pay_id\" in data && data.pay_id != undefined) {\n                        this.pay_id = data.pay_id;\n                    }\n                    if (\"open_type\" in data && data.open_type != undefined) {\n                        this.open_type = data.open_type;\n                    }\n                    if (\"url\" in data && data.url != undefined) {\n                        this.url = data.url;\n                    }\n                }\n            }\n            get pay_id() {\n                return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n            }\n            set pay_id(value: string) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get open_type() {\n                return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n            }\n            set open_type(value: string) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            get url() {\n                return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n            }\n            set url(value: string) {\n                pb_1.Message.setField(this, 3, value);\n            }\n            static fromObject(data: { pay_id?: string; open_type?: string; url?: string }): Submit {\n                const message = new Submit({});\n                if (data.pay_id != null) {\n                    message.pay_id = data.pay_id;\n                }\n                if (data.open_type != null) {\n                    message.open_type = data.open_type;\n                }\n                if (data.url != null) {\n                    message.url = data.url;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    pay_id?: string;\n                    open_type?: string;\n                    url?: string;\n                } = {};\n                if (this.pay_id != null) {\n                    data.pay_id = this.pay_id;\n                }\n                if (this.open_type != null) {\n                    data.open_type = this.open_type;\n                }\n                if (this.url != null) {\n                    data.url = this.url;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.pay_id.length) writer.writeString(1, this.pay_id);\n                if (this.open_type.length) writer.writeString(2, this.open_type);\n                if (this.url.length) writer.writeString(3, this.url);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Submit {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new Submit();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.pay_id = reader.readString();\n                            break;\n                        case 2:\n                            message.open_type = reader.readString();\n                            break;\n                        case 3:\n                            message.url = reader.readString();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): Submit {\n                return Submit.deserialize(bytes);\n            }\n        }\n    }\n    export class ReportAgencyReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      agency_account?: string;\n                      desc?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"agency_account\" in data && data.agency_account != undefined) {\n                    this.agency_account = data.agency_account;\n                }\n                if (\"desc\" in data && data.desc != undefined) {\n                    this.desc = data.desc;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get agency_account() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set agency_account(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get desc() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n        set desc(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            agency_account?: string;\n            desc?: string;\n        }): ReportAgencyReq {\n            const message = new ReportAgencyReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.agency_account != null) {\n                message.agency_account = data.agency_account;\n            }\n            if (data.desc != null) {\n                message.desc = data.desc;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                agency_account?: string;\n                desc?: string;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.agency_account != null) {\n                data.agency_account = this.agency_account;\n            }\n            if (this.desc != null) {\n                data.desc = this.desc;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.agency_account.length) writer.writeString(2, this.agency_account);\n            if (this.desc.length) writer.writeString(3, this.desc);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReportAgencyReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new ReportAgencyReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.agency_account = reader.readString();\n                        break;\n                    case 3:\n                        message.desc = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): ReportAgencyReq {\n            return ReportAgencyReq.deserialize(bytes);\n        }\n    }\n    export class ReportAgencyResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n        }): ReportAgencyResp {\n            const message = new ReportAgencyResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReportAgencyResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new ReportAgencyResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): ReportAgencyResp {\n            return ReportAgencyResp.deserialize(bytes);\n        }\n    }\n    export class PayRecordListReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      filter_type?: PayRecordListReq.FilterType;\n                      page?: number;\n                      size?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"filter_type\" in data && data.filter_type != undefined) {\n                    this.filter_type = data.filter_type;\n                }\n                if (\"page\" in data && data.page != undefined) {\n                    this.page = data.page;\n                }\n                if (\"size\" in data && data.size != undefined) {\n                    this.size = data.size;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get filter_type() {\n            return pb_1.Message.getFieldWithDefault(\n                this,\n                2,\n                PayRecordListReq.FilterType.ALL\n            ) as PayRecordListReq.FilterType;\n        }\n        set filter_type(value: PayRecordListReq.FilterType) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get page() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n        set page(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        get size() {\n            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n        }\n        set size(value: number) {\n            pb_1.Message.setField(this, 4, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            filter_type?: PayRecordListReq.FilterType;\n            page?: number;\n            size?: number;\n        }): PayRecordListReq {\n            const message = new PayRecordListReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.filter_type != null) {\n                message.filter_type = data.filter_type;\n            }\n            if (data.page != null) {\n                message.page = data.page;\n            }\n            if (data.size != null) {\n                message.size = data.size;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                filter_type?: PayRecordListReq.FilterType;\n                page?: number;\n                size?: number;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.filter_type != null) {\n                data.filter_type = this.filter_type;\n            }\n            if (this.page != null) {\n                data.page = this.page;\n            }\n            if (this.size != null) {\n                data.size = this.size;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.filter_type != PayRecordListReq.FilterType.ALL)\n                writer.writeEnum(2, this.filter_type);\n            if (this.page != 0) writer.writeInt32(3, this.page);\n            if (this.size != 0) writer.writeInt32(4, this.size);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PayRecordListReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PayRecordListReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.filter_type = reader.readEnum();\n                        break;\n                    case 3:\n                        message.page = reader.readInt32();\n                        break;\n                    case 4:\n                        message.size = reader.readInt32();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PayRecordListReq {\n            return PayRecordListReq.deserialize(bytes);\n        }\n    }\n    export namespace PayRecordListReq {\n        export enum FilterType {\n            ALL = 0,\n            CAN_COMMENT = 1,\n            COMMENTED = 2,\n        }\n    }\n    export class PayRecordListResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: PayRecordListResp.RespData;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(\n                this,\n                PayRecordListResp.RespData,\n                2\n            ) as PayRecordListResp.RespData;\n        }\n        set data(value: PayRecordListResp.RespData) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof PayRecordListResp.RespData.prototype.toObject>;\n        }): PayRecordListResp {\n            const message = new PayRecordListResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = PayRecordListResp.RespData.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof PayRecordListResp.RespData.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PayRecordListResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PayRecordListResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () => (message.data = PayRecordListResp.RespData.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PayRecordListResp {\n            return PayRecordListResp.deserialize(bytes);\n        }\n    }\n    export namespace PayRecordListResp {\n        export class PayRecord extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          pay_id?: string;\n                          name?: string;\n                          pay_type?: number;\n                          status?: PayStatus;\n                          amount?: number;\n                          can_comment?: boolean;\n                          comment_star?: number;\n                          comment_content?: string;\n                          created_at?: number;\n                          updated_at?: number;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"pay_id\" in data && data.pay_id != undefined) {\n                        this.pay_id = data.pay_id;\n                    }\n                    if (\"name\" in data && data.name != undefined) {\n                        this.name = data.name;\n                    }\n                    if (\"pay_type\" in data && data.pay_type != undefined) {\n                        this.pay_type = data.pay_type;\n                    }\n                    if (\"status\" in data && data.status != undefined) {\n                        this.status = data.status;\n                    }\n                    if (\"amount\" in data && data.amount != undefined) {\n                        this.amount = data.amount;\n                    }\n                    if (\"can_comment\" in data && data.can_comment != undefined) {\n                        this.can_comment = data.can_comment;\n                    }\n                    if (\"comment_star\" in data && data.comment_star != undefined) {\n                        this.comment_star = data.comment_star;\n                    }\n                    if (\"comment_content\" in data && data.comment_content != undefined) {\n                        this.comment_content = data.comment_content;\n                    }\n                    if (\"created_at\" in data && data.created_at != undefined) {\n                        this.created_at = data.created_at;\n                    }\n                    if (\"updated_at\" in data && data.updated_at != undefined) {\n                        this.updated_at = data.updated_at;\n                    }\n                }\n            }\n            get pay_id() {\n                return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n            }\n            set pay_id(value: string) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get name() {\n                return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n            }\n            set name(value: string) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            get pay_type() {\n                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n            }\n            set pay_type(value: number) {\n                pb_1.Message.setField(this, 3, value);\n            }\n            get status() {\n                return pb_1.Message.getFieldWithDefault(this, 4, PayStatus.DEFAULT) as PayStatus;\n            }\n            set status(value: PayStatus) {\n                pb_1.Message.setField(this, 4, value);\n            }\n            get amount() {\n                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;\n            }\n            set amount(value: number) {\n                pb_1.Message.setField(this, 5, value);\n            }\n            get can_comment() {\n                return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;\n            }\n            set can_comment(value: boolean) {\n                pb_1.Message.setField(this, 11, value);\n            }\n            get comment_star() {\n                return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;\n            }\n            set comment_star(value: number) {\n                pb_1.Message.setField(this, 12, value);\n            }\n            get comment_content() {\n                return pb_1.Message.getFieldWithDefault(this, 13, \"\") as string;\n            }\n            set comment_content(value: string) {\n                pb_1.Message.setField(this, 13, value);\n            }\n            get created_at() {\n                return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;\n            }\n            set created_at(value: number) {\n                pb_1.Message.setField(this, 14, value);\n            }\n            get updated_at() {\n                return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;\n            }\n            set updated_at(value: number) {\n                pb_1.Message.setField(this, 15, value);\n            }\n            static fromObject(data: {\n                pay_id?: string;\n                name?: string;\n                pay_type?: number;\n                status?: PayStatus;\n                amount?: number;\n                can_comment?: boolean;\n                comment_star?: number;\n                comment_content?: string;\n                created_at?: number;\n                updated_at?: number;\n            }): PayRecord {\n                const message = new PayRecord({});\n                if (data.pay_id != null) {\n                    message.pay_id = data.pay_id;\n                }\n                if (data.name != null) {\n                    message.name = data.name;\n                }\n                if (data.pay_type != null) {\n                    message.pay_type = data.pay_type;\n                }\n                if (data.status != null) {\n                    message.status = data.status;\n                }\n                if (data.amount != null) {\n                    message.amount = data.amount;\n                }\n                if (data.can_comment != null) {\n                    message.can_comment = data.can_comment;\n                }\n                if (data.comment_star != null) {\n                    message.comment_star = data.comment_star;\n                }\n                if (data.comment_content != null) {\n                    message.comment_content = data.comment_content;\n                }\n                if (data.created_at != null) {\n                    message.created_at = data.created_at;\n                }\n                if (data.updated_at != null) {\n                    message.updated_at = data.updated_at;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    pay_id?: string;\n                    name?: string;\n                    pay_type?: number;\n                    status?: PayStatus;\n                    amount?: number;\n                    can_comment?: boolean;\n                    comment_star?: number;\n                    comment_content?: string;\n                    created_at?: number;\n                    updated_at?: number;\n                } = {};\n                if (this.pay_id != null) {\n                    data.pay_id = this.pay_id;\n                }\n                if (this.name != null) {\n                    data.name = this.name;\n                }\n                if (this.pay_type != null) {\n                    data.pay_type = this.pay_type;\n                }\n                if (this.status != null) {\n                    data.status = this.status;\n                }\n                if (this.amount != null) {\n                    data.amount = this.amount;\n                }\n                if (this.can_comment != null) {\n                    data.can_comment = this.can_comment;\n                }\n                if (this.comment_star != null) {\n                    data.comment_star = this.comment_star;\n                }\n                if (this.comment_content != null) {\n                    data.comment_content = this.comment_content;\n                }\n                if (this.created_at != null) {\n                    data.created_at = this.created_at;\n                }\n                if (this.updated_at != null) {\n                    data.updated_at = this.updated_at;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.pay_id.length) writer.writeString(1, this.pay_id);\n                if (this.name.length) writer.writeString(2, this.name);\n                if (this.pay_type != 0) writer.writeInt32(3, this.pay_type);\n                if (this.status != PayStatus.DEFAULT) writer.writeEnum(4, this.status);\n                if (this.amount != 0) writer.writeInt64(5, this.amount);\n                if (this.can_comment != false) writer.writeBool(11, this.can_comment);\n                if (this.comment_star != 0) writer.writeInt32(12, this.comment_star);\n                if (this.comment_content.length) writer.writeString(13, this.comment_content);\n                if (this.created_at != 0) writer.writeInt64(14, this.created_at);\n                if (this.updated_at != 0) writer.writeInt64(15, this.updated_at);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PayRecord {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new PayRecord();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.pay_id = reader.readString();\n                            break;\n                        case 2:\n                            message.name = reader.readString();\n                            break;\n                        case 3:\n                            message.pay_type = reader.readInt32();\n                            break;\n                        case 4:\n                            message.status = reader.readEnum();\n                            break;\n                        case 5:\n                            message.amount = reader.readInt64();\n                            break;\n                        case 11:\n                            message.can_comment = reader.readBool();\n                            break;\n                        case 12:\n                            message.comment_star = reader.readInt32();\n                            break;\n                        case 13:\n                            message.comment_content = reader.readString();\n                            break;\n                        case 14:\n                            message.created_at = reader.readInt64();\n                            break;\n                        case 15:\n                            message.updated_at = reader.readInt64();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): PayRecord {\n                return PayRecord.deserialize(bytes);\n            }\n        }\n        export class RespData extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          total?: number;\n                          records?: PayRecordListResp.PayRecord[];\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [2],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"total\" in data && data.total != undefined) {\n                        this.total = data.total;\n                    }\n                    if (\"records\" in data && data.records != undefined) {\n                        this.records = data.records;\n                    }\n                }\n            }\n\n            /** \n              数据数量\n               **/\n            get total() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n\n            /** \n              数据数量\n               **/\n            set total(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get records() {\n                return pb_1.Message.getRepeatedWrapperField(\n                    this,\n                    PayRecordListResp.PayRecord,\n                    2\n                ) as PayRecordListResp.PayRecord[];\n            }\n            set records(value: PayRecordListResp.PayRecord[]) {\n                pb_1.Message.setRepeatedWrapperField(this, 2, value);\n            }\n            static fromObject(data: {\n                total?: number;\n                records?: ReturnType<typeof PayRecordListResp.PayRecord.prototype.toObject>[];\n            }): RespData {\n                const message = new RespData({});\n                if (data.total != null) {\n                    message.total = data.total;\n                }\n                if (data.records != null) {\n                    message.records = data.records.map((item) =>\n                        PayRecordListResp.PayRecord.fromObject(item)\n                    );\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    total?: number;\n                    records?: ReturnType<typeof PayRecordListResp.PayRecord.prototype.toObject>[];\n                } = {};\n                if (this.total != null) {\n                    data.total = this.total;\n                }\n                if (this.records != null) {\n                    data.records = this.records.map((item: PayRecordListResp.PayRecord) =>\n                        item.toObject()\n                    );\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.total != 0) writer.writeInt32(1, this.total);\n                if (this.records.length)\n                    writer.writeRepeatedMessage(\n                        2,\n                        this.records,\n                        (item: PayRecordListResp.PayRecord) => item.serialize(writer)\n                    );\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new RespData();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.total = reader.readInt32();\n                            break;\n                        case 2:\n                            reader.readMessage(message.records, () =>\n                                pb_1.Message.addToRepeatedWrapperField(\n                                    message,\n                                    2,\n                                    PayRecordListResp.PayRecord.deserialize(reader),\n                                    PayRecordListResp.PayRecord\n                                )\n                            );\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): RespData {\n                return RespData.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      迎新三重礼，获取配置\n       act/new_triple_gift/conf/\n       **/\n    export class NewTripleGiftConfReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n        }): NewTripleGiftConfReq {\n            const message = new NewTripleGiftConfReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewTripleGiftConfReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new NewTripleGiftConfReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): NewTripleGiftConfReq {\n            return NewTripleGiftConfReq.deserialize(bytes);\n        }\n    }\n    export class NewTripleGiftConfResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: NewTripleGiftConfResp.RespData;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(\n                this,\n                NewTripleGiftConfResp.RespData,\n                2\n            ) as NewTripleGiftConfResp.RespData;\n        }\n        set data(value: NewTripleGiftConfResp.RespData) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof NewTripleGiftConfResp.RespData.prototype.toObject>;\n        }): NewTripleGiftConfResp {\n            const message = new NewTripleGiftConfResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = NewTripleGiftConfResp.RespData.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof NewTripleGiftConfResp.RespData.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewTripleGiftConfResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new NewTripleGiftConfResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () =>\n                                (message.data = NewTripleGiftConfResp.RespData.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): NewTripleGiftConfResp {\n            return NewTripleGiftConfResp.deserialize(bytes);\n        }\n    }\n    export namespace NewTripleGiftConfResp {\n        export enum NewTripleGiftStatus {\n            /** \n              无用，未开启\n               **/\n            UN_USED = 0,\n\n            /** \n              进行中\n               **/\n            PROCESSING = 1,\n\n            /** \n              已经达成，可以领奖\n               **/\n            ACHIEVED = 2,\n\n            /** \n              已经领取\n               **/\n            AWARDED = 3,\n\n            /** \n              已经补发邮件\n               **/\n            REPLENISH_MAIL = 4,\n        }\n        export class GiftInfo extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          pay_amount?: number;\n                          award_percent?: number;\n                          receive_amount?: number;\n                          status?: NewTripleGiftConfResp.NewTripleGiftStatus;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"pay_amount\" in data && data.pay_amount != undefined) {\n                        this.pay_amount = data.pay_amount;\n                    }\n                    if (\"award_percent\" in data && data.award_percent != undefined) {\n                        this.award_percent = data.award_percent;\n                    }\n                    if (\"receive_amount\" in data && data.receive_amount != undefined) {\n                        this.receive_amount = data.receive_amount;\n                    }\n                    if (\"status\" in data && data.status != undefined) {\n                        this.status = data.status;\n                    }\n                }\n            }\n            get pay_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n            set pay_amount(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get award_percent() {\n                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n            }\n            set award_percent(value: number) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            get receive_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n            }\n            set receive_amount(value: number) {\n                pb_1.Message.setField(this, 3, value);\n            }\n            get status() {\n                return pb_1.Message.getFieldWithDefault(\n                    this,\n                    4,\n                    NewTripleGiftConfResp.NewTripleGiftStatus.UN_USED\n                ) as NewTripleGiftConfResp.NewTripleGiftStatus;\n            }\n            set status(value: NewTripleGiftConfResp.NewTripleGiftStatus) {\n                pb_1.Message.setField(this, 4, value);\n            }\n            static fromObject(data: {\n                pay_amount?: number;\n                award_percent?: number;\n                receive_amount?: number;\n                status?: NewTripleGiftConfResp.NewTripleGiftStatus;\n            }): GiftInfo {\n                const message = new GiftInfo({});\n                if (data.pay_amount != null) {\n                    message.pay_amount = data.pay_amount;\n                }\n                if (data.award_percent != null) {\n                    message.award_percent = data.award_percent;\n                }\n                if (data.receive_amount != null) {\n                    message.receive_amount = data.receive_amount;\n                }\n                if (data.status != null) {\n                    message.status = data.status;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    pay_amount?: number;\n                    award_percent?: number;\n                    receive_amount?: number;\n                    status?: NewTripleGiftConfResp.NewTripleGiftStatus;\n                } = {};\n                if (this.pay_amount != null) {\n                    data.pay_amount = this.pay_amount;\n                }\n                if (this.award_percent != null) {\n                    data.award_percent = this.award_percent;\n                }\n                if (this.receive_amount != null) {\n                    data.receive_amount = this.receive_amount;\n                }\n                if (this.status != null) {\n                    data.status = this.status;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.pay_amount != 0) writer.writeInt64(1, this.pay_amount);\n                if (this.award_percent != 0) writer.writeInt64(2, this.award_percent);\n                if (this.receive_amount != 0) writer.writeInt64(3, this.receive_amount);\n                if (this.status != NewTripleGiftConfResp.NewTripleGiftStatus.UN_USED)\n                    writer.writeEnum(4, this.status);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GiftInfo {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new GiftInfo();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.pay_amount = reader.readInt64();\n                            break;\n                        case 2:\n                            message.award_percent = reader.readInt64();\n                            break;\n                        case 3:\n                            message.receive_amount = reader.readInt64();\n                            break;\n                        case 4:\n                            message.status = reader.readEnum();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): GiftInfo {\n                return GiftInfo.deserialize(bytes);\n            }\n        }\n        export class RespData extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          activity_id?: string;\n                          gift_info_list?: NewTripleGiftConfResp.GiftInfo[];\n                          desc?: string;\n                          effected_at?: number;\n                          expired_at?: number;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [2],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"activity_id\" in data && data.activity_id != undefined) {\n                        this.activity_id = data.activity_id;\n                    }\n                    if (\"gift_info_list\" in data && data.gift_info_list != undefined) {\n                        this.gift_info_list = data.gift_info_list;\n                    }\n                    if (\"desc\" in data && data.desc != undefined) {\n                        this.desc = data.desc;\n                    }\n                    if (\"effected_at\" in data && data.effected_at != undefined) {\n                        this.effected_at = data.effected_at;\n                    }\n                    if (\"expired_at\" in data && data.expired_at != undefined) {\n                        this.expired_at = data.expired_at;\n                    }\n                }\n            }\n            get activity_id() {\n                return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n            }\n            set activity_id(value: string) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get gift_info_list() {\n                return pb_1.Message.getRepeatedWrapperField(\n                    this,\n                    NewTripleGiftConfResp.GiftInfo,\n                    2\n                ) as NewTripleGiftConfResp.GiftInfo[];\n            }\n            set gift_info_list(value: NewTripleGiftConfResp.GiftInfo[]) {\n                pb_1.Message.setRepeatedWrapperField(this, 2, value);\n            }\n            get desc() {\n                return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n            }\n            set desc(value: string) {\n                pb_1.Message.setField(this, 3, value);\n            }\n            get effected_at() {\n                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n            }\n            set effected_at(value: number) {\n                pb_1.Message.setField(this, 4, value);\n            }\n            get expired_at() {\n                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;\n            }\n            set expired_at(value: number) {\n                pb_1.Message.setField(this, 5, value);\n            }\n            static fromObject(data: {\n                activity_id?: string;\n                gift_info_list?: ReturnType<\n                    typeof NewTripleGiftConfResp.GiftInfo.prototype.toObject\n                >[];\n                desc?: string;\n                effected_at?: number;\n                expired_at?: number;\n            }): RespData {\n                const message = new RespData({});\n                if (data.activity_id != null) {\n                    message.activity_id = data.activity_id;\n                }\n                if (data.gift_info_list != null) {\n                    message.gift_info_list = data.gift_info_list.map((item) =>\n                        NewTripleGiftConfResp.GiftInfo.fromObject(item)\n                    );\n                }\n                if (data.desc != null) {\n                    message.desc = data.desc;\n                }\n                if (data.effected_at != null) {\n                    message.effected_at = data.effected_at;\n                }\n                if (data.expired_at != null) {\n                    message.expired_at = data.expired_at;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    activity_id?: string;\n                    gift_info_list?: ReturnType<\n                        typeof NewTripleGiftConfResp.GiftInfo.prototype.toObject\n                    >[];\n                    desc?: string;\n                    effected_at?: number;\n                    expired_at?: number;\n                } = {};\n                if (this.activity_id != null) {\n                    data.activity_id = this.activity_id;\n                }\n                if (this.gift_info_list != null) {\n                    data.gift_info_list = this.gift_info_list.map(\n                        (item: NewTripleGiftConfResp.GiftInfo) => item.toObject()\n                    );\n                }\n                if (this.desc != null) {\n                    data.desc = this.desc;\n                }\n                if (this.effected_at != null) {\n                    data.effected_at = this.effected_at;\n                }\n                if (this.expired_at != null) {\n                    data.expired_at = this.expired_at;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.activity_id.length) writer.writeString(1, this.activity_id);\n                if (this.gift_info_list.length)\n                    writer.writeRepeatedMessage(\n                        2,\n                        this.gift_info_list,\n                        (item: NewTripleGiftConfResp.GiftInfo) => item.serialize(writer)\n                    );\n                if (this.desc.length) writer.writeString(3, this.desc);\n                if (this.effected_at != 0) writer.writeInt64(4, this.effected_at);\n                if (this.expired_at != 0) writer.writeInt64(5, this.expired_at);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new RespData();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.activity_id = reader.readString();\n                            break;\n                        case 2:\n                            reader.readMessage(message.gift_info_list, () =>\n                                pb_1.Message.addToRepeatedWrapperField(\n                                    message,\n                                    2,\n                                    NewTripleGiftConfResp.GiftInfo.deserialize(reader),\n                                    NewTripleGiftConfResp.GiftInfo\n                                )\n                            );\n                            break;\n                        case 3:\n                            message.desc = reader.readString();\n                            break;\n                        case 4:\n                            message.effected_at = reader.readInt64();\n                            break;\n                        case 5:\n                            message.expired_at = reader.readInt64();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): RespData {\n                return RespData.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      迎新三重礼，获取奖励\n       act/new_triple_gift/get_award/\n       **/\n    export class NewTripleGiftAwardReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      activity_id?: string;\n                      stage?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"activity_id\" in data && data.activity_id != undefined) {\n                    this.activity_id = data.activity_id;\n                }\n                if (\"stage\" in data && data.stage != undefined) {\n                    this.stage = data.stage;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get activity_id() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set activity_id(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get stage() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n        set stage(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            activity_id?: string;\n            stage?: number;\n        }): NewTripleGiftAwardReq {\n            const message = new NewTripleGiftAwardReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.activity_id != null) {\n                message.activity_id = data.activity_id;\n            }\n            if (data.stage != null) {\n                message.stage = data.stage;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                activity_id?: string;\n                stage?: number;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.activity_id != null) {\n                data.activity_id = this.activity_id;\n            }\n            if (this.stage != null) {\n                data.stage = this.stage;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.activity_id.length) writer.writeString(2, this.activity_id);\n            if (this.stage != 0) writer.writeInt32(3, this.stage);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewTripleGiftAwardReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new NewTripleGiftAwardReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.activity_id = reader.readString();\n                        break;\n                    case 3:\n                        message.stage = reader.readInt32();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): NewTripleGiftAwardReq {\n            return NewTripleGiftAwardReq.deserialize(bytes);\n        }\n    }\n    export class NewTripleGiftAwardResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: NewTripleGiftAwardResp.RespData;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(\n                this,\n                NewTripleGiftAwardResp.RespData,\n                2\n            ) as NewTripleGiftAwardResp.RespData;\n        }\n        set data(value: NewTripleGiftAwardResp.RespData) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof NewTripleGiftAwardResp.RespData.prototype.toObject>;\n        }): NewTripleGiftAwardResp {\n            const message = new NewTripleGiftAwardResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = NewTripleGiftAwardResp.RespData.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof NewTripleGiftAwardResp.RespData.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewTripleGiftAwardResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new NewTripleGiftAwardResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () =>\n                                (message.data = NewTripleGiftAwardResp.RespData.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): NewTripleGiftAwardResp {\n            return NewTripleGiftAwardResp.deserialize(bytes);\n        }\n    }\n    export namespace NewTripleGiftAwardResp {\n        export class RespData extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          award_amount?: number;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"award_amount\" in data && data.award_amount != undefined) {\n                        this.award_amount = data.award_amount;\n                    }\n                }\n            }\n            get award_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n            set award_amount(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            static fromObject(data: { award_amount?: number }): RespData {\n                const message = new RespData({});\n                if (data.award_amount != null) {\n                    message.award_amount = data.award_amount;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    award_amount?: number;\n                } = {};\n                if (this.award_amount != null) {\n                    data.award_amount = this.award_amount;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.award_amount != 0) writer.writeInt64(1, this.award_amount);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new RespData();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.award_amount = reader.readInt64();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): RespData {\n                return RespData.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      游戏回放列表\n       game/replays/\n       **/\n    export class GameReplaysReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      game_id?: number;\n                      page?: PaginationCriteria;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"game_id\" in data && data.game_id != undefined) {\n                    this.game_id = data.game_id;\n                }\n                if (\"page\" in data && data.page != undefined) {\n                    this.page = data.page;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get game_id() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n        set game_id(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get page() {\n            return pb_1.Message.getWrapperField(this, PaginationCriteria, 3) as PaginationCriteria;\n        }\n        set page(value: PaginationCriteria) {\n            pb_1.Message.setWrapperField(this, 3, value);\n        }\n        get has_page() {\n            return pb_1.Message.getField(this, 3) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            game_id?: number;\n            page?: ReturnType<typeof PaginationCriteria.prototype.toObject>;\n        }): GameReplaysReq {\n            const message = new GameReplaysReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.game_id != null) {\n                message.game_id = data.game_id;\n            }\n            if (data.page != null) {\n                message.page = PaginationCriteria.fromObject(data.page);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                game_id?: number;\n                page?: ReturnType<typeof PaginationCriteria.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.game_id != null) {\n                data.game_id = this.game_id;\n            }\n            if (this.page != null) {\n                data.page = this.page.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.game_id != 0) writer.writeInt64(2, this.game_id);\n            if (this.has_page) writer.writeMessage(3, this.page, () => this.page.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameReplaysReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new GameReplaysReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.game_id = reader.readInt64();\n                        break;\n                    case 3:\n                        reader.readMessage(\n                            message.page,\n                            () => (message.page = PaginationCriteria.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): GameReplaysReq {\n            return GameReplaysReq.deserialize(bytes);\n        }\n    }\n    export class Msgs extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      timestamp?: number;\n                      msg_type?: number;\n                      user_id?: number;\n                      msg_info?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"timestamp\" in data && data.timestamp != undefined) {\n                    this.timestamp = data.timestamp;\n                }\n                if (\"msg_type\" in data && data.msg_type != undefined) {\n                    this.msg_type = data.msg_type;\n                }\n                if (\"user_id\" in data && data.user_id != undefined) {\n                    this.user_id = data.user_id;\n                }\n                if (\"msg_info\" in data && data.msg_info != undefined) {\n                    this.msg_info = data.msg_info;\n                }\n            }\n        }\n        get timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get msg_type() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n        set msg_type(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get user_id() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n        set user_id(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        get msg_info() {\n            return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n        }\n        set msg_info(value: string) {\n            pb_1.Message.setField(this, 4, value);\n        }\n        static fromObject(data: {\n            timestamp?: number;\n            msg_type?: number;\n            user_id?: number;\n            msg_info?: string;\n        }): Msgs {\n            const message = new Msgs({});\n            if (data.timestamp != null) {\n                message.timestamp = data.timestamp;\n            }\n            if (data.msg_type != null) {\n                message.msg_type = data.msg_type;\n            }\n            if (data.user_id != null) {\n                message.user_id = data.user_id;\n            }\n            if (data.msg_info != null) {\n                message.msg_info = data.msg_info;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                timestamp?: number;\n                msg_type?: number;\n                user_id?: number;\n                msg_info?: string;\n            } = {};\n            if (this.timestamp != null) {\n                data.timestamp = this.timestamp;\n            }\n            if (this.msg_type != null) {\n                data.msg_type = this.msg_type;\n            }\n            if (this.user_id != null) {\n                data.user_id = this.user_id;\n            }\n            if (this.msg_info != null) {\n                data.msg_info = this.msg_info;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.timestamp != 0) writer.writeInt64(1, this.timestamp);\n            if (this.msg_type != 0) writer.writeInt64(2, this.msg_type);\n            if (this.user_id != 0) writer.writeInt64(3, this.user_id);\n            if (this.msg_info.length) writer.writeString(4, this.msg_info);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Msgs {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new Msgs();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.timestamp = reader.readInt64();\n                        break;\n                    case 2:\n                        message.msg_type = reader.readInt64();\n                        break;\n                    case 3:\n                        message.user_id = reader.readInt64();\n                        break;\n                    case 4:\n                        message.msg_info = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): Msgs {\n            return Msgs.deserialize(bytes);\n        }\n    }\n    export class SettleDetails extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      is_banker?: boolean;\n                      award?: number;\n                      name?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"is_banker\" in data && data.is_banker != undefined) {\n                    this.is_banker = data.is_banker;\n                }\n                if (\"award\" in data && data.award != undefined) {\n                    this.award = data.award;\n                }\n                if (\"name\" in data && data.name != undefined) {\n                    this.name = data.name;\n                }\n            }\n        }\n        get is_banker() {\n            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;\n        }\n        set is_banker(value: boolean) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get award() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n        set award(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get name() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n        set name(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: {\n            is_banker?: boolean;\n            award?: number;\n            name?: string;\n        }): SettleDetails {\n            const message = new SettleDetails({});\n            if (data.is_banker != null) {\n                message.is_banker = data.is_banker;\n            }\n            if (data.award != null) {\n                message.award = data.award;\n            }\n            if (data.name != null) {\n                message.name = data.name;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                is_banker?: boolean;\n                award?: number;\n                name?: string;\n            } = {};\n            if (this.is_banker != null) {\n                data.is_banker = this.is_banker;\n            }\n            if (this.award != null) {\n                data.award = this.award;\n            }\n            if (this.name != null) {\n                data.name = this.name;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.is_banker != false) writer.writeBool(1, this.is_banker);\n            if (this.award != 0) writer.writeInt64(2, this.award);\n            if (this.name.length) writer.writeString(3, this.name);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SettleDetails {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new SettleDetails();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.is_banker = reader.readBool();\n                        break;\n                    case 2:\n                        message.award = reader.readInt64();\n                        break;\n                    case 3:\n                        message.name = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): SettleDetails {\n            return SettleDetails.deserialize(bytes);\n        }\n    }\n    export class GameReplayRecord extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      id?: string;\n                      name?: string;\n                      users?: number[];\n                      msgs?: Msgs[];\n                      settle_info?: Map<string, SettleDetails>;\n                      created_at?: number;\n                      ver?: number;\n                      base?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [3, 4],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"id\" in data && data.id != undefined) {\n                    this.id = data.id;\n                }\n                if (\"name\" in data && data.name != undefined) {\n                    this.name = data.name;\n                }\n                if (\"users\" in data && data.users != undefined) {\n                    this.users = data.users;\n                }\n                if (\"msgs\" in data && data.msgs != undefined) {\n                    this.msgs = data.msgs;\n                }\n                if (\"settle_info\" in data && data.settle_info != undefined) {\n                    this.settle_info = data.settle_info;\n                }\n                if (\"created_at\" in data && data.created_at != undefined) {\n                    this.created_at = data.created_at;\n                }\n                if (\"ver\" in data && data.ver != undefined) {\n                    this.ver = data.ver;\n                }\n                if (\"base\" in data && data.base != undefined) {\n                    this.base = data.base;\n                }\n            }\n            if (!this.settle_info) this.settle_info = new Map();\n        }\n        get id() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n        }\n        set id(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get name() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set name(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get users() {\n            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];\n        }\n        set users(value: number[]) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        get msgs() {\n            return pb_1.Message.getRepeatedWrapperField(this, Msgs, 4) as Msgs[];\n        }\n        set msgs(value: Msgs[]) {\n            pb_1.Message.setRepeatedWrapperField(this, 4, value);\n        }\n        get settle_info() {\n            return pb_1.Message.getField(this, 5) as any as Map<string, SettleDetails>;\n        }\n        set settle_info(value: Map<string, SettleDetails>) {\n            pb_1.Message.setField(this, 5, value as any);\n        }\n        get created_at() {\n            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;\n        }\n        set created_at(value: number) {\n            pb_1.Message.setField(this, 6, value);\n        }\n        get ver() {\n            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;\n        }\n        set ver(value: number) {\n            pb_1.Message.setField(this, 7, value);\n        }\n        get base() {\n            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;\n        }\n        set base(value: number) {\n            pb_1.Message.setField(this, 8, value);\n        }\n        static fromObject(data: {\n            id?: string;\n            name?: string;\n            users?: number[];\n            msgs?: ReturnType<typeof Msgs.prototype.toObject>[];\n            settle_info?: {\n                [key: string]: ReturnType<typeof SettleDetails.prototype.toObject>;\n            };\n            created_at?: number;\n            ver?: number;\n            base?: number;\n        }): GameReplayRecord {\n            const message = new GameReplayRecord({});\n            if (data.id != null) {\n                message.id = data.id;\n            }\n            if (data.name != null) {\n                message.name = data.name;\n            }\n            if (data.users != null) {\n                message.users = data.users;\n            }\n            if (data.msgs != null) {\n                message.msgs = data.msgs.map((item) => Msgs.fromObject(item));\n            }\n            if (typeof data.settle_info == \"object\") {\n                message.settle_info = new Map(\n                    Object.entries(data.settle_info).map(([key, value]) => [\n                        key,\n                        SettleDetails.fromObject(value),\n                    ])\n                );\n            }\n            if (data.created_at != null) {\n                message.created_at = data.created_at;\n            }\n            if (data.ver != null) {\n                message.ver = data.ver;\n            }\n            if (data.base != null) {\n                message.base = data.base;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                id?: string;\n                name?: string;\n                users?: number[];\n                msgs?: ReturnType<typeof Msgs.prototype.toObject>[];\n                settle_info?: {\n                    [key: string]: ReturnType<typeof SettleDetails.prototype.toObject>;\n                };\n                created_at?: number;\n                ver?: number;\n                base?: number;\n            } = {};\n            if (this.id != null) {\n                data.id = this.id;\n            }\n            if (this.name != null) {\n                data.name = this.name;\n            }\n            if (this.users != null) {\n                data.users = this.users;\n            }\n            if (this.msgs != null) {\n                data.msgs = this.msgs.map((item: Msgs) => item.toObject());\n            }\n            if (this.settle_info.size > 0) {\n                data.settle_info = Object.fromEntries(\n                    Array.from(this.settle_info).map(([key, value]) => [key, value.toObject()])\n                );\n            }\n            if (this.created_at != null) {\n                data.created_at = this.created_at;\n            }\n            if (this.ver != null) {\n                data.ver = this.ver;\n            }\n            if (this.base != null) {\n                data.base = this.base;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.id.length) writer.writeString(1, this.id);\n            if (this.name.length) writer.writeString(2, this.name);\n            if (this.users.length) writer.writePackedInt64(3, this.users);\n            if (this.msgs.length)\n                writer.writeRepeatedMessage(4, this.msgs, (item: Msgs) => item.serialize(writer));\n            for (const [key, value] of this.settle_info) {\n                writer.writeMessage(5, this.settle_info, () => {\n                    writer.writeString(1, key);\n                    writer.writeMessage(2, value, () => value.serialize(writer));\n                });\n            }\n            if (this.created_at != 0) writer.writeInt64(6, this.created_at);\n            if (this.ver != 0) writer.writeInt32(7, this.ver);\n            if (this.base != 0) writer.writeInt64(8, this.base);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameReplayRecord {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new GameReplayRecord();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.id = reader.readString();\n                        break;\n                    case 2:\n                        message.name = reader.readString();\n                        break;\n                    case 3:\n                        message.users = reader.readPackedInt64();\n                        break;\n                    case 4:\n                        reader.readMessage(message.msgs, () =>\n                            pb_1.Message.addToRepeatedWrapperField(\n                                message,\n                                4,\n                                Msgs.deserialize(reader),\n                                Msgs\n                            )\n                        );\n                        break;\n                    case 5:\n                        reader.readMessage(message, () =>\n                            pb_1.Map.deserializeBinary(\n                                message.settle_info as any,\n                                reader,\n                                reader.readString,\n                                () => {\n                                    let value;\n                                    reader.readMessage(\n                                        message,\n                                        () => (value = SettleDetails.deserialize(reader))\n                                    );\n                                    return value;\n                                }\n                            )\n                        );\n                        break;\n                    case 6:\n                        message.created_at = reader.readInt64();\n                        break;\n                    case 7:\n                        message.ver = reader.readInt32();\n                        break;\n                    case 8:\n                        message.base = reader.readInt64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): GameReplayRecord {\n            return GameReplayRecord.deserialize(bytes);\n        }\n    }\n    export class GameReplaysResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: GameReplaysResp.RespData;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(\n                this,\n                GameReplaysResp.RespData,\n                2\n            ) as GameReplaysResp.RespData;\n        }\n        set data(value: GameReplaysResp.RespData) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof GameReplaysResp.RespData.prototype.toObject>;\n        }): GameReplaysResp {\n            const message = new GameReplaysResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = GameReplaysResp.RespData.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof GameReplaysResp.RespData.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameReplaysResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new GameReplaysResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () => (message.data = GameReplaysResp.RespData.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): GameReplaysResp {\n            return GameReplaysResp.deserialize(bytes);\n        }\n    }\n    export namespace GameReplaysResp {\n        export class RespData extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          total?: number;\n                          records?: GameReplayRecord[];\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [2],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"total\" in data && data.total != undefined) {\n                        this.total = data.total;\n                    }\n                    if (\"records\" in data && data.records != undefined) {\n                        this.records = data.records;\n                    }\n                }\n            }\n\n            /** \n              数据数量\n               **/\n            get total() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n\n            /** \n              数据数量\n               **/\n            set total(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get records() {\n                return pb_1.Message.getRepeatedWrapperField(\n                    this,\n                    GameReplayRecord,\n                    2\n                ) as GameReplayRecord[];\n            }\n            set records(value: GameReplayRecord[]) {\n                pb_1.Message.setRepeatedWrapperField(this, 2, value);\n            }\n            static fromObject(data: {\n                total?: number;\n                records?: ReturnType<typeof GameReplayRecord.prototype.toObject>[];\n            }): RespData {\n                const message = new RespData({});\n                if (data.total != null) {\n                    message.total = data.total;\n                }\n                if (data.records != null) {\n                    message.records = data.records.map((item) => GameReplayRecord.fromObject(item));\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    total?: number;\n                    records?: ReturnType<typeof GameReplayRecord.prototype.toObject>[];\n                } = {};\n                if (this.total != null) {\n                    data.total = this.total;\n                }\n                if (this.records != null) {\n                    data.records = this.records.map((item: GameReplayRecord) => item.toObject());\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.total != 0) writer.writeInt32(1, this.total);\n                if (this.records.length)\n                    writer.writeRepeatedMessage(2, this.records, (item: GameReplayRecord) =>\n                        item.serialize(writer)\n                    );\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new RespData();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.total = reader.readInt32();\n                            break;\n                        case 2:\n                            reader.readMessage(message.records, () =>\n                                pb_1.Message.addToRepeatedWrapperField(\n                                    message,\n                                    2,\n                                    GameReplayRecord.deserialize(reader),\n                                    GameReplayRecord\n                                )\n                            );\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): RespData {\n                return RespData.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      游戏回放详情\n       game/replay/detail/\n       **/\n    export class GameReplayDetailReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      game_id?: number;\n                      id?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"game_id\" in data && data.game_id != undefined) {\n                    this.game_id = data.game_id;\n                }\n                if (\"id\" in data && data.id != undefined) {\n                    this.id = data.id;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get game_id() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n        set game_id(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get id() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n        set id(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            game_id?: number;\n            id?: string;\n        }): GameReplayDetailReq {\n            const message = new GameReplayDetailReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.game_id != null) {\n                message.game_id = data.game_id;\n            }\n            if (data.id != null) {\n                message.id = data.id;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                game_id?: number;\n                id?: string;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.game_id != null) {\n                data.game_id = this.game_id;\n            }\n            if (this.id != null) {\n                data.id = this.id;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.game_id != 0) writer.writeInt64(2, this.game_id);\n            if (this.id.length) writer.writeString(3, this.id);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameReplayDetailReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new GameReplayDetailReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.game_id = reader.readInt64();\n                        break;\n                    case 3:\n                        message.id = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): GameReplayDetailReq {\n            return GameReplayDetailReq.deserialize(bytes);\n        }\n    }\n    export class GameReplayDetailResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: GameReplayRecord;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(this, GameReplayRecord, 2) as GameReplayRecord;\n        }\n        set data(value: GameReplayRecord) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof GameReplayRecord.prototype.toObject>;\n        }): GameReplayDetailResp {\n            const message = new GameReplayDetailResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = GameReplayRecord.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof GameReplayRecord.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameReplayDetailResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new GameReplayDetailResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () => (message.data = GameReplayRecord.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): GameReplayDetailResp {\n            return GameReplayDetailResp.deserialize(bytes);\n        }\n    }\n\n    /** \n      ===================== 推广员 ====================\n       配置信息\n       promoter/product_conf/\n       **/\n    export class ProductConf extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      id?: string;\n                      promotional_link?: string;\n                      promotional_material_img?: string;\n                      promotional_copy?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"id\" in data && data.id != undefined) {\n                    this.id = data.id;\n                }\n                if (\"promotional_link\" in data && data.promotional_link != undefined) {\n                    this.promotional_link = data.promotional_link;\n                }\n                if (\n                    \"promotional_material_img\" in data &&\n                    data.promotional_material_img != undefined\n                ) {\n                    this.promotional_material_img = data.promotional_material_img;\n                }\n                if (\"promotional_copy\" in data && data.promotional_copy != undefined) {\n                    this.promotional_copy = data.promotional_copy;\n                }\n            }\n        }\n        get id() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n        }\n        set id(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get promotional_link() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set promotional_link(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get promotional_material_img() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n        set promotional_material_img(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        get promotional_copy() {\n            return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n        }\n        set promotional_copy(value: string) {\n            pb_1.Message.setField(this, 4, value);\n        }\n        static fromObject(data: {\n            id?: string;\n            promotional_link?: string;\n            promotional_material_img?: string;\n            promotional_copy?: string;\n        }): ProductConf {\n            const message = new ProductConf({});\n            if (data.id != null) {\n                message.id = data.id;\n            }\n            if (data.promotional_link != null) {\n                message.promotional_link = data.promotional_link;\n            }\n            if (data.promotional_material_img != null) {\n                message.promotional_material_img = data.promotional_material_img;\n            }\n            if (data.promotional_copy != null) {\n                message.promotional_copy = data.promotional_copy;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                id?: string;\n                promotional_link?: string;\n                promotional_material_img?: string;\n                promotional_copy?: string;\n            } = {};\n            if (this.id != null) {\n                data.id = this.id;\n            }\n            if (this.promotional_link != null) {\n                data.promotional_link = this.promotional_link;\n            }\n            if (this.promotional_material_img != null) {\n                data.promotional_material_img = this.promotional_material_img;\n            }\n            if (this.promotional_copy != null) {\n                data.promotional_copy = this.promotional_copy;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.id.length) writer.writeString(1, this.id);\n            if (this.promotional_link.length) writer.writeString(2, this.promotional_link);\n            if (this.promotional_material_img.length)\n                writer.writeString(3, this.promotional_material_img);\n            if (this.promotional_copy.length) writer.writeString(4, this.promotional_copy);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProductConf {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new ProductConf();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.id = reader.readString();\n                        break;\n                    case 2:\n                        message.promotional_link = reader.readString();\n                        break;\n                    case 3:\n                        message.promotional_material_img = reader.readString();\n                        break;\n                    case 4:\n                        message.promotional_copy = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): ProductConf {\n            return ProductConf.deserialize(bytes);\n        }\n    }\n    export class PromoterProductConfReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n        }): PromoterProductConfReq {\n            const message = new PromoterProductConfReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterProductConfReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PromoterProductConfReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PromoterProductConfReq {\n            return PromoterProductConfReq.deserialize(bytes);\n        }\n    }\n    export class PromoterProductConfResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: ProductConf;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(this, ProductConf, 2) as ProductConf;\n        }\n        set data(value: ProductConf) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof ProductConf.prototype.toObject>;\n        }): PromoterProductConfResp {\n            const message = new PromoterProductConfResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = ProductConf.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof ProductConf.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterProductConfResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PromoterProductConfResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () => (message.data = ProductConf.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PromoterProductConfResp {\n            return PromoterProductConfResp.deserialize(bytes);\n        }\n    }\n\n    /** \n      promoter/share_conf/ 分享配置\n       **/\n    export class PromoterShareConfReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n        }): PromoterShareConfReq {\n            const message = new PromoterShareConfReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterShareConfReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PromoterShareConfReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PromoterShareConfReq {\n            return PromoterShareConfReq.deserialize(bytes);\n        }\n    }\n    export class PromoterShareConfResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: PromoterShareConfResp.ShareConf;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(\n                this,\n                PromoterShareConfResp.ShareConf,\n                2\n            ) as PromoterShareConfResp.ShareConf;\n        }\n        set data(value: PromoterShareConfResp.ShareConf) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof PromoterShareConfResp.ShareConf.prototype.toObject>;\n        }): PromoterShareConfResp {\n            const message = new PromoterShareConfResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = PromoterShareConfResp.ShareConf.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof PromoterShareConfResp.ShareConf.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterShareConfResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PromoterShareConfResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () =>\n                                (message.data = PromoterShareConfResp.ShareConf.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PromoterShareConfResp {\n            return PromoterShareConfResp.deserialize(bytes);\n        }\n    }\n    export namespace PromoterShareConfResp {\n        export class ShareConf extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          facebook_appid?: string;\n                          whatsapp_appid?: string;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"facebook_appid\" in data && data.facebook_appid != undefined) {\n                        this.facebook_appid = data.facebook_appid;\n                    }\n                    if (\"whatsapp_appid\" in data && data.whatsapp_appid != undefined) {\n                        this.whatsapp_appid = data.whatsapp_appid;\n                    }\n                }\n            }\n            get facebook_appid() {\n                return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n            }\n            set facebook_appid(value: string) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get whatsapp_appid() {\n                return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n            }\n            set whatsapp_appid(value: string) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            static fromObject(data: {\n                facebook_appid?: string;\n                whatsapp_appid?: string;\n            }): ShareConf {\n                const message = new ShareConf({});\n                if (data.facebook_appid != null) {\n                    message.facebook_appid = data.facebook_appid;\n                }\n                if (data.whatsapp_appid != null) {\n                    message.whatsapp_appid = data.whatsapp_appid;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    facebook_appid?: string;\n                    whatsapp_appid?: string;\n                } = {};\n                if (this.facebook_appid != null) {\n                    data.facebook_appid = this.facebook_appid;\n                }\n                if (this.whatsapp_appid != null) {\n                    data.whatsapp_appid = this.whatsapp_appid;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.facebook_appid.length) writer.writeString(1, this.facebook_appid);\n                if (this.whatsapp_appid.length) writer.writeString(2, this.whatsapp_appid);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShareConf {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new ShareConf();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.facebook_appid = reader.readString();\n                            break;\n                        case 2:\n                            message.whatsapp_appid = reader.readString();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): ShareConf {\n                return ShareConf.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      promoter/verify_brd/\n       **/\n    export class PromoterVerifyBrdReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n        }): PromoterVerifyBrdReq {\n            const message = new PromoterVerifyBrdReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterVerifyBrdReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PromoterVerifyBrdReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PromoterVerifyBrdReq {\n            return PromoterVerifyBrdReq.deserialize(bytes);\n        }\n    }\n    export class PromoterVerifyBrdResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: boolean;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;\n        }\n        set data(value: boolean) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: boolean;\n        }): PromoterVerifyBrdResp {\n            const message = new PromoterVerifyBrdResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = data.data;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: boolean;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.data != false) writer.writeBool(2, this.data);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterVerifyBrdResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PromoterVerifyBrdResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.data = reader.readBool();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PromoterVerifyBrdResp {\n            return PromoterVerifyBrdResp.deserialize(bytes);\n        }\n    }\n\n    /** \n      promoter/verify_refer_id/\n       **/\n    export class PromoterVerifyReferIdReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      refer_id?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"refer_id\" in data && data.refer_id != undefined) {\n                    this.refer_id = data.refer_id;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get refer_id() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n        set refer_id(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            refer_id?: number;\n        }): PromoterVerifyReferIdReq {\n            const message = new PromoterVerifyReferIdReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.refer_id != null) {\n                message.refer_id = data.refer_id;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                refer_id?: number;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.refer_id != null) {\n                data.refer_id = this.refer_id;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.refer_id != 0) writer.writeInt64(2, this.refer_id);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterVerifyReferIdReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PromoterVerifyReferIdReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.refer_id = reader.readInt64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PromoterVerifyReferIdReq {\n            return PromoterVerifyReferIdReq.deserialize(bytes);\n        }\n    }\n    export class PromoterVerifyReferIdResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: boolean;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;\n        }\n        set data(value: boolean) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: boolean;\n        }): PromoterVerifyReferIdResp {\n            const message = new PromoterVerifyReferIdResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = data.data;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: boolean;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.data != false) writer.writeBool(2, this.data);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterVerifyReferIdResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PromoterVerifyReferIdResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.data = reader.readBool();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PromoterVerifyReferIdResp {\n            return PromoterVerifyReferIdResp.deserialize(bytes);\n        }\n    }\n    export class LevelSubLevel extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      upper_contribution_amount?: number;\n                      medal_sub_level?: MedalSubLevel;\n                      level?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\n                    \"upper_contribution_amount\" in data &&\n                    data.upper_contribution_amount != undefined\n                ) {\n                    this.upper_contribution_amount = data.upper_contribution_amount;\n                }\n                if (\"medal_sub_level\" in data && data.medal_sub_level != undefined) {\n                    this.medal_sub_level = data.medal_sub_level;\n                }\n                if (\"level\" in data && data.level != undefined) {\n                    this.level = data.level;\n                }\n            }\n        }\n        get upper_contribution_amount() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set upper_contribution_amount(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get medal_sub_level() {\n            return pb_1.Message.getFieldWithDefault(\n                this,\n                2,\n                MedalSubLevel.MSL_UNKNOWN\n            ) as MedalSubLevel;\n        }\n        set medal_sub_level(value: MedalSubLevel) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          MedalLevel | MedalSubLevel 或运算\n           **/\n        get level() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n\n        /** \n          MedalLevel | MedalSubLevel 或运算\n           **/\n        set level(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: {\n            upper_contribution_amount?: number;\n            medal_sub_level?: MedalSubLevel;\n            level?: number;\n        }): LevelSubLevel {\n            const message = new LevelSubLevel({});\n            if (data.upper_contribution_amount != null) {\n                message.upper_contribution_amount = data.upper_contribution_amount;\n            }\n            if (data.medal_sub_level != null) {\n                message.medal_sub_level = data.medal_sub_level;\n            }\n            if (data.level != null) {\n                message.level = data.level;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                upper_contribution_amount?: number;\n                medal_sub_level?: MedalSubLevel;\n                level?: number;\n            } = {};\n            if (this.upper_contribution_amount != null) {\n                data.upper_contribution_amount = this.upper_contribution_amount;\n            }\n            if (this.medal_sub_level != null) {\n                data.medal_sub_level = this.medal_sub_level;\n            }\n            if (this.level != null) {\n                data.level = this.level;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.upper_contribution_amount != 0)\n                writer.writeInt64(1, this.upper_contribution_amount);\n            if (this.medal_sub_level != MedalSubLevel.MSL_UNKNOWN)\n                writer.writeEnum(2, this.medal_sub_level);\n            if (this.level != 0) writer.writeInt32(3, this.level);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LevelSubLevel {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new LevelSubLevel();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.upper_contribution_amount = reader.readInt64();\n                        break;\n                    case 2:\n                        message.medal_sub_level = reader.readEnum();\n                        break;\n                    case 3:\n                        message.level = reader.readInt32();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): LevelSubLevel {\n            return LevelSubLevel.deserialize(bytes);\n        }\n    }\n    export class LevelRule extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      medal_level?: MedalLevel;\n                      sub_level_rules?: LevelSubLevel[];\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [2],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"medal_level\" in data && data.medal_level != undefined) {\n                    this.medal_level = data.medal_level;\n                }\n                if (\"sub_level_rules\" in data && data.sub_level_rules != undefined) {\n                    this.sub_level_rules = data.sub_level_rules;\n                }\n            }\n        }\n        get medal_level() {\n            return pb_1.Message.getFieldWithDefault(this, 1, MedalLevel.ML_UNKNOWN) as MedalLevel;\n        }\n        set medal_level(value: MedalLevel) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get sub_level_rules() {\n            return pb_1.Message.getRepeatedWrapperField(this, LevelSubLevel, 2) as LevelSubLevel[];\n        }\n        set sub_level_rules(value: LevelSubLevel[]) {\n            pb_1.Message.setRepeatedWrapperField(this, 2, value);\n        }\n        static fromObject(data: {\n            medal_level?: MedalLevel;\n            sub_level_rules?: ReturnType<typeof LevelSubLevel.prototype.toObject>[];\n        }): LevelRule {\n            const message = new LevelRule({});\n            if (data.medal_level != null) {\n                message.medal_level = data.medal_level;\n            }\n            if (data.sub_level_rules != null) {\n                message.sub_level_rules = data.sub_level_rules.map((item) =>\n                    LevelSubLevel.fromObject(item)\n                );\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                medal_level?: MedalLevel;\n                sub_level_rules?: ReturnType<typeof LevelSubLevel.prototype.toObject>[];\n            } = {};\n            if (this.medal_level != null) {\n                data.medal_level = this.medal_level;\n            }\n            if (this.sub_level_rules != null) {\n                data.sub_level_rules = this.sub_level_rules.map((item: LevelSubLevel) =>\n                    item.toObject()\n                );\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.medal_level != MedalLevel.ML_UNKNOWN) writer.writeEnum(1, this.medal_level);\n            if (this.sub_level_rules.length)\n                writer.writeRepeatedMessage(2, this.sub_level_rules, (item: LevelSubLevel) =>\n                    item.serialize(writer)\n                );\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LevelRule {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new LevelRule();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.medal_level = reader.readEnum();\n                        break;\n                    case 2:\n                        reader.readMessage(message.sub_level_rules, () =>\n                            pb_1.Message.addToRepeatedWrapperField(\n                                message,\n                                2,\n                                LevelSubLevel.deserialize(reader),\n                                LevelSubLevel\n                            )\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): LevelRule {\n            return LevelRule.deserialize(bytes);\n        }\n    }\n    export class ContributionLevelConf extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      id?: string;\n                      level_rules?: LevelRule[];\n                      desc?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [2],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"id\" in data && data.id != undefined) {\n                    this.id = data.id;\n                }\n                if (\"level_rules\" in data && data.level_rules != undefined) {\n                    this.level_rules = data.level_rules;\n                }\n                if (\"desc\" in data && data.desc != undefined) {\n                    this.desc = data.desc;\n                }\n            }\n        }\n        get id() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n        }\n        set id(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get level_rules() {\n            return pb_1.Message.getRepeatedWrapperField(this, LevelRule, 2) as LevelRule[];\n        }\n        set level_rules(value: LevelRule[]) {\n            pb_1.Message.setRepeatedWrapperField(this, 2, value);\n        }\n        get desc() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n        set desc(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: {\n            id?: string;\n            level_rules?: ReturnType<typeof LevelRule.prototype.toObject>[];\n            desc?: string;\n        }): ContributionLevelConf {\n            const message = new ContributionLevelConf({});\n            if (data.id != null) {\n                message.id = data.id;\n            }\n            if (data.level_rules != null) {\n                message.level_rules = data.level_rules.map((item) => LevelRule.fromObject(item));\n            }\n            if (data.desc != null) {\n                message.desc = data.desc;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                id?: string;\n                level_rules?: ReturnType<typeof LevelRule.prototype.toObject>[];\n                desc?: string;\n            } = {};\n            if (this.id != null) {\n                data.id = this.id;\n            }\n            if (this.level_rules != null) {\n                data.level_rules = this.level_rules.map((item: LevelRule) => item.toObject());\n            }\n            if (this.desc != null) {\n                data.desc = this.desc;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.id.length) writer.writeString(1, this.id);\n            if (this.level_rules.length)\n                writer.writeRepeatedMessage(2, this.level_rules, (item: LevelRule) =>\n                    item.serialize(writer)\n                );\n            if (this.desc.length) writer.writeString(3, this.desc);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContributionLevelConf {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new ContributionLevelConf();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.id = reader.readString();\n                        break;\n                    case 2:\n                        reader.readMessage(message.level_rules, () =>\n                            pb_1.Message.addToRepeatedWrapperField(\n                                message,\n                                2,\n                                LevelRule.deserialize(reader),\n                                LevelRule\n                            )\n                        );\n                        break;\n                    case 3:\n                        message.desc = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): ContributionLevelConf {\n            return ContributionLevelConf.deserialize(bytes);\n        }\n    }\n    export class RateRule extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      level?: number;\n                      rate?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"level\" in data && data.level != undefined) {\n                    this.level = data.level;\n                }\n                if (\"rate\" in data && data.rate != undefined) {\n                    this.rate = data.rate;\n                }\n            }\n        }\n\n        /** \n          或运算后的等级\n           **/\n        get level() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n\n        /** \n          或运算后的等级\n           **/\n        set level(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get rate() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set rate(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: { level?: number; rate?: string }): RateRule {\n            const message = new RateRule({});\n            if (data.level != null) {\n                message.level = data.level;\n            }\n            if (data.rate != null) {\n                message.rate = data.rate;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                level?: number;\n                rate?: string;\n            } = {};\n            if (this.level != null) {\n                data.level = this.level;\n            }\n            if (this.rate != null) {\n                data.rate = this.rate;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.level != 0) writer.writeInt32(1, this.level);\n            if (this.rate.length) writer.writeString(2, this.rate);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RateRule {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new RateRule();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.level = reader.readInt32();\n                        break;\n                    case 2:\n                        message.rate = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): RateRule {\n            return RateRule.deserialize(bytes);\n        }\n    }\n    export class CommissionConf extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      id?: string;\n                      group_name?: string;\n                      game_ids?: number[];\n                      rate_rules?: RateRule[];\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [3, 4],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"id\" in data && data.id != undefined) {\n                    this.id = data.id;\n                }\n                if (\"group_name\" in data && data.group_name != undefined) {\n                    this.group_name = data.group_name;\n                }\n                if (\"game_ids\" in data && data.game_ids != undefined) {\n                    this.game_ids = data.game_ids;\n                }\n                if (\"rate_rules\" in data && data.rate_rules != undefined) {\n                    this.rate_rules = data.rate_rules;\n                }\n            }\n        }\n        get id() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n        }\n        set id(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get group_name() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set group_name(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get game_ids() {\n            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];\n        }\n        set game_ids(value: number[]) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        get rate_rules() {\n            return pb_1.Message.getRepeatedWrapperField(this, RateRule, 4) as RateRule[];\n        }\n        set rate_rules(value: RateRule[]) {\n            pb_1.Message.setRepeatedWrapperField(this, 4, value);\n        }\n        static fromObject(data: {\n            id?: string;\n            group_name?: string;\n            game_ids?: number[];\n            rate_rules?: ReturnType<typeof RateRule.prototype.toObject>[];\n        }): CommissionConf {\n            const message = new CommissionConf({});\n            if (data.id != null) {\n                message.id = data.id;\n            }\n            if (data.group_name != null) {\n                message.group_name = data.group_name;\n            }\n            if (data.game_ids != null) {\n                message.game_ids = data.game_ids;\n            }\n            if (data.rate_rules != null) {\n                message.rate_rules = data.rate_rules.map((item) => RateRule.fromObject(item));\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                id?: string;\n                group_name?: string;\n                game_ids?: number[];\n                rate_rules?: ReturnType<typeof RateRule.prototype.toObject>[];\n            } = {};\n            if (this.id != null) {\n                data.id = this.id;\n            }\n            if (this.group_name != null) {\n                data.group_name = this.group_name;\n            }\n            if (this.game_ids != null) {\n                data.game_ids = this.game_ids;\n            }\n            if (this.rate_rules != null) {\n                data.rate_rules = this.rate_rules.map((item: RateRule) => item.toObject());\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.id.length) writer.writeString(1, this.id);\n            if (this.group_name.length) writer.writeString(2, this.group_name);\n            if (this.game_ids.length) writer.writePackedInt32(3, this.game_ids);\n            if (this.rate_rules.length)\n                writer.writeRepeatedMessage(4, this.rate_rules, (item: RateRule) =>\n                    item.serialize(writer)\n                );\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommissionConf {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new CommissionConf();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.id = reader.readString();\n                        break;\n                    case 2:\n                        message.group_name = reader.readString();\n                        break;\n                    case 3:\n                        message.game_ids = reader.readPackedInt32();\n                        break;\n                    case 4:\n                        reader.readMessage(message.rate_rules, () =>\n                            pb_1.Message.addToRepeatedWrapperField(\n                                message,\n                                4,\n                                RateRule.deserialize(reader),\n                                RateRule\n                            )\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): CommissionConf {\n            return CommissionConf.deserialize(bytes);\n        }\n    }\n    export class GetCommissionConfReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n        }): GetCommissionConfReq {\n            const message = new GetCommissionConfReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCommissionConfReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new GetCommissionConfReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): GetCommissionConfReq {\n            return GetCommissionConfReq.deserialize(bytes);\n        }\n    }\n    export class GetCommissionConfResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: GetCommissionConfResp.RespData;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(\n                this,\n                GetCommissionConfResp.RespData,\n                2\n            ) as GetCommissionConfResp.RespData;\n        }\n        set data(value: GetCommissionConfResp.RespData) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof GetCommissionConfResp.RespData.prototype.toObject>;\n        }): GetCommissionConfResp {\n            const message = new GetCommissionConfResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = GetCommissionConfResp.RespData.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof GetCommissionConfResp.RespData.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCommissionConfResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new GetCommissionConfResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () =>\n                                (message.data = GetCommissionConfResp.RespData.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): GetCommissionConfResp {\n            return GetCommissionConfResp.deserialize(bytes);\n        }\n    }\n    export namespace GetCommissionConfResp {\n        export class RespData extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          contribution_level_conf?: ContributionLevelConf;\n                          commission_confs?: CommissionConf[];\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [2],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\n                        \"contribution_level_conf\" in data &&\n                        data.contribution_level_conf != undefined\n                    ) {\n                        this.contribution_level_conf = data.contribution_level_conf;\n                    }\n                    if (\"commission_confs\" in data && data.commission_confs != undefined) {\n                        this.commission_confs = data.commission_confs;\n                    }\n                }\n            }\n            get contribution_level_conf() {\n                return pb_1.Message.getWrapperField(\n                    this,\n                    ContributionLevelConf,\n                    1\n                ) as ContributionLevelConf;\n            }\n            set contribution_level_conf(value: ContributionLevelConf) {\n                pb_1.Message.setWrapperField(this, 1, value);\n            }\n            get has_contribution_level_conf() {\n                return pb_1.Message.getField(this, 1) != null;\n            }\n            get commission_confs() {\n                return pb_1.Message.getRepeatedWrapperField(\n                    this,\n                    CommissionConf,\n                    2\n                ) as CommissionConf[];\n            }\n            set commission_confs(value: CommissionConf[]) {\n                pb_1.Message.setRepeatedWrapperField(this, 2, value);\n            }\n            static fromObject(data: {\n                contribution_level_conf?: ReturnType<\n                    typeof ContributionLevelConf.prototype.toObject\n                >;\n                commission_confs?: ReturnType<typeof CommissionConf.prototype.toObject>[];\n            }): RespData {\n                const message = new RespData({});\n                if (data.contribution_level_conf != null) {\n                    message.contribution_level_conf = ContributionLevelConf.fromObject(\n                        data.contribution_level_conf\n                    );\n                }\n                if (data.commission_confs != null) {\n                    message.commission_confs = data.commission_confs.map((item) =>\n                        CommissionConf.fromObject(item)\n                    );\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    contribution_level_conf?: ReturnType<\n                        typeof ContributionLevelConf.prototype.toObject\n                    >;\n                    commission_confs?: ReturnType<typeof CommissionConf.prototype.toObject>[];\n                } = {};\n                if (this.contribution_level_conf != null) {\n                    data.contribution_level_conf = this.contribution_level_conf.toObject();\n                }\n                if (this.commission_confs != null) {\n                    data.commission_confs = this.commission_confs.map((item: CommissionConf) =>\n                        item.toObject()\n                    );\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.has_contribution_level_conf)\n                    writer.writeMessage(1, this.contribution_level_conf, () =>\n                        this.contribution_level_conf.serialize(writer)\n                    );\n                if (this.commission_confs.length)\n                    writer.writeRepeatedMessage(2, this.commission_confs, (item: CommissionConf) =>\n                        item.serialize(writer)\n                    );\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new RespData();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            reader.readMessage(\n                                message.contribution_level_conf,\n                                () =>\n                                    (message.contribution_level_conf =\n                                        ContributionLevelConf.deserialize(reader))\n                            );\n                            break;\n                        case 2:\n                            reader.readMessage(message.commission_confs, () =>\n                                pb_1.Message.addToRepeatedWrapperField(\n                                    message,\n                                    2,\n                                    CommissionConf.deserialize(reader),\n                                    CommissionConf\n                                )\n                            );\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): RespData {\n                return RespData.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      promoter/commission_desc_conf/ 佣金等级配置\n       **/\n    export class Question extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      question?: string;\n                      answer?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"question\" in data && data.question != undefined) {\n                    this.question = data.question;\n                }\n                if (\"answer\" in data && data.answer != undefined) {\n                    this.answer = data.answer;\n                }\n            }\n        }\n        get question() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n        }\n        set question(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get answer() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set answer(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: { question?: string; answer?: string }): Question {\n            const message = new Question({});\n            if (data.question != null) {\n                message.question = data.question;\n            }\n            if (data.answer != null) {\n                message.answer = data.answer;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                question?: string;\n                answer?: string;\n            } = {};\n            if (this.question != null) {\n                data.question = this.question;\n            }\n            if (this.answer != null) {\n                data.answer = this.answer;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.question.length) writer.writeString(1, this.question);\n            if (this.answer.length) writer.writeString(2, this.answer);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Question {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new Question();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.question = reader.readString();\n                        break;\n                    case 2:\n                        message.answer = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): Question {\n            return Question.deserialize(bytes);\n        }\n    }\n    export class CommissionDescConf extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      commission_calc_desc_img?: string;\n                      share_desc_img?: string;\n                      terms_conditions?: string;\n                      questions?: Question[];\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [4],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\n                    \"commission_calc_desc_img\" in data &&\n                    data.commission_calc_desc_img != undefined\n                ) {\n                    this.commission_calc_desc_img = data.commission_calc_desc_img;\n                }\n                if (\"share_desc_img\" in data && data.share_desc_img != undefined) {\n                    this.share_desc_img = data.share_desc_img;\n                }\n                if (\"terms_conditions\" in data && data.terms_conditions != undefined) {\n                    this.terms_conditions = data.terms_conditions;\n                }\n                if (\"questions\" in data && data.questions != undefined) {\n                    this.questions = data.questions;\n                }\n            }\n        }\n        get commission_calc_desc_img() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n        }\n        set commission_calc_desc_img(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get share_desc_img() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set share_desc_img(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get terms_conditions() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n        set terms_conditions(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        get questions() {\n            return pb_1.Message.getRepeatedWrapperField(this, Question, 4) as Question[];\n        }\n        set questions(value: Question[]) {\n            pb_1.Message.setRepeatedWrapperField(this, 4, value);\n        }\n        static fromObject(data: {\n            commission_calc_desc_img?: string;\n            share_desc_img?: string;\n            terms_conditions?: string;\n            questions?: ReturnType<typeof Question.prototype.toObject>[];\n        }): CommissionDescConf {\n            const message = new CommissionDescConf({});\n            if (data.commission_calc_desc_img != null) {\n                message.commission_calc_desc_img = data.commission_calc_desc_img;\n            }\n            if (data.share_desc_img != null) {\n                message.share_desc_img = data.share_desc_img;\n            }\n            if (data.terms_conditions != null) {\n                message.terms_conditions = data.terms_conditions;\n            }\n            if (data.questions != null) {\n                message.questions = data.questions.map((item) => Question.fromObject(item));\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                commission_calc_desc_img?: string;\n                share_desc_img?: string;\n                terms_conditions?: string;\n                questions?: ReturnType<typeof Question.prototype.toObject>[];\n            } = {};\n            if (this.commission_calc_desc_img != null) {\n                data.commission_calc_desc_img = this.commission_calc_desc_img;\n            }\n            if (this.share_desc_img != null) {\n                data.share_desc_img = this.share_desc_img;\n            }\n            if (this.terms_conditions != null) {\n                data.terms_conditions = this.terms_conditions;\n            }\n            if (this.questions != null) {\n                data.questions = this.questions.map((item: Question) => item.toObject());\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.commission_calc_desc_img.length)\n                writer.writeString(1, this.commission_calc_desc_img);\n            if (this.share_desc_img.length) writer.writeString(2, this.share_desc_img);\n            if (this.terms_conditions.length) writer.writeString(3, this.terms_conditions);\n            if (this.questions.length)\n                writer.writeRepeatedMessage(4, this.questions, (item: Question) =>\n                    item.serialize(writer)\n                );\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CommissionDescConf {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new CommissionDescConf();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.commission_calc_desc_img = reader.readString();\n                        break;\n                    case 2:\n                        message.share_desc_img = reader.readString();\n                        break;\n                    case 3:\n                        message.terms_conditions = reader.readString();\n                        break;\n                    case 4:\n                        reader.readMessage(message.questions, () =>\n                            pb_1.Message.addToRepeatedWrapperField(\n                                message,\n                                4,\n                                Question.deserialize(reader),\n                                Question\n                            )\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): CommissionDescConf {\n            return CommissionDescConf.deserialize(bytes);\n        }\n    }\n    export class GetCommissionDescConfReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n        }): GetCommissionDescConfReq {\n            const message = new GetCommissionDescConfReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCommissionDescConfReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new GetCommissionDescConfReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): GetCommissionDescConfReq {\n            return GetCommissionDescConfReq.deserialize(bytes);\n        }\n    }\n    export class GetCommissionDescConfResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: CommissionDescConf;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(this, CommissionDescConf, 2) as CommissionDescConf;\n        }\n        set data(value: CommissionDescConf) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof CommissionDescConf.prototype.toObject>;\n        }): GetCommissionDescConfResp {\n            const message = new GetCommissionDescConfResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = CommissionDescConf.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof CommissionDescConf.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCommissionDescConfResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new GetCommissionDescConfResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () => (message.data = CommissionDescConf.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): GetCommissionDescConfResp {\n            return GetCommissionDescConfResp.deserialize(bytes);\n        }\n    }\n    export class User extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      id?: number;\n                      parent?: User;\n                      sub_user_count?: number;\n                      cumulative_commission_amount?: number;\n                      available_commission_amount?: number;\n                      daily_contribution_amount?: number;\n                      total_contribution_amount?: number;\n                      contribution_level?: number;\n                      upper_contribution_amount?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"id\" in data && data.id != undefined) {\n                    this.id = data.id;\n                }\n                if (\"parent\" in data && data.parent != undefined) {\n                    this.parent = data.parent;\n                }\n                if (\"sub_user_count\" in data && data.sub_user_count != undefined) {\n                    this.sub_user_count = data.sub_user_count;\n                }\n                if (\n                    \"cumulative_commission_amount\" in data &&\n                    data.cumulative_commission_amount != undefined\n                ) {\n                    this.cumulative_commission_amount = data.cumulative_commission_amount;\n                }\n                if (\n                    \"available_commission_amount\" in data &&\n                    data.available_commission_amount != undefined\n                ) {\n                    this.available_commission_amount = data.available_commission_amount;\n                }\n                if (\n                    \"daily_contribution_amount\" in data &&\n                    data.daily_contribution_amount != undefined\n                ) {\n                    this.daily_contribution_amount = data.daily_contribution_amount;\n                }\n                if (\n                    \"total_contribution_amount\" in data &&\n                    data.total_contribution_amount != undefined\n                ) {\n                    this.total_contribution_amount = data.total_contribution_amount;\n                }\n                if (\"contribution_level\" in data && data.contribution_level != undefined) {\n                    this.contribution_level = data.contribution_level;\n                }\n                if (\n                    \"upper_contribution_amount\" in data &&\n                    data.upper_contribution_amount != undefined\n                ) {\n                    this.upper_contribution_amount = data.upper_contribution_amount;\n                }\n            }\n        }\n        get id() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set id(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get parent() {\n            return pb_1.Message.getWrapperField(this, User, 2) as User;\n        }\n        set parent(value: User) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_parent() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n\n        /** \n          子代数量\n           **/\n        get sub_user_count() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n\n        /** \n          子代数量\n           **/\n        set sub_user_count(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n\n        /** \n          累计佣金\n           **/\n        get cumulative_commission_amount() {\n            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n        }\n\n        /** \n          累计佣金\n           **/\n        set cumulative_commission_amount(value: number) {\n            pb_1.Message.setField(this, 4, value);\n        }\n\n        /** \n          可领取佣金\n           **/\n        get available_commission_amount() {\n            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;\n        }\n\n        /** \n          可领取佣金\n           **/\n        set available_commission_amount(value: number) {\n            pb_1.Message.setField(this, 5, value);\n        }\n\n        /** \n          每日业绩\n           **/\n        get daily_contribution_amount() {\n            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;\n        }\n\n        /** \n          每日业绩\n           **/\n        set daily_contribution_amount(value: number) {\n            pb_1.Message.setField(this, 6, value);\n        }\n\n        /** \n          总业绩\n           **/\n        get total_contribution_amount() {\n            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;\n        }\n\n        /** \n          总业绩\n           **/\n        set total_contribution_amount(value: number) {\n            pb_1.Message.setField(this, 7, value);\n        }\n\n        /** \n          业绩等级\n           **/\n        get contribution_level() {\n            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;\n        }\n\n        /** \n          业绩等级\n           **/\n        set contribution_level(value: number) {\n            pb_1.Message.setField(this, 8, value);\n        }\n\n        /** \n          下一等级所需业绩\n           **/\n        get upper_contribution_amount() {\n            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;\n        }\n\n        /** \n          下一等级所需业绩\n           **/\n        set upper_contribution_amount(value: number) {\n            pb_1.Message.setField(this, 9, value);\n        }\n        static fromObject(data: {\n            id?: number;\n            parent?: ReturnType<typeof User.prototype.toObject>;\n            sub_user_count?: number;\n            cumulative_commission_amount?: number;\n            available_commission_amount?: number;\n            daily_contribution_amount?: number;\n            total_contribution_amount?: number;\n            contribution_level?: number;\n            upper_contribution_amount?: number;\n        }): User {\n            const message = new User({});\n            if (data.id != null) {\n                message.id = data.id;\n            }\n            if (data.parent != null) {\n                message.parent = User.fromObject(data.parent);\n            }\n            if (data.sub_user_count != null) {\n                message.sub_user_count = data.sub_user_count;\n            }\n            if (data.cumulative_commission_amount != null) {\n                message.cumulative_commission_amount = data.cumulative_commission_amount;\n            }\n            if (data.available_commission_amount != null) {\n                message.available_commission_amount = data.available_commission_amount;\n            }\n            if (data.daily_contribution_amount != null) {\n                message.daily_contribution_amount = data.daily_contribution_amount;\n            }\n            if (data.total_contribution_amount != null) {\n                message.total_contribution_amount = data.total_contribution_amount;\n            }\n            if (data.contribution_level != null) {\n                message.contribution_level = data.contribution_level;\n            }\n            if (data.upper_contribution_amount != null) {\n                message.upper_contribution_amount = data.upper_contribution_amount;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                id?: number;\n                parent?: ReturnType<typeof User.prototype.toObject>;\n                sub_user_count?: number;\n                cumulative_commission_amount?: number;\n                available_commission_amount?: number;\n                daily_contribution_amount?: number;\n                total_contribution_amount?: number;\n                contribution_level?: number;\n                upper_contribution_amount?: number;\n            } = {};\n            if (this.id != null) {\n                data.id = this.id;\n            }\n            if (this.parent != null) {\n                data.parent = this.parent.toObject();\n            }\n            if (this.sub_user_count != null) {\n                data.sub_user_count = this.sub_user_count;\n            }\n            if (this.cumulative_commission_amount != null) {\n                data.cumulative_commission_amount = this.cumulative_commission_amount;\n            }\n            if (this.available_commission_amount != null) {\n                data.available_commission_amount = this.available_commission_amount;\n            }\n            if (this.daily_contribution_amount != null) {\n                data.daily_contribution_amount = this.daily_contribution_amount;\n            }\n            if (this.total_contribution_amount != null) {\n                data.total_contribution_amount = this.total_contribution_amount;\n            }\n            if (this.contribution_level != null) {\n                data.contribution_level = this.contribution_level;\n            }\n            if (this.upper_contribution_amount != null) {\n                data.upper_contribution_amount = this.upper_contribution_amount;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.id != 0) writer.writeInt64(1, this.id);\n            if (this.has_parent)\n                writer.writeMessage(2, this.parent, () => this.parent.serialize(writer));\n            if (this.sub_user_count != 0) writer.writeInt32(3, this.sub_user_count);\n            if (this.cumulative_commission_amount != 0)\n                writer.writeInt64(4, this.cumulative_commission_amount);\n            if (this.available_commission_amount != 0)\n                writer.writeInt64(5, this.available_commission_amount);\n            if (this.daily_contribution_amount != 0)\n                writer.writeInt64(6, this.daily_contribution_amount);\n            if (this.total_contribution_amount != 0)\n                writer.writeInt64(7, this.total_contribution_amount);\n            if (this.contribution_level != 0) writer.writeInt64(8, this.contribution_level);\n            if (this.upper_contribution_amount != 0)\n                writer.writeInt64(9, this.upper_contribution_amount);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new User();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.id = reader.readInt64();\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.parent,\n                            () => (message.parent = User.deserialize(reader))\n                        );\n                        break;\n                    case 3:\n                        message.sub_user_count = reader.readInt32();\n                        break;\n                    case 4:\n                        message.cumulative_commission_amount = reader.readInt64();\n                        break;\n                    case 5:\n                        message.available_commission_amount = reader.readInt64();\n                        break;\n                    case 6:\n                        message.daily_contribution_amount = reader.readInt64();\n                        break;\n                    case 7:\n                        message.total_contribution_amount = reader.readInt64();\n                        break;\n                    case 8:\n                        message.contribution_level = reader.readInt64();\n                        break;\n                    case 9:\n                        message.upper_contribution_amount = reader.readInt64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): User {\n            return User.deserialize(bytes);\n        }\n    }\n\n    /** \n      个人配置及汇总信息\n       promoter/info/\n       **/\n    export class PromoterInfoReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      detail?: boolean;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"detail\" in data && data.detail != undefined) {\n                    this.detail = data.detail;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n\n        /** \n          是否展示详细信息（大厅只需要返回 enable 字段时，可以设置此字段为 false）\n           **/\n        get detail() {\n            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;\n        }\n\n        /** \n          是否展示详细信息（大厅只需要返回 enable 字段时，可以设置此字段为 false）\n           **/\n        set detail(value: boolean) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            detail?: boolean;\n        }): PromoterInfoReq {\n            const message = new PromoterInfoReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.detail != null) {\n                message.detail = data.detail;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                detail?: boolean;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.detail != null) {\n                data.detail = this.detail;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.detail != false) writer.writeBool(2, this.detail);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterInfoReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PromoterInfoReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.detail = reader.readBool();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PromoterInfoReq {\n            return PromoterInfoReq.deserialize(bytes);\n        }\n    }\n    export class PromoterInfoResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: PromoterInfoResp.RespData;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(\n                this,\n                PromoterInfoResp.RespData,\n                2\n            ) as PromoterInfoResp.RespData;\n        }\n        set data(value: PromoterInfoResp.RespData) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof PromoterInfoResp.RespData.prototype.toObject>;\n        }): PromoterInfoResp {\n            const message = new PromoterInfoResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = PromoterInfoResp.RespData.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof PromoterInfoResp.RespData.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterInfoResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PromoterInfoResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () => (message.data = PromoterInfoResp.RespData.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PromoterInfoResp {\n            return PromoterInfoResp.deserialize(bytes);\n        }\n    }\n    export namespace PromoterInfoResp {\n        export class RespData extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          enable?: boolean;\n                          product_conf?: ProductConf;\n                          user?: User;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"enable\" in data && data.enable != undefined) {\n                        this.enable = data.enable;\n                    }\n                    if (\"product_conf\" in data && data.product_conf != undefined) {\n                        this.product_conf = data.product_conf;\n                    }\n                    if (\"user\" in data && data.user != undefined) {\n                        this.user = data.user;\n                    }\n                }\n            }\n            get enable() {\n                return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;\n            }\n            set enable(value: boolean) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get product_conf() {\n                return pb_1.Message.getWrapperField(this, ProductConf, 2) as ProductConf;\n            }\n            set product_conf(value: ProductConf) {\n                pb_1.Message.setWrapperField(this, 2, value);\n            }\n            get has_product_conf() {\n                return pb_1.Message.getField(this, 2) != null;\n            }\n            get user() {\n                return pb_1.Message.getWrapperField(this, User, 3) as User;\n            }\n            set user(value: User) {\n                pb_1.Message.setWrapperField(this, 3, value);\n            }\n            get has_user() {\n                return pb_1.Message.getField(this, 3) != null;\n            }\n            static fromObject(data: {\n                enable?: boolean;\n                product_conf?: ReturnType<typeof ProductConf.prototype.toObject>;\n                user?: ReturnType<typeof User.prototype.toObject>;\n            }): RespData {\n                const message = new RespData({});\n                if (data.enable != null) {\n                    message.enable = data.enable;\n                }\n                if (data.product_conf != null) {\n                    message.product_conf = ProductConf.fromObject(data.product_conf);\n                }\n                if (data.user != null) {\n                    message.user = User.fromObject(data.user);\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    enable?: boolean;\n                    product_conf?: ReturnType<typeof ProductConf.prototype.toObject>;\n                    user?: ReturnType<typeof User.prototype.toObject>;\n                } = {};\n                if (this.enable != null) {\n                    data.enable = this.enable;\n                }\n                if (this.product_conf != null) {\n                    data.product_conf = this.product_conf.toObject();\n                }\n                if (this.user != null) {\n                    data.user = this.user.toObject();\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.enable != false) writer.writeBool(1, this.enable);\n                if (this.has_product_conf)\n                    writer.writeMessage(2, this.product_conf, () =>\n                        this.product_conf.serialize(writer)\n                    );\n                if (this.has_user)\n                    writer.writeMessage(3, this.user, () => this.user.serialize(writer));\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new RespData();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.enable = reader.readBool();\n                            break;\n                        case 2:\n                            reader.readMessage(\n                                message.product_conf,\n                                () => (message.product_conf = ProductConf.deserialize(reader))\n                            );\n                            break;\n                        case 3:\n                            reader.readMessage(\n                                message.user,\n                                () => (message.user = User.deserialize(reader))\n                            );\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): RespData {\n                return RespData.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      领取佣金\n       promoter/commission/receive/\n       **/\n    export class PromoterReceiveCommissionReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n        }): PromoterReceiveCommissionReq {\n            const message = new PromoterReceiveCommissionReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterReceiveCommissionReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PromoterReceiveCommissionReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PromoterReceiveCommissionReq {\n            return PromoterReceiveCommissionReq.deserialize(bytes);\n        }\n    }\n    export class PromoterReceiveCommissionResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n        }): PromoterReceiveCommissionResp {\n            const message = new PromoterReceiveCommissionResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterReceiveCommissionResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PromoterReceiveCommissionResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PromoterReceiveCommissionResp {\n            return PromoterReceiveCommissionResp.deserialize(bytes);\n        }\n    }\n\n    /** \n      领取佣金记录\n       promoter/commission/receive_records/\n       **/\n    export class PromoterCommissionRecordsReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      start_time?: number;\n                      end_time?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"start_time\" in data && data.start_time != undefined) {\n                    this.start_time = data.start_time;\n                }\n                if (\"end_time\" in data && data.end_time != undefined) {\n                    this.end_time = data.end_time;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get start_time() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n        set start_time(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get end_time() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n        set end_time(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            start_time?: number;\n            end_time?: number;\n        }): PromoterCommissionRecordsReq {\n            const message = new PromoterCommissionRecordsReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.start_time != null) {\n                message.start_time = data.start_time;\n            }\n            if (data.end_time != null) {\n                message.end_time = data.end_time;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                start_time?: number;\n                end_time?: number;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.start_time != null) {\n                data.start_time = this.start_time;\n            }\n            if (this.end_time != null) {\n                data.end_time = this.end_time;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.start_time != 0) writer.writeInt64(2, this.start_time);\n            if (this.end_time != 0) writer.writeInt64(3, this.end_time);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterCommissionRecordsReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PromoterCommissionRecordsReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.start_time = reader.readInt64();\n                        break;\n                    case 3:\n                        message.end_time = reader.readInt64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PromoterCommissionRecordsReq {\n            return PromoterCommissionRecordsReq.deserialize(bytes);\n        }\n    }\n    export class PromoterCommissionRecordsResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: PromoterCommissionRecordsResp.RespData;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(\n                this,\n                PromoterCommissionRecordsResp.RespData,\n                2\n            ) as PromoterCommissionRecordsResp.RespData;\n        }\n        set data(value: PromoterCommissionRecordsResp.RespData) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof PromoterCommissionRecordsResp.RespData.prototype.toObject>;\n        }): PromoterCommissionRecordsResp {\n            const message = new PromoterCommissionRecordsResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = PromoterCommissionRecordsResp.RespData.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof PromoterCommissionRecordsResp.RespData.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterCommissionRecordsResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PromoterCommissionRecordsResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () =>\n                                (message.data =\n                                    PromoterCommissionRecordsResp.RespData.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PromoterCommissionRecordsResp {\n            return PromoterCommissionRecordsResp.deserialize(bytes);\n        }\n    }\n    export namespace PromoterCommissionRecordsResp {\n        export class Record extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          amount?: number;\n                          created_at?: number;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"amount\" in data && data.amount != undefined) {\n                        this.amount = data.amount;\n                    }\n                    if (\"created_at\" in data && data.created_at != undefined) {\n                        this.created_at = data.created_at;\n                    }\n                }\n            }\n            get amount() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n            set amount(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get created_at() {\n                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n            }\n            set created_at(value: number) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            static fromObject(data: { amount?: number; created_at?: number }): Record {\n                const message = new Record({});\n                if (data.amount != null) {\n                    message.amount = data.amount;\n                }\n                if (data.created_at != null) {\n                    message.created_at = data.created_at;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    amount?: number;\n                    created_at?: number;\n                } = {};\n                if (this.amount != null) {\n                    data.amount = this.amount;\n                }\n                if (this.created_at != null) {\n                    data.created_at = this.created_at;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.amount != 0) writer.writeInt64(1, this.amount);\n                if (this.created_at != 0) writer.writeInt64(2, this.created_at);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Record {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new Record();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.amount = reader.readInt64();\n                            break;\n                        case 2:\n                            message.created_at = reader.readInt64();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): Record {\n                return Record.deserialize(bytes);\n            }\n        }\n        export class RespData extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          records?: PromoterCommissionRecordsResp.Record[];\n                          total_amount?: number;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [1],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"records\" in data && data.records != undefined) {\n                        this.records = data.records;\n                    }\n                    if (\"total_amount\" in data && data.total_amount != undefined) {\n                        this.total_amount = data.total_amount;\n                    }\n                }\n            }\n            get records() {\n                return pb_1.Message.getRepeatedWrapperField(\n                    this,\n                    PromoterCommissionRecordsResp.Record,\n                    1\n                ) as PromoterCommissionRecordsResp.Record[];\n            }\n            set records(value: PromoterCommissionRecordsResp.Record[]) {\n                pb_1.Message.setRepeatedWrapperField(this, 1, value);\n            }\n            get total_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n            }\n            set total_amount(value: number) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            static fromObject(data: {\n                records?: ReturnType<\n                    typeof PromoterCommissionRecordsResp.Record.prototype.toObject\n                >[];\n                total_amount?: number;\n            }): RespData {\n                const message = new RespData({});\n                if (data.records != null) {\n                    message.records = data.records.map((item) =>\n                        PromoterCommissionRecordsResp.Record.fromObject(item)\n                    );\n                }\n                if (data.total_amount != null) {\n                    message.total_amount = data.total_amount;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    records?: ReturnType<\n                        typeof PromoterCommissionRecordsResp.Record.prototype.toObject\n                    >[];\n                    total_amount?: number;\n                } = {};\n                if (this.records != null) {\n                    data.records = this.records.map((item: PromoterCommissionRecordsResp.Record) =>\n                        item.toObject()\n                    );\n                }\n                if (this.total_amount != null) {\n                    data.total_amount = this.total_amount;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.records.length)\n                    writer.writeRepeatedMessage(\n                        1,\n                        this.records,\n                        (item: PromoterCommissionRecordsResp.Record) => item.serialize(writer)\n                    );\n                if (this.total_amount != 0) writer.writeInt64(2, this.total_amount);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new RespData();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            reader.readMessage(message.records, () =>\n                                pb_1.Message.addToRepeatedWrapperField(\n                                    message,\n                                    1,\n                                    PromoterCommissionRecordsResp.Record.deserialize(reader),\n                                    PromoterCommissionRecordsResp.Record\n                                )\n                            );\n                            break;\n                        case 2:\n                            message.total_amount = reader.readInt64();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): RespData {\n                return RespData.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      我的每日佣金数据\n       promoter/commission/daily_stats/\n       **/\n    export class PromoterDailyCommissionReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      page_no?: number;\n                      page_size?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"page_no\" in data && data.page_no != undefined) {\n                    this.page_no = data.page_no;\n                }\n                if (\"page_size\" in data && data.page_size != undefined) {\n                    this.page_size = data.page_size;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get page_no() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n        set page_no(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get page_size() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n        set page_size(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            page_no?: number;\n            page_size?: number;\n        }): PromoterDailyCommissionReq {\n            const message = new PromoterDailyCommissionReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.page_no != null) {\n                message.page_no = data.page_no;\n            }\n            if (data.page_size != null) {\n                message.page_size = data.page_size;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                page_no?: number;\n                page_size?: number;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.page_no != null) {\n                data.page_no = this.page_no;\n            }\n            if (this.page_size != null) {\n                data.page_size = this.page_size;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.page_no != 0) writer.writeInt32(2, this.page_no);\n            if (this.page_size != 0) writer.writeInt32(3, this.page_size);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterDailyCommissionReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PromoterDailyCommissionReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.page_no = reader.readInt32();\n                        break;\n                    case 3:\n                        message.page_size = reader.readInt32();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PromoterDailyCommissionReq {\n            return PromoterDailyCommissionReq.deserialize(bytes);\n        }\n    }\n    export class PromoterDailyCommissionResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: PromoterDailyCommissionResp.RespData;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(\n                this,\n                PromoterDailyCommissionResp.RespData,\n                2\n            ) as PromoterDailyCommissionResp.RespData;\n        }\n        set data(value: PromoterDailyCommissionResp.RespData) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof PromoterDailyCommissionResp.RespData.prototype.toObject>;\n        }): PromoterDailyCommissionResp {\n            const message = new PromoterDailyCommissionResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = PromoterDailyCommissionResp.RespData.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof PromoterDailyCommissionResp.RespData.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterDailyCommissionResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PromoterDailyCommissionResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () =>\n                                (message.data =\n                                    PromoterDailyCommissionResp.RespData.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PromoterDailyCommissionResp {\n            return PromoterDailyCommissionResp.deserialize(bytes);\n        }\n    }\n    export namespace PromoterDailyCommissionResp {\n        export class DailyStat extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          day?: number;\n                          commission_amount?: number;\n                          child_commission_amount?: number;\n                          sub_commission_amount?: number;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"day\" in data && data.day != undefined) {\n                        this.day = data.day;\n                    }\n                    if (\"commission_amount\" in data && data.commission_amount != undefined) {\n                        this.commission_amount = data.commission_amount;\n                    }\n                    if (\n                        \"child_commission_amount\" in data &&\n                        data.child_commission_amount != undefined\n                    ) {\n                        this.child_commission_amount = data.child_commission_amount;\n                    }\n                    if (\n                        \"sub_commission_amount\" in data &&\n                        data.sub_commission_amount != undefined\n                    ) {\n                        this.sub_commission_amount = data.sub_commission_amount;\n                    }\n                }\n            }\n            get day() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n            set day(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get commission_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n            }\n            set commission_amount(value: number) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            get child_commission_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n            }\n            set child_commission_amount(value: number) {\n                pb_1.Message.setField(this, 3, value);\n            }\n            get sub_commission_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n            }\n            set sub_commission_amount(value: number) {\n                pb_1.Message.setField(this, 4, value);\n            }\n            static fromObject(data: {\n                day?: number;\n                commission_amount?: number;\n                child_commission_amount?: number;\n                sub_commission_amount?: number;\n            }): DailyStat {\n                const message = new DailyStat({});\n                if (data.day != null) {\n                    message.day = data.day;\n                }\n                if (data.commission_amount != null) {\n                    message.commission_amount = data.commission_amount;\n                }\n                if (data.child_commission_amount != null) {\n                    message.child_commission_amount = data.child_commission_amount;\n                }\n                if (data.sub_commission_amount != null) {\n                    message.sub_commission_amount = data.sub_commission_amount;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    day?: number;\n                    commission_amount?: number;\n                    child_commission_amount?: number;\n                    sub_commission_amount?: number;\n                } = {};\n                if (this.day != null) {\n                    data.day = this.day;\n                }\n                if (this.commission_amount != null) {\n                    data.commission_amount = this.commission_amount;\n                }\n                if (this.child_commission_amount != null) {\n                    data.child_commission_amount = this.child_commission_amount;\n                }\n                if (this.sub_commission_amount != null) {\n                    data.sub_commission_amount = this.sub_commission_amount;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.day != 0) writer.writeInt64(1, this.day);\n                if (this.commission_amount != 0) writer.writeInt64(2, this.commission_amount);\n                if (this.child_commission_amount != 0)\n                    writer.writeInt64(3, this.child_commission_amount);\n                if (this.sub_commission_amount != 0)\n                    writer.writeInt64(4, this.sub_commission_amount);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DailyStat {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new DailyStat();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.day = reader.readInt64();\n                            break;\n                        case 2:\n                            message.commission_amount = reader.readInt64();\n                            break;\n                        case 3:\n                            message.child_commission_amount = reader.readInt64();\n                            break;\n                        case 4:\n                            message.sub_commission_amount = reader.readInt64();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): DailyStat {\n                return DailyStat.deserialize(bytes);\n            }\n        }\n        export class RespData extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          total?: number;\n                          total_commission_amount?: number;\n                          total_child_commission_amount?: number;\n                          total_sub_commission_amount?: number;\n                          daily_stats?: PromoterDailyCommissionResp.DailyStat[];\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [5],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"total\" in data && data.total != undefined) {\n                        this.total = data.total;\n                    }\n                    if (\n                        \"total_commission_amount\" in data &&\n                        data.total_commission_amount != undefined\n                    ) {\n                        this.total_commission_amount = data.total_commission_amount;\n                    }\n                    if (\n                        \"total_child_commission_amount\" in data &&\n                        data.total_child_commission_amount != undefined\n                    ) {\n                        this.total_child_commission_amount = data.total_child_commission_amount;\n                    }\n                    if (\n                        \"total_sub_commission_amount\" in data &&\n                        data.total_sub_commission_amount != undefined\n                    ) {\n                        this.total_sub_commission_amount = data.total_sub_commission_amount;\n                    }\n                    if (\"daily_stats\" in data && data.daily_stats != undefined) {\n                        this.daily_stats = data.daily_stats;\n                    }\n                }\n            }\n\n            /** \n              数据数量\n               **/\n            get total() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n\n            /** \n              数据数量\n               **/\n            set total(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n\n            /** \n              总佣金\n               **/\n            get total_commission_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n            }\n\n            /** \n              总佣金\n               **/\n            set total_commission_amount(value: number) {\n                pb_1.Message.setField(this, 2, value);\n            }\n\n            /** \n              直属佣金\n               **/\n            get total_child_commission_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n            }\n\n            /** \n              直属佣金\n               **/\n            set total_child_commission_amount(value: number) {\n                pb_1.Message.setField(this, 3, value);\n            }\n\n            /** \n              下属佣金\n               **/\n            get total_sub_commission_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n            }\n\n            /** \n              下属佣金\n               **/\n            set total_sub_commission_amount(value: number) {\n                pb_1.Message.setField(this, 4, value);\n            }\n            get daily_stats() {\n                return pb_1.Message.getRepeatedWrapperField(\n                    this,\n                    PromoterDailyCommissionResp.DailyStat,\n                    5\n                ) as PromoterDailyCommissionResp.DailyStat[];\n            }\n            set daily_stats(value: PromoterDailyCommissionResp.DailyStat[]) {\n                pb_1.Message.setRepeatedWrapperField(this, 5, value);\n            }\n            static fromObject(data: {\n                total?: number;\n                total_commission_amount?: number;\n                total_child_commission_amount?: number;\n                total_sub_commission_amount?: number;\n                daily_stats?: ReturnType<\n                    typeof PromoterDailyCommissionResp.DailyStat.prototype.toObject\n                >[];\n            }): RespData {\n                const message = new RespData({});\n                if (data.total != null) {\n                    message.total = data.total;\n                }\n                if (data.total_commission_amount != null) {\n                    message.total_commission_amount = data.total_commission_amount;\n                }\n                if (data.total_child_commission_amount != null) {\n                    message.total_child_commission_amount = data.total_child_commission_amount;\n                }\n                if (data.total_sub_commission_amount != null) {\n                    message.total_sub_commission_amount = data.total_sub_commission_amount;\n                }\n                if (data.daily_stats != null) {\n                    message.daily_stats = data.daily_stats.map((item) =>\n                        PromoterDailyCommissionResp.DailyStat.fromObject(item)\n                    );\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    total?: number;\n                    total_commission_amount?: number;\n                    total_child_commission_amount?: number;\n                    total_sub_commission_amount?: number;\n                    daily_stats?: ReturnType<\n                        typeof PromoterDailyCommissionResp.DailyStat.prototype.toObject\n                    >[];\n                } = {};\n                if (this.total != null) {\n                    data.total = this.total;\n                }\n                if (this.total_commission_amount != null) {\n                    data.total_commission_amount = this.total_commission_amount;\n                }\n                if (this.total_child_commission_amount != null) {\n                    data.total_child_commission_amount = this.total_child_commission_amount;\n                }\n                if (this.total_sub_commission_amount != null) {\n                    data.total_sub_commission_amount = this.total_sub_commission_amount;\n                }\n                if (this.daily_stats != null) {\n                    data.daily_stats = this.daily_stats.map(\n                        (item: PromoterDailyCommissionResp.DailyStat) => item.toObject()\n                    );\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.total != 0) writer.writeInt32(1, this.total);\n                if (this.total_commission_amount != 0)\n                    writer.writeInt64(2, this.total_commission_amount);\n                if (this.total_child_commission_amount != 0)\n                    writer.writeInt64(3, this.total_child_commission_amount);\n                if (this.total_sub_commission_amount != 0)\n                    writer.writeInt64(4, this.total_sub_commission_amount);\n                if (this.daily_stats.length)\n                    writer.writeRepeatedMessage(\n                        5,\n                        this.daily_stats,\n                        (item: PromoterDailyCommissionResp.DailyStat) => item.serialize(writer)\n                    );\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new RespData();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.total = reader.readInt32();\n                            break;\n                        case 2:\n                            message.total_commission_amount = reader.readInt64();\n                            break;\n                        case 3:\n                            message.total_child_commission_amount = reader.readInt64();\n                            break;\n                        case 4:\n                            message.total_sub_commission_amount = reader.readInt64();\n                            break;\n                        case 5:\n                            reader.readMessage(message.daily_stats, () =>\n                                pb_1.Message.addToRepeatedWrapperField(\n                                    message,\n                                    5,\n                                    PromoterDailyCommissionResp.DailyStat.deserialize(reader),\n                                    PromoterDailyCommissionResp.DailyStat\n                                )\n                            );\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): RespData {\n                return RespData.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      下级佣金贡献\n       promoter/commission/sub_stats/\n       **/\n    export class PromoterSubCommissionReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      page_no?: number;\n                      page_size?: number;\n                      start_time?: number;\n                      end_time?: number;\n                      order_by?: PromoterSubCommissionReq.OrderBy;\n                      order_type?: PromoterSubCommissionReq.OrderType;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"page_no\" in data && data.page_no != undefined) {\n                    this.page_no = data.page_no;\n                }\n                if (\"page_size\" in data && data.page_size != undefined) {\n                    this.page_size = data.page_size;\n                }\n                if (\"start_time\" in data && data.start_time != undefined) {\n                    this.start_time = data.start_time;\n                }\n                if (\"end_time\" in data && data.end_time != undefined) {\n                    this.end_time = data.end_time;\n                }\n                if (\"order_by\" in data && data.order_by != undefined) {\n                    this.order_by = data.order_by;\n                }\n                if (\"order_type\" in data && data.order_type != undefined) {\n                    this.order_type = data.order_type;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get page_no() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n        set page_no(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get page_size() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n        set page_size(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        get start_time() {\n            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n        }\n        set start_time(value: number) {\n            pb_1.Message.setField(this, 4, value);\n        }\n        get end_time() {\n            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;\n        }\n        set end_time(value: number) {\n            pb_1.Message.setField(this, 5, value);\n        }\n        get order_by() {\n            return pb_1.Message.getFieldWithDefault(\n                this,\n                6,\n                PromoterSubCommissionReq.OrderBy.ORDER_BY_UNSPECIFIED\n            ) as PromoterSubCommissionReq.OrderBy;\n        }\n        set order_by(value: PromoterSubCommissionReq.OrderBy) {\n            pb_1.Message.setField(this, 6, value);\n        }\n        get order_type() {\n            return pb_1.Message.getFieldWithDefault(\n                this,\n                7,\n                PromoterSubCommissionReq.OrderType.ASC\n            ) as PromoterSubCommissionReq.OrderType;\n        }\n        set order_type(value: PromoterSubCommissionReq.OrderType) {\n            pb_1.Message.setField(this, 7, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            page_no?: number;\n            page_size?: number;\n            start_time?: number;\n            end_time?: number;\n            order_by?: PromoterSubCommissionReq.OrderBy;\n            order_type?: PromoterSubCommissionReq.OrderType;\n        }): PromoterSubCommissionReq {\n            const message = new PromoterSubCommissionReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.page_no != null) {\n                message.page_no = data.page_no;\n            }\n            if (data.page_size != null) {\n                message.page_size = data.page_size;\n            }\n            if (data.start_time != null) {\n                message.start_time = data.start_time;\n            }\n            if (data.end_time != null) {\n                message.end_time = data.end_time;\n            }\n            if (data.order_by != null) {\n                message.order_by = data.order_by;\n            }\n            if (data.order_type != null) {\n                message.order_type = data.order_type;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                page_no?: number;\n                page_size?: number;\n                start_time?: number;\n                end_time?: number;\n                order_by?: PromoterSubCommissionReq.OrderBy;\n                order_type?: PromoterSubCommissionReq.OrderType;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.page_no != null) {\n                data.page_no = this.page_no;\n            }\n            if (this.page_size != null) {\n                data.page_size = this.page_size;\n            }\n            if (this.start_time != null) {\n                data.start_time = this.start_time;\n            }\n            if (this.end_time != null) {\n                data.end_time = this.end_time;\n            }\n            if (this.order_by != null) {\n                data.order_by = this.order_by;\n            }\n            if (this.order_type != null) {\n                data.order_type = this.order_type;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.page_no != 0) writer.writeInt32(2, this.page_no);\n            if (this.page_size != 0) writer.writeInt32(3, this.page_size);\n            if (this.start_time != 0) writer.writeInt64(4, this.start_time);\n            if (this.end_time != 0) writer.writeInt64(5, this.end_time);\n            if (this.order_by != PromoterSubCommissionReq.OrderBy.ORDER_BY_UNSPECIFIED)\n                writer.writeEnum(6, this.order_by);\n            if (this.order_type != PromoterSubCommissionReq.OrderType.ASC)\n                writer.writeEnum(7, this.order_type);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterSubCommissionReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PromoterSubCommissionReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.page_no = reader.readInt32();\n                        break;\n                    case 3:\n                        message.page_size = reader.readInt32();\n                        break;\n                    case 4:\n                        message.start_time = reader.readInt64();\n                        break;\n                    case 5:\n                        message.end_time = reader.readInt64();\n                        break;\n                    case 6:\n                        message.order_by = reader.readEnum();\n                        break;\n                    case 7:\n                        message.order_type = reader.readEnum();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PromoterSubCommissionReq {\n            return PromoterSubCommissionReq.deserialize(bytes);\n        }\n    }\n    export namespace PromoterSubCommissionReq {\n        export enum OrderBy {\n            ORDER_BY_UNSPECIFIED = 0,\n            ORDER_BY_CHILD = 1,\n            ORDER_BY_SUB = 2,\n\n            /** \n              默认按照bind_at倒序\n               **/\n            ORDER_BY_BIND_AT = 3,\n        }\n        export enum OrderType {\n            ASC = 0,\n            DESC = 1,\n        }\n    }\n    export class PromoterSubCommissionResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: PromoterSubCommissionResp.RespData;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(\n                this,\n                PromoterSubCommissionResp.RespData,\n                2\n            ) as PromoterSubCommissionResp.RespData;\n        }\n        set data(value: PromoterSubCommissionResp.RespData) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof PromoterSubCommissionResp.RespData.prototype.toObject>;\n        }): PromoterSubCommissionResp {\n            const message = new PromoterSubCommissionResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = PromoterSubCommissionResp.RespData.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof PromoterSubCommissionResp.RespData.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterSubCommissionResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PromoterSubCommissionResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () =>\n                                (message.data =\n                                    PromoterSubCommissionResp.RespData.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PromoterSubCommissionResp {\n            return PromoterSubCommissionResp.deserialize(bytes);\n        }\n    }\n    export namespace PromoterSubCommissionResp {\n        export class SubCommission extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          user_id?: number;\n                          child_amount?: number;\n                          sub_amount?: number;\n                          bind_at?: number;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"user_id\" in data && data.user_id != undefined) {\n                        this.user_id = data.user_id;\n                    }\n                    if (\"child_amount\" in data && data.child_amount != undefined) {\n                        this.child_amount = data.child_amount;\n                    }\n                    if (\"sub_amount\" in data && data.sub_amount != undefined) {\n                        this.sub_amount = data.sub_amount;\n                    }\n                    if (\"bind_at\" in data && data.bind_at != undefined) {\n                        this.bind_at = data.bind_at;\n                    }\n                }\n            }\n            get user_id() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n            set user_id(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n\n            /** \n              直属贡献\n               **/\n            get child_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n            }\n\n            /** \n              直属贡献\n               **/\n            set child_amount(value: number) {\n                pb_1.Message.setField(this, 2, value);\n            }\n\n            /** \n              下属贡献\n               **/\n            get sub_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n            }\n\n            /** \n              下属贡献\n               **/\n            set sub_amount(value: number) {\n                pb_1.Message.setField(this, 3, value);\n            }\n\n            /** \n              直属绑定时间\n               **/\n            get bind_at() {\n                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n            }\n\n            /** \n              直属绑定时间\n               **/\n            set bind_at(value: number) {\n                pb_1.Message.setField(this, 4, value);\n            }\n            static fromObject(data: {\n                user_id?: number;\n                child_amount?: number;\n                sub_amount?: number;\n                bind_at?: number;\n            }): SubCommission {\n                const message = new SubCommission({});\n                if (data.user_id != null) {\n                    message.user_id = data.user_id;\n                }\n                if (data.child_amount != null) {\n                    message.child_amount = data.child_amount;\n                }\n                if (data.sub_amount != null) {\n                    message.sub_amount = data.sub_amount;\n                }\n                if (data.bind_at != null) {\n                    message.bind_at = data.bind_at;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    user_id?: number;\n                    child_amount?: number;\n                    sub_amount?: number;\n                    bind_at?: number;\n                } = {};\n                if (this.user_id != null) {\n                    data.user_id = this.user_id;\n                }\n                if (this.child_amount != null) {\n                    data.child_amount = this.child_amount;\n                }\n                if (this.sub_amount != null) {\n                    data.sub_amount = this.sub_amount;\n                }\n                if (this.bind_at != null) {\n                    data.bind_at = this.bind_at;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.user_id != 0) writer.writeInt64(1, this.user_id);\n                if (this.child_amount != 0) writer.writeInt64(2, this.child_amount);\n                if (this.sub_amount != 0) writer.writeInt64(3, this.sub_amount);\n                if (this.bind_at != 0) writer.writeInt64(4, this.bind_at);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubCommission {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new SubCommission();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.user_id = reader.readInt64();\n                            break;\n                        case 2:\n                            message.child_amount = reader.readInt64();\n                            break;\n                        case 3:\n                            message.sub_amount = reader.readInt64();\n                            break;\n                        case 4:\n                            message.bind_at = reader.readInt64();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): SubCommission {\n                return SubCommission.deserialize(bytes);\n            }\n        }\n        export class RespData extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          total?: number;\n                          sub_commissions?: PromoterSubCommissionResp.SubCommission[];\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [2],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"total\" in data && data.total != undefined) {\n                        this.total = data.total;\n                    }\n                    if (\"sub_commissions\" in data && data.sub_commissions != undefined) {\n                        this.sub_commissions = data.sub_commissions;\n                    }\n                }\n            }\n\n            /** \n              数据数量\n               **/\n            get total() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n\n            /** \n              数据数量\n               **/\n            set total(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get sub_commissions() {\n                return pb_1.Message.getRepeatedWrapperField(\n                    this,\n                    PromoterSubCommissionResp.SubCommission,\n                    2\n                ) as PromoterSubCommissionResp.SubCommission[];\n            }\n            set sub_commissions(value: PromoterSubCommissionResp.SubCommission[]) {\n                pb_1.Message.setRepeatedWrapperField(this, 2, value);\n            }\n            static fromObject(data: {\n                total?: number;\n                sub_commissions?: ReturnType<\n                    typeof PromoterSubCommissionResp.SubCommission.prototype.toObject\n                >[];\n            }): RespData {\n                const message = new RespData({});\n                if (data.total != null) {\n                    message.total = data.total;\n                }\n                if (data.sub_commissions != null) {\n                    message.sub_commissions = data.sub_commissions.map((item) =>\n                        PromoterSubCommissionResp.SubCommission.fromObject(item)\n                    );\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    total?: number;\n                    sub_commissions?: ReturnType<\n                        typeof PromoterSubCommissionResp.SubCommission.prototype.toObject\n                    >[];\n                } = {};\n                if (this.total != null) {\n                    data.total = this.total;\n                }\n                if (this.sub_commissions != null) {\n                    data.sub_commissions = this.sub_commissions.map(\n                        (item: PromoterSubCommissionResp.SubCommission) => item.toObject()\n                    );\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.total != 0) writer.writeInt32(1, this.total);\n                if (this.sub_commissions.length)\n                    writer.writeRepeatedMessage(\n                        2,\n                        this.sub_commissions,\n                        (item: PromoterSubCommissionResp.SubCommission) => item.serialize(writer)\n                    );\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new RespData();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.total = reader.readInt32();\n                            break;\n                        case 2:\n                            reader.readMessage(message.sub_commissions, () =>\n                                pb_1.Message.addToRepeatedWrapperField(\n                                    message,\n                                    2,\n                                    PromoterSubCommissionResp.SubCommission.deserialize(reader),\n                                    PromoterSubCommissionResp.SubCommission\n                                )\n                            );\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): RespData {\n                return RespData.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      我的每日业绩\n       promoter/contribution/daily_stats/\n       **/\n    export class PromoterDailyContributionReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      page_no?: number;\n                      page_size?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"page_no\" in data && data.page_no != undefined) {\n                    this.page_no = data.page_no;\n                }\n                if (\"page_size\" in data && data.page_size != undefined) {\n                    this.page_size = data.page_size;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get page_no() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n        set page_no(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get page_size() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n        set page_size(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            page_no?: number;\n            page_size?: number;\n        }): PromoterDailyContributionReq {\n            const message = new PromoterDailyContributionReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.page_no != null) {\n                message.page_no = data.page_no;\n            }\n            if (data.page_size != null) {\n                message.page_size = data.page_size;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                page_no?: number;\n                page_size?: number;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.page_no != null) {\n                data.page_no = this.page_no;\n            }\n            if (this.page_size != null) {\n                data.page_size = this.page_size;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.page_no != 0) writer.writeInt32(2, this.page_no);\n            if (this.page_size != 0) writer.writeInt32(3, this.page_size);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterDailyContributionReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PromoterDailyContributionReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.page_no = reader.readInt32();\n                        break;\n                    case 3:\n                        message.page_size = reader.readInt32();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PromoterDailyContributionReq {\n            return PromoterDailyContributionReq.deserialize(bytes);\n        }\n    }\n    export class PromoterDailyContributionResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: PromoterDailyContributionResp.RespData;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(\n                this,\n                PromoterDailyContributionResp.RespData,\n                2\n            ) as PromoterDailyContributionResp.RespData;\n        }\n        set data(value: PromoterDailyContributionResp.RespData) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof PromoterDailyContributionResp.RespData.prototype.toObject>;\n        }): PromoterDailyContributionResp {\n            const message = new PromoterDailyContributionResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = PromoterDailyContributionResp.RespData.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<typeof PromoterDailyContributionResp.RespData.prototype.toObject>;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PromoterDailyContributionResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PromoterDailyContributionResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () =>\n                                (message.data =\n                                    PromoterDailyContributionResp.RespData.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PromoterDailyContributionResp {\n            return PromoterDailyContributionResp.deserialize(bytes);\n        }\n    }\n    export namespace PromoterDailyContributionResp {\n        export class DailyStat extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          day?: number;\n                          child_contribution_amount?: number;\n                          sub_contribution_amount?: number;\n                          total_contribution_amount?: number;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"day\" in data && data.day != undefined) {\n                        this.day = data.day;\n                    }\n                    if (\n                        \"child_contribution_amount\" in data &&\n                        data.child_contribution_amount != undefined\n                    ) {\n                        this.child_contribution_amount = data.child_contribution_amount;\n                    }\n                    if (\n                        \"sub_contribution_amount\" in data &&\n                        data.sub_contribution_amount != undefined\n                    ) {\n                        this.sub_contribution_amount = data.sub_contribution_amount;\n                    }\n                    if (\n                        \"total_contribution_amount\" in data &&\n                        data.total_contribution_amount != undefined\n                    ) {\n                        this.total_contribution_amount = data.total_contribution_amount;\n                    }\n                }\n            }\n            get day() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n            set day(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get child_contribution_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n            }\n            set child_contribution_amount(value: number) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            get sub_contribution_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n            }\n            set sub_contribution_amount(value: number) {\n                pb_1.Message.setField(this, 3, value);\n            }\n            get total_contribution_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n            }\n            set total_contribution_amount(value: number) {\n                pb_1.Message.setField(this, 4, value);\n            }\n            static fromObject(data: {\n                day?: number;\n                child_contribution_amount?: number;\n                sub_contribution_amount?: number;\n                total_contribution_amount?: number;\n            }): DailyStat {\n                const message = new DailyStat({});\n                if (data.day != null) {\n                    message.day = data.day;\n                }\n                if (data.child_contribution_amount != null) {\n                    message.child_contribution_amount = data.child_contribution_amount;\n                }\n                if (data.sub_contribution_amount != null) {\n                    message.sub_contribution_amount = data.sub_contribution_amount;\n                }\n                if (data.total_contribution_amount != null) {\n                    message.total_contribution_amount = data.total_contribution_amount;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    day?: number;\n                    child_contribution_amount?: number;\n                    sub_contribution_amount?: number;\n                    total_contribution_amount?: number;\n                } = {};\n                if (this.day != null) {\n                    data.day = this.day;\n                }\n                if (this.child_contribution_amount != null) {\n                    data.child_contribution_amount = this.child_contribution_amount;\n                }\n                if (this.sub_contribution_amount != null) {\n                    data.sub_contribution_amount = this.sub_contribution_amount;\n                }\n                if (this.total_contribution_amount != null) {\n                    data.total_contribution_amount = this.total_contribution_amount;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.day != 0) writer.writeInt64(1, this.day);\n                if (this.child_contribution_amount != 0)\n                    writer.writeInt64(2, this.child_contribution_amount);\n                if (this.sub_contribution_amount != 0)\n                    writer.writeInt64(3, this.sub_contribution_amount);\n                if (this.total_contribution_amount != 0)\n                    writer.writeInt64(4, this.total_contribution_amount);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DailyStat {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new DailyStat();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.day = reader.readInt64();\n                            break;\n                        case 2:\n                            message.child_contribution_amount = reader.readInt64();\n                            break;\n                        case 3:\n                            message.sub_contribution_amount = reader.readInt64();\n                            break;\n                        case 4:\n                            message.total_contribution_amount = reader.readInt64();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): DailyStat {\n                return DailyStat.deserialize(bytes);\n            }\n        }\n        export class RespData extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          total?: number;\n                          daily_stats?: PromoterDailyContributionResp.DailyStat[];\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [2],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"total\" in data && data.total != undefined) {\n                        this.total = data.total;\n                    }\n                    if (\"daily_stats\" in data && data.daily_stats != undefined) {\n                        this.daily_stats = data.daily_stats;\n                    }\n                }\n            }\n\n            /** \n              数据数量\n               **/\n            get total() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n\n            /** \n              数据数量\n               **/\n            set total(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get daily_stats() {\n                return pb_1.Message.getRepeatedWrapperField(\n                    this,\n                    PromoterDailyContributionResp.DailyStat,\n                    2\n                ) as PromoterDailyContributionResp.DailyStat[];\n            }\n            set daily_stats(value: PromoterDailyContributionResp.DailyStat[]) {\n                pb_1.Message.setRepeatedWrapperField(this, 2, value);\n            }\n            static fromObject(data: {\n                total?: number;\n                daily_stats?: ReturnType<\n                    typeof PromoterDailyContributionResp.DailyStat.prototype.toObject\n                >[];\n            }): RespData {\n                const message = new RespData({});\n                if (data.total != null) {\n                    message.total = data.total;\n                }\n                if (data.daily_stats != null) {\n                    message.daily_stats = data.daily_stats.map((item) =>\n                        PromoterDailyContributionResp.DailyStat.fromObject(item)\n                    );\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    total?: number;\n                    daily_stats?: ReturnType<\n                        typeof PromoterDailyContributionResp.DailyStat.prototype.toObject\n                    >[];\n                } = {};\n                if (this.total != null) {\n                    data.total = this.total;\n                }\n                if (this.daily_stats != null) {\n                    data.daily_stats = this.daily_stats.map(\n                        (item: PromoterDailyContributionResp.DailyStat) => item.toObject()\n                    );\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.total != 0) writer.writeInt32(1, this.total);\n                if (this.daily_stats.length)\n                    writer.writeRepeatedMessage(\n                        2,\n                        this.daily_stats,\n                        (item: PromoterDailyContributionResp.DailyStat) => item.serialize(writer)\n                    );\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new RespData();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.total = reader.readInt32();\n                            break;\n                        case 2:\n                            reader.readMessage(message.daily_stats, () =>\n                                pb_1.Message.addToRepeatedWrapperField(\n                                    message,\n                                    2,\n                                    PromoterDailyContributionResp.DailyStat.deserialize(reader),\n                                    PromoterDailyContributionResp.DailyStat\n                                )\n                            );\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): RespData {\n                return RespData.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      我的下级业绩详情\n       promoter/contribution/sub_detail_stats/\n       **/\n    export class PromoterSubDetailContributionReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: ReqHeader;\n                      page_no?: number;\n                      page_size?: number;\n                      start_time?: number;\n                      end_time?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"page_no\" in data && data.page_no != undefined) {\n                    this.page_no = data.page_no;\n                }\n                if (\"page_size\" in data && data.page_size != undefined) {\n                    this.page_size = data.page_size;\n                }\n                if (\"start_time\" in data && data.start_time != undefined) {\n                    this.start_time = data.start_time;\n                }\n                if (\"end_time\" in data && data.end_time != undefined) {\n                    this.end_time = data.end_time;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, ReqHeader, 1) as ReqHeader;\n        }\n        set header(value: ReqHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get page_no() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n        set page_no(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get page_size() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n        set page_size(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n\n        /** \n          开始时间\n           **/\n        get start_time() {\n            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n        }\n\n        /** \n          开始时间\n           **/\n        set start_time(value: number) {\n            pb_1.Message.setField(this, 4, value);\n        }\n\n        /** \n          结束时间\n           **/\n        get end_time() {\n            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;\n        }\n\n        /** \n          结束时间\n           **/\n        set end_time(value: number) {\n            pb_1.Message.setField(this, 5, value);\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n            page_no?: number;\n            page_size?: number;\n            start_time?: number;\n            end_time?: number;\n        }): PromoterSubDetailContributionReq {\n            const message = new PromoterSubDetailContributionReq({});\n            if (data.header != null) {\n                message.header = ReqHeader.fromObject(data.header);\n            }\n            if (data.page_no != null) {\n                message.page_no = data.page_no;\n            }\n            if (data.page_size != null) {\n                message.page_size = data.page_size;\n            }\n            if (data.start_time != null) {\n                message.start_time = data.start_time;\n            }\n            if (data.end_time != null) {\n                message.end_time = data.end_time;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof ReqHeader.prototype.toObject>;\n                page_no?: number;\n                page_size?: number;\n                start_time?: number;\n                end_time?: number;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.page_no != null) {\n                data.page_no = this.page_no;\n            }\n            if (this.page_size != null) {\n                data.page_size = this.page_size;\n            }\n            if (this.start_time != null) {\n                data.start_time = this.start_time;\n            }\n            if (this.end_time != null) {\n                data.end_time = this.end_time;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.page_no != 0) writer.writeInt32(2, this.page_no);\n            if (this.page_size != 0) writer.writeInt32(3, this.page_size);\n            if (this.start_time != 0) writer.writeInt64(4, this.start_time);\n            if (this.end_time != 0) writer.writeInt64(5, this.end_time);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(\n            bytes: Uint8Array | pb_1.BinaryReader\n        ): PromoterSubDetailContributionReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PromoterSubDetailContributionReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = ReqHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        message.page_no = reader.readInt32();\n                        break;\n                    case 3:\n                        message.page_size = reader.readInt32();\n                        break;\n                    case 4:\n                        message.start_time = reader.readInt64();\n                        break;\n                    case 5:\n                        message.end_time = reader.readInt64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PromoterSubDetailContributionReq {\n            return PromoterSubDetailContributionReq.deserialize(bytes);\n        }\n    }\n    export class PromoterSubDetailContributionResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      header?: RespHeader;\n                      data?: PromoterSubDetailContributionResp.RespData;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"header\" in data && data.header != undefined) {\n                    this.header = data.header;\n                }\n                if (\"data\" in data && data.data != undefined) {\n                    this.data = data.data;\n                }\n            }\n        }\n        get header() {\n            return pb_1.Message.getWrapperField(this, RespHeader, 1) as RespHeader;\n        }\n        set header(value: RespHeader) {\n            pb_1.Message.setWrapperField(this, 1, value);\n        }\n        get has_header() {\n            return pb_1.Message.getField(this, 1) != null;\n        }\n        get data() {\n            return pb_1.Message.getWrapperField(\n                this,\n                PromoterSubDetailContributionResp.RespData,\n                2\n            ) as PromoterSubDetailContributionResp.RespData;\n        }\n        set data(value: PromoterSubDetailContributionResp.RespData) {\n            pb_1.Message.setWrapperField(this, 2, value);\n        }\n        get has_data() {\n            return pb_1.Message.getField(this, 2) != null;\n        }\n        static fromObject(data: {\n            header?: ReturnType<typeof RespHeader.prototype.toObject>;\n            data?: ReturnType<typeof PromoterSubDetailContributionResp.RespData.prototype.toObject>;\n        }): PromoterSubDetailContributionResp {\n            const message = new PromoterSubDetailContributionResp({});\n            if (data.header != null) {\n                message.header = RespHeader.fromObject(data.header);\n            }\n            if (data.data != null) {\n                message.data = PromoterSubDetailContributionResp.RespData.fromObject(data.data);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                header?: ReturnType<typeof RespHeader.prototype.toObject>;\n                data?: ReturnType<\n                    typeof PromoterSubDetailContributionResp.RespData.prototype.toObject\n                >;\n            } = {};\n            if (this.header != null) {\n                data.header = this.header.toObject();\n            }\n            if (this.data != null) {\n                data.data = this.data.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.has_header)\n                writer.writeMessage(1, this.header, () => this.header.serialize(writer));\n            if (this.has_data) writer.writeMessage(2, this.data, () => this.data.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(\n            bytes: Uint8Array | pb_1.BinaryReader\n        ): PromoterSubDetailContributionResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PromoterSubDetailContributionResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        reader.readMessage(\n                            message.header,\n                            () => (message.header = RespHeader.deserialize(reader))\n                        );\n                        break;\n                    case 2:\n                        reader.readMessage(\n                            message.data,\n                            () =>\n                                (message.data =\n                                    PromoterSubDetailContributionResp.RespData.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PromoterSubDetailContributionResp {\n            return PromoterSubDetailContributionResp.deserialize(bytes);\n        }\n    }\n    export namespace PromoterSubDetailContributionResp {\n        export class GameDetailStat extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          game_id?: number;\n                          child_contribution_amount?: number;\n                          sub_contribution_amount?: number;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"game_id\" in data && data.game_id != undefined) {\n                        this.game_id = data.game_id;\n                    }\n                    if (\n                        \"child_contribution_amount\" in data &&\n                        data.child_contribution_amount != undefined\n                    ) {\n                        this.child_contribution_amount = data.child_contribution_amount;\n                    }\n                    if (\n                        \"sub_contribution_amount\" in data &&\n                        data.sub_contribution_amount != undefined\n                    ) {\n                        this.sub_contribution_amount = data.sub_contribution_amount;\n                    }\n                }\n            }\n            get game_id() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n            set game_id(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get child_contribution_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n            }\n            set child_contribution_amount(value: number) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            get sub_contribution_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n            }\n            set sub_contribution_amount(value: number) {\n                pb_1.Message.setField(this, 3, value);\n            }\n            static fromObject(data: {\n                game_id?: number;\n                child_contribution_amount?: number;\n                sub_contribution_amount?: number;\n            }): GameDetailStat {\n                const message = new GameDetailStat({});\n                if (data.game_id != null) {\n                    message.game_id = data.game_id;\n                }\n                if (data.child_contribution_amount != null) {\n                    message.child_contribution_amount = data.child_contribution_amount;\n                }\n                if (data.sub_contribution_amount != null) {\n                    message.sub_contribution_amount = data.sub_contribution_amount;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    game_id?: number;\n                    child_contribution_amount?: number;\n                    sub_contribution_amount?: number;\n                } = {};\n                if (this.game_id != null) {\n                    data.game_id = this.game_id;\n                }\n                if (this.child_contribution_amount != null) {\n                    data.child_contribution_amount = this.child_contribution_amount;\n                }\n                if (this.sub_contribution_amount != null) {\n                    data.sub_contribution_amount = this.sub_contribution_amount;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.game_id != 0) writer.writeInt32(1, this.game_id);\n                if (this.child_contribution_amount != 0)\n                    writer.writeInt64(2, this.child_contribution_amount);\n                if (this.sub_contribution_amount != 0)\n                    writer.writeInt64(3, this.sub_contribution_amount);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameDetailStat {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new GameDetailStat();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.game_id = reader.readInt32();\n                            break;\n                        case 2:\n                            message.child_contribution_amount = reader.readInt64();\n                            break;\n                        case 3:\n                            message.sub_contribution_amount = reader.readInt64();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): GameDetailStat {\n                return GameDetailStat.deserialize(bytes);\n            }\n        }\n        export class SubContribution extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          day?: number;\n                          user_id?: number;\n                          child_contribution_amount?: number;\n                          sub_contribution_amount?: number;\n                          game_stats?: PromoterSubDetailContributionResp.GameDetailStat[];\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [5],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"day\" in data && data.day != undefined) {\n                        this.day = data.day;\n                    }\n                    if (\"user_id\" in data && data.user_id != undefined) {\n                        this.user_id = data.user_id;\n                    }\n                    if (\n                        \"child_contribution_amount\" in data &&\n                        data.child_contribution_amount != undefined\n                    ) {\n                        this.child_contribution_amount = data.child_contribution_amount;\n                    }\n                    if (\n                        \"sub_contribution_amount\" in data &&\n                        data.sub_contribution_amount != undefined\n                    ) {\n                        this.sub_contribution_amount = data.sub_contribution_amount;\n                    }\n                    if (\"game_stats\" in data && data.game_stats != undefined) {\n                        this.game_stats = data.game_stats;\n                    }\n                }\n            }\n            get day() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n            set day(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get user_id() {\n                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n            }\n            set user_id(value: number) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            get child_contribution_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n            }\n            set child_contribution_amount(value: number) {\n                pb_1.Message.setField(this, 3, value);\n            }\n            get sub_contribution_amount() {\n                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n            }\n            set sub_contribution_amount(value: number) {\n                pb_1.Message.setField(this, 4, value);\n            }\n            get game_stats() {\n                return pb_1.Message.getRepeatedWrapperField(\n                    this,\n                    PromoterSubDetailContributionResp.GameDetailStat,\n                    5\n                ) as PromoterSubDetailContributionResp.GameDetailStat[];\n            }\n            set game_stats(value: PromoterSubDetailContributionResp.GameDetailStat[]) {\n                pb_1.Message.setRepeatedWrapperField(this, 5, value);\n            }\n            static fromObject(data: {\n                day?: number;\n                user_id?: number;\n                child_contribution_amount?: number;\n                sub_contribution_amount?: number;\n                game_stats?: ReturnType<\n                    typeof PromoterSubDetailContributionResp.GameDetailStat.prototype.toObject\n                >[];\n            }): SubContribution {\n                const message = new SubContribution({});\n                if (data.day != null) {\n                    message.day = data.day;\n                }\n                if (data.user_id != null) {\n                    message.user_id = data.user_id;\n                }\n                if (data.child_contribution_amount != null) {\n                    message.child_contribution_amount = data.child_contribution_amount;\n                }\n                if (data.sub_contribution_amount != null) {\n                    message.sub_contribution_amount = data.sub_contribution_amount;\n                }\n                if (data.game_stats != null) {\n                    message.game_stats = data.game_stats.map((item) =>\n                        PromoterSubDetailContributionResp.GameDetailStat.fromObject(item)\n                    );\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    day?: number;\n                    user_id?: number;\n                    child_contribution_amount?: number;\n                    sub_contribution_amount?: number;\n                    game_stats?: ReturnType<\n                        typeof PromoterSubDetailContributionResp.GameDetailStat.prototype.toObject\n                    >[];\n                } = {};\n                if (this.day != null) {\n                    data.day = this.day;\n                }\n                if (this.user_id != null) {\n                    data.user_id = this.user_id;\n                }\n                if (this.child_contribution_amount != null) {\n                    data.child_contribution_amount = this.child_contribution_amount;\n                }\n                if (this.sub_contribution_amount != null) {\n                    data.sub_contribution_amount = this.sub_contribution_amount;\n                }\n                if (this.game_stats != null) {\n                    data.game_stats = this.game_stats.map(\n                        (item: PromoterSubDetailContributionResp.GameDetailStat) => item.toObject()\n                    );\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.day != 0) writer.writeInt64(1, this.day);\n                if (this.user_id != 0) writer.writeInt64(2, this.user_id);\n                if (this.child_contribution_amount != 0)\n                    writer.writeInt64(3, this.child_contribution_amount);\n                if (this.sub_contribution_amount != 0)\n                    writer.writeInt64(4, this.sub_contribution_amount);\n                if (this.game_stats.length)\n                    writer.writeRepeatedMessage(\n                        5,\n                        this.game_stats,\n                        (item: PromoterSubDetailContributionResp.GameDetailStat) =>\n                            item.serialize(writer)\n                    );\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubContribution {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new SubContribution();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.day = reader.readInt64();\n                            break;\n                        case 2:\n                            message.user_id = reader.readInt64();\n                            break;\n                        case 3:\n                            message.child_contribution_amount = reader.readInt64();\n                            break;\n                        case 4:\n                            message.sub_contribution_amount = reader.readInt64();\n                            break;\n                        case 5:\n                            reader.readMessage(message.game_stats, () =>\n                                pb_1.Message.addToRepeatedWrapperField(\n                                    message,\n                                    5,\n                                    PromoterSubDetailContributionResp.GameDetailStat.deserialize(\n                                        reader\n                                    ),\n                                    PromoterSubDetailContributionResp.GameDetailStat\n                                )\n                            );\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): SubContribution {\n                return SubContribution.deserialize(bytes);\n            }\n        }\n        export class RespData extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          total?: number;\n                          sub_contributions?: PromoterSubDetailContributionResp.SubContribution[];\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [2],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"total\" in data && data.total != undefined) {\n                        this.total = data.total;\n                    }\n                    if (\"sub_contributions\" in data && data.sub_contributions != undefined) {\n                        this.sub_contributions = data.sub_contributions;\n                    }\n                }\n            }\n\n            /** \n              数据数量\n               **/\n            get total() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n\n            /** \n              数据数量\n               **/\n            set total(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get sub_contributions() {\n                return pb_1.Message.getRepeatedWrapperField(\n                    this,\n                    PromoterSubDetailContributionResp.SubContribution,\n                    2\n                ) as PromoterSubDetailContributionResp.SubContribution[];\n            }\n            set sub_contributions(value: PromoterSubDetailContributionResp.SubContribution[]) {\n                pb_1.Message.setRepeatedWrapperField(this, 2, value);\n            }\n            static fromObject(data: {\n                total?: number;\n                sub_contributions?: ReturnType<\n                    typeof PromoterSubDetailContributionResp.SubContribution.prototype.toObject\n                >[];\n            }): RespData {\n                const message = new RespData({});\n                if (data.total != null) {\n                    message.total = data.total;\n                }\n                if (data.sub_contributions != null) {\n                    message.sub_contributions = data.sub_contributions.map((item) =>\n                        PromoterSubDetailContributionResp.SubContribution.fromObject(item)\n                    );\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    total?: number;\n                    sub_contributions?: ReturnType<\n                        typeof PromoterSubDetailContributionResp.SubContribution.prototype.toObject\n                    >[];\n                } = {};\n                if (this.total != null) {\n                    data.total = this.total;\n                }\n                if (this.sub_contributions != null) {\n                    data.sub_contributions = this.sub_contributions.map(\n                        (item: PromoterSubDetailContributionResp.SubContribution) => item.toObject()\n                    );\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.total != 0) writer.writeInt32(1, this.total);\n                if (this.sub_contributions.length)\n                    writer.writeRepeatedMessage(\n                        2,\n                        this.sub_contributions,\n                        (item: PromoterSubDetailContributionResp.SubContribution) =>\n                            item.serialize(writer)\n                    );\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RespData {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new RespData();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.total = reader.readInt32();\n                            break;\n                        case 2:\n                            reader.readMessage(message.sub_contributions, () =>\n                                pb_1.Message.addToRepeatedWrapperField(\n                                    message,\n                                    2,\n                                    PromoterSubDetailContributionResp.SubContribution.deserialize(\n                                        reader\n                                    ),\n                                    PromoterSubDetailContributionResp.SubContribution\n                                )\n                            );\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): RespData {\n                return RespData.deserialize(bytes);\n            }\n        }\n    }\n}\n","import HttpRequestUtil from \"../../../../../../main/core/http/HttpRequestUtil\";\nimport { pb_1 } from \"../../../../../../main/core/utils/NpmExport\";\nimport { ApiProto } from \"./ApiProto\";\n\nclass ApiReqPlain {\n    private static _instance: ApiReqPlain = null;\n\n    public static getInstance() {\n        if (!this._instance) {\n            this._instance = new ApiReqPlain();\n        }\n\n        return this._instance;\n    }\n\n    private constructor() {}\n\n    public createApiPlain<T extends pb_1.Message & { header?: ApiProto.ReqHeader }>(message: T) {\n        let req_header = new ApiProto.ReqHeader();\n        let reqHeader = HttpRequestUtil.getInstance().buildHeader(req_header) as ApiProto.ReqHeader;\n        message.header = reqHeader;\n        return message.serializeBinary();\n    }\n\n    // public launchConf() {\n    //     let req_header = new ApiProto.ReqHeader();\n    //     let reqHeader: ReqHeader = HttpRequestUtil.getInstance().buildHeader(req_header);\n    //     let launchConfReq = ApiProto.LaunchConfReq.fromObject({\n    //         header: reqHeader,\n    //         gv: CommonDepend.ProjectInfo.GAME_VERSION,\n    //     });\n    //     let req_plain = launchConfReq.serializeBinary();\n    //     return req_plain;\n    // }\n\n    public getUserInfo(auto_login: boolean) {\n        let req_header = new ApiProto.ReqHeader();\n        let reqHeader: ReqHeader = HttpRequestUtil.getInstance().buildHeader(req_header);\n        let userInfoReq = ApiProto.UserInfoReq.fromObject({\n            header: reqHeader,\n            auto_login: auto_login,\n        });\n        let req_plain = userInfoReq.serializeBinary();\n        return req_plain;\n    }\n\n    public login(type: number, identity: string, password?: string, vcode?: string) {\n        let req_header = new ApiProto.ReqHeader();\n        let reqHeader: ReqHeader = HttpRequestUtil.getInstance().buildHeader(req_header);\n        let userInfoReq = ApiProto.LoginReq.fromObject({\n            header: reqHeader,\n            identity_info: ApiProto.IdentityInfo.fromObject({\n                type: type,\n                identity: identity,\n                cert: ApiProto.Cert.fromObject({\n                    password: password,\n                    vcode: vcode,\n                }),\n            }),\n        });\n        let req_plain = userInfoReq.serializeBinary();\n        return req_plain;\n    }\n\n    public register(identity: string, password: string) {\n        let req_header = new ApiProto.ReqHeader();\n        let reqHeader: ReqHeader = HttpRequestUtil.getInstance().buildHeader(req_header);\n        let appName = CommonDepend.AppParamManager.getAppName();\n        let userInfoReq = ApiProto.RegisterReq.fromObject({\n            header: reqHeader,\n            identity_info: ApiProto.IdentityInfo.fromObject({\n                type: ApiProto.IdentityType.AT_ACCOUNT_NO,\n                identity: identity,\n                cert: ApiProto.Cert.fromObject({\n                    password: password,\n                }),\n            }),\n            app_name: appName,\n        });\n        let req_plain = userInfoReq.serializeBinary();\n        return req_plain;\n    }\n\n    public vipBonusConf() {\n        let req_header = new ApiProto.ReqHeader();\n        let reqHeader: ReqHeader = HttpRequestUtil.getInstance().buildHeader(req_header);\n        let vipBonusConfReq = ApiProto.VipBonusConfReq.fromObject({\n            header: reqHeader,\n        });\n        let req_plain = vipBonusConfReq.serializeBinary();\n        return req_plain;\n    }\n\n    public vipBonusRecordList(page_no: number, page_size: number, return_total: boolean) {\n        let req_header = new ApiProto.ReqHeader();\n        let reqHeader: ReqHeader = HttpRequestUtil.getInstance().buildHeader(req_header);\n        let vipBonusRecordListReq = ApiProto.VipBonusRecordsReq.fromObject({\n            header: reqHeader,\n            pc: ApiProto.PaginationCriteria.fromObject({\n                page_no: page_no,\n                page_size: page_size,\n                return_total: return_total,\n            }),\n        });\n        let req_plain = vipBonusRecordListReq.serializeBinary();\n        return req_plain;\n    }\n\n    public vipBonusSetBirthday(birthday: string) {\n        let req_header = new ApiProto.ReqHeader();\n        let reqHeader: ReqHeader = HttpRequestUtil.getInstance().buildHeader(req_header);\n        let vipBonusSetBirthdayReq = ApiProto.VipBonusSetBirthdayReq.fromObject({\n            header: reqHeader,\n            birthday: birthday,\n        });\n        let req_plain = vipBonusSetBirthdayReq.serializeBinary();\n        return req_plain;\n    }\n\n    public taskSystemInfo() {\n        let req_header = new ApiProto.ReqHeader();\n        let reqHeader: ReqHeader = HttpRequestUtil.getInstance().buildHeader(req_header);\n        let taskSystemInfoReq = ApiProto.TaskCenterInfoReq.fromObject({\n            header: reqHeader,\n        });\n        let req_plain = taskSystemInfoReq.serializeBinary();\n        return req_plain;\n    }\n\n    public onlineBonusConf() {\n        let req_header = new ApiProto.ReqHeader();\n        let reqHeader: ReqHeader = HttpRequestUtil.getInstance().buildHeader(req_header);\n        let onlineBonusConfReq = ApiProto.OnlineBonusConfReq.fromObject({\n            header: reqHeader,\n        });\n        let req_plain = onlineBonusConfReq.serializeBinary();\n        return req_plain;\n    }\n\n    public activityReminder() {\n        let req_header = new ApiProto.ReqHeader();\n        let reqHeader: ReqHeader = HttpRequestUtil.getInstance().buildHeader(req_header);\n        let activityReminderReq = ApiProto.ListActivityReq.fromObject({\n            header: reqHeader,\n        });\n        let req_plain = activityReminderReq.serializeBinary();\n        return req_plain;\n    }\n\n    public noticePullReq() {\n        let req_header = new ApiProto.ReqHeader();\n        let reqHeader: ReqHeader = HttpRequestUtil.getInstance().buildHeader(req_header);\n        let noticePullReq = ApiProto.NoticePullReq.fromObject({\n            header: reqHeader,\n        });\n        let req_plain = noticePullReq.serializeBinary();\n        return req_plain;\n    }\n\n    public mailPullReq(lastMailId) {\n        let req_header = new ApiProto.ReqHeader();\n        let reqHeader: ReqHeader = HttpRequestUtil.getInstance().buildHeader(req_header);\n        let maillPullReq = ApiProto.MailPullReq.fromObject({\n            header: reqHeader,\n            cursor_id: lastMailId,\n        });\n        let req_plain = maillPullReq.serializeBinary();\n        return req_plain;\n    }\n\n    public mailCheckReq(mailId) {\n        let req_header = new ApiProto.ReqHeader();\n        let reqHeader: ReqHeader = HttpRequestUtil.getInstance().buildHeader(req_header);\n        let mailCheckReq = ApiProto.MailCheckReq.fromObject({\n            header: reqHeader,\n            mail_id: mailId,\n        });\n        let req_plain = mailCheckReq.serializeBinary();\n        return req_plain;\n    }\n\n    public mailDelReq(mailId) {\n        let req_header = new ApiProto.ReqHeader();\n        let reqHeader: ReqHeader = HttpRequestUtil.getInstance().buildHeader(req_header);\n        let mailDelReq = ApiProto.MailDeleteReq.fromObject({\n            header: reqHeader,\n            mail_id: mailId,\n        });\n        let req_plain = mailDelReq.serializeBinary();\n        return req_plain;\n    }\n\n    public mailDelAllReq() {\n        let req_header = new ApiProto.ReqHeader();\n        let reqHeader: ReqHeader = HttpRequestUtil.getInstance().buildHeader(req_header);\n        let mailDelAllReq = ApiProto.MailDelAllReq.fromObject({\n            header: reqHeader,\n        });\n        let req_plain = mailDelAllReq.serializeBinary();\n        return req_plain;\n    }\n\n    public mailAcceptReq(mailId) {\n        let req_header = new ApiProto.ReqHeader();\n        let reqHeader: ReqHeader = HttpRequestUtil.getInstance().buildHeader(req_header);\n        let mailAcceptReq = ApiProto.MailAcceptReq.fromObject({\n            header: reqHeader,\n            mail_id: mailId,\n        });\n        let req_plain = mailAcceptReq.serializeBinary();\n        return req_plain;\n    }\n\n    public safeboxPutIn(amount) {\n        let req_header = new ApiProto.ReqHeader();\n        let reqHeader: ReqHeader = HttpRequestUtil.getInstance().buildHeader(req_header);\n        let safeboxPutIn = ApiProto.SafeboxPutInReq.fromObject({\n            header: reqHeader,\n            amount: amount,\n        });\n        let req_plain = safeboxPutIn.serializeBinary();\n        return req_plain;\n    }\n\n    public safeboxPutOut(amount) {\n        let req_header = new ApiProto.ReqHeader();\n        let reqHeader: ReqHeader = HttpRequestUtil.getInstance().buildHeader(req_header);\n        let safeboxPutOut = ApiProto.SafeboxTakeOutReq.fromObject({\n            header: reqHeader,\n            amount: amount,\n        });\n        let req_plain = safeboxPutOut.serializeBinary();\n        return req_plain;\n    }\n\n    public withdrawConf() {\n        let req_header = new ApiProto.ReqHeader();\n        let reqHeader: ReqHeader = HttpRequestUtil.getInstance().buildHeader(req_header);\n        let withdrawConf = ApiProto.WithdrawConfReq.fromObject({\n            header: reqHeader,\n        });\n        let req_plain = withdrawConf.serializeBinary();\n        return req_plain;\n    }\n\n    public defaultAccount(id) {\n        let req_header = new ApiProto.ReqHeader();\n        let reqHeader: ReqHeader = HttpRequestUtil.getInstance().buildHeader(req_header);\n        let defaultAccount = ApiProto.WithdrawSetDefaultAccountReq.fromObject({\n            header: reqHeader,\n            id: id,\n        });\n        let req_plain = defaultAccount.serializeBinary();\n        return req_plain;\n    }\n\n    public bindWithdrawAccout(\n        data: ReturnType<typeof ApiProto.WithdrawAccount.prototype.toObject>\n    ) {\n        let req_header = new ApiProto.ReqHeader();\n        let reqHeader: ReqHeader = HttpRequestUtil.getInstance().buildHeader(req_header);\n        let bind = ApiProto.WithdrawBindAccountReq.fromObject({\n            header: reqHeader,\n            account: data,\n        });\n\n        let req_plain = bind.serializeBinary();\n        return req_plain;\n    }\n\n    public unbindWithdrawAccount(id: string) {\n        let req_header = new ApiProto.ReqHeader();\n        let reqHeader: ReqHeader = HttpRequestUtil.getInstance().buildHeader(req_header);\n        let unbind = ApiProto.WithdrawUnbindAccountReq.fromObject({\n            header: reqHeader,\n            id: id,\n        });\n\n        let req_plain = unbind.serializeBinary();\n        return req_plain;\n    }\n\n    public checkBindAccountRisk() {\n        let req_header = new ApiProto.ReqHeader();\n        let reqHeader: ReqHeader = HttpRequestUtil.getInstance().buildHeader(req_header);\n        let unbind = ApiProto.WithdrawBindAccountRiskReq.fromObject({\n            header: reqHeader,\n        });\n\n        let req_plain = unbind.serializeBinary();\n        return req_plain;\n    }\n\n    public getWithdrawAccounts(type: ApiProto.WithdrawAccountType) {\n        let req_header = new ApiProto.ReqHeader();\n        let reqHeader: ReqHeader = HttpRequestUtil.getInstance().buildHeader(req_header);\n        let accounts = ApiProto.WithdrawAccountsReq.fromObject({\n            header: reqHeader,\n            type,\n        });\n        let req_plain = accounts.serializeBinary();\n        return req_plain;\n    }\n\n    public withdrawExchange(\n        channleId: string,\n        amount: number,\n        bindId: string,\n        validataBind: boolean,\n        channelListId: string\n    ) {\n        let req_header = new ApiProto.ReqHeader();\n        let reqHeader: ReqHeader = HttpRequestUtil.getInstance().buildHeader(req_header);\n        let accounts = ApiProto.WithdrawExchangeReq.fromObject({\n            header: reqHeader,\n            channel_id: channleId,\n            amount,\n            bind_id: bindId,\n            validate_bind: validataBind,\n            channel_list_id: channelListId,\n        });\n        let req_plain = accounts.serializeBinary();\n        return req_plain;\n    }\n\n    public withdrawRecords(data: ProtoObject<ApiProto.PaginationCriteria>) {\n        let req_header = new ApiProto.ReqHeader();\n        let reqHeader: ReqHeader = HttpRequestUtil.getInstance().buildHeader(req_header);\n        let records = ApiProto.WithdrawRecordsReq.fromObject({\n            header: reqHeader,\n            page: data,\n        });\n        let req_plain = records.serializeBinary();\n        return req_plain;\n    }\n\n    public exchangeCode(code: string) {\n        let req_header = new ApiProto.ReqHeader();\n        let reqHeader: ReqHeader = HttpRequestUtil.getInstance().buildHeader(req_header);\n        let exchangeCode = ApiProto.ExchangeCodeReq.fromObject({\n            header: reqHeader,\n            code,\n        });\n        let req_plain = exchangeCode.serializeBinary();\n        return req_plain;\n    }\n}\n\nexport default ApiReqPlain.getInstance();\n","import { ApiErrorCode } from \"../../../../../../main/core/conf/ApiErrorCode\";\nimport { setInstance } from \"../../../../../../main/core/utils/decorators/InstanceClassDecorator\";\nimport BaseServiceErrorCenter from \"./base/BaseServiceErrorCenter\";\nimport { ServiceOperateType } from \"./define/ServiceOperateType\";\nimport ServiceErrorNetwordError from \"./handler/ServiceErrorNetwordError\";\nimport ServiceErrorNetwordTimeout from \"./handler/ServiceErrorNetwordTimeout\";\nimport ServiceEnterHallFailedAlert from \"./handler/ServiceEnterHallFailedAlert\";\nimport { ServiceErrorShowToast } from \"./handler/ServiceErrorShowToast\";\nimport { ServiceErrorToLoginScene } from \"./handler/ServiceErrorToLoginScene\";\nimport { ServiceErrorUpgradeAccount } from \"./handler/ServiceErrorUpgradeAccount\";\nimport { ServiceErrorWithdrawAlert } from \"./handler/ServiceErrorWithdrawAlert\";\nimport ServiceErrorNetwordErrorAlert from \"./handler/ServiceErrorNetwordErrorAlert\";\n\n@setInstance\nexport default class ApiServiceErrorCenter extends BaseServiceErrorCenter {\n    protected onInitialize(): void {\n        this.applyDeflaultHandler(new ServiceErrorShowToast());\n\n        /** 网络连接失效或账号在其它环境登录，请重新登录 */\n        this.applyHandler(100, new ServiceErrorToLoginScene());\n        /** 账号错误，请联系客服中心 */\n        this.applyHandler(102, new ServiceErrorToLoginScene());\n        /** 请用正式账号登录 */\n        this.applyHandler(105, new ServiceErrorToLoginScene());\n        /** 登录失败，请检查网络，若无法解决请联系客服*/\n        this.applyHandler(106, new ServiceErrorToLoginScene());\n        /** 抱歉，提现前请您注册正式账号\t这里没有提示是直接打开升级账号弹窗 */\n        this.applyHandler(803, new ServiceErrorUpgradeAccount());\n        /** 您上次使用{account_no}提现失败，建议选择其它账号提现 */\n        this.applyHandler(806, new ServiceErrorWithdrawAlert());\n        /** 不支持该地区 */\n        this.applyHandler(1101, new ServiceErrorToLoginScene());\n        /** 网络超时 */\n        this.applyHandler(ApiErrorCode.TIMEOUT, new ServiceErrorNetwordTimeout());\n        /** 网络异常 400 500 */\n        this.applyHandler(ApiErrorCode.HTTP_ERROR, new ServiceErrorNetwordError());\n        /** 关闭网络 */\n        this.applyHandler(ApiErrorCode.OFFLINE, new ServiceErrorNetwordErrorAlert());\n\n        this.initializeLoginHandler();\n    }\n\n    private initializeLoginHandler() {\n        /** 网络超时 */\n        this.applyHandlerWithType(\n            ServiceOperateType.Login,\n            ApiErrorCode.TIMEOUT,\n            new ServiceEnterHallFailedAlert()\n        );\n        /** 网络异常 400 500 */\n        this.applyHandlerWithType(\n            ServiceOperateType.Login,\n            ApiErrorCode.HTTP_ERROR,\n            new ServiceEnterHallFailedAlert()\n        );\n    }\n}\n","let ApiUrl = {\n    //luncher_config: \"/api/v20/conf/launch_conf/\",\n    get_user_info: \"/user/get_user_info/\",\n    login: \"/user/login/\",\n    register: \"/user/register/\",\n    //feature_conf: \"/api/v20/conf/feature_conf/\",\n    vipBonus_conf: \"/act/vip_bonus/conf/\",\n    vipBonus_record_list: \"/act/vip_bonus/records/\",\n    vipBonus_set_birthday: \"/act/vip_bonus/set_birthday/\",\n\n    /** 任务系统信息 */\n    task_system_Info: \"act/task_center/info/\",\n\n    /** 在线奖励请求 */\n    online_bonus_conf: \"act/online_bonus/conf/\",\n\n    /** 活动提醒请求 */\n    activity_reminder: \"act/activity_center/list/\",\n\n    /** 推广员系统 获取个人配置及汇总信息 */\n    promoter_info_req: \"promoter/info/\",\n\n    /** 推广员系统 领取佣金请求 */\n    promoter_receive_commission_req: \"promoter/commission/receive/\",\n\n    /** 推广员系统 获取佣金领取记录 */\n    promoter_commission_records_req: \"promoter/commission/receive_records/\",\n\n    /** 推广员系统 获取佣金配置 */\n    promoter_commission_conf_req: \"promoter/commission_conf/\",\n\n    /** 推广员佣金描述信息请求 */\n    promoter_commission_desc_conf_req: \"promoter/commission_desc_conf/\",\n\n    /** 推广员系统 代理业绩-我的佣金view 获取每日佣金记录请求 */\n    promoter_daily_commission_req: \"promoter/commission/daily_stats/\",\n\n    /** 代理业绩-我的下级view 获取我的下级佣金贡献请求 */\n    promoter_sub_commission_req: \"promoter/commission/sub_stats/\",\n\n    /** 代理业绩-我的业绩view 获取我的每日业绩 */\n    promoter_daily_contribution_req: \"promoter/contribution/daily_stats/\",\n\n    /** 推广员系统 代理业绩-我的下级view 获取我的下级业绩详情 */\n    promoter_Sub_Detail_Contribution_Req: \"promoter/contribution/sub_detail_stats/\",\n\n    /** 账号绑定 */\n    bind_identity_req: \"/user/bind_identity/\",\n    /** 验证码 */\n    get_sms_code: \"/user/get_sms_code/\",\n    /** 修改用户信息 */\n    modify_user_info: \"/user/modify_user_info/\",\n    /** 重置密码 */\n    reset_password: \"/user/reset_password/\",\n\n    /*  检查账号和手机号是否绑定关系 */\n    verify_bind_phone: \"/user/verify_bind_phone/\",\n\n    get_kyc: \"/user/get_kyc/\",\n    set_kyc: \"/user/set_kyc/\",\n    /** 单个游戏信息 */\n    game_info: \"/game/info/\",\n\n    /**公告信息 */\n    noticePull: \"/msg/notice/pull/\",\n\n    /**拉取所有邮件 */\n    mailPull: \"/mail/pull/\",\n    /**查看邮件邮件 */\n    checkMail: \"/mail/check/\",\n    /**del邮件邮件 */\n    delOneMail: \"/mail/delete/\",\n    /**delAll邮件邮件 */\n    delAllMail: \"/mail/delete_all/\",\n    /** accept 邮件邮件 */\n    acceptMail: \"/mail/accept/\",\n\n    /** put in safebox */\n    safePutIn: \"/safebox/put_in/\",\n\n    /** put out safebox */\n    safePutOut: \"/safebox/take_out/\",\n\n    /** pay conf  */\n    pay_conf: \"/pay/pay_conf/\",\n    /** pay submit  */\n    pay_submit: \"/pay/submit/\",\n    /** pay status  */\n    pay_status: \"/pay/status/\",\n    /** pay record list */\n    pay_record_list: \"/pay/record/list/\",\n\n    /** withdraw conf  */\n    withdraw_conf: \"/withdraw/conf/\",\n    /**withdraw set default account */\n    withdraw_set_defualt_account: \"/withdraw/set_default_account/\",\n    /**withdraw bind account */\n    bind_withdraw_account: \"/withdraw/bind_account/\",\n    /**withdraw unbind account */\n    unbind_withdraw_account: \"/withdraw/unbind_account/\",\n    /**withdraw unbind account */\n    check_bind_account_risk: \"/withdraw/bind_account_risk/\",\n    /**get withdraw account by type*/\n    get_withdraw_accounts: \"/withdraw/accounts/\",\n    /**creat withdraw exchange order*/\n    withdrawExchange: \"/withdraw/exchange/\",\n    /**withdraw records */\n    withdrawRecords: \"/withdraw/records_v2/\",\n    /** 兑换码*/\n    exchangeCode: \"/act/exchange_code/\",\n\n    get_balance: \"/user/get_balance/\",\n    /** pop_ups */\n    pop_ups: \"/msg/pop_ups/pull/\",\n\n    /** 迎新三重礼，获取配置 */\n    newTripleGiftCont: \"act/new_triple_gift/conf/\",\n    /** 迎新三重礼，获取奖励 */\n    newTripleGiftGetAward: \"act/new_triple_gift/get_award/\",\n    /** 牌局回放 */\n    replayList: \"/game/replays/\",\n    /** 牌局回放详细 */\n    replayDetail: \"/game/replay/detail/\",\n    promoterVerifyBrd: \"/promoter/verify_brd/\",\n\n    promoterVerifyReferId: \"/promoter/verify_refer_id/\",\n};\n\nexport default ApiUrl;\n","import HeartCheck from \"./HeartCheck\";\n\nexport default class BackHeartCheck extends HeartCheck {}\n","import { ServiceOperateType } from \"../define/ServiceOperateType\";\nexport default abstract class BaseServiceErrorCenter {\n    private readonly defaultHandler = Symbol(\"defaultHandler\");\n\n    private _operateMap: Map<\n        ServiceOperateType,\n        Map<ServiceError.TCode, ServiceError.IErrorHandler>\n    > = new Map();\n\n    protected abstract onInitialize(): void;\n\n    constructor() {\n        this.initialize();\n    }\n\n    public initialize() {\n        this.onInitialize();\n    }\n\n    protected getHandlerMap(type: ServiceOperateType = ServiceOperateType.None) {\n        return this._operateMap.get(type) || this._operateMap.get(ServiceOperateType.None);\n    }\n\n    protected applyDeflaultHandler(handler: ServiceError.IErrorHandler): void {\n        this.applyDeflaultHandlerWithType(ServiceOperateType.None, handler);\n    }\n\n    public applyHandler(code: ServiceError.TCode, handler: ServiceError.IErrorHandler): void {\n        this.applyHandlerWithType(ServiceOperateType.None, code, handler);\n    }\n\n    protected applyDeflaultHandlerWithType(\n        type: ServiceOperateType,\n        handler: ServiceError.IErrorHandler\n    ): void {\n        this.applyHandlerWithType(type, this.defaultHandler, handler);\n    }\n\n    public applyHandlerWithType(\n        type: ServiceOperateType,\n        code: ServiceError.TCode,\n        handler: ServiceError.IErrorHandler\n    ): void {\n        if (!this._operateMap.has(type)) {\n            this._operateMap.set(type, new Map());\n        }\n        if (this.getHandlerMap(type).has(code)) {\n            CC_DEBUG &&\n                CC_DEBUG &&\n                cc.warn(\n                    `[BaseServiceErrorCenter] applyHandlerWithType is exists for type:${type} code:${code}, cover exists handler!`\n                );\n        }\n\n        this.getHandlerMap(type).set(code, handler);\n    }\n\n    public catchError(data: ServiceError.IError) {\n        let handler = this.getHandler(ServiceOperateType.None, data.code);\n        throw handler.catchError(data) || data;\n    }\n\n    public catchErrorWithType(type: ServiceOperateType, data: ServiceError.IError) {\n        let handler = this.getHandler(type, data.code);\n        if (handler) {\n            throw handler.catchError(data) || data;\n        } else {\n            return this.catchError(data);\n        }\n    }\n\n    protected getHandler(type: ServiceOperateType, code: ServiceError.TCode) {\n        return (\n            this.getHandlerMap(type).get(code) || this.getHandlerMap(type).get(this.defaultHandler)\n        );\n    }\n}\n","export default abstract class BaseServiceErrorHandler implements ServiceError.IErrorHandler {\n    public catchError(data: ServiceError.IError): ServiceError.TErrorCatch {\n        return this.onCatchError(data);\n    }\n\n    protected abstract onCatchError(data: ServiceError.IError): ServiceError.TErrorCatch;\n}\n","import { lodash } from \"../../../../../../../main/core/utils/NpmExport\";\nimport { CommonProto } from \"../proto/CommonProto\";\nimport { SocketInternalEvent } from \"../SocketInternalEvent\";\nexport default class BaseSocketAttachment implements Socket.ISocketAttachment {\n    public tag: string = \"Unknown\";\n\n    protected config: Socket.ISocketConfig = {};\n\n    constructor(protected options: Socket.ISocketAttachmentConstructorParameters) {}\n    public applyConfig(config: Socket.ISocketConfig) {\n        this.config = config;\n    }\n\n    public send(msgId: number, msgData: Socket.IMessageClass) {\n        this.options.listener.emit(SocketInternalEvent.SEND_MESSAGE, msgId, msgData);\n    }\n\n    public close() {\n        this.options.listener.emit(SocketInternalEvent.CLOSE);\n    }\n    public destroy() {\n        this.options.listener.emit(SocketInternalEvent.DESTROY);\n    }\n\n    public reconnect(options: Socket.SocketInitOptions<number, any> = {}) {\n        this.options.listener.emit(SocketInternalEvent.RECONNECT, options);\n    }\n\n    public error(data: ProtoObject<CommonProto.ErrorST>) {\n        this.options.listener.emit(SocketInternalEvent.ERROR, data);\n    }\n\n    public onInit(option: Socket.SocketOption): void {}\n\n    public onOpen(): void {}\n\n    public onClose(): void {}\n\n    public onBeforeUserClose(): void {}\n    public onSendMessage(msgType: number, data: Socket.IMessageClass) {}\n    public getMessageCtor(msgType: number) {\n        return null;\n    }\n    public onMessage(data: Socket.TMessageObject<number, any>): void {\n        return;\n    }\n    public onMessageHandle(data: Socket.TMessageObject<number, any>): void {\n        if (CC_DEBUG) {\n            if ((window?.[\"socket_attachment_filter\"] ?? true) == false) {\n                this.onMessage(data);\n                return;\n            }\n        }\n\n        if (lodash.get(this.config, \"blacklist\", []).includes(data.msgId)) {\n            return;\n        }\n        this.onMessage(data);\n        return;\n    }\n}\n","import { GameType } from \"../../../../../../main/core/conf/GameType\";\nimport Lighter from \"../../../../../../main/core/services/Lighthouse/Lighter\";\nimport { EVENT_CODE } from \"../../../../../../main/core/services/Lighthouse/proto/EventCode\";\nimport { lodash } from \"../../../../../../main/core/utils/NpmExport\";\nimport { Tools } from \"../../../../../../main/core/utils/Tools\";\nimport { BundleCommonMgr } from \"../../bd/BundleCommonMgr\";\nimport UIMgr from \"../../Component/base/UIMgr\";\nimport CommonLanguage from \"../../conf/lang/CommonLanguage\";\nimport { NewGameInfo } from \"../../NewGameInfo\";\nimport { SceneControl } from \"../../SceneControl\";\nimport { TimerUtil } from \"../../utils/TimerUtil\";\nimport CommonSocketAttachment from \"./attachment/CommonSocketAttachment\";\nimport DebugLogAttachment from \"./attachment/DebugLogAttachment\";\nimport ErrorStSocketAttachment from \"./attachment/ErrorStSocketAttachment\";\nimport BaseSocket from \"./BaseSocket\";\nimport { CommonProto } from \"./proto/CommonProto\";\nimport { SocketInternalEvent } from \"./SocketInternalEvent\";\n\ninterface SocketInitOptions<MsgId extends number, Data>\n    extends Socket.SocketInitOptions<MsgId, Data> {\n    onError?: (err: ProtoObject<CommonProto.ErrorST>) => void;\n}\n\nenum SocketState {\n    None,\n    Connect,\n    Open,\n    Disconnect,\n}\nconst TIMEOUT_CONNECT: number = 5000;\nexport default abstract class BaseSocketMgr<MsgType extends number>\n    extends BaseSocket<MsgType>\n    implements Socket.IScoketProto {\n    private attachments: Socket.ISocketAttachment[] = [];\n\n    private _listener: cc.EventTarget = new cc.EventTarget();\n\n    private _configs: Socket.ISocketConfigs = {};\n\n    private options: SocketInitOptions<MsgType, any> = {};\n\n    private state: SocketState = SocketState.None;\n\n    private checkTimeKey = Symbol(\"socket_connect_check\");\n\n    private retryConnect = 0;\n\n    public constructor() {\n        super();\n        setTimeout(() => {\n            //下一帧在初始化\n            this.initListen();\n            this.initAttachments();\n        });\n    }\n\n    private initHost() {\n        /*  if (!this.host) {\n            this.host = CommonDepend.NewGameInfo.getGameWsServer(this.gameId);\n        } */\n        if (this.options?.gameId) {\n            this.gameId = this.options?.gameId;\n        }\n    }\n\n    private initListen() {\n        this._listener.on(SocketInternalEvent.SEND_MESSAGE, this.send, this);\n        this._listener.on(SocketInternalEvent.RECONNECT, this.reconnect, this);\n        this._listener.on(SocketInternalEvent.CLOSE, this.close, this);\n        this._listener.on(SocketInternalEvent.ERROR, this.error, this);\n    }\n\n    private initAttachments() {\n        this.applyAttachment(CommonSocketAttachment);\n        this.applyAttachment(ErrorStSocketAttachment);\n        this.applyAttachment(DebugLogAttachment);\n        this.applyConfig(this._configs);\n        this.applyConfig({\n            log: {\n                blacklist: [99, 0],\n            },\n        });\n    }\n\n    public applyAttachment(attachmentCtor: Socket.ISocketAttachmentConstructor) {\n        const attachment = new attachmentCtor({\n            gameId: this.gameId,\n            listener: this._listener,\n        });\n        this.attachments.push(attachment);\n        return attachment;\n    }\n\n    public applyConfig(configs: Socket.ISocketConfigs) {\n        this._configs = lodash.merge(this._configs, configs);\n        Object.keys(configs).forEach((tag) => {\n            let config = this._configs[tag];\n            for (let key in config) {\n                let item = config[key];\n                let targetConfig = config[key];\n                if (targetConfig instanceof Array) {\n                    targetConfig = [...(item || []), ...targetConfig];\n                } else if (targetConfig instanceof Object) {\n                    targetConfig = { ...(item || {}), ...targetConfig };\n                }\n                this._configs[tag][key] = targetConfig;\n            }\n\n            this.attachments\n                .filter((v) => v.tag == tag)\n                .forEach((attachment) => {\n                    attachment.applyConfig(this._configs[tag]);\n                });\n        });\n    }\n\n    private enableGameEvent() {\n        cc.game.on(\n            cc.game.EVENT_HIDE,\n            () => {\n                if (this.state != SocketState.None) {\n                    this.stopCheckConnect();\n                    this.attachments.forEach((attach) => {\n                        attach.onBeforeUserClose?.();\n                    });\n                    this.disconnect();\n                }\n            },\n            this\n        );\n        cc.game.on(\n            cc.game.EVENT_SHOW,\n            () => {\n                if (this.state != SocketState.None) {\n                    this.stopCheckConnect();\n                    this.attachments.forEach((attach) => {\n                        attach.onBeforeUserClose?.();\n                    });\n                    this.reconnect();\n                }\n            },\n            this\n        );\n    }\n    private enableNetworkEvent() {\n        window.addEventListener(\"offline\", this.NetworkOffline);\n        window.addEventListener(\"online\", this.NetworkOnline);\n    }\n    private disableGameEvent() {\n        cc.game.targetOff(this);\n    }\n    private disableNetworkEvent() {\n        window.removeEventListener(\"offline\", this.NetworkOffline);\n        window.removeEventListener(\"online\", this.NetworkOnline);\n    }\n\n    private NetworkOnline = this.onNetworkOnline.bind(this);\n    private onNetworkOnline() {\n        if (this.state != SocketState.None) {\n            this.reconnect();\n        }\n    }\n\n    private NetworkOffline = this.onNetworkOffline.bind(this);\n    private onNetworkOffline() {\n        if (this.state == SocketState.None) {\n            return;\n        }\n        this.stopCheckConnect();\n        this.attachments.forEach((attach) => {\n            attach.onBeforeUserClose?.();\n        });\n        this.disconnect();\n\n        if (this.gameId == GameType.UNIVERSE) {\n            return;\n        }\n        UIMgr.showAlert({\n            contentText: CommonLanguage.networkClose,\n            style: UIMgr.ALERT_STYLE.POSITIVE,\n        }).onClose(() => {\n            UIMgr.applyLoadingUi(SceneControl.getInstance().launchScene(GameType.GAME_HALL));\n        });\n    }\n\n    public init(options: SocketInitOptions<MsgType, any>) {\n        this.options = options;\n        this.retryConnect = 0;\n        this.attachments.forEach((attachment) =>\n            attachment.onInit({\n                gameId: this.gameId,\n            })\n        );\n        TimerUtil.steup(this.checkTimeKey, this.checkConnect.bind(this), TIMEOUT_CONNECT);\n    }\n\n    public stopCheckConnect() {\n        if (TimerUtil.stop(this.checkTimeKey)) {\n        }\n    }\n    public checkConnect(count: number, option: { type?: string }) {\n        if (this.getState() == WebSocket.OPEN) {\n            this.stopCheckConnect();\n            return;\n        }\n        if (!this.options) {\n            this.stopCheckConnect();\n            return;\n        }\n\n        if (this.retryConnect >= 1) {\n            if (this.retryConnect >= 2) {\n                NewGameInfo.getInstance().switchHost(this.curentHost);\n            }\n        }\n\n        if (this.gameId == GameType.UNIVERSE) {\n        } else {\n            if (this.retryConnect > NewGameInfo.getInstance().hostLenght() + 1) {\n                UIMgr.hideLoadingToast();\n                UIMgr.showAlert({\n                    contentText: CommonLanguage.networkError,\n                    style: UIMgr.ALERT_STYLE.POSITIVE,\n                });\n                this.attachments.forEach((attach) => {\n                    attach.onBeforeUserClose?.();\n                });\n                this.disconnect();\n                this.stopCheckConnect();\n                return;\n            } else {\n                if (this.retryConnect) {\n                    UIMgr.showLoadingToast(\n                        Tools.formatString(CommonLanguage.retryConnect, {\n                            count:\n                                CommonLanguage?.count?.[this.retryConnect - 1] ?? this.retryConnect,\n                        })\n                    );\n                }\n            }\n        }\n        if (count >= 1) {\n            Lighter.getInstance().trackEnd(\n                this.getSocket()?.getHost?.(),\n                EVENT_CODE.RequestTimeout,\n                this.getSocket()?.getHost?.()\n            );\n        }\n        this.state = SocketState.Connect;\n        this.initHost();\n        this.disconnect();\n        //this.enableGameEvent();\n        this.enableNetworkEvent();\n        this.connect();\n        this.retryConnect++;\n        return option;\n    }\n\n    public reconnect(options: SocketInitOptions<MsgType, any> = {}) {\n        this.retryConnect = 1;\n        options = this.options = lodash.merge(this.options, options);\n        this.initHost();\n        this.close();\n        this.options = options;\n        this.attachments.forEach((attach) => {\n            attach.onBeforeUserClose?.();\n        });\n        this.stopCheckConnect();\n\n        TimerUtil.steup(this.checkTimeKey, this.checkConnect.bind(this), TIMEOUT_CONNECT, {\n            type: \"reconnect\",\n        });\n    }\n\n    public close() {\n        this.options = null;\n        this.state = SocketState.None;\n        CC_DEBUG && cc.log(`[socket] gameId:${this.gameId} close`);\n        this.attachments.forEach((attach) => {\n            attach.onBeforeUserClose?.();\n        });\n        this.stopCheckConnect();\n        this.disconnect();\n        this.disableGameEvent();\n        this.disableNetworkEvent();\n    }\n\n    protected onOpen() { }\n    protected abstract onAuthReq();\n\n    //如果游戏中有下面几个错误码需要 重写改函数实现\n    protected onError(error: ProtoObject<CommonProto.ErrorST>) {\n        /*  switch (error.Status) {\n            // 余额不足\n            case CommonProto.STATUS.INSUFFICIENT:\n            //筹码错误\n            case CommonProto.STATUS.CUBE_CHIP_ERROR:\n            //闲置时间过长\n            case CommonProto.STATUS.IDLE_TIMEOUT:\n            //操作不符合规则\n            case CommonProto.STATUS.PLAY_RULE: {\n                //业务层处理\n                break;\n            }\n        } */\n    }\n\n    protected onClose() { }\n\n    private error(error: ProtoObject<CommonProto.ErrorST>) {\n        this.onError(error);\n        this.options?.onError?.(error);\n    }\n\n    protected onMessage(data: Socket.TMessageObject<MsgType, any>) {\n        this.attachments.forEach((attach) => {\n            attach.onMessageHandle?.(data);\n        });\n        this.options?.onMessage?.(data);\n    }\n\n    protected getDecodeClass(msgType: MsgType) {\n        //获取proto 解析类\n        let ctor = this.getMessageCtor(msgType);\n        if (!ctor) {\n            for (let attachment of this.attachments) {\n                //赋值同时判断\n                if ((ctor = attachment.getMessageCtor(msgType))) {\n                    break;\n                }\n            }\n        }\n        return ctor;\n    }\n\n    protected onOpenHandler() {\n        this.attachments.forEach((attach) => {\n            attach.onOpen?.();\n        });\n        this.onOpen();\n        this.options?.onOpen?.();\n        this.onAuthReq();\n        if (this.gameId !== GameType.UNIVERSE) {\n            UIMgr.destroy(BundleCommonMgr.getInstance().getBundleNameDescForAlert());\n            if (this.retryConnect > 1) {\n                UIMgr.showLoadingToast(CommonLanguage.connectSuccess, 0.5);\n            } else {\n                UIMgr.hideLoadingToast();\n            }\n        }\n        this.state = SocketState.Open;\n    }\n\n    protected onCloseHandler() {\n        this.attachments.forEach((attach) => attach.onClose?.());\n        this.onClose();\n        this.options?.onClose?.();\n        /*   if (this.state == SocketState.Open) {\n            this.reconnect();\n        } */\n    }\n\n    public abstract getMessageCtor(msgType: MsgType);\n\n    protected send(msgType: MsgType, msgData: Socket.IMessageClass) {\n        this.attachments.forEach((attachment) => {\n            attachment.onSendMessage(msgType, msgData);\n        });\n        super.send(msgType, msgData);\n    }\n}\n","import CryptMgr from \"../../../../../../main/core/crypt/CryptMgr\";\nimport { Tools } from \"../../../../../../main/core/utils/Tools\";\nimport CommonSocket from \"../../../../../../main/core/ws/CommonSocket\";\nimport { CommonSocketUtil } from \"./CommonSocketUtil\";\n\nexport default abstract class BaseSocket<MsgType extends number> {\n    protected abstract gameId: number;\n    protected abstract host: string | string[];\n    protected abstract isEncrypt: boolean;\n    protected abstract cryptId: number;\n\n    protected curentHost: string = \"\";\n\n    protected aesKey: string = undefined;\n    private socket: CommonSocket = null;\n\n    protected connect() {\n        if (CC_DEBUG) {\n            CC_DEBUG && cc.log(`BaseSocket: connect`);\n        }\n        console.log(this.host, \"this.host\")\n        this.curentHost = this.host[0];\n        this.socket = new CommonSocket(\n            this.gameId,\n            this.curentHost,\n            this.onMessageHandler.bind(this),\n            this.onOpenHandler.bind(this),\n            this.onCloseHandler.bind(this)\n        );\n    }\n\n    protected getSocket() {\n        return this.socket;\n    }\n\n    protected disconnect() {\n        CC_DEBUG && cc.log(`BaseSocket: disconnect`);\n        this.socket?.close();\n        this.socket = null;\n    }\n\n    protected abstract getDecodeClass(msgType: MsgType);\n\n    protected abstract onMessage(data: Socket.TMessageObject<MsgType, any>): void;\n    protected abstract onOpenHandler(): void;\n\n    protected abstract onCloseHandler(): void;\n\n    protected getState() {\n        return this.socket?.state();\n    }\n\n    private onMessageHandler(data: Socket.TMessageData<MsgType, any>) {\n        data = this.decryptData(data);\n        if (data instanceof Uint8Array) {\n            let msgType: MsgType = CommonSocketUtil.getInstance().getMessageId(data.buffer) as any;\n            let msgData = data.slice(2);\n\n            //获取proto 解析类\n            let ctor = this.getDecodeClass(msgType);\n            if (!ctor) {\n                if (CC_DEBUG) {\n                    CC_DEBUG && cc.error(\"[socket] getDecodeClass failed: \" + msgType);\n                }\n                return;\n            }\n            let messageData = this.decode(ctor, msgData);\n            if (!messageData) {\n                if (CC_DEBUG) {\n                    // CC_DEBUG && cc.error(\"[socket] decode failed: \" + msgType, messageData);\n                }\n                return;\n            }\n            this.onMessage({\n                msgId: msgType,\n                msgData: messageData,\n                ctor: ctor,\n            });\n        } else {\n            this.onMessage(data);\n        }\n    }\n\n    private decode(\n        ctor: Socket.IMessageCtor,\n        msgData: ArrayBuffer\n    ): Socket.TMessageObject<MsgType, any> {\n        try {\n            let deserialize = ctor.deserialize(new Uint8Array(msgData));\n            return deserialize?.toObject() ?? null;\n        } catch (e) {\n            if (CC_DEBUG) {\n                //CC_DEBUG && cc.error(\"[socket] decode failed!\", ctor, msgData, e);\n            }\n        }\n    }\n\n    protected encode(msgType: MsgType, msgData: Socket.IMessageClass) {\n        let buffer = msgData.serialize();\n        buffer = CommonSocketUtil.getInstance().addMessageId(msgType as number, buffer);\n        return buffer;\n    }\n\n    protected send(msgType: MsgType, msgData: Socket.IMessageClass) {\n        let buffer = this.encode(msgType, msgData);\n        buffer = this.encryptData(buffer);\n        this.socket?.send(buffer);\n    }\n\n    protected decryptData(data: Socket.TMessageData<MsgType, any>) {\n        if (!this.isEncrypt) {\n            return new Uint8Array(data as ArrayBuffer);\n        }\n        data = CryptMgr.getInstance().aes_decrypt(data);\n        return data;\n    }\n\n    protected encryptData(buffer: Uint8Array) {\n        if (!this.isEncrypt) {\n            return buffer;\n        }\n        buffer = CryptMgr.getInstance().aes_encrypt(buffer, this.aesKey);\n        buffer = CommonSocketUtil.getInstance().addCryptId(this.cryptId, buffer);\n        return buffer;\n    }\n}","import { CurrencyUtil } from \"../../utils/CurrencyUtil\";\nimport { ChipUtil } from \"./ChipUtil\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class BetChip extends cc.Component {\n    @property(cc.Node)\n    private numItemListArr: Array<cc.Node> = [];\n\n    @property(cc.SpriteAtlas)\n    private atlas: cc.SpriteAtlas = null;\n\n    public initChip(chipIndex: number, faceValue: number): void {\n        if (chipIndex <= 0 || chipIndex >= 6) {\n            chipIndex = chipIndex <= 0 ? 0 : 5;\n        }\n\n        this.node.attr({ chipIndex: chipIndex, faceValue: faceValue });\n\n        let chipFrame = this.atlas?.getSpriteFrame?.(`common_chip_0${chipIndex + 1}`);\n        // let chipFrame = ChipUtil.getInstance().getChipTypeSpriteFrame(\n        //     `common_chip_0${chipIndex + 1}`\n        // );\n        this.node.getComponent(cc.Sprite).spriteFrame = chipFrame;\n\n        let chipFrameName = chipFrame.name;\n        let arr = chipFrameName.split(\"\");\n        let chipsNumType = arr[arr.length - 1] + \"_\";\n        this.initChipNumFrame(faceValue, chipsNumType);\n    }\n\n    private initNumItem(): void {\n        for (let i = 0, len = this.numItemListArr.length; i < len; i++) {\n            let numItem = this.numItemListArr[i];\n            if (numItem && numItem.active) {\n                numItem.active = false;\n            }\n        }\n    }\n\n    private initChipNumFrame(value: number, chipsNumType: string): void {\n        if (value != null && value > 0) {\n            this.initNumItem();\n\n            let numSpriteFrame: cc.SpriteFrame = null;\n            let numStr = CurrencyUtil.formatChipMoney(value).replace(\"Cr\", \"C\");\n            for (let i = 0, len = numStr.length; i < len; i++) {\n                let numCode = numStr[i];\n                if (chipsNumType) {\n                    numSpriteFrame = this.atlas?.getSpriteFrame?.(chipsNumType + numCode);\n                    //numSpriteFrame = ChipUtil.getInstance().getChipVauleSpriteFrame(chipsNumType + numCode);\n                }\n                let numItem = this.numItemListArr[i];\n                if (numItem && numSpriteFrame) {\n                    numItem.active = true;\n                    numItem.getComponent(cc.Sprite).spriteFrame = numSpriteFrame;\n                }\n            }\n        }\n    }\n}\n","import PopUpViewBase from \"../../../../../../../main/core/popUpViewUtils/PopUpViewBase\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class BingoRuleDialog extends PopUpViewBase {}\n","import UIMgr from \"../Component/base/UIMgr\";\n\nexport namespace BlackIpUtil {\n    export let blackListFlag: boolean | string = false;\n\n    /**\n     * 检测当前用户是否在黑名单？\n     */\n    export function chcekIsInBlackList(showAlert = true) {\n        let isInBlackList = !!BlackIpUtil.blackListFlag;\n        isInBlackList &&\n            showAlert &&\n            UIMgr.showAlert({\n                contentText: BlackIpUtil.blackListFlag as string,\n                contextAlign: cc.macro.TextAlignment.CENTER,\n                style: UIMgr.ALERT_STYLE.POSITIVE,\n            });\n        return isInBlackList;\n    }\n}\n","import CommonLanguage from \"../../../../../plaza/common/Script/conf/lang/CommonLanguage\";\nimport BrcGraphicsMgr from \"../../../../../plaza/common/Script/Component/brc/BrcGraphicsMgr\";\nimport { SpriteManager } from \"../../../../../../main/core/ui/base/SpriteManager\";\nimport CommonSkin from \"../../conf/skin/CommonSkin\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class BrcBigBattleDLTrendFrame extends cc.Component {\n    @property(cc.Node)\n    public dlTrend: cc.Node = null;\n\n    @property(cc.ScrollView)\n    private mainScrollView: cc.ScrollView = null;\n\n    @property(cc.Node)\n    private mainContent: cc.Node = null;\n\n    @property(cc.Node)\n    private dlBall: cc.Node = null;\n\n    @property({ type: cc.Node, tooltip: \"Loading提示\" })\n    private loadingNode: cc.Node = null;\n\n    @property\n    _itemSize: number = 20;\n    @property\n    _maxLine: number = 6;\n    @property\n    _maxItem: number = 24;\n    @property\n    _trendData: any[] = [];\n    @property\n    _dataInfoArr: any[] = [];\n    @property\n    _maxLineMinusArr: any[] = [];\n\n    private _clickCallback: Function = null;\n    private _miniItem: number = 24;\n\n    protected onLoad(): void {\n        let self = this;\n        if (cc.isValid(self.mainContent)) {\n            self.mainContent.on(\"touchend\", function () {\n                if (typeof self._clickCallback == \"function\") {\n                    self._clickCallback();\n                }\n            });\n        }\n    }\n\n    /**\n     * 初始化行数，列数，格子大小\n     * @param row\n     * @param column\n     * @param itemSize\n     * @param clickCallback\n     */\n    public init(row: number, column: number, itemSize: number, clickCallback?: Function): void {\n        let self = this;\n        self._maxLine = row;\n        self._maxItem = self._miniItem = column;\n        self._itemSize = itemSize;\n        self._clickCallback = clickCallback;\n    }\n\n    protected drawTrendTableView(): void {\n        let self = this;\n        if (cc.isValid(self.dlTrend)) {\n            let graphics = self.dlTrend.getComponent(cc.Graphics);\n            BrcGraphicsMgr.drawTrendTableView(\n                graphics,\n                self._itemSize,\n                self._maxLine,\n                self._maxItem\n            );\n        }\n    }\n\n    public initWithTrendData(trendData: any[], isUpdate: boolean): void {\n        let self = this;\n        self._trendData = trendData || [];\n        if (self._trendData && self._trendData.length > 0) {\n            let trendDataLength = self._trendData.length;\n            let dataColumn = trendDataLength + 1;\n            if (dataColumn < self._miniItem) {\n                dataColumn = self._miniItem;\n            }\n            self._maxItem = dataColumn;\n            let maxCount = self._trendData[0].length;\n            let maxIndex = 0;\n            let bigCountIndexArr = [];\n            for (let i = 1; i < self._trendData.length; i++) {\n                let trendDatas = self._trendData[i];\n                let jLen = trendDatas.length;\n                if (jLen >= maxCount) {\n                    maxIndex = i;\n                    maxCount = jLen;\n                }\n                if (jLen > self._maxLine) {\n                    bigCountIndexArr.push({\n                        index: i,\n                        count: jLen,\n                    });\n                }\n            }\n            let diffValue = maxCount - self._maxLine;\n            if (diffValue > 0) {\n                let maxItem = maxIndex + 1 + diffValue;\n                if (maxItem >= self._maxItem) {\n                    self._maxItem = maxItem;\n                }\n            }\n            for (let i = 0, len = bigCountIndexArr.length; i < len; i++) {\n                let bigCountInfo = bigCountIndexArr[i];\n                let index = bigCountInfo.index;\n                let count = bigCountInfo.count;\n                let diffValue = count - self._maxLine;\n                for (let j = 0; j < diffValue; j++) {\n                    self._maxLineMinusArr.push(index + j + 1);\n                }\n            }\n            let maxWidth = self._maxItem * self._itemSize;\n            if (cc.isValid(self.mainContent)) {\n                self.mainContent.width = maxWidth;\n            }\n            if (cc.isValid(self.dlTrend)) {\n                self.dlTrend.width = maxWidth;\n                self.dlTrend.x = 0;\n                self.dlTrend.y = 0;\n            }\n        }\n        self.drawTrendTableView();\n        self.disposeTrendDataAction();\n\n        if (isUpdate) {\n            self.updateUIWithTrendData();\n        } else {\n            self.drawCircleWithData();\n        }\n        self.scheduleOnce(function () {\n            if (cc.isValid(self.mainScrollView)) {\n                self.mainScrollView.scrollToRight(0);\n            }\n        }, 0);\n\n        let isLoading = !self._trendData || self._trendData.length == 0;\n        self.updateViewState(isLoading);\n    }\n\n    disposeTrendDataAction() {\n        let self = this;\n        self._dataInfoArr = [];\n        if (!self._trendData) {\n            return;\n        }\n        for (let i = 0, len = self._trendData.length; i < len; i++) {\n            let trendDatas = self._trendData[i];\n            let jLen = trendDatas.length;\n            let maxLine = self._maxLine;\n            if (self._maxLineMinusArr.indexOf(i) >= 0) {\n                maxLine -= 1;\n            }\n            for (let j = 0; j < jLen; j++) {\n                let trendData = trendDatas[j];\n                let winIndex = trendData.win || 0;\n                let heCount = trendData.he || 0;\n                let lineIndex = i;\n                let rowIndex = j;\n                if (j >= maxLine) {\n                    lineIndex = j - maxLine + i + 1;\n                    rowIndex = maxLine - 1;\n                }\n                let y = self._itemSize * self._maxLine;\n                let ballX = (self._itemSize / 2) * (lineIndex * 2 + 1);\n                let ballY = y - (self._itemSize / 2) * (rowIndex * 2 + 1);\n                let ballInfo = {\n                    x: ballX,\n                    y: ballY,\n                    he: heCount,\n                    win: winIndex,\n                };\n                self._dataInfoArr.push(ballInfo);\n            }\n        }\n    }\n\n    private drawCircleWithData(): void {\n        let self = this;\n        if (!cc.isValid(self.mainContent)) {\n            return;\n        }\n        for (let i = 0, len = self._dataInfoArr.length; i < len; i++) {\n            let ballInfo = self._dataInfoArr[i];\n            let trendBall = cc.instantiate(self.dlBall);\n            self.mainContent.addChild(trendBall);\n            self.updateTrendBall(trendBall, ballInfo, false);\n        }\n    }\n\n    private updateUIWithTrendData(): void {\n        let self = this;\n        if (!cc.isValid(self.mainContent)) return;\n        let childrenArr = self.mainContent.children;\n        let childrenCount = childrenArr.length;\n        let dataInfoCount = self._dataInfoArr.length;\n        if (childrenCount - 1 > dataInfoCount) {\n            let diffValue = childrenCount - dataInfoCount - 1;\n            for (let i = 0; i < diffValue; i++) {\n                let childNode = childrenArr[1];\n                if (childNode) {\n                    self.mainContent.removeChild(childNode);\n                }\n            }\n        }\n        for (let i = 0; i < dataInfoCount; i++) {\n            let ballInfo = self._dataInfoArr[i];\n            let ballNode = childrenArr[i + 1];\n            if (ballNode == null) {\n                ballNode = cc.instantiate(self.dlBall);\n                self.mainContent.addChild(ballNode);\n            }\n            let shouldBlink = i == dataInfoCount - 1;\n            self.updateTrendBall(ballNode, ballInfo, shouldBlink);\n        }\n    }\n\n    private updateTrendBall(ballNode, ballInfo, shouldBlink): void {\n        let self = this;\n        ballNode.opacity = 255;\n\n        SpriteManager.getInstance()\n            .loadSpriteBundle(\n                [\n                    CommonSkin.LoadOnDemand.tk_room_quan_blue,\n                    CommonSkin.LoadOnDemand.tk_room_quan_red,\n                ][ballInfo.win]\n            )\n            .then((res) => {\n                ballNode.getComponent(cc.Sprite).spriteFrame = res;\n            });\n\n        let he = ballInfo.he;\n        if (he != null && he > 0) {\n            let heNode = ballNode.getChildByName(\"he\");\n            if (heNode) {\n                heNode.getComponent(cc.Label).string = he + \"\";\n            }\n            self.setHeNodeColor(heNode, ballInfo.win);\n        } else {\n            let heNode = ballNode.getChildByName(\"he\");\n            if (heNode) {\n                heNode.getComponent(cc.Label).string = \"\";\n            }\n        }\n        ballNode.x = ballInfo.x;\n        ballNode.y = ballInfo.y;\n        if (shouldBlink) {\n            let action = cc.blink(3, 5);\n            ballNode.runAction(action);\n        }\n    }\n\n    private setHeNodeColor(node, index = 0) {\n        if (!cc.isValid(node)) {\n            return;\n        }\n        if (index == 0) {\n            node.color = new cc.Color(70, 133, 163);\n        } else {\n            node.color = new cc.Color(178, 73, 73);\n        }\n    }\n\n    private updateViewState(isLoading: boolean): void {\n        let self = this;\n        if (isLoading) {\n            if (cc.isValid(self.mainScrollView)) {\n                self.mainScrollView.node.active = false;\n            }\n            if (cc.isValid(self.loadingNode)) {\n                self.loadingNode.active = true;\n                UIDepend.LabelManager.setLabelString(self.loadingNode, CommonLanguage.loading);\n            }\n        } else {\n            if (cc.isValid(self.mainScrollView)) {\n                self.mainScrollView.node.active = true;\n            }\n            if (cc.isValid(self.loadingNode)) {\n                self.loadingNode.active = false;\n                UIDepend.LabelManager.setLabelString(self.loadingNode, \"\");\n            }\n        }\n    }\n}\n","import CommonLanguage from \"../../conf/lang/CommonLanguage\";\n\nclass BrcGraphicsMgr {\n    static drawTrendTableView(\n        graphics,\n        itemSize,\n        maxLine,\n        maxItem,\n        tableBgColor: string = CommonLanguage.tableBgColor,\n        tableLineFillColor: string = CommonLanguage.tableLineFillColor,\n        tableLineStrokeColor: string = CommonLanguage.tableLineStrokeColor\n    ): void {\n        if (graphics) {\n            graphics.clear();\n\n            if (tableBgColor) {\n                graphics.fillColor = cc.color().fromHEX(tableBgColor);\n                let rectX = 0;\n                let rectY = 0;\n                let rectWidth = itemSize * maxItem;\n                let rectHeight = itemSize * maxLine;\n                graphics.rect(rectX, rectY, rectWidth, rectHeight);\n                graphics.fill();\n            }\n\n            graphics.fillColor = cc.color().fromHEX(tableLineFillColor);\n            graphics.strokeColor = cc.color().fromHEX(tableLineStrokeColor);\n            graphics.lineWidth = 2;\n            graphics.lineJoin = cc.Graphics.LineJoin.ROUND;\n            graphics.lineCap = cc.Graphics.LineCap.ROUND;\n            let x = 0;\n            let y = itemSize * maxLine;\n            for (let line = 0; line < maxLine + 1; line++) {\n                graphics.moveTo(x, y - itemSize * line);\n                graphics.lineTo(itemSize * maxItem + x, y - itemSize * line);\n            }\n            x = 0;\n            y = 0;\n            for (let row = 0; row < maxItem + 1; row++) {\n                graphics.moveTo(x + itemSize * row, y);\n                graphics.lineTo(x + itemSize * row, y + itemSize * 6);\n            }\n            graphics.stroke();\n        }\n    }\n}\n\nexport default BrcGraphicsMgr;\n","import { SpriteManager } from \"../../../../../../main/core/ui/base/SpriteManager\";\nimport CommonLanguage from \"../../../../../plaza/common/Script/conf/lang/CommonLanguage\";\nimport BrcGraphicsMgr from \"../../Component/brc/BrcGraphicsMgr\";\nimport CommonSkin from \"../../conf/skin/CommonSkin\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class BrcRedBlackDLTrendFrame extends cc.Component {\n    @property(cc.Node)\n    protected dlTrend: cc.Node = null;\n\n    @property(cc.ScrollView)\n    private mainScrollView: cc.ScrollView = null;\n\n    @property(cc.Node)\n    private mainContent: cc.Node = null;\n\n    @property(cc.Node)\n    private dlBall: cc.Node = null;\n\n    @property({ type: cc.Node, tooltip: \"Loading提示\" })\n    private loadingNode: cc.Node = null;\n\n    @property\n    _itemSize: number = 20;\n    @property\n    _maxLine: number = 6;\n    @property\n    _maxItem: number = 32;\n    @property\n    _trendData: any[] = [];\n    @property\n    _dataInfoArr: any[] = [];\n    @property\n    _maxLineMinusArr: any[] = [];\n\n    private _clickCallback = null;\n    private _miniItem: number = 32;\n\n    protected onLoad(): void {\n        let self = this;\n        if (cc.isValid(self.mainContent)) {\n            self.mainContent.on(\"touchend\", function () {\n                if (typeof self._clickCallback == \"function\") {\n                    self._clickCallback();\n                }\n            });\n        }\n    }\n\n    /**\n     * 初始化行数，列数，格子大小\n     * @param row\n     * @param column\n     * @param itemSize\n     * @param clickCallback\n     */\n    public init(row: number, column: number, itemSize: number, clickCallback?: Function): void {\n        let self = this;\n        self._maxLine = row;\n        self._maxItem = self._miniItem = column;\n        self._itemSize = itemSize;\n        self._clickCallback = clickCallback;\n    }\n\n    protected drawTrendTableView(): void {\n        let self = this;\n        if (cc.isValid(self.dlTrend)) {\n            let graphics = self.dlTrend.getComponent(cc.Graphics);\n            BrcGraphicsMgr.drawTrendTableView(\n                graphics,\n                self._itemSize,\n                self._maxLine,\n                self._maxItem\n            );\n        }\n    }\n\n    public initWithTrendData(trendData: any[], isUpdate: boolean): void {\n        let self = this;\n        self._trendData = trendData || [];\n        if (self._trendData && self._trendData.length > 0) {\n            let trendDataLength = self._trendData.length;\n            let dataColumn = trendDataLength + 1;\n            if (dataColumn < self._miniItem) {\n                dataColumn = self._miniItem;\n            }\n            self._maxItem = dataColumn;\n            let maxCount = self._trendData[0].length;\n            let maxIndex = 0;\n            let bigCountIndexArr = [];\n            for (let i = 1; i < self._trendData.length; i++) {\n                let trendDatas = self._trendData[i];\n                let jLen = trendDatas.length;\n                if (jLen >= maxCount) {\n                    maxIndex = i;\n                    maxCount = jLen;\n                }\n                if (jLen > self._maxLine) {\n                    bigCountIndexArr.push({\n                        index: i,\n                        count: jLen,\n                    });\n                }\n            }\n            let diffValue = maxCount - self._maxLine;\n            if (diffValue > 0) {\n                let maxItem = maxIndex + 1 + diffValue;\n                if (maxItem >= self._maxItem) {\n                    self._maxItem = maxItem;\n                }\n            }\n            let maxWidth = self._maxItem * self._itemSize;\n            if (cc.isValid(self.mainContent)) {\n                self.mainContent.width = maxWidth;\n            }\n            if (cc.isValid(self.dlTrend)) {\n                self.dlTrend.width = maxWidth;\n                self.dlTrend.x = 0;\n                self.dlTrend.y = 0;\n            }\n            for (let i = 0, len = bigCountIndexArr.length; i < len; i++) {\n                let bigCountInfo = bigCountIndexArr[i];\n                let index = bigCountInfo.index;\n                let count = bigCountInfo.count;\n                let diffValue = count - self._maxLine;\n                for (let j = 0; j < diffValue; j++) {\n                    self._maxLineMinusArr.push(index + j + 1);\n                }\n            }\n        }\n        self.drawTrendTableView();\n        self.disposeTrendDataAction();\n\n        if (isUpdate) {\n            self.updateUIWithTrendData();\n        } else {\n            self.drawCircleWithData();\n        }\n        self.scheduleOnce(function () {\n            if (cc.isValid(self.mainScrollView)) {\n                self.mainScrollView.scrollToRight(0);\n            }\n        }, 0);\n\n        let isLoading = !self._trendData || self._trendData.length == 0;\n        self.updateViewState(isLoading);\n    }\n\n    private disposeTrendDataAction() {\n        let self = this;\n        self._dataInfoArr = [];\n        if (!self._trendData) {\n            return;\n        }\n        /**\n         * 存在一种情况，上一列的开奖结果大于6个，会向右延伸渲染，那么其下一个或更多列的最大行数就要减1\n         * 此种情况及其罕见，这里最多只计算两列数据大于6个\n         * */\n        for (let i = 0, len = self._trendData.length; i < len; i++) {\n            let trendDatas = self._trendData[i];\n            let jLen = trendDatas.length;\n            let maxLine = self._maxLine;\n            if (self._maxLineMinusArr.indexOf(i) >= 0) {\n                maxLine -= 1;\n            }\n            for (let j = 0; j < jLen; j++) {\n                let trendData = trendDatas[j];\n                let winIndex = trendData.win || 0;\n                let lineIndex = i;\n                let rowIndex = j;\n                if (j >= maxLine) {\n                    lineIndex = j - maxLine + i + 1;\n                    rowIndex = maxLine - 1;\n                }\n                let y = self._itemSize * self._maxLine;\n                let ballX = (self._itemSize / 2) * (lineIndex * 2 + 1);\n                let ballY = y - (self._itemSize / 2) * (rowIndex * 2 + 1);\n                let ballInfo = {\n                    x: ballX,\n                    y: ballY,\n                    win: winIndex,\n                };\n                self._dataInfoArr.push(ballInfo);\n            }\n        }\n    }\n\n    private drawCircleWithData() {\n        let self = this;\n        if (!cc.isValid(self.mainContent)) {\n            return;\n        }\n        for (let i = 0, len = self._dataInfoArr.length; i < len; i++) {\n            let ballInfo = self._dataInfoArr[i];\n            let trendBall = cc.instantiate(self.dlBall);\n            if (cc.isValid(trendBall)) {\n                self.mainContent.addChild(trendBall);\n            }\n            self.updateTrendBall(trendBall, ballInfo, false);\n        }\n    }\n\n    private updateUIWithTrendData(): void {\n        let self = this;\n        if (!cc.isValid(self.mainContent)) {\n            return;\n        }\n        let childrenArr = self.mainContent.children;\n        let childrenCount = childrenArr.length;\n        let dataInfoCount = self._dataInfoArr.length;\n        if (childrenCount - 1 > dataInfoCount) {\n            let diffValue = childrenCount - dataInfoCount - 1;\n            for (let i = 0; i < diffValue; i++) {\n                let childNode = childrenArr[1];\n                if (childNode) {\n                    self.mainContent.removeChild(childNode);\n                }\n            }\n        }\n        for (let i = 0; i < dataInfoCount; i++) {\n            let ballInfo = self._dataInfoArr[i];\n            let ballNode = childrenArr[i + 1];\n            if (ballNode == null) {\n                ballNode = cc.instantiate(self.dlBall);\n                self.mainContent.addChild(ballNode);\n            }\n            let shouldBlink = i == dataInfoCount - 1;\n            self.updateTrendBall(ballNode, ballInfo, shouldBlink);\n        }\n    }\n\n    private updateTrendBall(ballNode, ballInfo, shouldBlink) {\n        ballNode.opacity = 255;\n        SpriteManager.getInstance()\n            .loadSpriteBundle(\n                [\n                    CommonSkin.LoadOnDemand.tk_room_quan_black,\n                    CommonSkin.LoadOnDemand.tk_room_quan_red,\n                ][ballInfo.win]\n            )\n            .then((res) => {\n                ballNode.getComponent(cc.Sprite).spriteFrame = res;\n            });\n        ballNode.x = ballInfo.x;\n        ballNode.y = ballInfo.y;\n        if (shouldBlink) {\n            let action = cc.blink(3, 5);\n            ballNode.runAction(action);\n        }\n    }\n\n    private updateViewState(isLoading: boolean): void {\n        let self = this;\n        if (isLoading) {\n            if (cc.isValid(self.mainScrollView)) {\n                self.mainScrollView.node.active = false;\n            }\n            if (cc.isValid(self.loadingNode)) {\n                self.loadingNode.active = true;\n                UIDepend.LabelManager.setLabelString(self.loadingNode, CommonLanguage.loading);\n            }\n        } else {\n            if (cc.isValid(self.mainScrollView)) {\n                self.mainScrollView.node.active = true;\n            }\n            if (cc.isValid(self.loadingNode)) {\n                self.loadingNode.active = false;\n                UIDepend.LabelManager.setLabelString(self.loadingNode, \"\");\n            }\n        }\n    }\n}\n","import { Injector } from \"../../../../../../../main/core/utils/decorators/Injector\";\nimport BaseSocketAttachment from \"../../../service/ws/attachment/BaseSocketAttachment\";\nimport { UniverseProto } from \"../../../universe/proto/UniverseProto\";\nimport UniverseSocketMgr from \"../../../universe/UniverseSocketMgr\";\nimport CommonBroadCastObserver from \"../../obs/CommonBroadCastObserver\";\n\nconst { MessageID } = UniverseProto;\n\nexport default class CommonBroadCastSocketAttachment extends BaseSocketAttachment {\n    public tag: string = \"broadcast\";\n\n    @Injector.Inject(CommonBroadCastObserver)\n    private observer: CommonBroadCastObserver = null;\n\n    public onMessage(data: Socket.TMessageObject<UniverseProto.MessageID, any>): void {\n        switch (data.msgId) {\n            case MessageID.BROADCAST_NT: {\n                this.observer.push(data.msgData);\n                break;\n            }\n            case MessageID.BROADCASTS_NT: {\n                let ret = data.msgData as ProtoObject<UniverseProto.BroadCastsNT>;\n                this.observer.push(ret.BroadCastList);\n                break;\n            }\n        }\n    }\n}\nUniverseSocketMgr.applyAttachment(CommonBroadCastSocketAttachment);\n","import { BundleMgr } from \"../../../../../main/core/bd/BundleMgr\";\nimport { H5Util } from \"../../../../../main/core/platform/H5Util\";\nimport { PlatformType } from \"../../../../../main/core/platform/PlatformType\";\nimport SkeletonHelper from \"../../../../../main/core/utils/class/SkeletonHelper\";\nimport { lodash } from \"../../../../../main/core/utils/NpmExport\";\nimport { Tools } from \"../../../../../main/core/utils/Tools\";\nimport CommonSkin from \"../conf/skin/CommonSkin\";\n\nexport namespace BrowserUtil {\n    type ServerStringType = \"sys_url\" | \"app_url\" | string;\n    type ServerNumberType = BrowserType;\n    type OpenType = ServerNumberType | ServerStringType;\n    export type QueryParamsType = { [key: string]: string };\n\n    interface OpenOption {\n        type: OpenType;\n        url: string;\n        direction?: DirectionType;\n        param?: any;\n        withUserInfo?: boolean;\n        hoverMenu?: boolean;\n    }\n\n    export enum BrowserType {\n        None,\n        WebView,\n        Browser,\n    }\n\n    export enum DirectionType {\n        None,\n        Landscape,\n        Portrait,\n    }\n\n    export function transateBrowserType(type: string | number): BrowserType {\n        //纯浏览器时直接返回 BrowserType.Browser\n        let isH5 = H5Util.getInstance().platform === PlatformType.H5;\n        if (isH5) return BrowserType.Browser;\n\n        switch (typeof type) {\n            case \"number\": {\n                return type;\n            }\n            case \"string\": {\n                return {\n                    [\"sys_url\"]: BrowserType.Browser,\n                    [\"app_url\"]: BrowserType.WebView,\n                }[type];\n            }\n        }\n    }\n\n    export function open(option: OpenOption) {\n        const {\n            type,\n            url,\n            direction = DirectionType.None,\n            withUserInfo = false,\n            hoverMenu = false,\n            param = {},\n        } = option;\n        const transateType = transateBrowserType(type);\n\n        if (withUserInfo) {\n            lodash.merge(param, {\n                userid: CommonDepend.UserManager.uid,\n                token: CommonDepend.UserManager.token,\n                brand_code: CommonDepend.AppParamManager.getBrandCode(),\n                aid: CommonDepend.AppParamManager.getDeviceID(),\n            });\n        }\n\n        lodash.merge(param, {\n            orientation: [undefined, \"landscape\", \"portrait\"][direction],\n            hoverMenu,\n        });\n\n        const newUrl = Tools.transateUrlParams(url, param);\n\n        return openBrowser(transateType, newUrl, direction);\n    }\n\n    export async function openBrowser(type: BrowserType, url: string, direction: DirectionType) {\n        switch (type) {\n            case BrowserType.WebView: {\n                await playPortraitAnim(direction);\n                CommonDepend.PlatformUtil.openUrlByWebView(url);\n                break;\n            }\n            case BrowserType.Browser: {\n                let isSafari = H5Util.getInstance().isSafari;\n                !isSafari && (await playPortraitAnim(direction));\n                CommonDepend.PlatformUtil.openUrlByBrowser(Promise.resolve(url));\n                break;\n            }\n        }\n    }\n\n    export async function playPortraitAnim(direction: DirectionType) {\n        if (direction !== DirectionType.Portrait) {\n            return;\n        }\n        //纵向播放动画后才打开\n        let canvas: cc.Node = CommonDepend.CocosUtils.getSceneCanvas();\n        const helper = SkeletonHelper.createInParent(canvas, {\n            position: cc.v3(), //可选参数设置位置\n        });\n        try {\n            await helper.load(CommonSkin.Priority.JumpToAppealAnim);\n            await helper.play(helper.getAnimationNames()[0]);\n            helper.getNode().removeFromParent();\n            return true;\n        } catch (e) {\n            return true;\n        }\n    }\n\n    export function queryStringEncoding(obj: QueryParamsType) {\n        let str = [];\n        for (let p in obj)\n            if (Object.prototype.hasOwnProperty.call(obj, p)) {\n                str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\n            }\n        return str.join(\"&\");\n    }\n}\n","import CommonSkin from \"../conf/skin/CommonSkin\";\n\nexport class BundleCommonMgr {\n    private static _instance: BundleCommonMgr = null;\n\n    public static getInstance() {\n        if (!this._instance) {\n            this._instance = new BundleCommonMgr();\n        }\n\n        return this._instance;\n    }\n\n    public getBundleNameDescForCommonGame(): IResDescribe {\n        return CommonSkin.Priority.commonGame;\n    }\n\n    public getBundleNameDescForToastUI(): IResDescribe {\n        return CommonSkin.Priority.ToastUI;\n    }\n\n    public getBundleNameDescForLoadingUI(): IResDescribe {\n        return CommonSkin.Priority.LoadingUI;\n    }\n\n    public getBundleNameDescForAlert(): IResDescribe {\n        return CommonSkin.Priority.Alert;\n    }\n\n    public getBundleNameDescForStartAndStopAnim(): IResDescribe {\n        return CommonSkin.Priority.StartAndStopAnim;\n    }\n\n    public getBundleNameDescForQbCommonBtnBack(): IResDescribe {\n        return CommonSkin.LoadOnDemand.backBtn;\n    }\n\n    public getBundleNameDescForCommonBtnPeople(): IResDescribe {\n        return CommonSkin.LoadOnDemand.commonPeopleBtn;\n    }\n\n    public getBundleNameDescForCommonGameBtnRechange(): IResDescribe {\n        return CommonSkin.LoadOnDemand.RechargeBtn;\n    }\n\n    public getBundleNameDescForBetChip(): IResDescribe {\n        return CommonSkin.UnPriority.BetChip;\n    }\n\n    public getBundleNameDescForGameRuleContent(): IResDescribe {\n        return CommonSkin.UnPriority.gameRuleContent;\n    }\n\n    public getBundleNameDescForLoadingWithFont(): IResDescribe {\n        return CommonSkin.LoadOnDemand.LoadingWithFont;\n    }\n}\n","import PopUpViewBase from \"../../../../../../../main/core/popUpViewUtils/PopUpViewBase\";\nimport CommonRuleLanguage from \"../lang/CommonRuleLanguage\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class CachetaRuleDialog extends PopUpViewBase {\n    @property({ type: cc.Node, displayName: \"\" })\n    closeN: cc.Node = null;\n\n    @property({ type: cc.Node, displayName: \"\" })\n    left: cc.Node = null;\n\n    @property({ type: cc.ScrollView, displayName: \"\" })\n    right: cc.ScrollView = null;\n\n    @property([cc.Node])\n    pages: cc.Node[] = [];\n\n    onLoad() {\n        this.left.children.forEach((node, index) => {\n            node.on(\"click\", () => {\n                this.right.stopAutoScroll();\n                this.pages.forEach((node) => {\n                    node.active = false;\n                });\n                this.pages[index].active = true;\n                this.pages[index].opacity = 0;\n                this.scheduleOnce(() => {\n                    this.right.scrollToTop();\n                });\n                cc.tween(this.pages[index]).to(0.5, { opacity: 255 }).start();\n            });\n        });\n\n        this.closeN.on(\"click\", () => {\n            this.onCloseClick();\n        });\n        this.initText();\n    }\n\n    initText() {\n        // cc.find(\"content/title\", this.node).getComponent(cc.Label).string =\n        //     CommonRuleLanguage.title;\n        let texts = CommonRuleLanguage.rule.cacheta;\n        this.left.children.forEach((node, idx) => {\n            node.getChildByName(\"lab\").getComponent(cc.Label).string = texts[idx].pageTitle;\n            cc.find(\"selected/lab\", node).getComponent(cc.Label).string = texts[idx].pageTitle;\n        });\n\n        let content = cc.find(\"content/right/view/content\", this.node);\n        content.children.forEach((node, idx) => {\n            if (idx == 0) {\n                node.getChildByName(\"tip\").getComponent(cc.Label).string = texts[idx].content;\n            } else if (idx == 1 || idx == 2) {\n                node.getChildByName(\"title1\").getComponent(cc.Label).string = texts[idx].title1;\n                node.getChildByName(\"tip1\").getComponent(cc.Label).string = texts[idx].content1;\n\n                node.getChildByName(\"title2\").getComponent(cc.Label).string = texts[idx].title2;\n                node.getChildByName(\"tip2\").getComponent(cc.Label).string = texts[idx].content2;\n\n                node.getChildByName(\"title3\").getComponent(cc.Label).string = texts[idx].title3;\n                node.getChildByName(\"tip3\").getComponent(cc.Label).string = texts[idx].content3;\n                if (idx == 1) {\n                    node.getChildByName(\"tip4\").getComponent(cc.Label).string = texts[idx].content4;\n                    node.getChildByName(\"tip5\").getComponent(cc.Label).string = texts[idx].content5;\n                }\n            }\n        });\n    }\n\n    private onCloseClick(): void {\n        this.close();\n    }\n}\n","export enum CalendarDayType {\n    /** 属于上一个月 */\n    IN_PRE_MONTH,\n    /** 属于当前月 */\n    IN_CUR_MONTH,\n    /** 属于下一个月 */\n    IN_NEXT_MONTH,\n}","import { CalendarDayType } from \"./CalendarEnum\";\nimport { ICalendarItemInfo } from \"./CalendarInterface\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class CalendarItem extends cc.Component {\n    @property(cc.Label)\n    lbDay: cc.Label = null;\n\n    @property(cc.Node)\n    spSel: cc.Node = null;\n\n    @property({ tooltip: \"当前选择的这一天的文字颜色\" })\n    curSelectDayColor: cc.Color = cc.color();\n\n    @property({ tooltip: \"日期小于今天并且属于上一个月或者下一个月文字颜色\" })\n    preOrNextMonthColor: cc.Color = cc.color();\n\n    @property({ tooltip: \"日期大于今天并且属于下一个月文字颜色\" })\n    nextMonthColor: cc.Color = cc.color();\n\n    @property({ tooltip: \"日期大于今天并且属于本月文字颜色\" })\n    greaterThanTodayColor: cc.Color = cc.color();\n\n    @property({ tooltip: \"日期属于当前选择月并且日期少于今天的文字颜色\" })\n    curMonthColor: cc.Color = cc.color();\n\n    private _dayItemInfo: ICalendarItemInfo = null;\n    private selectCallFunc: (_dayItemInfo: ICalendarItemInfo) => void = null;\n    private selectMinTimestampLimit:number = 0;\n\n     /**\n     * \n     * @param func 选择日期的回调函数\n     * @param selectMinTimestampLimit  能选择的最小的日期的时间戳\n     */\n    public init(func: (_dayItemInfo: ICalendarItemInfo) => void, selectMinTimestampLimit:number) {\n        this.selectCallFunc = func;\n        this.selectMinTimestampLimit = selectMinTimestampLimit;\n    }\n\n    setDay(dayItemInfo: ICalendarItemInfo) {\n        this._dayItemInfo = dayItemInfo;\n        this.lbDay.string = String(this._dayItemInfo.day);\n\n        let dayTimestamp = new Date(\n            this._dayItemInfo.inYear,\n            this._dayItemInfo.inMonth,\n            this._dayItemInfo.day\n        ).getTime();\n        let curTimestamp = new Date(\n            this._dayItemInfo.curYear,\n            this._dayItemInfo.curMonth,\n            this._dayItemInfo.curDay\n        ).getTime();\n        \n        this.setDayLabColor(dayTimestamp, curTimestamp, dayItemInfo.isSelect);\n        this.setDayBG(dayItemInfo.isSelect);\n        this.setInteractable(dayTimestamp, curTimestamp);\n    }\n\n    private setInteractable(dayTimestamp: number, curTimestamp: number) {\n        if (dayTimestamp > curTimestamp || dayTimestamp < this.selectMinTimestampLimit) {\n            this.node.getComponent(cc.Button).interactable = false;\n        } else {\n            this.node.getComponent(cc.Button).interactable = true;\n        }\n    }\n\n    private setDayBG(isCurSelectDay:Boolean) {\n        if (isCurSelectDay) {\n            this.spSel.active = true;\n        } else {\n            this.spSel.active = false;\n        }\n    }\n\n    private setDayLabColor(dayTimestamp: number, curTimestamp: number, isCurSelectDay:Boolean) {\n        if (isCurSelectDay) {\n            this.lbDay.node.color = this.curSelectDayColor; // 当前被选择的这一天\n        } else {\n            if (dayTimestamp > curTimestamp) {\n                if (this._dayItemInfo.belongTo == CalendarDayType.IN_NEXT_MONTH) {\n                    // 大于今天的日期 并且属于下一个月\n                    this.lbDay.node.color = this.nextMonthColor;\n                } else {\n                    this.lbDay.node.color = this.greaterThanTodayColor; // 大于今天 并且属于本月\n                }\n            } else {\n                if (\n                    this._dayItemInfo.belongTo == CalendarDayType.IN_PRE_MONTH ||\n                    this._dayItemInfo.belongTo == CalendarDayType.IN_NEXT_MONTH\n                ) {\n                    // 当前选择月的上一月或者下一月\n                    this.lbDay.node.color = this.preOrNextMonthColor;\n                } else {\n                    if (dayTimestamp < this.selectMinTimestampLimit) {\n                        this.lbDay.node.color = this.greaterThanTodayColor; // 属于本月 但是小于最小能选择日期\n                    } else {\n                        this.lbDay.node.color = this.curMonthColor; // 当前选择月\n                    }\n                }\n            }\n        }\n    }\n\n    onClickItem() {\n        if (this.selectCallFunc) {\n            this.selectCallFunc(this._dayItemInfo);\n        }\n    }\n}\n","import { CalendarDayType } from \"./CalendarEnum\";\nimport { ICalendarItemInfo } from \"./CalendarInterface\";\nimport CalendarItem from \"./CalendarItem\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class Calendar extends cc.Component {\n    @property({ type: cc.Label, tooltip: \"选择的年和月日期lab\" })\n    lab_yearMonth: cc.Label = null;\n\n    @property({ type: cc.Node, tooltip: \"存放每天的item的根节点\" })\n    daysRoot: cc.Node = null;\n\n    @property({ type: cc.Node, tooltip: \"每天的item节点\" })\n    calendarItemNode: cc.Node = null;\n\n    @property({ type: cc.Button, tooltip: \"往右增加月份按钮\" })\n    btn_right: cc.Button = null;\n\n    @property({ type: cc.Button, tooltip: \"往右增加年份按钮\" })\n    btn_bigRight: cc.Button = null;\n\n    @property({ type: cc.Button, tooltip: \"往左减少月份按钮\" })\n    btn_left: cc.Button = null;\n\n    @property({ type: cc.Button, tooltip: \"往左减少年份按钮\" })\n    btn_bigLeft: cc.Button = null;\n\n    /** 当前选择的年月日 */\n    private _curSelectYear: number = null;\n    private _curSelectMonth: number = null;\n    private _curSelectDay: number = null;\n\n    /** 今天的年月日 */\n    private _curYear: number = null;\n    private _curMonth: number = null;\n    private _currDay: number = null;\n\n    /** 最终选择的日期的时间戳 */\n    private selectDateTimestamp: number = 0;\n\n    /** 选择日期范围限制 最小选择年份限制*/\n    private minSelectYearLimit: number = 0;\n    /** 选择日期范围限制 最小选择月份限制*/\n    private minSelectMonthLimit: number = 0;\n    /** 选择日期范围限制 最小选择日限制*/\n    private minSelectDayLimit: number = 0;\n\n    private _dayItemList: cc.Node[] = [];\n    private _daysItemInfo: ICalendarItemInfo[] = [];\n\n    private selectCallFunc: (_dayItemInfo: ICalendarItemInfo) => void = null;\n\n    /**\n     *\n     * @param func 选择日期的回调函数\n     * @param selectDateLimit  从今天开始算 最多能往前选择多少天\n     */\n    public init(func: (_dayItemInfo: ICalendarItemInfo) => void, selectDateLimit: number) {\n        this.selectCallFunc = func;\n\n        let selectMinTimestampLimit =\n            CommonDepend.DateUtils.getPreviousStartTimestamp(selectDateLimit);\n        let date = new Date(selectMinTimestampLimit);\n        this.minSelectYearLimit = date.getFullYear();\n        this.minSelectMonthLimit = date.getMonth(); // js得到的月份从0月份开始\n        this.minSelectDayLimit = date.getDate();\n\n        this.initDayItem(selectMinTimestampLimit);\n    }\n\n    public initView(timestamp: number) {\n        this.initDate(timestamp);\n        this.updateDate();\n        this.initBtnStatus();\n    }\n\n    private initDate(timestamp: number) {\n        let date = new Date(timestamp);\n        this._curSelectYear = date.getFullYear();\n        this._curSelectMonth = date.getMonth(); // js得到的月份从0月份开始\n        this._curSelectDay = date.getDate();\n\n        date = new Date();\n        this._curYear = date.getFullYear();\n        this._curMonth = date.getMonth(); // js得到的月份从0月份开始\n        this._currDay = date.getDate();\n\n        // 传过来的时间戳是精确到秒的 这里转换成当天0点0分0秒的时间戳\n        this.selectDateTimestamp = new Date(\n            this._curSelectYear,\n            this._curSelectMonth,\n            this._curSelectDay\n        ).getTime();\n    }\n\n    private initDayItem(selectMinTimestampLimit: number) {\n        const itemNum = 42;\n        for (let i = 0; i < itemNum; ++i) {\n            let node = cc.instantiate(this.calendarItemNode);\n            this.daysRoot.addChild(node, itemNum - i);\n            node.getComponent(CalendarItem).init(\n                this.onSelectDate.bind(this),\n                selectMinTimestampLimit\n            );\n            this._dayItemList.push(node);\n        }\n\n        this.calendarItemNode.destroy();\n    }\n\n    private getWeekInMonth(year: number, month: number) {\n        return new Date(year + \"/\" + month + \"/\" + \"01\").getDay();\n    }\n\n    private calcDaysData() {\n        // 如果1号是星期天 那么getWeekInMonth函数返回的值是0 其他的返回的分别是1到6\n        let totalDays = this.getDaysWithYeayAndNibth(this._curSelectYear, this._curSelectMonth + 1); // 得到当月总天数\n        let fromWeek = this.getWeekInMonth(this._curSelectYear, this._curSelectMonth + 1); // 当月1号从周几开始\n\n        // 上一个月数据\n        let preMonth = this._curSelectMonth - 1; // 上一个月月份\n        let preMonthInYear = this._curSelectYear; // 上个月所在年份\n        if (this._curSelectMonth == 0) {\n            preMonth = 11;\n            preMonthInYear -= 1;\n        }\n        let preTotalDays = this.getDaysWithYeayAndNibth(preMonthInYear, preMonth + 1); // 得到上个月总天数\n\n        // 下一个月数据\n        let nextMonth = this._curSelectMonth + 1; // 下一个月月份\n        let nextMonthInYear = this._curSelectYear; // 下个月所在年份\n        if (this._curSelectMonth == 11) {\n            nextMonth = 0;\n            nextMonthInYear += 1;\n        }\n\n        let curMonthStartDay = 1;\n        let nexMonthStartDay = 1;\n\n        for (let i = 0; i < this._dayItemList.length; ++i) {\n            if (fromWeek > 0) {\n                // 当前选择月上个月的日期数据\n                this._daysItemInfo[i] = <ICalendarItemInfo>{\n                    day: preTotalDays - fromWeek + 1,\n                    inMonth: preMonth,\n                    inYear: preMonthInYear,\n                    belongTo: CalendarDayType.IN_PRE_MONTH,\n                    curDay: this._currDay,\n                    curYear: this._curYear,\n                    curMonth: this._curMonth,\n                    isSelect: false,\n                };\n                fromWeek--;\n            } else {\n                if (curMonthStartDay <= totalDays) {\n                    let timestamp = new Date(\n                        this._curSelectYear,\n                        this._curSelectMonth,\n                        curMonthStartDay\n                    ).getTime();\n                    // 当前选择月的日期数据\n                    this._daysItemInfo[i] = <ICalendarItemInfo>{\n                        day: curMonthStartDay,\n                        inMonth: this._curSelectMonth,\n                        inYear: this._curSelectYear,\n                        belongTo: CalendarDayType.IN_CUR_MONTH,\n                        curDay: this._currDay,\n                        curYear: this._curYear,\n                        curMonth: this._curMonth,\n                        isSelect: timestamp == this.selectDateTimestamp,\n                    };\n                    curMonthStartDay++;\n                } else {\n                    // 当前选择月下个月的日期数据\n                    this._daysItemInfo[i] = <ICalendarItemInfo>{\n                        day: nexMonthStartDay,\n                        inMonth: nextMonth,\n                        inYear: nextMonthInYear,\n                        belongTo: CalendarDayType.IN_NEXT_MONTH,\n                        curDay: this._currDay,\n                        curYear: this._curYear,\n                        curMonth: this._curMonth,\n                        isSelect: false,\n                    };\n                    nexMonthStartDay++;\n                }\n            }\n        }\n    }\n\n    private getDaysWithYeayAndNibth(year: number, month: number): number {\n        var d = new Date(year, month, 0);\n        return d.getDate();\n    }\n\n    private updateDate() {\n        let timeStamp = new Date(\n            this._curSelectYear,\n            this._curSelectMonth,\n            this._curSelectDay\n        ).getTime();\n        this.lab_yearMonth.string = CommonDepend.DateUtils.transformDateNoZone(\n            // canghai TODO 转换时间是否要带时区\n            timeStamp,\n            \"Y-M\"\n        );\n\n        this.calcDaysData();\n\n        for (let i = 0; i < this._dayItemList.length; ++i) {\n            let node = this._dayItemList[i];\n            let script = node.getComponent(CalendarItem);\n            script.setDay(this._daysItemInfo[i]);\n        }\n    }\n\n    private onSelectDate(dayInfo: ICalendarItemInfo) {\n        if (this.selectCallFunc) {\n            this.selectCallFunc(dayInfo);\n\n            let timestamp: number = new Date(\n                dayInfo.inYear,\n                dayInfo.inMonth,\n                dayInfo.day\n            ).getTime();\n\n            this.initView(timestamp);\n        }\n    }\n\n    private onClickLeft() {\n        if (this.checkBtnMonthLeft()) {\n            return;\n        }\n        if (this._curSelectMonth > 0) {\n            this._curSelectMonth -= 1;\n        } else {\n            this._curSelectMonth = 11;\n            this._curSelectYear -= 1;\n        }\n        this.updateDate();\n        this.setBtnMonthLeftDisable();\n        this.setBtnYearLeftDisable();\n        this.setBtnMonthRightEnable();\n        this.setBtnYearRightEnable();\n    }\n\n    private onClickBigLeft() {\n        this._curSelectYear -= 1;\n        this.updateDate();\n        this.setBtnMonthLeftDisable();\n        this.setBtnYearLeftDisable();\n        this.setBtnYearRightEnable();\n        this.setBtnMonthRightEnable();\n    }\n\n    private onClickRight() {\n        if (this.checkBtnMonthRight()) {\n            return;\n        }\n        if (this._curSelectMonth < 11) {\n            this._curSelectMonth += 1;\n        } else {\n            this._curSelectMonth = 0;\n            this._curSelectYear += 1;\n        }\n        this.updateDate();\n        this.setBtnMonthRightDisable();\n        this.setBtnYearRightDisable();\n        this.setBtnMonthLeftEnable();\n        this.setBtnYearLeftEnable();\n    }\n\n    private onClickBigRight() {\n        this._curSelectYear += 1;\n        if (this._curSelectYear > this._curYear) {\n            this._curSelectYear = this._curYear;\n            return;\n        }\n        this.setBtnYearRightDisable();\n        this.setBtnMonthRightDisable();\n        this.setBtnMonthLeftEnable();\n        this.setBtnYearLeftEnable();\n        this.updateDate();\n    }\n\n    private setBtnYearRightDisable() {\n        if (\n            this._curSelectYear >= this._curYear ||\n            (this._curSelectYear + 1 == this._curYear && this._curSelectMonth > this._curMonth)\n        ) {\n            this.btn_bigRight.interactable = false;\n            this.btn_bigRight.enableAutoGrayEffect = true;\n        }\n    }\n\n    private setBtnYearLeftDisable() {\n        if (\n            this._curSelectYear <= this.minSelectYearLimit ||\n            (this._curSelectYear - 1 == this.minSelectYearLimit &&\n                this._curSelectMonth < this.minSelectMonthLimit)\n        ) {\n            this.btn_bigLeft.interactable = false;\n            this.btn_bigLeft.enableAutoGrayEffect = true;\n        }\n    }\n\n    private setBtnMonthRightDisable() {\n        if (this.checkBtnMonthRight()) {\n            this.btn_right.interactable = false;\n            this.btn_right.enableAutoGrayEffect = true;\n        }\n    }\n\n    private setBtnMonthLeftDisable() {\n        if (this.checkBtnMonthLeft()) {\n            this.btn_left.interactable = false;\n            this.btn_left.enableAutoGrayEffect = true;\n        }\n    }\n\n    private setBtnYearRightEnable() {\n        if (this._curSelectYear < this._curYear && this._curSelectMonth <= this._curMonth) {\n            this.btn_bigRight.interactable = true;\n            this.btn_bigRight.enableAutoGrayEffect = false;\n        }\n    }\n\n    private setBtnYearLeftEnable() {\n        if (\n            this._curSelectYear > this.minSelectYearLimit &&\n            this._curSelectMonth >= this.minSelectMonthLimit\n        ) {\n            this.btn_bigLeft.interactable = true;\n            this.btn_bigLeft.enableAutoGrayEffect = false;\n        }\n    }\n\n    private setBtnMonthRightEnable() {\n        if (!this.checkBtnMonthRight()) {\n            this.btn_right.interactable = true;\n            this.btn_right.enableAutoGrayEffect = false;\n        }\n    }\n\n    private setBtnMonthLeftEnable() {\n        if (!this.checkBtnMonthLeft()) {\n            this.btn_left.interactable = true;\n            this.btn_left.enableAutoGrayEffect = false;\n        }\n    }\n\n    private checkBtnMonthRight(): boolean {\n        return this._curSelectMonth >= this._curMonth && this._curSelectYear >= this._curYear;\n    }\n\n    private checkBtnMonthLeft(): boolean {\n        return (\n            this._curSelectMonth <= this.minSelectMonthLimit &&\n            this._curSelectYear <= this.minSelectYearLimit\n        );\n    }\n\n    private initBtnStatus() {\n        this.setBtnYearRightDisable();\n        this.setBtnMonthRightDisable();\n        this.setBtnYearRightEnable();\n        this.setBtnMonthRightEnable();\n\n        this.setBtnYearLeftDisable();\n        this.setBtnMonthLeftDisable();\n        this.setBtnYearLeftEnable();\n        this.setBtnMonthLeftEnable();\n    }\n}\n","import { GameType } from \"../../../../../../main/core/conf/GameType\";\nimport CommonSkin from \"../../conf/skin/CommonSkin\";\n\nexport default class CardTypeResultConfig {\n    public static getResultSpriteBg(level) {\n        if (level == \"1\") {\n            return CommonSkin.LoadOnDemand.level_1;\n        } else if (level == \"2\") {\n            return CommonSkin.LoadOnDemand.level_2;\n        } else if (level == \"3\") {\n            return CommonSkin.LoadOnDemand.level_3;\n        } else {\n            return CommonSkin.LoadOnDemand.level_4;\n        }\n    }\n\n    public static getSkeletonAnimAndBone(level) {\n        if (level == \"1\") {\n            return {\n                skeletonAnim: \"animation_4\",\n                bone: \"text_4\",\n            };\n        } else if (level == \"2\") {\n            return {\n                skeletonAnim: \"animation_3\",\n                bone: \"text_3\",\n            };\n        } else if (level == \"3\") {\n            return {\n                skeletonAnim: \"animation_2\",\n                bone: \"text_2\",\n            };\n        } else {\n            return {\n                skeletonAnim: \"animation_1\",\n                bone: \"text_1\",\n            };\n        }\n    }\n\n    public static getRootNodeScale(gameID: number) {\n        return 1;\n    }\n}\n","import { SpriteManager } from \"../../../../../../main/core/ui/base/SpriteManager\";\nimport CardTypeResultConfig from \"./CardTypeResultConfig\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class CardTypeResult extends cc.Component {\n    @property(cc.Node)\n    typeNode: cc.Node = null;\n\n    @property(sp.Skeleton)\n    animBgSp: sp.Skeleton = null;\n\n    @property(cc.Node)\n    spriteBgNode: cc.Node = null;\n\n    private _playingAnim = false;\n    private _currBone = null;\n\n    public showResult(gameID, resultSpriteFrame, level, showAnim, endCallback) {\n        let self = this;\n        self.node.scale = CardTypeResultConfig.getRootNodeScale(gameID);\n        if (showAnim) {\n            self.showAnim(gameID, resultSpriteFrame, level, endCallback);\n        } else {\n            self.showSpriteFrame(resultSpriteFrame, level, endCallback);\n        }\n    }\n\n    private showSpriteFrame(resultSpriteFrame, level, endCallback) {\n        let self = this;\n        if (cc.isValid(self.typeNode)) {\n            self.typeNode.active = true;\n            if (self.typeNode.getComponent(cc.Sprite)) {\n                self.typeNode.getComponent(cc.Sprite).spriteFrame = resultSpriteFrame;\n                self.typeNode.y = 0;\n            }\n        }\n        if (cc.isValid(self.animBgSp)) {\n            self.animBgSp.node.active = false;\n        }\n        if (cc.isValid(self.spriteBgNode)) {\n            self.spriteBgNode.active = true;\n            SpriteManager.getInstance().loadSpriteForNodeBundle(\n                self.spriteBgNode,\n                CardTypeResultConfig.getResultSpriteBg(level)\n            );\n        }\n        if (endCallback) {\n            endCallback();\n        }\n    }\n\n    private showAnim(gameID, resultSpriteFrame, level, endCallback) {\n        let self = this;\n        if (cc.isValid(self.typeNode)) {\n            self.typeNode.active = true;\n            self.typeNode.scale = 0;\n            if (self.typeNode.getComponent(cc.Sprite)) {\n                self.typeNode.getComponent(cc.Sprite).spriteFrame = resultSpriteFrame;\n            }\n        }\n        if (cc.isValid(self.spriteBgNode)) {\n            self.spriteBgNode.active = false;\n        }\n        if (cc.isValid(self.animBgSp)) {\n            self.animBgSp.node.active = true;\n            let config = CardTypeResultConfig.getSkeletonAnimAndBone(level);\n            self._currBone = this.animBgSp.findBone(config.bone);\n            self._playingAnim = true;\n            self.animBgSp.setAnimation(0, config.skeletonAnim, false);\n            self.animBgSp.setCompleteListener(() => {\n                self._playingAnim = false;\n                if (endCallback) {\n                    endCallback();\n                }\n            });\n        }\n    }\n\n    protected update(dt: number): void {\n        if (!this._currBone || !this._playingAnim) {\n            return;\n        }\n        this.typeNode.setPosition(this._currBone.worldX, this._currBone.worldY);\n        this.typeNode.scaleX = this._currBone.scaleX;\n        this.typeNode.scaleY = this._currBone.scaleY;\n    }\n}\n","import { CurrencyUtil } from \"../../utils/CurrencyUtil\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class ChipFrame extends cc.Component {\n    @property(cc.Node)\n    animNode: cc.Node = null;\n\n    @property(cc.Node)\n    numItemListArr: Array<cc.Node> = [];\n\n    @property(cc.SpriteAtlas)\n    atlas: cc.SpriteAtlas = null;\n\n    _status = true;\n    _chipIndex = -1;\n    _value = 0;\n\n    initValueWithInfoAction(value, index): void {\n        let chipFrame = this.getChipFrame(index + 1);\n        this.node.getComponent(cc.Sprite).spriteFrame = chipFrame;\n        let chipFrameName = chipFrame.name;\n        let arr = chipFrameName.split(\"\");\n        let chipsNumType = arr[arr.length - 1] + \"_\";\n        this.initChipNumFrame(value, chipsNumType);\n        this._chipIndex = index;\n        this._value = value;\n    }\n\n    initNumItem(): void {\n        for (let i = 0, len = this.numItemListArr.length; i < len; i++) {\n            let numItem = this.numItemListArr[i];\n            if (numItem && numItem.active) {\n                numItem.active = false;\n            }\n        }\n    }\n\n    showSelectedAnimAction(): void {\n        if (cc.isValid(this.animNode)) {\n            this.animNode.opacity = 255;\n        }\n    }\n\n    hideSelectedAnimAction(): void {\n        if (cc.isValid(this.animNode)) {\n            this.animNode.opacity = 0;\n        }\n    }\n\n    showDisableAction(): void {\n        if (cc.isValid(this.node)) {\n            let chipFrame = this.getChipFrame(7);\n            this.node.getComponent(cc.Sprite).spriteFrame = chipFrame;\n        }\n        this.initChipNumFrame(this._value, \"7_\");\n        if (cc.isValid(this.node)) {\n            this.hideSelectedAnimAction();\n            this._status = false;\n        }\n    }\n\n    showNomalAction(): void {\n        if (cc.isValid(this.node)) {\n            let chipFrame = this.getChipFrame(this._chipIndex + 1);\n            this.node.getComponent(cc.Sprite).spriteFrame = chipFrame;\n            let chipFrameName = chipFrame.name;\n            let arr = chipFrameName.split(\"\");\n            let chipsNumType = arr[arr.length - 1] + \"_\";\n            this.initChipNumFrame(this._value, chipsNumType);\n        }\n        if (cc.isValid(this.node)) {\n            this._status = true;\n        }\n    }\n\n    private getChipFrame(index: number): cc.SpriteFrame {\n        let chipFrame = this.atlas?.getSpriteFrame?.(`common_chip_0${index}`);\n        return chipFrame;\n    }\n\n    setEnable(enable): void {\n        if (cc.isValid(this.node) && !enable) {\n            this.node.getComponent(cc.Sprite).spriteFrame = this.getChipFrame(7);\n        }\n        if (this.node && this.node.getComponent(cc.Button)) {\n            this.node.getComponent(cc.Button).interactable = enable;\n        }\n    }\n\n    initChipNumFrame(value, chipsNumType): void {\n        if (value != null && value > 0) {\n            this.initNumItem();\n            let numSpriteFrame: cc.SpriteFrame = null;\n            value = CurrencyUtil.formatChipMoney(value).replace(\"Cr\", \"C\");\n            for (let i = 0, len = value.length; i < len; i++) {\n                let numCode = value[i];\n                if (chipsNumType) {\n                    numSpriteFrame = this.atlas?.getSpriteFrame?.(chipsNumType + numCode);\n                } else {\n                    numSpriteFrame = this.atlas?.getSpriteFrame?.(numCode);\n                }\n                let numItem = this.numItemListArr[i];\n                if (numItem && numSpriteFrame) {\n                    numItem.active = true;\n                    numItem.getComponent(cc.Sprite).spriteFrame = numSpriteFrame;\n                }\n            }\n        }\n    }\n}\n","export enum ChipTypeEnum {\n    CHIP_TYPE_1 = 1,\n    CHIP_TYPE_2 = 2,\n    CHIP_TYPE_3 = 3,\n    CHIP_TYPE_4 = 4,\n    CHIP_TYPE_5 = 5,\n    CHIP_TYPE_6 = 6,\n    CHIP_TYPE_7 = 7,\n}\n","import { BundleMgr } from \"../../../../../../main/core/bd/BundleMgr\";\nimport CommonSkin from \"../../conf/skin/CommonSkin\";\n\nexport class ChipUtil {\n    private static _instance: ChipUtil = null;\n\n    public static getInstance() {\n        if (!this._instance) {\n            this._instance = new ChipUtil();\n        }\n\n        return this._instance;\n    }\n\n    private constructor() {}\n\n    public getChipTypeSpriteFrame(spriteName: string): cc.SpriteFrame {\n        let res = CommonSkin.Priority.commonChipType[spriteName];\n        if (!res) {\n            return null;\n        }\n        return BundleMgr.getInstance().getResFromBundle(res);\n    }\n\n    public getChipVauleSpriteFrame(spriteName: string): cc.SpriteFrame {\n        let res = CommonSkin.Priority.commonChipValue[spriteName];\n        if (!res) {\n            return null;\n        }\n        return BundleMgr.getInstance().getResFromBundle(res);\n    }\n}\n","export enum ChipValueEnum {\n    CHIP_VALUE_0 = \"0\",\n    CHIP_VALUE_1 = \"1\",\n    CHIP_VALUE_2 = \"2\",\n    CHIP_VALUE_3 = \"3\",\n    CHIP_VALUE_4 = \"4\",\n    CHIP_VALUE_5 = \"5\",\n    CHIP_VALUE_6 = \"6\",\n    CHIP_VALUE_7 = \"7\",\n    CHIP_VALUE_8 = \"8\",\n    CHIP_VALUE_9 = \"9\",\n    CHIP_VALUE_C = \"c\",\n    CHIP_VALUE_COMMA = \"comma\",\n    CHIP_VALUE_K = \"k\",\n    CHIP_VALUE_M = \"m\",\n    CHIP_VALUE_POINT = \"point\",\n}\n","import { AccountType } from \"../../../../../../main/core/conf/GameEnum\";\nimport CommonEventName from \"../../CommonEventName\";\nimport { FormatTestUtil } from \"../../utils/FormatTestUtil\";\nimport { PlatformUtil } from \"../../../../../../main/core/platform/PlatformUtil\";\nimport { AppParamManager } from \"../../../../../../main/core/app/AppParamManager\";\nimport { lodash } from \"../../../../../../main/core/utils/NpmExport\";\nimport { UserManager } from \"../../../../../../main/core/user/UserManager\";\n\nexport namespace CommonAccountUtil {\n    /**\n     * 这里phone是账号的含义\n     * @param uid\n     * @param token\n     * @param phone 账号。老登录系统为手机号；新登录系统是普通文本\n     * @param pwd\n     * @param nickName\n     * @param accountType\n     */\n    export function addAccount(uid, token, phone, pwd, nickName, accountType): void {\n        if (!phone) {\n            phone = CommonDepend.AppParamManager.getDeviceID();\n        }\n        uid += \"\";\n        if (phone && phone.length >= FormatTestUtil.MIN_ACCOUNT_LENGTH) {\n            let newAccounts = [];\n            let auto = 0;\n            if (uid && uid.length >= 1 && token && token.length >= 10) {\n                auto = 1;\n            }\n\n            let historyAccounts = getAllHistoryAccounts();\n            let foundItem = null;\n            if (historyAccounts && historyAccounts.length > 0) {\n                let count = historyAccounts.length;\n                for (let index = 0; index < count; index++) {\n                    let item = historyAccounts[index];\n                    if (item) {\n                        if (\n                            ((uid && item[0] == uid) || (phone && item[2] == phone)) &&\n                            item[7] === AppParamManager.getInstance().getBrandCode()\n                        ) {\n                            foundItem = item;\n                            let foundNickName = foundItem[5] || \"\";\n                            let newNickName = nickName || foundNickName;\n                            newAccounts.unshift([\n                                uid,\n                                token,\n                                phone,\n                                pwd,\n                                auto,\n                                newNickName,\n                                accountType,\n                                AppParamManager.getInstance().getBrandCode(),\n                            ]);\n                        } else {\n                            item[4] = 0;\n                            newAccounts.push(item);\n                        }\n                    }\n                }\n            }\n\n            if (foundItem == null) {\n                newAccounts.unshift([\n                    uid,\n                    token,\n                    phone,\n                    pwd,\n                    auto,\n                    nickName,\n                    accountType,\n                    AppParamManager.getInstance().getBrandCode(),\n                ]);\n            }\n            UserManager.getInstance().initAccount(uid, token);\n            saveHistoryAccounts(newAccounts);\n        }\n        cc.director.emit(CommonEventName.LOGIN_SUCCESS);\n    }\n\n    export function deleteAccount(account): void {\n        let historyAccounts = getAllHistoryAccounts();\n        let newAccounts = [];\n        if (historyAccounts) {\n            let count = historyAccounts.length;\n            for (let index = 0; index < count; index++) {\n                let item = historyAccounts[index];\n                if (item) {\n                    if (\n                        item[2] == account &&\n                        item[7] == AppParamManager.getInstance().getBrandCode()\n                    ) {\n                        continue;\n                    }\n                    newAccounts.push(item);\n                }\n            }\n        }\n        saveHistoryAccounts(newAccounts);\n    }\n\n    export function clearGuestAccount() {\n        let historyAccounts = getAllHistoryAccounts();\n        let newAccounts = [];\n        if (historyAccounts) {\n            let count = historyAccounts.length;\n            for (let index = 0; index < count; index++) {\n                let account = historyAccounts[index];\n                if (isGuestAccount(account)) {\n                    continue;\n                }\n                newAccounts.push(account);\n            }\n        }\n        saveHistoryAccounts(newAccounts);\n    }\n\n    /**\n     * 上一次登录的账号\n     * @returns {*}\n     */\n    export function getLastAccount() {\n        let historyAccounts = getHistoryAccounts();\n        if (historyAccounts) {\n            return historyAccounts[0];\n        }\n        return null;\n    }\n\n    export function getAllLastAccountObject() {\n        return account2Object(getAllLastAccount());\n    }\n\n    export function account2Object(account: (string | number)[]) {\n        const [uid, token, phone, pwd, auto, nickName, accountType, brand] = account || [];\n        if (!uid) {\n            return null;\n        }\n        return {\n            uid,\n            token,\n            phone,\n            pwd,\n            auto,\n            nickName,\n            accountType,\n            brand,\n        };\n    }\n\n    export function updateLastAccount(token): void {\n        let historyAccounts = getAllHistoryAccounts();\n        if (historyAccounts && historyAccounts[0]) {\n            historyAccounts[0][1] = token;\n        }\n        saveHistoryAccounts(historyAccounts);\n    }\n\n    export function updateAccountToLast() {\n        let lastAccount = getAllLastAccountObject();\n        let historyAccounts = getAllHistoryAccounts();\n        historyAccounts.unshift(\n            ...lodash\n                .chain(historyAccounts)\n                .remove((account: string[]) => {\n                    return account[0] == lastAccount.uid;\n                })\n                .thru((array: string[][]) => {\n                    if (\n                        account2Object(array[0]).brand !=\n                        AppParamManager.getInstance().getBrandCode()\n                    ) {\n                        let newAccount = lodash.cloneDeep(array[0]);\n                        newAccount[7] = AppParamManager.getInstance().getBrandCode();\n                        array.unshift(newAccount);\n                    }\n                    return array;\n                })\n                .value()\n        );\n        saveHistoryAccounts(historyAccounts);\n    }\n\n    export function getAccountByPhone(phone) {\n        let historyAccounts = getHistoryAccounts();\n        let foundAccount = null;\n        if (historyAccounts) {\n            for (let i = 0; i < historyAccounts.length; i++) {\n                let account = historyAccounts[i];\n                if (account) {\n                    if (phone && account[2] == phone) {\n                        foundAccount = account;\n                        break;\n                    }\n                }\n            }\n        }\n        return foundAccount;\n    }\n\n    export function getAllAccountByUserId(userId) {\n        let historyAccounts = getAllHistoryAccounts();\n        let foundAccount = null;\n        if (historyAccounts) {\n            for (let i = 0; i < historyAccounts.length; i++) {\n                let account = historyAccounts[i];\n                if (account) {\n                    if (userId && account[0] == userId) {\n                        foundAccount = account;\n                        break;\n                    }\n                }\n            }\n        }\n        return foundAccount;\n    }\n\n    export function getAccountByUserId(userId) {\n        let historyAccounts = getHistoryAccounts();\n        let foundAccount = null;\n        if (historyAccounts) {\n            for (let i = 0; i < historyAccounts.length; i++) {\n                let account = historyAccounts[i];\n                if (account) {\n                    if (userId && account[0] == userId) {\n                        foundAccount = account;\n                        break;\n                    }\n                }\n            }\n        }\n        return foundAccount;\n    }\n\n    /**\n     * 自有账户的历史记录\n     */\n    export function loadOwnAccounts() {\n        let historyAccounts = getHistoryAccounts();\n        let newAccounts = [];\n        if (historyAccounts) {\n            let count = historyAccounts.length;\n            for (let index = 0; index < count; index++) {\n                let account = historyAccounts[index];\n                if (!isGuestAccount(account) && !isFacebookAccount(account)) {\n                    newAccounts.push(account);\n                }\n            }\n        }\n        return newAccounts;\n    }\n\n    export function hasGuestAccount(): boolean {\n        let hasGuest = false;\n        let historyAccounts = getHistoryAccounts();\n\n        if (historyAccounts && historyAccounts.length > 0) {\n            for (let i = 0; i < historyAccounts.length; i++) {\n                let account = historyAccounts[i];\n                if (isGuestAccount(account)) {\n                    hasGuest = true;\n                    break;\n                }\n            }\n        }\n        return hasGuest;\n    }\n\n    export function isGuestAccount(account) {\n        let isGuest = false;\n        if (account) {\n            let phone = account[2];\n            let pwd = account[3];\n            let accountType = account[6];\n            if (accountType) {\n                isGuest = accountType == AccountType.TYPE_GUEST;\n            } else {\n                isGuest = !FormatTestUtil.testPhoneNumber(phone) && !pwd;\n            }\n        }\n        return isGuest;\n    }\n\n    export function isFacebookAccount(account) {\n        let isFacebook = false;\n        if (account) {\n            let phone = account[2];\n            let accountType = account[6];\n            if (accountType) {\n                isFacebook = accountType == AccountType.TYPE_FACEBOOK;\n            } else {\n                isFacebook = phone && phone.startsWith(\"fb:\");\n            }\n        }\n        return isFacebook;\n    }\n\n    /**\n     * 获取历史记录个数\n     */\n    export function getHistoryAccountCount() {\n        let historyArray = getHistoryAccounts();\n        if (historyArray) {\n            return historyArray.length;\n        }\n        return 0;\n    }\n\n    /** 当前品牌拿不到时去用其他品牌 */\n    export function getAllLastAccount() {\n        let account = getLastAccount();\n        if (!account) {\n            account = getAllHistoryAccounts()?.[0] ?? null;\n            if (isGuestAccount(account)) {\n                account = null;\n            }\n        }\n        return account;\n    }\n\n    export function getHistoryAccounts() {\n        return lodash\n            .chain(getAllHistoryAccounts())\n            ?.map((item) => {\n                if (item[7] === undefined) {\n                    item[7] = AppParamManager.getInstance().getBrandCode();\n                }\n                return item;\n            })\n            .tap((array) => {\n                saveHistoryAccounts(array);\n            })\n            .filter((item) => item[7] === AppParamManager.getInstance().getBrandCode())\n            .value();\n    }\n    /**\n     * 外界不要直接调用此方法\n     * 原因：不同的历史记录需要过滤的结果不同\n     * 比如：\n     * 登录历史记录，非游客账号都可以；\n     * 手机号历史记录，只有手机号才可以\n     *\n     * 需求：首先读取sdcard上保存的账号，以便跟其他同账号体系的包保持当前账号一致。\n     */\n    export function getAllHistoryAccounts(): any[][] {\n        let historyAccounts = null;\n\n        let historyAccountsText = PlatformUtil.getInstance().getAccountInfo();\n        if (!historyAccountsText) {\n            historyAccounts = CommonDepend.LocalStorageMgr.loadKeyChainAccount();\n            if (historyAccounts) {\n                PlatformUtil.getInstance().saveAccountInfo(JSON.stringify(historyAccounts));\n            }\n        } else {\n            try {\n                historyAccounts = JSON.parse(historyAccountsText);\n                CommonDepend.LocalStorageMgr.saveKeyChainAccount(historyAccounts);\n            } catch (e) {}\n        }\n        return historyAccounts;\n    }\n\n    /**\n     * 同时保存到localstorage和native\n     * @param historyAccounts\n     */\n    export function saveHistoryAccounts(historyAccounts) {\n        CommonDepend.LocalStorageMgr.saveKeyChainAccount(historyAccounts);\n        PlatformUtil.getInstance().saveAccountInfo(JSON.stringify(historyAccounts));\n    }\n}\n","export enum CommonBroadCastEvents {\n    show = \"common_broad_cast_show\",\n    position = \"common_broad_cast_position\",\n    reset = \"common_broad_cast_reset\",\n}\n","import { Injector } from \"../../../../../../main/core/utils/decorators/Injector\";\nimport Listener from \"../../../../../../main/core/utils/Listener\";\nimport { Tools } from \"../../../../../../main/core/utils/Tools\";\nimport { UniverseProto } from \"../../universe/proto/UniverseProto\";\nimport CommonBroadCastObserver from \"../obs/CommonBroadCastObserver\";\nimport { CommonBroadCastEvents } from \"../define/CommonBroadCastEvents\";\nimport { Instance } from \"../../../../../../main/core/utils/decorators/InstanceClassDecorator\";\nimport CommonNetworkSwitchObserver from \"../../obs/CommonNetworkSwitchObserver\";\n\ntype TData = ProtoObject<UniverseProto.BroadCastNT>;\n\n@Injector.Injectable()\nexport default class CommonBroadCastLogic {\n    @Injector.Inject(CommonBroadCastObserver, {\n        onCreate: () => {\n            setTimeout(() => {\n                let logic = Injector.get(CommonBroadCastLogic);\n                logic.init();\n            });\n        },\n        create: false,\n    })\n    private observer: CommonBroadCastObserver = null;\n\n    private current: TData = null;\n\n    public getCurrent() {\n        return this.current;\n    }\n\n    public init() {\n        this.observer.listenChange(this.onUpdateData, this);\n    }\n\n    public destroy() {\n        this.observer?.unListenChange?.(this.onUpdateData, this);\n    }\n\n    private onUpdateData() {\n        if (this.current) {\n            return;\n        }\n        if (!Instance(CommonNetworkSwitchObserver).getSwitch(\"broadcast\")) {\n            return;\n        }\n        this.checkMessage();\n    }\n\n    private checkMessage() {\n        //检查是否以及创建了\n        if (!this.observer) {\n            return;\n        }\n\n        let message = this.observer.pop();\n        if (!message) {\n            this.current = null;\n            return;\n        }\n\n        this.current = message;\n\n        Listener.send(CommonBroadCastEvents.show, message);\n    }\n\n    public showFinish() {\n        setTimeout(() => {\n            this.checkMessage();\n        }, (Math.random() * 3 + 1) * 1000);\n    }\n}\n","import { UserManager } from \"../../../../../../main/core/user/UserManager\";\nimport ValueObserver from \"../../../../../../main/core/utils/class/ValueObserver\";\nimport { Injector } from \"../../../../../../main/core/utils/decorators/Injector\";\nimport { Tools } from \"../../../../../../main/core/utils/Tools\";\nimport { UniverseProto } from \"../../universe/proto/UniverseProto\";\nimport CommonUserBroadCastObserver from \"./CommonUserBroadCastObserver\";\n\ntype IData = {\n    self: CommonUserBroadCastObserver;\n    other: CommonUserBroadCastObserver;\n};\n\n@Injector.Injectable()\nexport default class CommonBroadCastObserver extends ValueObserver<IData> {\n    private readonly MAX_COUNT = 20;\n\n    constructor() {\n        super();\n    }\n\n    protected onInit(): IData {\n        return {\n            self: new CommonUserBroadCastObserver(),\n            other: new CommonUserBroadCastObserver(),\n        };\n    }\n    async push(\n        value: ProtoObject<UniverseProto.BroadCastNT>[] | ProtoObject<UniverseProto.BroadCastNT>\n    ) {\n        if (value instanceof Array) {\n            value.forEach((value) => {\n                this.pushOnce(value);\n            });\n        } else {\n            this.pushOnce(value);\n        }\n    }\n\n    async pushOnce(value: ProtoObject<UniverseProto.BroadCastNT>) {\n        const isSelf = UserManager.getInstance().isSelf(value.UserID.toString());\n\n        const target = isSelf ? this.get(\"self\") : this.get(\"other\");\n\n        target.push(value);\n        //手动调用修改通知\n        this.modify();\n    }\n\n    pop() {\n        const selfTotal = this.get(\"self\").totalLength();\n        const otherTotal = this.get(\"other\").totalLength();\n        if (selfTotal >= this.MAX_COUNT) {\n            this.get(\"other\").set({});\n        } else if (selfTotal + otherTotal > this.MAX_COUNT) {\n            this.get(\"other\").getOld(true, selfTotal + otherTotal - this.MAX_COUNT);\n        }\n        return Tools.evenyEmpty([this.get(\"self\"), this.get(\"other\")], (obs) => {\n            return obs.popMessage();\n        });\n    }\n}\n","import ObjectLabel from \"../../../../../../main/core/ui/component/ObjectLabel\";\nimport { Injector } from \"../../../../../../main/core/utils/decorators/Injector\";\nimport Listener from \"../../../../../../main/core/utils/Listener\";\nimport { UniverseProto } from \"../../universe/proto/UniverseProto\";\nimport { CurrencyUtil } from \"../../utils/CurrencyUtil\";\nimport { CommonBroadCastEvents } from \"../define/CommonBroadCastEvents\";\nimport CommonBroadCastLogic from \"../logic/CommonBroadCastLogic\";\nimport SkeletonHelper from \"../../../../../../main/core/utils/class/SkeletonHelper\";\nimport { CommonBroadCastType } from \"../define/CommonBroadCastType\";\nimport CommonBroadCastUtil from \"../CommonBroadCastUtil\";\nconst { ccclass, property, menu } = cc._decorator;\n\n@ccclass\n@menu(\"common/CommonBroadCastSet\")\nexport default class CommonBroadCastSet extends cc.Component {\n    protected onEnable(): void {\n        this.scheduleOnce(() => {\n            CommonBroadCastUtil.setPostion(this.node.convertToWorldSpaceAR(cc.v3()));\n        });\n    }\n    protected onDisable(): void {\n        CommonBroadCastUtil.reset();\n    }\n}\n","export enum CommonBroadCastType {\n    CashSuccess = 3,\n    Game = 6,\n    OnlineReward = 7,\n    VipLevelUp = 8,\n}\n","import Listener from \"../../../../../main/core/utils/Listener\";\nimport { CommonBroadCastEvents } from \"./define/CommonBroadCastEvents\";\n\nclass CommonBroadCastUtil {\n    /**\n     * 设置闪告位置\n     */\n    public setPostion(world: cc.Vec3) {\n        Listener.send(CommonBroadCastEvents.position, world);\n    }\n\n    /**\n     * 重置闪告位置\n     */\n    public reset() {\n        Listener.send(CommonBroadCastEvents.reset);\n    }\n}\nexport default new CommonBroadCastUtil();\n","import ObjectLabel from \"../../../../../../main/core/ui/component/ObjectLabel\";\nimport { Injector } from \"../../../../../../main/core/utils/decorators/Injector\";\nimport Listener from \"../../../../../../main/core/utils/Listener\";\nimport { UniverseProto } from \"../../universe/proto/UniverseProto\";\nimport { CurrencyUtil } from \"../../utils/CurrencyUtil\";\nimport { CommonBroadCastEvents } from \"../define/CommonBroadCastEvents\";\nimport CommonBroadCastLogic from \"../logic/CommonBroadCastLogic\";\nimport SkeletonHelper from \"../../../../../../main/core/utils/class/SkeletonHelper\";\nimport { CommonBroadCastType } from \"../define/CommonBroadCastType\";\nimport { Tools } from \"../../../../../../main/core/utils/Tools\";\nconst { ccclass, property } = cc._decorator;\n\ntype TData = ProtoObject<UniverseProto.BroadCastNT> & { vipLevel?: number };\n\n@ccclass\nexport default class CommonBroadCast extends cc.Component {\n    @property(cc.Node)\n    content: cc.Node = null;\n\n    @property(ObjectLabel)\n    protected label: ObjectLabel = null;\n\n    @property(cc.Node)\n    protected mask: cc.Node = null;\n\n    @property(sp.Skeleton)\n    protected anim: sp.Skeleton = null;\n\n    @Injector.Inject(CommonBroadCastLogic)\n    private logic: CommonBroadCastLogic = null;\n\n    private pos: cc.Vec3 = null;\n\n    /** 公告Label移动x终点 */\n    private _endMovePosX!: number;\n\n    /** Label是否正在移动中 */\n    private _isMoveIng!: boolean;\n\n    start() {\n        this._isMoveIng = false;\n\n        cc.game.addPersistRootNode(this.node);\n        this.content.active = false;\n        this.anim.node.active = false;\n        this.pos = this.content.position;\n        Listener.listen(CommonBroadCastEvents.show, this.onShow, this);\n        Listener.listen(CommonBroadCastEvents.position, this.onSetPosition, this);\n        Listener.listen(CommonBroadCastEvents.reset, this.onResetPos, this);\n        if (this.logic.getCurrent()) {\n            this.onShow(this.logic.getCurrent());\n        }\n    }\n\n    onResetPos() {\n        this.content.position = this.pos;\n    }\n\n    public onSetPosition(position: cc.Vec3) {\n        this.content.position = this.content.parent.convertToNodeSpaceAR(position);\n    }\n\n    protected onDestroy(): void {\n        Listener.listenOffTarget(this);\n        this.logic.destroy();\n        this.unschedule(this._updateNoticeMove);\n    }\n\n    private onShow(data: TData) {\n        if (this._isMoveIng) return;\n\n        this.label.text = data.Template;\n        const element = data.Element;\n        let result: { [index: string]: string } = {};\n\n        for (let key in element) {\n            let value = element[key].Value;\n            switch (key) {\n                case `Amount`:\n                case `GoldCount`: {\n                    value = `<color=#ffcd60><b>${CurrencyUtil.formatMoney(\n                        Number(value)\n                    )}</b></color>`;\n                    break;\n                }\n                default: {\n                    value = `<color=#36af2d>${value}</color>`;\n                    break;\n                }\n            }\n            result[key] = value;\n        }\n        this.content.active = true;\n        this.playAnim(data);\n        this.label.object = result;\n\n        // cc.tween(this.label.node)\n        //     .set({\n        //         x: -this.mask.width / 2,\n        //     })\n        //     .delay(0.5 + Math.random() * 0.5)\n        //     .to((this.label.node.width + this.mask.width) / (this.mask.width / 4.5), {\n        //         x: -this.mask.width / 2 - this.label.node.width,\n        //     })\n        //     .delay(0.1)\n        //     .call(() => {\n        //         this.logic.showFinish();\n        //         this.content.active = false;\n        //         this.anim.node.active = false;\n        //     })\n        //     .start();\n\n        cc.tween(this.label.node)\n            .set({ x: -this.mask.width / 2 })\n            .delay(0.5 + Math.random() * 0.5)\n            .call(() => {\n                this._isMoveIng = true;\n                this._endMovePosX = -this.mask.width / 2 - this.label.node.width;\n                this.schedule(this._updateNoticeMove, 0);\n            })\n            .start();\n    }\n\n    /**\n     * @zh 更新公告文本移动\n     * @param dt\n     */\n    private _updateNoticeMove(dt: number): void {\n        if (!this.label || !cc.isValid(this.label)) {\n            this.unschedule(this._updateNoticeMove);\n            return;\n        }\n\n        this.label.node.x -= 1;\n        if (Math.floor(this.label.node.x) <= this._endMovePosX) {\n            this.unschedule(this._updateNoticeMove);\n\n            this.content.active = false;\n            this.anim.node.active = false;\n            this._isMoveIng = false;\n\n            this.logic.showFinish();\n        }\n    }\n\n    private playAnim(data: TData) {\n        switch (data.BroadCastType) {\n            case CommonBroadCastType.VipLevelUp: {\n                this.playVipAnim(data);\n                break;\n            }\n        }\n    }\n\n    /**\n     * vip 闪告动画\n     * @param data\n     * @returns\n     */\n    private playVipAnim(data: TData) {\n        const level = data?.vipLevel ?? 0;\n        if (!level) {\n            return;\n        }\n        const help = new SkeletonHelper(this.anim);\n        let animName = \"\";\n\n        if (level <= 4) {\n            return;\n        } else if (level <= 7) {\n            animName = \"ordinary\";\n        } else {\n            animName = \"advanced\";\n        }\n        this.anim.node.active = true;\n        help.play(animName, {\n            loop: true,\n        }).then(() => {});\n    }\n    // update (dt) {}\n}\n","class CommonEventName {\n    public static readonly LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\n    public static readonly EVENT_NAMING_ACCESSLIST_MSG = \"EVENT_NAMING_ACCESSLIST_MSG\";\n    public static readonly EVENT_NAMING_GATEWAY_MSG = \"EVENT_NAMING_GATEWAY_MSG\";\n    public static readonly EVENT_NAMING_SERVERLIST_MSG = \"EVENT_NAMING_SERVERLIST_MSG\";\n    public static readonly EVENT_IM_NEW_MESSAGE = \"EVENT_IM_NEW_MESSAGE\";\n    public static readonly EVENT_NAMING_ST = \"EVENT_NAMING_ST\";\n    public static readonly PAY_SUCCESS = \"PAY_SUCCESS\";\n    public static readonly LOGIN_BONUS_MSG = \"LOGIN_BONUS_MSG\";\n    public static readonly FISHING_FULL_RESOURCES_LOADED = \"FISHING_FULL_RESOURCES_LOADED\";\n    public static readonly SHOW_CONTINUE_GAME = \"COMMON_SHOW_CONTINUE_GAME\";\n    public static readonly SHOW_TOPUP = \"common_topup\";\n    public static readonly SAVE_IMAGE_SUCCEED = \"SAVE_IMAGE_SUCCEED\";\n    public static readonly SAVE_IMAGE_FAILED = \"SAVE_IMAGE_FAILED\";\n    public static readonly SAVE_PROMOTION_MATERIAL_SUCCEED = \"SAVE_PROMOTION_MATERIAL_SUCCEED\";\n    public static readonly SAVE_PROMOTION_MATERIAL_FAILED = \"SAVE_PROMOTION_MATERIAL_FAILED\";\n    public static readonly SYNTHESIZE_PROMOTION_IMAGE_SUCCEED =\n        \"SYNTHESIZE_PROMOTION_IMAGE_SUCCEED\";\n    public static readonly SYNTHESIZE_PROMOTION_IMAGE_FAILED = \"SYNTHESIZE_PROMOTION_IMAGE_FAILED\";\n    public static readonly MailGetRemoteData = \"mail_get_remote_data\";\n    public static readonly MailSaveCureentList = \"mail_save_current_list\";\n    public static readonly MailRomoteDelList = \"mail_romote_del_list\";\n    public static readonly MailRomoteDelOne = \"mail_romote_del_one\";\n    public static readonly MailShowRedDot = \"mail_show_red_dot\";\n    public static readonly ACTIVITY_REMINDER_SHOW_STATE = \"activity_reminder_show_state\"; // 活动提醒入口显示状态\n    public static readonly OPEN_ONLINE_BONUS_TIPS = \"OPEN_ONLINE_BONUS_TIPS\"; // 活动提醒入口显示状态\n    public static readonly PASSWORD_LOGIN_SUECECC = \"TOKEN_CHECK\";\n    public static readonly CUSTOMER_RED_DOT_REFRESH = \"customer_refresh_hall_red_dot\";\n    public static readonly WITHDRAW_SELECT_TAB_INDEX = \"Withdraw_Select_Tab_Index\";\n    public static readonly EVENT_GET_AWARD = \"event_get_award\";\n    public static readonly AUTH_SUCCESS = \"AUTH_SUCCESS\";\n    public static readonly CLICK_PAGE_ITEM = \"CLICK_PAGE_ITEM\";\n    public static readonly SET_SAFARI_DESK_ICON = \"SET_SAFARI_DESK_ICON\";\n}\n\nexport default CommonEventName;\n","import ValueObserver from \"../../../../../main/core/utils/class/ValueObserver\";\nimport { setInstance } from \"../../../../../main/core/utils/decorators/InstanceClassDecorator\";\nimport { UniverseProto } from \"../universe/proto/UniverseProto\";\ntype ISettingData = ProtoObject<UniverseProto.FeatureConfResp.FeatureSetting>\n\n@setInstance\nexport default class CommonFeatureSettingObserver extends ValueObserver<ISettingData> {\n    protected onInit(): ISettingData {\n        return {};\n    }\n\n    public getUpgradeAmount() {\n        return this.get(\"upgrade\", 0);\n    }\n\n    public getUserBox() {\n        return this.get(\"anonymous\", 0);\n    }\n}\n","import ValueObserver from \"../../../../../main/core/utils/class/ValueObserver\";\nimport { setInstance } from \"../../../../../main/core/utils/decorators/InstanceClassDecorator\";\nimport { UniverseProto } from \"../universe/proto/UniverseProto\";\nimport { GameType } from \"../../../../../main/core/conf/GameType\";\n\ntype TData = ProtoObject<UniverseProto.FeatureConfResp.GameInfo>[];\n\n@setInstance\nexport default class CommonGameListObserver extends ValueObserver<TData> {\n    protected onInit(): TData {\n        return [];\n    }\n\n    public hasGame(gameId: GameType) {\n        return !!this.get().find((v) => gameId === v.game_id);\n    }\n}\n","import { GameType } from \"../../../../../../../main/core/conf/GameType\";\nimport PopUpViewBase from \"../../../../../../../main/core/popUpViewUtils/PopUpViewBase\";\nimport { IntervalsDecorator } from \"../../../../../../../main/core/utils/decorators/IntervalsDecorator\";\nimport { SceneControl } from \"../../../SceneControl\";\nimport GameReplayControl from \"../GameReplayControl\";\n// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class CommonGameReplay extends PopUpViewBase {\n    @property(cc.Label)\n    protected speedBtnLb: cc.Label = null;\n\n    @property(cc.Node)\n    playBtn: cc.Node = null;\n\n    @property(cc.Node)\n    pause: cc.Node = null;\n\n    protected ctrl: GameReplayControl = null;\n\n    public init(ctrl: GameReplayControl): void {\n        this.ctrl = ctrl;\n        ctrl.play();\n    }\n    @IntervalsDecorator\n    public onBackBtnClick() {\n        this.ctrl.destroy();\n        SceneControl.getInstance().launchScene(GameType.GAME_HALL);\n    }\n    @IntervalsDecorator\n    public onPlayBtnClick() {\n        this.ctrl.resume();\n        this.playBtn.active = !(this.pause.active = true);\n    }\n    @IntervalsDecorator\n    public onPauseBtnClick() {\n        this.ctrl.pause();\n        this.playBtn.active = !(this.pause.active = false);\n    }\n\n    @IntervalsDecorator\n    public onRePlayBtnClick() {\n        this.ctrl.stop();\n        this.ctrl.play();\n    }\n\n    private _speedIndex = 0;\n    public onSpeedBtnClick() {\n        let speeds = [1, 2, 3];\n        this._speedIndex = (this._speedIndex + 1) % speeds.length;\n        this.ctrl.timeScale = speeds[this._speedIndex];\n        this.speedBtnLb.string = `x${speeds[this._speedIndex]}`;\n    }\n}\n","import { GameType } from \"../../../../../main/core/conf/GameType\";\nimport { LocalStorageMgr } from \"../../../../../main/core/storage/LocalStorageMgr\";\nimport LocalStorageObserver from \"../../../../../main/core/utils/class/LocalStorageObserver\";\nimport {\n    setInstance,\n    Instance,\n} from \"../../../../../main/core/utils/decorators/InstanceClassDecorator\";\nimport { lodash } from \"../../../../../main/core/utils/NpmExport\";\nimport { UniverseProto } from \"../universe/proto/UniverseProto\";\nimport HostListLogic from \"./hostList/HostListLogic\";\nimport CommonHostListSwitchCountObserver from \"./CommonHostListSwitchCountObserver\";\n\nconst GAME_WS_ADDR = \"wss://{game_code}.{host}\";\nconst GAME_HTTP_ADDR = \"https://{game_code}.{host}\";\n\n@setInstance\nexport default class CommonHostListObserver extends LocalStorageObserver<string[]> {\n    private _wsHost: HostListLogic = new HostListLogic(GAME_WS_ADDR, {\n        [GameType.UNIVERSE]: \"un\",\n    });\n    private _httpHost: HostListLogic = new HostListLogic(GAME_HTTP_ADDR, {\n        [GameType.GAME_HALL]: \"lb\",\n    });\n\n    private serviceHostList: string[] = CommonDepend.ProjectInfo.DEFAULT_HOST;\n\n    protected read(): string[] {\n        return LocalStorageMgr.getInstance().readHostList();\n    }\n    protected save(data: string[]) {\n        LocalStorageMgr.getInstance().saveHostList(data);\n    }\n\n    public next(host: string) {\n        let list = this.get();\n        if (!RegExp(`\\.?${lodash.first(list)}$`).test(host)) {\n            return;\n        }\n        let currentHost = list.shift();\n        if (!this.serviceHostList.includes(currentHost)) {\n            if (!Instance(CommonHostListSwitchCountObserver).addSwitchCount(currentHost)) {\n                return;\n            }\n        }\n\n        list.push(currentHost);\n\n        //this.modify();\n    }\n\n    public loadServerHostList(hostList: string[]) {\n        this.serviceHostList.splice(1, this.serviceHostList.length);\n        this.serviceHostList.push(...hostList);\n    }\n\n    public loadGameInfo(game_list: ProtoObject<UniverseProto.FeatureConfResp.GameInfo>[]) {\n        const gameCode = lodash\n            .chain(game_list)\n            .map((v) => [v.game_id, v.game_code])\n            .fromPairs()\n            .value();\n\n        this._wsHost.mergeGameCode(gameCode);\n        this._httpHost.mergeGameCode(gameCode);\n    }\n\n    public getWsServer(gameType: GameType) {\n        return this._wsHost.getHosts(this.get(), gameType);\n    }\n\n    public getHttpServer(gameType: GameType) {\n        return this._httpHost.getHosts(this.get(), gameType);\n    }\n}\n","import CacheObserver from \"../../../../../main/core/utils/class/CacheObserver\";\nimport { setInstance } from \"../../../../../main/core/utils/decorators/InstanceClassDecorator\";\n\ntype TData = {\n    [key: string]: number;\n};\n\n@setInstance\nexport default class CommonHostListSwitchCountObserver extends CacheObserver<TData> {\n    private readonly max_count = 5;\n\n    protected getCacheKey(): string {\n        return \"_host_list_switch_count\";\n    }\n\n    public addSwitchCount(host: string) {\n        this.set(host, (value = 0) => {\n            return value + 1;\n        });\n\n        return this.get(host) < this.max_count;\n    }\n}\n","import ValueObserver from \"../../../../../../main/core/utils/class/ValueObserver\";\nimport { ApiProto } from \"../../service/api/ApiProto\";\nimport HttpObserver from \"../../../../../../main/core/utils/class/HttpObserver\";\nimport ApiMgr from \"../../service/api/ApiMgr\";\nimport { Injector } from \"../../../../../../main/core/utils/decorators/Injector\";\nimport CommonLanguage from \"../../conf/lang/CommonLanguage\";\n\ntype IData = ProtoObject<ApiProto.KycData>\n\n@Injector.Injectable()\nexport default class CommonKycInfoObserver extends HttpObserver<IData> {\n    protected onQuery(): Promise<IData> {\n        return ApiMgr.getInstance()\n            .getKyc()\n            .then((data) => {\n                data.phone = data.phone.replace(new RegExp(`^${CommonLanguage.phoneHead}`), \"\");\n                return data;\n            });\n    }\n    protected onInit(data?: IData): IData {\n        return {};\n    }\n}\n","import PopUpViewBase from \"../../../../../../main/core/popUpViewUtils/PopUpViewBase\";\nimport { EnumActiveType } from \"../../../../../../main/core/ui/component/BaseEnumComp\";\nimport EnumActive from \"../../../../../../main/core/ui/component/EnumActive\";\nimport { Injector } from \"../../../../../../main/core/utils/decorators/Injector\";\nimport { lodash } from \"../../../../../../main/core/utils/NpmExport\";\nimport { Tools } from \"../../../../../../main/core/utils/Tools\";\nimport UIMgr from \"../../Component/base/UIMgr\";\nimport CommonLanguage from \"../../conf/lang/CommonLanguage\";\nimport ApiMgr from \"../../service/api/ApiMgr\";\nimport FormatConstUtil from \"../../utils/FormatConstUtil\";\nimport { FormatTemplateUtil } from \"../../utils/FormatTemplateUtil\";\nimport { FormatTestUtil } from \"../../utils/FormatTestUtil\";\nimport CommonKycInfoObserver from \"../obs/CommonKycInfoObserver\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class CommonKycInfo extends PopUpViewBase {\n    @property({ type: cc.Node, displayName: \"\" })\n    cpf: cc.Node = null;\n\n    @property({ type: cc.Node, displayName: \"\" })\n    email: cc.Node = null;\n\n    @property({ type: cc.Node, displayName: \"\" })\n    cep: cc.Node = null;\n\n    @property({ type: cc.Node, displayName: \"\" })\n    phone: cc.Node = null;\n\n    @property({ type: cc.Node, displayName: \"\" })\n    nameItem: cc.Node = null;\n\n    @Injector.Inject(CommonKycInfoObserver)\n    private kycObs: CommonKycInfoObserver = null;\n\n    start() {\n        this.kycObs.listenChange(this.onRefreshUi, this);\n    }\n\n    protected onDestroy(): void {\n        try {\n            this.kycObs.unListenChange(this.onRefreshUi, this);\n        } catch {}\n    }\n\n    protected onRefreshUi() {\n        let data = this.kycObs.get();\n        if (lodash.isEmpty(data)) {\n            return;\n        }\n        this.getComponentsInChildren(cc.EditBox).forEach((edit) => {\n            let errorComp = edit.node.parent.getComponent(EnumActive);\n            let nodeName = edit.node.parent.name;\n\n            edit.node.targetOff(this);\n            edit.node.on(\n                \"editing-did-ended\",\n                () => {\n                    this[`on${lodash.capitalize(nodeName)}EditEnded`]?.(errorComp, edit);\n                    this[`on${lodash.capitalize(nodeName)}EditSet`]?.(edit);\n                    this[`onCheck${lodash.capitalize(nodeName)}Edit`]?.(errorComp, edit);\n                },\n                this\n            );\n\n            edit.node.on(\n                \"editing-did-began\",\n                () => {\n                    this[`on${lodash.capitalize(nodeName)}EditBegin`]?.(edit);\n                },\n                this\n            );\n            this[`on${lodash.capitalize(nodeName)}EditSet`]?.(edit);\n        });\n    }\n\n    init() {\n        this.kycObs.query();\n        this.getComponentsInChildren(EnumActive).forEach((c) => {\n            c.activeIndex = EnumActiveType.HideAll;\n        });\n    }\n    private onCpfEmptyToast() {\n        UIMgr.showToast(CommonLanguage.cpfEmpty);\n    }\n    private onCpfEditSet(edit: cc.EditBox) {\n        let str = this.kycObs.get(\"kyc_extra_info\", {})?.in_kyc_extra?.CPF_OR_CNPJ ?? \"\";\n        let format = FormatTemplateUtil.cpf(str);\n        if (format == str) {\n            format = FormatTemplateUtil.cnpj(str);\n        }\n        edit.maxLength = format.length;\n        edit.string = format;\n    }\n\n    private onCpfEditBegin(edit: cc.EditBox) {\n        let str = this.kycObs.get(\"kyc_extra_info\", {})?.in_kyc_extra?.CPF_OR_CNPJ ?? \"\";\n        edit.string = str;\n        edit.maxLength = 14;\n    }\n\n    private onCheckCpfEdit(errorComp: EnumActive, edit: cc.EditBox) {\n        let str = this.kycObs.get(\"kyc_extra_info\", {})?.in_kyc_extra?.CPF_OR_CNPJ ?? \"\";\n        if (str.length !== 14 && str.length !== 11 && edit.string) {\n            errorComp.activeIndex = EnumActiveType.ShowFirstChild;\n        } else {\n            errorComp.activeIndex = EnumActiveType.HideAll;\n        }\n    }\n    private onCpfEditEnded(errorComp: EnumActive, edit: cc.EditBox) {\n        this.kycObs.modify({\n            kyc_extra_info: {\n                in_kyc_extra: {\n                    CPF_OR_CNPJ: edit.string,\n                },\n            },\n        });\n    }\n    private onEmailEditSet(edit: cc.EditBox) {\n        let str = this.kycObs.get(\"email\", \"\");\n        edit.string = str;\n    }\n    private onEmailEmptyToast() {\n        UIMgr.showToast(CommonLanguage.emailEmpty);\n    }\n    private onCheckEmailEdit(errorComp: EnumActive, edit: cc.EditBox) {\n        if (!FormatTestUtil.testEmail(edit.string) && edit.string) {\n            errorComp.activeIndex = EnumActiveType.ShowFirstChild;\n        } else {\n            errorComp.activeIndex = EnumActiveType.HideAll;\n        }\n    }\n\n    private onEmailEditEnded(errorComp: EnumActive, edit: cc.EditBox) {\n        this.kycObs.modify({\n            email: edit.string,\n        });\n    }\n\n    private onCepEditSet(edit: cc.EditBox) {\n        let str = this.kycObs.get(\"kyc_extra_info\", {})?.in_kyc_extra?.CEP ?? \"\";\n        let format = FormatTemplateUtil.cep(str);\n        edit.maxLength = format.length;\n        edit.string = format;\n    }\n\n    private onCepEditBegin(edit: cc.EditBox) {\n        let str = this.kycObs.get(\"kyc_extra_info\", {})?.in_kyc_extra?.CEP ?? \"\";\n        edit.string = str;\n        edit.maxLength = 8;\n    }\n\n    private onCheckCepEdit(errorComp: EnumActive, edit: cc.EditBox) {\n        let str = this.kycObs.get(\"kyc_extra_info\", {})?.in_kyc_extra?.CEP ?? \"\";\n        if (str.length != 8 && edit.string) {\n            errorComp.activeIndex = EnumActiveType.ShowFirstChild;\n        } else {\n            errorComp.activeIndex = EnumActiveType.HideAll;\n        }\n    }\n\n    private onCepEditEnded(errorComp: EnumActive, edit: cc.EditBox) {\n        this.kycObs.modify({\n            kyc_extra_info: {\n                in_kyc_extra: {\n                    CEP: edit.string,\n                },\n            },\n        });\n    }\n\n    private onPhoneEmptyToast() {\n        UIMgr.showToast(CommonLanguage.phoneEmpty);\n    }\n    private onPhoneEditSet(edit: cc.EditBox) {\n        let str = this.kycObs.get(\"phone\", \"\");\n        let format = FormatTemplateUtil.phone(str);\n        edit.maxLength = format.length;\n        edit.string = format;\n    }\n\n    private onPhoneEditBegin(edit: cc.EditBox) {\n        let str = this.kycObs.get(\"phone\", \"\");\n        edit.string = str;\n        edit.maxLength = FormatConstUtil.MAX_PHONE_LEN;\n    }\n    private onCheckPhoneEdit(errorComp: EnumActive, edit: cc.EditBox) {\n        let str = this.kycObs.get(\"phone\", \"\");\n        if (str.length < FormatConstUtil.MIN_PHONE_LEN && edit.string) {\n            errorComp.activeIndex = EnumActiveType.ShowFirstChild;\n        } else {\n            errorComp.activeIndex = EnumActiveType.HideAll;\n        }\n    }\n    private onPhoneEditEnded(errorComp: EnumActive, edit: cc.EditBox) {\n        this.kycObs.modify({\n            phone: edit.string,\n        });\n    }\n\n    private onNameitemEmptyToast() {\n        UIMgr.showToast(CommonLanguage.nameEmpty);\n    }\n    private onCheckNameitemEdit(errorComp: EnumActive, edit: cc.EditBox) {\n        if (!Tools.isLimit(edit.string.length, 2, 200) && edit.string) {\n            errorComp.activeIndex = EnumActiveType.ShowFirstChild;\n        } else {\n            errorComp.activeIndex = EnumActiveType.HideAll;\n        }\n    }\n    private onNameitemEditSet(edit: cc.EditBox) {\n        let str = this.kycObs.get(\"name\", \"\");\n        edit.string = str;\n    }\n    private onNameitemEditEnded(errorComp: EnumActive, edit: cc.EditBox) {\n        this.kycObs.modify({\n            name: edit.string,\n        });\n    }\n\n    private getString(node: cc.Node) {\n        return node.getComponentInChildren(cc.EditBox).string;\n    }\n\n    @UIMgr.applyLoadingUi\n    private onComfirmeClicked(errorComp: EnumActive) {\n        let result = this.getComponentsInChildren(cc.EditBox).every((edit, index) => {\n            let errorComp = edit.node.parent.getComponent(EnumActive);\n            let nodeName = edit.node.parent.name;\n            this[`onCheck${lodash.capitalize(nodeName)}Edit`]?.(errorComp, edit);\n            if (errorComp.activeIndex == EnumActiveType.ShowFirstChild || !edit.string) {\n                this[`on${lodash.capitalize(nodeName)}EmptyToast`]?.();\n                return false;\n            }\n            return true;\n        });\n\n        let comp = this.getComponentsInChildren(EnumActive).find((item) => {\n            return item.activeIndex == EnumActiveType.ShowFirstChild;\n        });\n        if (!result) {\n            // UIMgr.showToast(comp.curentNode.getComponent(cc.Label).string);\n            return;\n        }\n        return ApiMgr.getInstance()\n            .setKyc(\n                this.kycObs.translate((data) => {\n                    data.phone = CommonLanguage.phoneHead + data.phone;\n                    return data;\n                })\n            )\n            .then(() => {\n                this.close();\n            });\n    }\n}\n","/** \n * 该文件为自动生成\n * 2022/9/22下午6:23:03\n * \n **/\n\nexport const CommonLanguageEn = {\n    version: \"Current Version:\",\n    accountBlackError: \"Network error, please contact customer service.\",\n    wrongAuthCode: \"Incorrect verification code\",\n    accountRestrictIp: \"You have reached the maximum number of accounts created from this IP.\",\n    accountRestrictDevice: \"You have reached the maximum number of accounts created from this device.\",\n    registerFail: \"Registration failed\",\n    accountRegistered: \"This account already exists.\",\n    paySuccess: \"Successful deposit. Please check details in the History.\",\n    continuebet: \"Rebet\",\n    betLimit: \"Requirement\",\n    auto: \"Auto\",\n    round: \"Round\",\n    recent: \"last\",\n    loading: \"Loading...\",\n    gotIt: \"Got it\",\n    bindAccountTips: \"Please bind a beneficiary account\",\n    copySuccessTips: \"Successfully copied\",\n    deleteAccountFailed: \"Please keep at least 1 account\",\n    phoneHead: 91,\n    phoneEmpty: \"Please enter phone number\",\n    nameEmpty: \"Please enter your name\",\n    emailEmpty: \"Please enter your e-mail\",\n    registerLogin: \"Successfully registered. Auto logging in...\",\n    networkClose: \"Network error: please check or adjust your network settings.\",\n    upgradeAccountSuccess: \"Congratulations on the upgrade.\",\n    networkError: \"Disconnected, please check the network.\",\n    retryConnect: \"Reconnecting for {count}st   1st/2nd/3nd/4th time.\",\n    count: [\n        \"1st\",\n        \"2nd\",\n        \"3rd\",\n        \"4th\",\n        \"5th\",\n        \"6th\",\n        \"7th\",\n        \"8th\",\n    ],\n    passworldLenLimit: \"Please enter password of 6-20 characters.\",\n    passworldFormot: \"Password can only contain letters/numbers/dot/minus/underscore.\",\n    passwordDifferent: \"You entered 2 different passwords.\",\n    nickNameLenLimit: \"Nickname should be less than 20 characters.\",\n    phoneNumberError: \"Please enter a valid phone number with area code.\",\n    bindSuccess: \"Successfully bound\",\n    accountRuleShort: \"Please enter an account of 6 ~ 20 characters.\",\n    accountRuleError: \"Account contains only letters/numbers/dot/minus/underscore.\",\n    findPasswordSuccess: \"Password modified successfully.\",\n    abnormalLaterRetry: \"Request error, please try again later.\",\n    codeInvalid: \"Please enter a valid verification code.\",\n    timeout: \"Request timed out, please check your network and try again.\",\n    error: \"Network error, please try again later.\",\n    refreshSuccess: \"Successfully Refreshed.\",\n    confirm: \"Confirm\",\n    cancel: \"Cancel\",\n    continueExit: \"Exit\",\n    continueGame: \"Continue\",\n    returnHall: \"Back to lobby\",\n    confirmExit: \"Exit\",\n    recharge: \"Deposit\",\n    downBankerWithExit: \"Application for Banker will be canceled after leaving this room.\",\n    networkError4: \"Disconnected, please check your network.\",\n    networkError6: \"The game was interrupted due to an unknown error, please check your network connection or restart the game.\",\n    rechargeTip1: \"Your balance should be more than ₹<color=#E13E4C>{coin}</c> to play the game, would you like to deposit?\",\n    rechargeTip2: \"Your balance is less than ₹<color=#E13E4C>{coin}</c>. Are you sure to take out from safebox?\",\n    openSafebox: \"Take out\",\n    rechargeTip5: \"Insufficient balance, please deposit.\",\n    auto2: \"The system will take over if you leave the game since you have placed the bets. Are you sure to exit?\",\n    continueBet: \"Balance should be more than ₹{0} to rebet. Would you like to deposit?\",\n    trialRecharge: \"The demo mode is over, please continue with a real play.\",\n    idleTimeoutMsg: \"Haven't placed any bet for a long time, will return to lobby in {0} s.\",\n    gaming: \"The game is in progress, are you sure to exit?\",\n    gameLoadError: \"Load failed, please try again later.\",\n    coinLock: \"Disconnected, please check your network.\",\n    connectSuccess: \"Connection established.\",\n    iKnow: \"Got it\",\n    unknownError: \"Disconnected, please check your network or re-enter the game.\",\n    timeoutTips: \"You are currently away. The game has been suspended for you to avoid any loss. Do you want to continue playing?\",\n    creditInsufficientrechargeTip: \"Insufficient balance, would you like to deposit?\",\n    lessThanRedLimit: \"Bet amount is less than the Minimum limit ₹{0}.\",\n    higherThanRedLimit: \"Bet amount is more than the Maximum limit ₹{0}.\",\n    redLimit: \"Betting Limit\",\n    stageBet: \"Betting...\",\n    stageAward: \"Settling...\",\n    bigBattleRoomName: \"{value=0}\",\n    redBlackRoomName: \"{value=0}\",\n    requsetError: \"Request failed\",\n    computeing: \"Settling, please wait for the next game...\",\n    redBlackCardType: [\n        \"High Card\",\n        \"Pair\",\n        \"Straight\",\n        \"Flush\",\n        \"Straight Flush\",\n        \"Trio\",\n    ],\n    tableBgColor: \"#0B0714\",\n    tableLineFillColor: \"#3E2921\",\n    tableLineStrokeColor: \"#3E2921\",\n    allInAlert: \"Are you sure to bet ₹{betCoin}?\",\n    iKonw: \"Got it\",\n    bindOther: \"Bind Another\",\n    rechargeTip6: \"Your balance is insufficient, will return to lobby in {0} s.\",\n    invalidReferId: \"Incorrect invite code. Please confirm with the person who invited you.\",\n    loadingResFailure: \"Loading failed, please check your network and try again\",\n    cpfEmpty: \"Please enter CPF/CNPJ account\",\n};\n","/** \n * 该文件为自动生成\n * 2022/9/22下午6:23:03\n * \n **/\n\nexport const CommonLanguageHi = {\n    version: \"वर्तमान संस्करण:\",\n    accountBlackError: \"नेटवर्क त्रुटि, कृपया ग्राहक सेवा से संपर्क करें\",\n    wrongAuthCode: \"गलत सत्यापन कोड\",\n    accountRestrictIp: \"आप इस आईपी से बनाए गए अधिकतम खातों तक पहुंच गए हैं\",\n    accountRestrictDevice: \"आप इस डिवाइस से बनाए गए अधिकतम खातों तक पहुंच गए हैं\",\n    registerFail: \"पंजीकरण विफल रहा\",\n    accountRegistered: \"यह खाता पहले से ही मोजूद है।\",\n    paySuccess: \"आपके फंड को सफलतापूर्वक जमा किया गया था। कृपया इतिहास में विवरण देखें।\",\n    continuebet: \"दुबारा दाव \",\n    betLimit: \"मांग\",\n    auto: \"ऑटो\",\n    round: \"गोल\",\n    recent: \"अंतिम\",\n    loading: \"लोड हो रहा है...\",\n    gotIt: \"समझ गया\",\n    bindAccountTips: \"कृपया एक लाभार्थी खाते को बांधें\",\n    copySuccessTips: \"सफलतापूर्वक कॉपी किया गया\",\n    deleteAccountFailed: \"कृपया कम से कम 1 खाता रखें\",\n    phoneHead: 91,\n    phoneEmpty: \"कृपया फ़ोन नंबर दर्ज करें\",\n    nameEmpty: \"अपना नाम दर्ज करें\",\n    emailEmpty: \"अपना ईमेल दर्ज करें\",\n    registerLogin: \"पंजीकरण सफलतापूर्वक हो गया है. ऑटो लॉगिंग ...\",\n    networkClose: \"नेटवर्क त्रुटि: कृपया अपनी नेटवर्क सेटिंग्स की जाँच करें या समायोजित करें\",\n    upgradeAccountSuccess: \"उन्नयन पर बधाई.\",\n    networkError: \"डिस्कनेक्ट किया गया, कृपया नेटवर्क की जाँच करें\",\n    retryConnect: \"1/2/3/4 वीं बार पुन: कनेक्ट की कोशिश \",\n    count: [],\n    passworldLenLimit: \"कृपया 6-20 वर्णों का पासवर्ड दर्ज करें\",\n    passworldFormot: \"पासवर्ड में केवल अक्षर/संख्या/डॉट/माइनस/अंडरस्कोर हो सकता है\",\n    passwordDifferent: \"आपने 2 अलग -अलग पासवर्ड दर्ज किए\",\n    nickNameLenLimit: \"उपनाम 20 अक्षर से कम होना चाहिए\",\n    phoneNumberError: \"कृपया क्षेत्र कोड के साथ एक मान्य फोन नंबर दर्ज करें\",\n    bindSuccess: \"सफलतापूर्वक बाध्य\",\n    accountRuleShort: \"कृपया 6 ~ 20 वर्णों का खाता दर्ज करें\",\n    accountRuleError: \"खाते में केवल अक्षर/संख्या/दशमलव/माइनस/अंडरस्कोर होता है\",\n    findPasswordSuccess: \"पासवर्ड सफलतापूर्वक संशोधित किया गया\",\n    abnormalLaterRetry: \"अनुरोध त्रुटि, कृपया बाद में पुनः प्रयास करें\",\n    codeInvalid: \"कृपया एक मान्य सत्यापन कोड दर्ज करें\",\n    timeout: \"अनुरोध विफल, कृपया अपने नेटवर्क की जाँच करें और पुनः प्रयास करें\",\n    error: \"नेटवर्क त्रुटि, कृपया बाद में पुनः प्रयास करें\",\n    refreshSuccess: \"रिफ्रेश सफल रहा \",\n    confirm: \"पुष्टि करें\",\n    cancel: \"रद्द करना\",\n    continueExit: \"बाहर निकलना\",\n    continueGame: \"जारी रखना\",\n    returnHall: \"वापस लॉबी में चले\",\n    confirmExit: \"बाहर निकले\",\n    recharge: \"जमा\",\n    downBankerWithExit: \"इस कमरे को छोड़ने के बाद बैंकर के लिए आवेदन रद्द कर दिया जाएगा\",\n    networkError4: \"डिस्कनेक्ट हो गया, कृपया अपने नेटवर्क की जाँच करें\",\n    networkError6: \"खेल एक अज्ञात त्रुटि के कारण बाधित हो गया था, कृपया अपने नेटवर्क कनेक्शन की जाँच करें या गेम को पुनरारंभ करें\",\n    rechargeTip1: \"खेल के लिए, आपकी जमा राशि  ₹ <color=#E13E4C>{coin}</c> से अधिक होनी चाहिए, क्या आप जमा करना चाहेंगे?\",\n    rechargeTip2: \"आपकी जमा राशि ₹ <color=#E13E4C>{coin}</c> से कम है। क्या आप सेफबॉक्स से बाहर निकालना सुनिश्चित कर रहे हैं?\",\n    openSafebox: \"साथ ले जाएं\",\n    rechargeTip5: \"अपर्याप्त शेष, कृपया जमा करें\",\n    auto2: \"यदि आप दांव लगा चुके हैं तो सिस्टम खेल छोड़ देगा। क्या आप वाकई बाहर निकलना चाहते हों?\",\n    continueBet: \"फिर से दाव के लिए आपकी जमा राशि {{0} से अधिक होना चाहिए। क्या आप जमा करना चाहेंगे?\",\n    trialRecharge: \"डेमो मोड खत्म हो गया है, कृपया एक वास्तविक खेल के साथ जारी रखें\",\n    idleTimeoutMsg: \"लंबे समय के लिए कोई शर्त नहीं रखी है, {0} s में लॉबी में लौट जायेंगे\",\n    gaming: \"खेल प्रगति पर है, क्या आप बाहर निकलना सुनिश्चित करते हैं?\",\n    gameLoadError: \"लोड विफल हो गया, कृपया बाद में पुनः प्रयास करें\",\n    coinLock: \"डिस्कनेक्ट किया गया, कृपया अपने नेटवर्क की जाँच करें\",\n    connectSuccess: \"कनेक्शन स्थापित\",\n    iKnow: \"समझ गया\",\n    unknownError: \"डिस्कनेक्ट हो गया, कृपया अपने नेटवर्क की जाँच करें या गेम में फिर से प्रवेश करें\",\n    timeoutTips: \"आप वर्तमान में दूर हैं। किसी भी नुकसान से बचने के लिए खेल को आपके लिए निलंबित कर दिया गया है। क्या आप खेलना जारी रखना चाहते हैं?\",\n    creditInsufficientrechargeTip: \"अपर्याप्त जमा राशि, क्या आप जमा करना चाहेंगे?\",\n    lessThanRedLimit: \"शर्त राशि न्यूनतम सीमा से कम है ₹{0}\",\n    higherThanRedLimit: \"शर्त राशि अधिकतम सीमा से अधिक है ₹{0}\",\n    redLimit: \"सट्टेबाजी की सीमा\",\n    stageBet: \"दाव जारी\",\n    stageAward: \"निपटारा जारी \",\n    bigBattleRoomName: \"{value=0}\",\n    redBlackRoomName: \"{value=0}\",\n    requsetError: \"अनुरोध विफल रहा\",\n    computeing: \"निपटारा जारी , कृपया अगले गेम की प्रतीक्षा करें ...\",\n    redBlackCardType: [\n        \"हाई कार्ड\",\n        \"पेयर\",\n        \"स्ट्रेट\",\n        \"फ्लश\",\n        \"स्ट्रेट फ्लश\",\n        \"ट्रायो\",\n    ],\n    tableBgColor: \"#0B0714\",\n    tableLineFillColor: \"#3E2921\",\n    tableLineStrokeColor: \"#3E2921\",\n    allInAlert: \"क्या आप ₹{betcoin} शर्त सुनिश्चित कर रहे हैं?\",\n    iKonw: \"समझ गया\",\n    bindOther: \"पुनर्निर्माण\",\n    rechargeTip6: \"आपका जमा राशि अपर्याप्त है, {0} s में लॉबी में लौट जाएगा\",\n};\n","/** \n * 该文件为自动生成\n * 2022/9/22下午6:23:03\n * \n **/\n\nexport const CommonLanguageId = {\n    version: \"Versi sekarang:\",\n    accountBlackError: \"Jaringan error, hubungi layanan pelanggan\",\n    wrongAuthCode: \"Kode verifikasi salah\",\n    accountRestrictIp: \"Anda telah mencapai jumlah maksimum akun yang dibuat dari IP ini\",\n    accountRestrictDevice: \"Anda telah mencapai jumlah maksimum akun yang dibuat dari perangkat ini\",\n    registerFail: \"Registrasi gagal\",\n    accountRegistered: \"Akun ini sudah ada.\",\n    paySuccess: \"Dana Anda berhasil disetorkan. Silahkan cek detailnya di Histori.\",\n    continuebet: \"Rebet\",\n    betLimit: \"Persyaratan\",\n    auto: \"Auto\",\n    round: \"Ronde\",\n    recent: \"terakhir\",\n    loading: \"Loading...\",\n    gotIt: \"Mengerti\",\n    bindAccountTips: \"Harap ikat akun penerima\",\n    copySuccessTips: \"Berhasil disalin\",\n    deleteAccountFailed: \"Harap simpan setidaknya 1 akun\",\n    phoneHead: 91,\n    phoneEmpty: \"Masukkan No HP\",\n    nameEmpty: \"Masukan nama Anda\",\n    emailEmpty: \"Masukkan email Anda\",\n    registerLogin: \"Pendaftaran berhasil. Masuk otomatis...\",\n    networkClose: \"Jaringan error: harap periksa atau sesuaikan pengaturan jaringan Anda\",\n    upgradeAccountSuccess: \"Selamat atas upgradenya.\",\n    networkError: \"Terputus, silakan periksa jaringan\",\n    retryConnect: \"Menghubungkan kembali untuk {count}st 1st/2nd/3/4th waktu\",\n    count: [],\n    passworldLenLimit: \"Masukkan kata sandi 6-20 karakter\",\n    passworldFormot: \"Kata sandi hanya boleh berisi huruf/angka/titik/minus/garis bawah\",\n    passwordDifferent: \"Anda memasukkan 2 kata sandi yang berbeda\",\n    nickNameLenLimit: \"Nickname harus kurang dari 20 karakter\",\n    phoneNumberError: \"Masukkan No HP yang valid dengan kode area\",\n    bindSuccess: \"Berhasil terikat\",\n    accountRuleShort: \"Masukkan akun 6 ~ 20 karakter\",\n    accountRuleError: \"Akun hanya berisi huruf/angka/desimal/minus/garis bawah\",\n    findPasswordSuccess: \"Kata sandi berhasil diubah\",\n    abnormalLaterRetry: \"Permintaan error, silakan coba lagi nanti\",\n    codeInvalid: \"Masukkan kode verifikasi yang valid\",\n    timeout: \"Waktu permintaan habis, harap periksa jaringan Anda dan coba lagi\",\n    error: \"Jaringan error, coba lagi nanti\",\n    refreshSuccess: \"Berhasil di refresh\",\n    confirm: \"Konfirmasi\",\n    cancel: \"Batal\",\n    continueExit: \"Keluar\",\n    continueGame: \"Melanjutkan\",\n    returnHall: \"Kembali ke lobi\",\n    confirmExit: \"Keluar\",\n    recharge: \"Deposit\",\n    downBankerWithExit: \"Aplikasi Dealer akan dibatalkan setelah meninggalkan ruangan ini\",\n    networkError4: \"Terputus, harap periksa jaringan Anda\",\n    networkError6: \"Permainan terputus karena error yang tidak diketahui, periksa koneksi jaringan Anda atau mulai ulang permainan\",\n    rechargeTip1: \"Saldo Anda harus lebih dari Rp<color=#E13E4C>{coin}</c> untuk main game,  Anda ingin deposit?\",\n    rechargeTip2: \"Saldo Anda kurang dari Rp<color=#E13E4C>{coin}</c>.  Anda yakin akan mengambil dari brankas?\",\n    openSafebox: \"Mengambil\",\n    rechargeTip5: \"Saldo tidak cukup, harap deposit\",\n    auto2: \"Sistem mengambil alih jika Anda keluar permainan karena Anda telah memasang taruhan. Anda yakin untuk keluar?\",\n    continueBet: \"Saldo harus lebih dari Rp{0} untuk bertaruh ulang. Anda ingin deposit?\",\n    trialRecharge: \"Mode demo selesai, silakan lanjutkan ke permainan nyata\",\n    idleTimeoutMsg: \"Lama tidak memasang taruhan, akan kembali ke lobi di {0} s\",\n    gaming: \"Permainan sedang berlangsung, Anda yakin untuk keluar?\",\n    gameLoadError: \"Pemuatan gagal, coba lagi nanti\",\n    coinLock: \"Terputus, harap periksa jaringan Anda\",\n    connectSuccess: \"Koneksi terjalin\",\n    iKnow: \"Mengerti\",\n    unknownError: \"Terputus, periksa jaringan Anda atau masuk kembali ke game\",\n    timeoutTips: \"Anda tidak di tempat. Permainan telah ditangguhkan bagi Anda untuk menghindari kerugian. Apakah Anda lanjut bermain?\",\n    creditInsufficientrechargeTip: \"Saldo tidak cukup, Anda ingin deposit?\",\n    lessThanRedLimit: \"Jumlah taruhan kurang dari batas Minimum Rp{0}\",\n    higherThanRedLimit: \"Jumlah taruhan lebih dari batas Maksimum Rp{0}\",\n    redLimit: \"Batas Taruhan\",\n    stageBet: \"Pertaruhan...\",\n    stageAward: \"Penyelesaian...\",\n    bigBattleRoomName: \"{value=0}\",\n    redBlackRoomName: \"{value=0}\",\n    requsetError: \"Permintaan gagal\",\n    computeing: \"Penyelesaian, mohon tunggu game selanjutnya...\",\n    redBlackCardType: [\n        \"Kartu Tinggi\",\n        \"Pair\",\n        \"Straight\",\n        \"Flush\",\n        \"Straight Flush\",\n        \"Triplet\",\n    ],\n    tableBgColor: \"#0B0714\",\n    tableLineFillColor: \"#3E2921\",\n    tableLineStrokeColor: \"#3E2921\",\n    allInAlert: \"Apakah Anda yakin untuk bertaruh Rp{betCoin}?\",\n    iKonw: \"Mengerti\",\n    bindOther: \"Bind Another\",\n    rechargeTip6: \"Saldo Anda tidak cukup, akan kembali ke lobi dalam {0} detik.\",\n};\n","/** \n * 该文件为自动生成\n * 2022/9/22下午6:23:03\n * \n **/\n\nexport const CommonLanguagePt = {\n    version: \"Versão Atual:\",\n    accountBlackError: \"Erro de rede, entre em contato com o atendimento ao cliente.\",\n    wrongAuthCode: \"Código de verificação incorreto\",\n    accountRestrictIp: \"Você atingiu o número máximo de contas criadas a partir deste IP.\",\n    accountRestrictDevice: \"Você atingiu o número máximo de contas criadas a partir deste dispositivo.\",\n    registerFail: \"Falha ao registrar\",\n    accountRegistered: \"A conta já existe\",\n    paySuccess: \"Depósito com sucesso. Por favor, verifique os detalhes no Histórico.\",\n    continuebet: \"Reapostar\",\n    betLimit: \"Requisito\",\n    auto: \"Auto  \",\n    round: \"Rodada\",\n    recent: \"Último \",\n    loading: \"Carregando...\",\n    gotIt: \"Entendi\",\n    bindAccountTips: \"Por favor, vincule uma conta de beneficiário\",\n    copySuccessTips: \"Copiado com sucesso\",\n    deleteAccountFailed: \"Por favor, mantenha pelo menos 1 conta\",\n    phoneHead: 91,\n    phoneEmpty: \"Por favor, insira o número de telefone\",\n    nameEmpty: \"Por favor, insira seu nome\",\n    emailEmpty: \"Por favor insira o seu e-mail\",\n    registerLogin: \"Registrado com sucesso. Login automaticamente...\",\n    networkClose: \"Erro de rede: verifique ou ajuste suas configurações de rede\",\n    upgradeAccountSuccess: \"Parabéns pelo upgrade.\",\n    networkError: \"Desconectado, verifique a rede\",\n    retryConnect: \"Reconectando pela 1ª /2ª /3ª /4ª vez\",\n    count: [],\n    passworldLenLimit: \"Por favor, insira a senha de 6-20 caracteres \",\n    passworldFormot: \"A senha pode conter apenas letras/números/ponto/sinal de menos/sublinhado\",\n    passwordDifferent: \"Você inseriu 2 senhas diferentes\",\n    nickNameLenLimit: \"O apelido deve ser menos de 20 caracteres \",\n    phoneNumberError: \"Insira um número de telefone válido com código de área\",\n    bindSuccess: \"Vinculado com sucesso\",\n    accountRuleShort: \"Por favor, insira uma conta de 6 ~ 20 caracteres.\",\n    accountRuleError: \"A conta contém apenas letras/números/ponto/sinal de menos/sublinhado\",\n    findPasswordSuccess: \"Senha alterada com sucesso\",\n    abnormalLaterRetry: \"Erro de solicitação, tente novamente mais tarde\",\n    codeInvalid: \"Insira um código de verificação válido\",\n    timeout: \"A solicitação expirou. Verifique sua rede e tente novamente\",\n    error: \"Erro de rede, tente novamente mais tarde\",\n    refreshSuccess: \"Atualizado com sucesso\",\n    confirm: \"Confirmar\",\n    cancel: \"Cancelar\",\n    continueExit: \"Sair\",\n    continueGame: \"Continuar\",\n    returnHall: \"Voltar ao saguão \",\n    confirmExit: \"Sair\",\n    recharge: \"Depositar\",\n    downBankerWithExit: \"O pedido para ser Banker será cancelado depois de sair da sala\",\n    networkError4: \"Desconectado, verifique sua rede\",\n    networkError6: \"O jogo foi interrompido devido a um erro desconhecido, verifique sua conexão de rede ou reinicie o jogo\",\n    rechargeTip1: \"Seu saldo deve ser superior a R$<color=#E13E4C>{coin}</c> para jogar. Deseja depositar?\",\n    rechargeTip2: \"Seu saldo é inferior a R$<color=#E13E4C>{coin}</c>. Tem certeza de sacar do cofre?\",\n    openSafebox: \"Sacar\",\n    rechargeTip5: \"Saldo insuficiente, por favor deposite\",\n    auto2: \"O sistema assumirá o controle se você sair do jogo como você já apostou. Tem certeza de sair?\",\n    continueBet: \"O saldo deve ser superior a R${0} para apostar novamente. Deseja depositar?\",\n    trialRecharge: \"O modo de demo acabou, por favor continue com um jogo real\",\n    idleTimeoutMsg: \"Não faz nenhuma aposta há muito tempo, voltará ao lobby em {0} s\",\n    gaming: \"O jogo está em andamento, você tem certeza de sair?\",\n    gameLoadError: \"Falha ao carregar. Tente novamente mais tarde\",\n    coinLock: \"Desconectado, verifique sua rede\",\n    connectSuccess: \"Conexão estabelecida\",\n    iKnow: \"Entendi\",\n    unknownError: \"Desconectado, verifique sua rede ou entre novamente no jogo\",\n    timeoutTips: \"Você está ausente no momento. O jogo foi suspenso ao fim de que evite qualquer perda. Você quer continuar jogando?\",\n    creditInsufficientrechargeTip: \"Saldo insuficiente, gostaria de depositar?\",\n    lessThanRedLimit: \"O valor da aposta é menor que o limite mínimo R${0}\",\n    higherThanRedLimit: \"O valor da aposta é mais queo limite máximo R${0}\",\n    redLimit: \"Limite de Aposta\",\n    stageBet: \"Apostando...\",\n    stageAward: \"Liquidando...\",\n    bigBattleRoomName: \"{value=0}\",\n    redBlackRoomName: \"{value=0}\",\n    requsetError: \"Falha ao solicitar\",\n    computeing: \"Liquidando, por favor aguarde o próximo jogo...\",\n    redBlackCardType: [\n        \"Carta Alta\",\n        \"Par\",\n        \"Sequência\",\n        \"Cor\",\n        \"Sequência de Cor\",\n        \"Trinca\",\n    ],\n    tableBgColor: \"#0B0714\",\n    tableLineFillColor: \"#3E2921\",\n    tableLineStrokeColor: \"#3E2921\",\n    allInAlert: \"Tem certeza de apostar R${betCoin}?\",\n    iKonw: \"Entendi\",\n    bindOther: \"Vincular Outra\",\n    rechargeTip6: \"Seu saldo é insuficiente, retornará ao saguão em {0} s\",\n    invalidReferId: \"Código de convite incorreto. Por favor, confirme com a pessoa que o convidou.\",\n    loadingResFailure: \"Falha ao carregar, verifique sua rede e tente novamente.\",\n    cpfEmpty: \"Por favor, insira a conta de CPF/CNPJ\",\n};\n","/** \n * 该文件为自动生成\n * 2022/9/22下午6:23:03\n * \n **/\n\nexport const CommonLanguageZh = {\n    cpfEmpty: \"请输入CPF/CNPJ\",\n};\n","/** 该文件为自动生成\n * 2022/9/22下午6:23:03\n * \n **/\n\nimport { LanguageType } from \"../../../../../../main/core/conf/LanguageType\";\nimport BaseBundleLanguage from \"../../../../../../main/core/language/BaseBundleLanguage\";\nimport { CommonLanguageEn } from \"./en/CommonLanguageEn\";\nimport { CommonLanguagePt } from \"./pt/CommonLanguagePt\";\nimport { CommonLanguageHi } from \"./hi/CommonLanguageHi\";\nimport { CommonLanguageId } from \"./id/CommonLanguageId\";\nimport { CommonLanguageZh } from \"./zh/CommonLanguageZh\";\n\ntype TLanguage = typeof CommonLanguageEn &\n    typeof CommonLanguagePt &\n    typeof CommonLanguageHi &\n    typeof CommonLanguageId &\n    typeof CommonLanguageZh;\nclass CommonLanguage extends BaseBundleLanguage<TLanguage> {\n    protected language: LG.ILanguageConfigs = {\n        [LanguageType.EN]: CommonLanguageEn,\n        [LanguageType.PT]: CommonLanguagePt,\n        [LanguageType.HI]: CommonLanguageHi,\n        [LanguageType.ID]: CommonLanguageId,\n        [LanguageType.ZH]: CommonLanguageZh,\n    };\n}\nexport default new CommonLanguage().get();\n","import CacheObserver from \"../../../../../main/core/utils/class/CacheObserver\";\nimport ValueObserver from \"../../../../../main/core/utils/class/ValueObserver\";\nimport { setInstance } from \"../../../../../main/core/utils/decorators/InstanceClassDecorator\";\nimport { lodash } from \"../../../../../main/core/utils/NpmExport\";\nimport { UniverseProto } from \"../universe/proto/UniverseProto\";\n\ntype IData = ProtoObject<UniverseProto.LaunchConfResp>\n\n@setInstance\nexport default class CommonLaunchConfigObserver extends CacheObserver<IData> {\n    protected getCacheKey(): string {\n        return \"_launch_cache\";\n    }\n}\n","class CommonListenUiEvent {\n    /** 刷新Hall View */\n    public static readonly LISTEN_UI_HALL_VIEW_SHOW = \"LISTEN_UI_HALL_VIEW_SHOW\";\n}\n\nexport default CommonListenUiEvent;\n","import {\n    setInstance,\n    Instance,\n} from \"../../../../../main/core/utils/decorators/InstanceClassDecorator\";\nimport ValueObserver from \"../../../../../main/core/utils/class/ValueObserver\";\n\ninterface ISwitchData {\n    /**提现引导的开关 */\n    withdraw_guide?: boolean;\n    /**闪告的开关 */\n    broadcast?: boolean;\n    /**游戏回放的开关 */\n    game_replay?: boolean;\n    /**小游戏的开关 */\n    mini_game_window?: boolean;\n    /**闪告的开关 */\n    push?: boolean;\n    /**活动中心的开关 */\n    activity_center?: boolean;\n}\n\n@setInstance\nexport default class CommonNetworkSwitchObserver extends ValueObserver<ISwitchData> {\n    protected onInit(): ISwitchData {\n        return {};\n    }\n\n    public getSwitch(key: keyof ISwitchData, defaultValue: boolean = false): boolean {\n        return this.get(key, defaultValue);\n    }\n}\n","export default class CommonObjectPool {\n    private Pool: cc.NodePool = new cc.NodePool();\n    private prefab: cc.Prefab = null;\n\n    public create(count: number, prefab: cc.Prefab) {\n        if (this.Pool == null) {\n            this.Pool = new cc.NodePool();\n        }\n        if (count > 0 && prefab != null && prefab != undefined) {\n            this.prefab = prefab;\n            for (let i = 0; i < count; ++i) {\n                let obj = cc.instantiate(prefab);\n                if (obj) {\n                    if (this.Pool) {\n                        this.Pool.put(obj);\n                    }\n                }\n            }\n        }\n    }\n\n    public setObj(parentNode: cc.Node, maxChildrenCount: number) {\n        let self = this;\n        if (self.Pool && self.Pool.size() <= 0) {\n            if (self.prefab != null) {\n                let node = cc.instantiate(self.prefab);\n                if (node) {\n                    self.Pool.put(node);\n                }\n            }\n        }\n\n        if (maxChildrenCount !== undefined && parentNode.childrenCount >= maxChildrenCount) {\n            let firstChip = parentNode.children[0];\n            self.Pool.put(firstChip);\n            parentNode.removeChild(firstChip);\n        }\n\n        let node = self.Pool.get();\n        if (node == null && self.prefab != null) {\n            node = cc.instantiate(self.prefab);\n        }\n\n        if (node != null) {\n            node.parent = parentNode;\n        }\n\n        return node;\n    }\n\n    public reuse(obj: cc.Node) {\n        let self = this;\n        if (self.Pool != null && self.Pool != undefined && obj != null && obj != undefined) {\n            self.Pool.put(obj);\n        }\n    }\n\n    public size() {\n        return this.Pool.size();\n    }\n\n    public clear() {\n        let self = this;\n        if (self.Pool != null && self.Pool != undefined) {\n            self.Pool.clear();\n            self.Pool = null;\n        }\n    }\n}\n","import { BundleCommonMgr } from \"./bd/BundleCommonMgr\";\nimport CommonSkin from \"./conf/skin/CommonSkin\";\n\nexport class CommonPrefabMgr {\n    private static _instance: CommonPrefabMgr = null;\n\n    public static getInstance() {\n        if (!this._instance) {\n            this._instance = new CommonPrefabMgr();\n        }\n\n        return this._instance;\n    }\n\n    private constructor() {}\n\n    public createCommonLoading(message: string): void {\n        let canvas = CommonDepend.CocosUtils.getSceneCanvas();\n        UIDepend.PrefabManager.loadPrefabInsBundle(\n            BundleCommonMgr.getInstance().getBundleNameDescForLoadingUI(),\n            (prefab: cc.Node) => {\n                if (cc.isValid(canvas) && prefab) {\n                    let oldLoading = canvas.getChildByName(\"Loading\");\n                    if (oldLoading) {\n                        canvas.removeChild(oldLoading);\n                    }\n                    canvas.addChild(prefab, canvas.childrenCount + 1);\n                    if (prefab.getComponent(\"Loading\")) {\n                        prefab.getComponent(\"Loading\").init(message);\n                    }\n                    prefab.x = 0;\n                    prefab.y = 0;\n                }\n            }\n        );\n    }\n\n    public removeCommonLoading() {\n        let isRemoved = false;\n\n        let timeRemoveLoadingFirst = setTimeout(function () {\n            removeLogic();\n            clearTimeout(timeRemoveLoadingFirst);\n        }, 150);\n\n        if (isRemoved == false) {\n            let timeRemoveLoading = setTimeout(function () {\n                removeLogic();\n                clearTimeout(timeRemoveLoading);\n            }, 500);\n        }\n\n        function removeLogic() {\n            let canvas = CommonDepend.CocosUtils.getSceneCanvas();\n            let oldLoading = canvas.getChildByName(\"LoadingUI\");\n            if (oldLoading && cc.isValid(canvas)) {\n                canvas.removeChild(oldLoading);\n                isRemoved = true;\n            }\n        }\n    }\n\n    public removeCommonLoadingWithBrc() {\n        let canvas = CommonDepend.CocosUtils.getSceneCanvas();\n        if (cc.isValid(canvas) && canvas.children) {\n            for (let i = canvas.children.length - 1; i >= 0; i--) {\n                let child = canvas.children[i];\n                if (child && child.name == \"LoadingWithFont\") {\n                    canvas.removeChild(child);\n                }\n            }\n        }\n    }\n\n    public loadRuleContentToNode(parent, gameId, completeCallback) {\n        let prefabPath = BundleCommonMgr.getInstance().getBundleNameDescForGameRuleContent();\n        UIDepend.PrefabManager.loadPrefabInsBundle(prefabPath, function (prefab) {\n            if (prefab && cc.isValid(parent)) {\n                if (prefab.getComponent(\"RuleContent\")) {\n                    prefab.getComponent(\"RuleContent\").loadContent(gameId);\n                }\n                parent.addChild(prefab);\n                if (typeof completeCallback === \"function\") {\n                    completeCallback();\n                }\n            }\n        });\n    }\n\n    public createCommonLoadingWithBrc(options?) {\n        let self = this;\n        let canvas = CommonDepend.CocosUtils.getSceneCanvas();\n        self.removeCommonLoadingWithBrc();\n\n        let bundleDesc: IResDescribe =\n            BundleCommonMgr.getInstance().getBundleNameDescForLoadingWithFont();\n        UIDepend.PrefabManager.loadPrefabInsBundle(bundleDesc, (node: cc.Node) => {\n            if (cc.isValid(canvas) && node) {\n                canvas.addChild(node, 50);\n                let posX = 0;\n                let posY = 0;\n                if (options) {\n                    if (options.x) {\n                        posX = options.x;\n                    }\n                    if (options.y) {\n                        posY = options.y;\n                    }\n                }\n                node.x = posX;\n                node.y = posY;\n            }\n        });\n    }\n}\n","import HttpObserver from \"../../../../../main/core/utils/class/HttpObserver\";\nimport { setInstance } from \"../../../../../main/core/utils/decorators/InstanceClassDecorator\";\nimport ApiMgr from \"../service/api/ApiMgr\";\n\n@setInstance\nexport default class CommonPromoterVerifyBrdObserver extends HttpObserver<boolean> {\n    protected onQuery(...args: any[]): Promise<boolean> {\n        return ApiMgr.getInstance().promoterVerifyBrd();\n    }\n}\n","/**\n * Generated by the protoc-gen-ts.  DO NOT EDIT!\n * compiler version: 3.19.4\n * source: int/game_common/Common.proto\n * git: https://github.com/thesayyn/protoc-gen-ts */\n\nimport { pb_1 } from \"../../../../../../../main/core/utils/NpmExport\";\n\n/*\n此处请修改为Creator NpmExport路径\n请注意路径的层级\n */\nexport namespace CommonProto {\n    /** \n      错误码\n       **/\n    export enum STATUS {\n        /** \n          0~99, 通用错误码\n           **/\n        OK = 0,\n\n        /** \n          未知错误\n           **/\n        UNKNOWN_ERROR = 1,\n\n        /** \n          需要重新认证\n           **/\n        NOT_AUTH = 2,\n\n        /** \n          token错误\n           **/\n        TOKEN_INVALID = 3,\n\n        /** \n          余额不足\n           **/\n        INSUFFICIENT = 4,\n\n        /** \n          需要用户重连到另外的服务器\n           **/\n        REDIRECT = 5,\n\n        /** \n          闲置时间过长\n           **/\n        IDLE_TIMEOUT = 6,\n\n        /** \n          重复登录\n           **/\n        DUP_LOGIN = 7,\n\n        /** \n          参数错误\n           **/\n        PARAM_ERROR = 8,\n\n        /** \n          服务器已经关闭\n           **/\n        SERVER_CLOSED = 9,\n\n        /** \n          金币锁冲突\n           **/\n        GOLDLOCK_CONFLICT = 10,\n\n        /** \n          操作不符合规则\n           **/\n        PLAY_RULE = 11,\n\n        /** \n          房间人数已满\n           **/\n        ROOM_IS_FULL = 12,\n\n        /** \n          游戏已经结束\n           **/\n        GAME_OVER = 13,\n\n        /** \n          余额超出房间限制\n           **/\n        EXCEED_LIMIT = 14,\n\n        /** \n          自动更换房间\n           **/\n        AUTO_CHANGE_ROOM = 15,\n\n        /** \n          200-299 cube错误码\n          上庄金额不足\n           **/\n        CUBE_BANKER_INSUFFICIENT = 200,\n\n        /** \n          上庄队列已满\n           **/\n        CUBE_BANKER_FULL = 201,\n\n        /** \n          筹码错误\n           **/\n        CUBE_CHIP_ERROR = 202,\n\n        /** \n          单个区域下注金额超出限制\n           **/\n        CUBE_BET_OVER_LIMIT = 203,\n\n        /** \n          金额不足下庄\n           **/\n        CUBE_OFF_BANKER_FOR_CREDIT = 204,\n\n        /** \n          连庄达到上限下庄\n           **/\n        CUBE_OFF_BANKER_FOR_COUNT = 205,\n\n        /** \n          本局下注金额已达上限\n           **/\n        CUBE_BET_OVER_CREDIT = 206,\n\n        /** \n          下注失败\n           **/\n        CUBE_BET_INSUFFICIENT = 207,\n\n        /** \n          低于限红的下限金额\n           **/\n        CUBE_BET_RED_LIMIT_LOW = 208,\n\n        /** \n          高于限红的上限金额\n           **/\n        CUBE_BET_RED_LIMIT_HIGH = 209,\n\n        /** \n          房间桌子不存在\n           **/\n        CUBE_ROOM_NOT_EXIST = 210,\n    }\n\n    /** \n      通用消息ID\n       **/\n    export enum MessageID {\n        PING = 0,\n        PONG = 99,\n        ERROR_ST = 100,\n        AUTH_REQ = 999,\n        SYNC_CREDIT_REQ = 998,\n        CHAT_NT = 997,\n        CHAT_REQ = 996,\n    }\n    export enum ConnectType {\n        /** \n          正常连接\n           **/\n        CONNECT_NORMAL = 0,\n\n        /** \n          重连\n           **/\n        CONNECT_RE = 1,\n    }\n    export enum ChatType {\n        /** \n          个人表情\n           **/\n        PERSONAL = 0,\n\n        /** \n          交互表情\n           **/\n        INTERACTION = 1,\n    }\n\n    /** \n      后续可扩展文本类型等\n       **/\n    export enum Emotion {\n        /** \n          看牌\n           **/\n        PERSONAL_LOOK = 0,\n\n        /** \n          大哭\n           **/\n        PERSONAL_CRY = 1,\n\n        /** \n          得意\n           **/\n        PERSONAL_PROUD = 2,\n\n        /** \n          疑问\n           **/\n        PERSONAL_DOUBT = 3,\n\n        /** \n          啤酒\n           **/\n        INTERACTION_BEER = 4,\n\n        /** \n          鸡蛋\n           **/\n        INTERACTION_EGG = 5,\n\n        /** \n          鲜花\n           **/\n        INTERACTION_FLOWER = 6,\n\n        /** \n          捉鸡\n           **/\n        INTERACTION_HURRY = 7,\n    }\n\n    /** \n      对时，服务端存活探测探测, id=0\n       **/\n    export class Ping extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Timestamp?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Timestamp\" in data && data.Timestamp != undefined) {\n                    this.Timestamp = data.Timestamp;\n                }\n            }\n        }\n        get Timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set Timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        static fromObject(data: { Timestamp?: number }): Ping {\n            const message = new Ping({});\n            if (data.Timestamp != null) {\n                message.Timestamp = data.Timestamp;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Timestamp?: number;\n            } = {};\n            if (this.Timestamp != null) {\n                data.Timestamp = this.Timestamp;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Timestamp != 0) writer.writeInt64(1, this.Timestamp);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Ping {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new Ping();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Timestamp = reader.readInt64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): Ping {\n            return Ping.deserialize(bytes);\n        }\n    }\n\n    /** \n      对时，服务端返回当前时间，id=99\n       **/\n    export class Pong extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Timestamp?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Timestamp\" in data && data.Timestamp != undefined) {\n                    this.Timestamp = data.Timestamp;\n                }\n            }\n        }\n        get Timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set Timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        static fromObject(data: { Timestamp?: number }): Pong {\n            const message = new Pong({});\n            if (data.Timestamp != null) {\n                message.Timestamp = data.Timestamp;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Timestamp?: number;\n            } = {};\n            if (this.Timestamp != null) {\n                data.Timestamp = this.Timestamp;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Timestamp != 0) writer.writeInt64(1, this.Timestamp);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Pong {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new Pong();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Timestamp = reader.readInt64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): Pong {\n            return Pong.deserialize(bytes);\n        }\n    }\n\n    /** \n      错误信息，id: 100\n       **/\n    export class ErrorST extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Timestamp?: number;\n                      Status?: STATUS;\n                      Msg?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Timestamp\" in data && data.Timestamp != undefined) {\n                    this.Timestamp = data.Timestamp;\n                }\n                if (\"Status\" in data && data.Status != undefined) {\n                    this.Status = data.Status;\n                }\n                if (\"Msg\" in data && data.Msg != undefined) {\n                    this.Msg = data.Msg;\n                }\n            }\n        }\n\n        /** \n          毫秒级时间戳，下同\n           **/\n        get Timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n\n        /** \n          毫秒级时间戳，下同\n           **/\n        set Timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get Status() {\n            return pb_1.Message.getFieldWithDefault(this, 2, STATUS.OK) as STATUS;\n        }\n        set Status(value: STATUS) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get Msg() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n        set Msg(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: { Timestamp?: number; Status?: STATUS; Msg?: string }): ErrorST {\n            const message = new ErrorST({});\n            if (data.Timestamp != null) {\n                message.Timestamp = data.Timestamp;\n            }\n            if (data.Status != null) {\n                message.Status = data.Status;\n            }\n            if (data.Msg != null) {\n                message.Msg = data.Msg;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Timestamp?: number;\n                Status?: STATUS;\n                Msg?: string;\n            } = {};\n            if (this.Timestamp != null) {\n                data.Timestamp = this.Timestamp;\n            }\n            if (this.Status != null) {\n                data.Status = this.Status;\n            }\n            if (this.Msg != null) {\n                data.Msg = this.Msg;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Timestamp != 0) writer.writeInt64(1, this.Timestamp);\n            if (this.Status != STATUS.OK) writer.writeEnum(2, this.Status);\n            if (this.Msg.length) writer.writeString(3, this.Msg);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ErrorST {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new ErrorST();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Timestamp = reader.readInt64();\n                        break;\n                    case 2:\n                        message.Status = reader.readEnum();\n                        break;\n                    case 3:\n                        message.Msg = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): ErrorST {\n            return ErrorST.deserialize(bytes);\n        }\n    }\n\n    /** \n      认证请求  id: 999\n       **/\n    export class AuthReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Timestamp?: number;\n                      UserID?: number;\n                      Token?: string;\n                      RoomKind?: number;\n                      RoomID?: number;\n                      GameID?: number;\n                      ConnectType?: ConnectType;\n                      Lan?: string;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Timestamp\" in data && data.Timestamp != undefined) {\n                    this.Timestamp = data.Timestamp;\n                }\n                if (\"UserID\" in data && data.UserID != undefined) {\n                    this.UserID = data.UserID;\n                }\n                if (\"Token\" in data && data.Token != undefined) {\n                    this.Token = data.Token;\n                }\n                if (\"RoomKind\" in data && data.RoomKind != undefined) {\n                    this.RoomKind = data.RoomKind;\n                }\n                if (\"RoomID\" in data && data.RoomID != undefined) {\n                    this.RoomID = data.RoomID;\n                }\n                if (\"GameID\" in data && data.GameID != undefined) {\n                    this.GameID = data.GameID;\n                }\n                if (\"ConnectType\" in data && data.ConnectType != undefined) {\n                    this.ConnectType = data.ConnectType;\n                }\n                if (\"Lan\" in data && data.Lan != undefined) {\n                    this.Lan = data.Lan;\n                }\n            }\n        }\n        get Timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set Timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get UserID() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n        set UserID(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get Token() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n        set Token(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n\n        /** \n          房间类型\n           **/\n        get RoomKind() {\n            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n        }\n\n        /** \n          房间类型\n           **/\n        set RoomKind(value: number) {\n            pb_1.Message.setField(this, 4, value);\n        }\n\n        /** \n          房间ID\n           **/\n        get RoomID() {\n            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;\n        }\n\n        /** \n          房间ID\n           **/\n        set RoomID(value: number) {\n            pb_1.Message.setField(this, 5, value);\n        }\n\n        /** \n          游戏ID\n           **/\n        get GameID() {\n            return pb_1.Message.getFieldWithDefault(this, 100, 0) as number;\n        }\n\n        /** \n          游戏ID\n           **/\n        set GameID(value: number) {\n            pb_1.Message.setField(this, 100, value);\n        }\n\n        /** \n          如果用户是点击返回游戏进来的，0:正常，1：重连\n           **/\n        get ConnectType() {\n            return pb_1.Message.getFieldWithDefault(\n                this,\n                101,\n                ConnectType.CONNECT_NORMAL\n            ) as ConnectType;\n        }\n\n        /** \n          如果用户是点击返回游戏进来的，0:正常，1：重连\n           **/\n        set ConnectType(value: ConnectType) {\n            pb_1.Message.setField(this, 101, value);\n        }\n\n        /** \n          客户端当前语言，用于token失效场景时，服务端返回对应语言的提示\n           **/\n        get Lan() {\n            return pb_1.Message.getFieldWithDefault(this, 102, \"\") as string;\n        }\n\n        /** \n          客户端当前语言，用于token失效场景时，服务端返回对应语言的提示\n           **/\n        set Lan(value: string) {\n            pb_1.Message.setField(this, 102, value);\n        }\n        static fromObject(data: {\n            Timestamp?: number;\n            UserID?: number;\n            Token?: string;\n            RoomKind?: number;\n            RoomID?: number;\n            GameID?: number;\n            ConnectType?: ConnectType;\n            Lan?: string;\n        }): AuthReq {\n            const message = new AuthReq({});\n            if (data.Timestamp != null) {\n                message.Timestamp = data.Timestamp;\n            }\n            if (data.UserID != null) {\n                message.UserID = data.UserID;\n            }\n            if (data.Token != null) {\n                message.Token = data.Token;\n            }\n            if (data.RoomKind != null) {\n                message.RoomKind = data.RoomKind;\n            }\n            if (data.RoomID != null) {\n                message.RoomID = data.RoomID;\n            }\n            if (data.GameID != null) {\n                message.GameID = data.GameID;\n            }\n            if (data.ConnectType != null) {\n                message.ConnectType = data.ConnectType;\n            }\n            if (data.Lan != null) {\n                message.Lan = data.Lan;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Timestamp?: number;\n                UserID?: number;\n                Token?: string;\n                RoomKind?: number;\n                RoomID?: number;\n                GameID?: number;\n                ConnectType?: ConnectType;\n                Lan?: string;\n            } = {};\n            if (this.Timestamp != null) {\n                data.Timestamp = this.Timestamp;\n            }\n            if (this.UserID != null) {\n                data.UserID = this.UserID;\n            }\n            if (this.Token != null) {\n                data.Token = this.Token;\n            }\n            if (this.RoomKind != null) {\n                data.RoomKind = this.RoomKind;\n            }\n            if (this.RoomID != null) {\n                data.RoomID = this.RoomID;\n            }\n            if (this.GameID != null) {\n                data.GameID = this.GameID;\n            }\n            if (this.ConnectType != null) {\n                data.ConnectType = this.ConnectType;\n            }\n            if (this.Lan != null) {\n                data.Lan = this.Lan;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Timestamp != 0) writer.writeInt64(1, this.Timestamp);\n            if (this.UserID != 0) writer.writeUint64(2, this.UserID);\n            if (this.Token.length) writer.writeString(3, this.Token);\n            if (this.RoomKind != 0) writer.writeInt32(4, this.RoomKind);\n            if (this.RoomID != 0) writer.writeUint64(5, this.RoomID);\n            if (this.GameID != 0) writer.writeInt32(100, this.GameID);\n            if (this.ConnectType != ConnectType.CONNECT_NORMAL)\n                writer.writeEnum(101, this.ConnectType);\n            if (this.Lan.length) writer.writeString(102, this.Lan);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new AuthReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Timestamp = reader.readInt64();\n                        break;\n                    case 2:\n                        message.UserID = reader.readUint64();\n                        break;\n                    case 3:\n                        message.Token = reader.readString();\n                        break;\n                    case 4:\n                        message.RoomKind = reader.readInt32();\n                        break;\n                    case 5:\n                        message.RoomID = reader.readUint64();\n                        break;\n                    case 100:\n                        message.GameID = reader.readInt32();\n                        break;\n                    case 101:\n                        message.ConnectType = reader.readEnum();\n                        break;\n                    case 102:\n                        message.Lan = reader.readString();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): AuthReq {\n            return AuthReq.deserialize(bytes);\n        }\n    }\n\n    /** \n      同步玩家余额请求  id: 998\n       **/\n    export class SyncCreditReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Timestamp?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Timestamp\" in data && data.Timestamp != undefined) {\n                    this.Timestamp = data.Timestamp;\n                }\n            }\n        }\n        get Timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set Timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        static fromObject(data: { Timestamp?: number }): SyncCreditReq {\n            const message = new SyncCreditReq({});\n            if (data.Timestamp != null) {\n                message.Timestamp = data.Timestamp;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Timestamp?: number;\n            } = {};\n            if (this.Timestamp != null) {\n                data.Timestamp = this.Timestamp;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Timestamp != 0) writer.writeInt64(1, this.Timestamp);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SyncCreditReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new SyncCreditReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Timestamp = reader.readInt64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): SyncCreditReq {\n            return SyncCreditReq.deserialize(bytes);\n        }\n    }\n\n    /** \n      996 发送交互表情消息\n       **/\n    export class ChatReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Content?: string;\n                      Type?: ChatType;\n                      ToUserID?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Content\" in data && data.Content != undefined) {\n                    this.Content = data.Content;\n                }\n                if (\"Type\" in data && data.Type != undefined) {\n                    this.Type = data.Type;\n                }\n                if (\"ToUserID\" in data && data.ToUserID != undefined) {\n                    this.ToUserID = data.ToUserID;\n                }\n            }\n        }\n        get Content() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n        }\n        set Content(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get Type() {\n            return pb_1.Message.getFieldWithDefault(this, 2, ChatType.PERSONAL) as ChatType;\n        }\n        set Type(value: ChatType) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          个人表情不需要此值\n           **/\n        get ToUserID() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n\n        /** \n          个人表情不需要此值\n           **/\n        set ToUserID(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: { Content?: string; Type?: ChatType; ToUserID?: number }): ChatReq {\n            const message = new ChatReq({});\n            if (data.Content != null) {\n                message.Content = data.Content;\n            }\n            if (data.Type != null) {\n                message.Type = data.Type;\n            }\n            if (data.ToUserID != null) {\n                message.ToUserID = data.ToUserID;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Content?: string;\n                Type?: ChatType;\n                ToUserID?: number;\n            } = {};\n            if (this.Content != null) {\n                data.Content = this.Content;\n            }\n            if (this.Type != null) {\n                data.Type = this.Type;\n            }\n            if (this.ToUserID != null) {\n                data.ToUserID = this.ToUserID;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Content.length) writer.writeString(1, this.Content);\n            if (this.Type != ChatType.PERSONAL) writer.writeEnum(2, this.Type);\n            if (this.ToUserID != 0) writer.writeUint64(3, this.ToUserID);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new ChatReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Content = reader.readString();\n                        break;\n                    case 2:\n                        message.Type = reader.readEnum();\n                        break;\n                    case 3:\n                        message.ToUserID = reader.readUint64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): ChatReq {\n            return ChatReq.deserialize(bytes);\n        }\n    }\n\n    /** \n      997 收到交互表情消息\n       **/\n    export class ChatNt extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Timestamp?: number;\n                      FromUserID?: number;\n                      ToUserID?: number;\n                      Content?: string;\n                      Type?: ChatType;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Timestamp\" in data && data.Timestamp != undefined) {\n                    this.Timestamp = data.Timestamp;\n                }\n                if (\"FromUserID\" in data && data.FromUserID != undefined) {\n                    this.FromUserID = data.FromUserID;\n                }\n                if (\"ToUserID\" in data && data.ToUserID != undefined) {\n                    this.ToUserID = data.ToUserID;\n                }\n                if (\"Content\" in data && data.Content != undefined) {\n                    this.Content = data.Content;\n                }\n                if (\"Type\" in data && data.Type != undefined) {\n                    this.Type = data.Type;\n                }\n            }\n        }\n        get Timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set Timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get FromUserID() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n        set FromUserID(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get ToUserID() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n        set ToUserID(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n\n        /** \n          消息内容: \"{:1}\" 代表大哭，里面的数字是Emotion的枚举值\n           **/\n        get Content() {\n            return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n        }\n\n        /** \n          消息内容: \"{:1}\" 代表大哭，里面的数字是Emotion的枚举值\n           **/\n        set Content(value: string) {\n            pb_1.Message.setField(this, 4, value);\n        }\n        get Type() {\n            return pb_1.Message.getFieldWithDefault(this, 5, ChatType.PERSONAL) as ChatType;\n        }\n        set Type(value: ChatType) {\n            pb_1.Message.setField(this, 5, value);\n        }\n        static fromObject(data: {\n            Timestamp?: number;\n            FromUserID?: number;\n            ToUserID?: number;\n            Content?: string;\n            Type?: ChatType;\n        }): ChatNt {\n            const message = new ChatNt({});\n            if (data.Timestamp != null) {\n                message.Timestamp = data.Timestamp;\n            }\n            if (data.FromUserID != null) {\n                message.FromUserID = data.FromUserID;\n            }\n            if (data.ToUserID != null) {\n                message.ToUserID = data.ToUserID;\n            }\n            if (data.Content != null) {\n                message.Content = data.Content;\n            }\n            if (data.Type != null) {\n                message.Type = data.Type;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Timestamp?: number;\n                FromUserID?: number;\n                ToUserID?: number;\n                Content?: string;\n                Type?: ChatType;\n            } = {};\n            if (this.Timestamp != null) {\n                data.Timestamp = this.Timestamp;\n            }\n            if (this.FromUserID != null) {\n                data.FromUserID = this.FromUserID;\n            }\n            if (this.ToUserID != null) {\n                data.ToUserID = this.ToUserID;\n            }\n            if (this.Content != null) {\n                data.Content = this.Content;\n            }\n            if (this.Type != null) {\n                data.Type = this.Type;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Timestamp != 0) writer.writeInt64(1, this.Timestamp);\n            if (this.FromUserID != 0) writer.writeUint64(2, this.FromUserID);\n            if (this.ToUserID != 0) writer.writeUint64(3, this.ToUserID);\n            if (this.Content.length) writer.writeString(4, this.Content);\n            if (this.Type != ChatType.PERSONAL) writer.writeEnum(5, this.Type);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatNt {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new ChatNt();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Timestamp = reader.readInt64();\n                        break;\n                    case 2:\n                        message.FromUserID = reader.readUint64();\n                        break;\n                    case 3:\n                        message.ToUserID = reader.readUint64();\n                        break;\n                    case 4:\n                        message.Content = reader.readString();\n                        break;\n                    case 5:\n                        message.Type = reader.readEnum();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): ChatNt {\n            return ChatNt.deserialize(bytes);\n        }\n    }\n}\n","import PopUpViewBase from \"../../../../../../main/core/popUpViewUtils/PopUpViewBase\";\nimport EnumActive from \"../../../../../../main/core/ui/component/EnumActive\";\nimport EnumController from \"../../../../../../main/core/ui/component/EnumController\";\nimport ObjectLabel from \"../../../../../../main/core/ui/component/ObjectLabel\";\nimport { Instance } from \"../../../../../../main/core/utils/decorators/InstanceClassDecorator\";\nimport { lodash } from \"../../../../../../main/core/utils/NpmExport\";\nimport UIMgr from \"../../Component/base/UIMgr\";\nimport CommonLanguage from \"../../conf/lang/CommonLanguage\";\nimport CommonSkin from \"../../conf/skin/CommonSkin\";\nimport CommonFeatureSettingObserver from \"../../obs/CommonFeatureSettingObserver\";\nimport CommonPromoterVerifyBrdObserver from \"../../obs/CommonPromoterVerifyBrdObserver\";\nimport ApiMgr from \"../../service/api/ApiMgr\";\nimport { ApiProto } from \"../../service/api/ApiProto\";\nimport { CurrencyUtil } from \"../../utils/CurrencyUtil\";\nimport { FormatTestUtil } from \"../../utils/FormatTestUtil\";\nimport { CommonUserUtil } from \"../CommonUserUtil\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class CommonRegisterForGiftView extends PopUpViewBase {\n    @property({ type: cc.Label, displayName: \"\" })\n    amount: cc.Label = null;\n    @property({ type: cc.Node, displayName: \"\" })\n    title: cc.Node = null;\n    @property({ type: cc.Node, displayName: \"\" })\n    confirmPassword: cc.Node = null;\n\n    @property({ type: cc.Node, displayName: \"\" })\n    password: cc.Node = null;\n\n    @property({ type: cc.Node, displayName: \"\" })\n    account: cc.Node = null;\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start() {}\n\n    @property({ type: cc.EditBox })\n    inviteEdit: cc.EditBox = null;\n\n    @property(EnumActive)\n    inviteNode: EnumActive = null;\n\n    protected onHasInviteCodeClicked() {\n        this.inviteNode.show4Name(\"editBox\");\n    }\n\n    public init(...args: any[]): void {\n        this.getComponent(EnumController)?.show4Name(\n            Instance(CommonPromoterVerifyBrdObserver).get() ? \"invite\" : \"normal\"\n        );\n        const launchAmount = Instance(CommonFeatureSettingObserver).getUpgradeAmount();\n        this.title.active = !!launchAmount;\n        this.amount.getComponent(ObjectLabel).object = {\n            value: CurrencyUtil.formatMoney(launchAmount),\n        };\n    }\n\n    @UIMgr.applyLoadingUi\n    protected async onRegisterBtnClick() {\n        let password = this.password.getComponentInChildren(cc.EditBox).string;\n        let confirmPassword = this.confirmPassword.getComponentInChildren(cc.EditBox).string;\n        let account = lodash.toLower(this.account.getComponentInChildren(cc.EditBox).string);\n\n        if (account.length < 6) {\n            UIMgr.showToast(CommonLanguage.accountRuleShort);\n            return;\n        }\n\n        if (password.length < 6 || confirmPassword.length < 6) {\n            UIMgr.showToast(CommonLanguage.passworldLenLimit);\n            return;\n        }\n\n        if (confirmPassword != password) {\n            UIMgr.showToast(CommonLanguage.passwordDifferent);\n            return;\n        }\n\n        if (FormatTestUtil.containInvaildSymbol(account)) {\n            UIMgr.showToast(CommonLanguage.accountRuleShort);\n            return;\n        }\n\n        if (FormatTestUtil.containInvaildSymbol(password)) {\n            UIMgr.showToast(CommonLanguage.passworldFormot);\n            return;\n        }\n\n        if (\n            !!Number(this.inviteEdit?.string ?? 0) &&\n            !(await CommonUserUtil.checkReferId(Number(this.inviteEdit?.string ?? 0)))\n        ) {\n            UIMgr.showToast(CommonLanguage.invalidReferId);\n            return;\n        }\n\n        return ApiMgr.getInstance()\n            .bindIdentity({\n                identity_info: {\n                    type: ApiProto.IdentityType.AT_ACCOUNT_NO,\n                    identity: account,\n                    cert: {\n                        password: password,\n                    },\n                },\n                refer_id: Number(this.inviteEdit?.string ?? 0),\n            })\n            .then(() => {\n                UIMgr.showToast(CommonLanguage.upgradeAccountSuccess);\n                CommonDepend.AdjustTrack.trackEvent(CommonDepend.AdjustTrack.register_account);\n                return CommonUserUtil.passwordLogin({\n                    account,\n                    password,\n                }).then(() => {\n                    this.close(true);\n                    return true;\n                });\n            });\n    }\n\n    protected onPasswordLogin() {\n        UIMgr.showUI(CommonSkin.LoadOnDemand.PasswordLogin);\n    }\n\n    // update (dt) {}\n}\n","import UserAvatarModel from \"../../../Component/UserAvatar/UserAvatarModel\";\nimport { GameType } from \"../../../../../../../main/core/conf/GameType\";\nimport { PokerResEnum } from \"../../../Component/Poker/enums/PokerResEnum\";\nimport { ChipTypeEnum } from \"../../../Component/chip/ChipTypeEnum\";\nimport { ChipValueEnum } from \"../../../Component/chip/ChipValueEnum\";\nexport let CommonResLight = {\n    priority: {\n        CommonBroadCast: <IResDescribe>{\n            resPath: \"skin/skin-light/prefab/broad_cast/LightCommonBroadCast\",\n            type: cc.Prefab,\n        },\n        font_bold: <IResDescribe>{\n            resPath: \"skin/skin-light/font/SourceSansPro-Bold\",\n            type: cc.Font,\n        },\n\n        btn_normal: <IResDescribe>{\n            resPath: \"skin/skin-light/texture/auto_atlas/lt_common_dialog_left_btn_n\",\n            type: cc.SpriteFrame,\n        },\n\n        btn_seleced: <IResDescribe>{\n            resPath: \"skin/skin-light/texture/auto_atlas/lt_common_dialog_left_btn_s\",\n            type: cc.SpriteFrame,\n        },\n\n        commonGame: <IResDescribe>{\n            resPath: \"skin/skin-light/texture/commongame/common_game\",\n            type: cc.SpriteAtlas,\n        },\n\n        commonChipValue: {\n            [`${ChipTypeEnum.CHIP_TYPE_1}_${ChipValueEnum.CHIP_VALUE_0}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/1_0\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_1}_${ChipValueEnum.CHIP_VALUE_1}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/1_1\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_1}_${ChipValueEnum.CHIP_VALUE_2}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/1_2\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_1}_${ChipValueEnum.CHIP_VALUE_3}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/1_3\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_1}_${ChipValueEnum.CHIP_VALUE_4}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/1_4\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_1}_${ChipValueEnum.CHIP_VALUE_5}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/1_5\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_1}_${ChipValueEnum.CHIP_VALUE_6}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/1_6\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_1}_${ChipValueEnum.CHIP_VALUE_7}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/1_7\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_1}_${ChipValueEnum.CHIP_VALUE_8}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/1_8\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_1}_${ChipValueEnum.CHIP_VALUE_9}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/1_9\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_1}_${ChipValueEnum.CHIP_VALUE_C}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/1_c\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_1}_${ChipValueEnum.CHIP_VALUE_COMMA}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/1_comma\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_1}_${ChipValueEnum.CHIP_VALUE_K}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/1_k\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_1}_${ChipValueEnum.CHIP_VALUE_M}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/1_m\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_1}_${ChipValueEnum.CHIP_VALUE_POINT}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/1_point\",\n                type: cc.SpriteFrame,\n            },\n\n            [`${ChipTypeEnum.CHIP_TYPE_2}_${ChipValueEnum.CHIP_VALUE_0}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/2_0\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_2}_${ChipValueEnum.CHIP_VALUE_1}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/2_1\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_2}_${ChipValueEnum.CHIP_VALUE_2}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/2_2\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_2}_${ChipValueEnum.CHIP_VALUE_3}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/2_3\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_2}_${ChipValueEnum.CHIP_VALUE_4}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/2_4\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_2}_${ChipValueEnum.CHIP_VALUE_5}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/2_5\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_2}_${ChipValueEnum.CHIP_VALUE_6}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/2_6\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_2}_${ChipValueEnum.CHIP_VALUE_7}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/2_7\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_2}_${ChipValueEnum.CHIP_VALUE_8}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/2_8\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_2}_${ChipValueEnum.CHIP_VALUE_9}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/2_9\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_2}_${ChipValueEnum.CHIP_VALUE_C}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/2_c\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_2}_${ChipValueEnum.CHIP_VALUE_COMMA}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/2_comma\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_2}_${ChipValueEnum.CHIP_VALUE_K}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/2_k\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_2}_${ChipValueEnum.CHIP_VALUE_M}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/2_m\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_2}_${ChipValueEnum.CHIP_VALUE_POINT}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/2_point\",\n                type: cc.SpriteFrame,\n            },\n\n            [`${ChipTypeEnum.CHIP_TYPE_3}_${ChipValueEnum.CHIP_VALUE_0}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/3_0\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_3}_${ChipValueEnum.CHIP_VALUE_1}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/3_1\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_3}_${ChipValueEnum.CHIP_VALUE_2}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/3_2\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_3}_${ChipValueEnum.CHIP_VALUE_3}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/3_3\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_3}_${ChipValueEnum.CHIP_VALUE_4}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/3_4\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_3}_${ChipValueEnum.CHIP_VALUE_5}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/3_5\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_3}_${ChipValueEnum.CHIP_VALUE_6}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/3_6\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_3}_${ChipValueEnum.CHIP_VALUE_7}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/3_7\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_3}_${ChipValueEnum.CHIP_VALUE_8}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/3_8\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_3}_${ChipValueEnum.CHIP_VALUE_9}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/3_9\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_3}_${ChipValueEnum.CHIP_VALUE_C}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/3_c\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_3}_${ChipValueEnum.CHIP_VALUE_COMMA}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/3_comma\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_3}_${ChipValueEnum.CHIP_VALUE_K}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/3_k\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_3}_${ChipValueEnum.CHIP_VALUE_M}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/3_m\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_3}_${ChipValueEnum.CHIP_VALUE_POINT}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/3_point\",\n                type: cc.SpriteFrame,\n            },\n\n            [`${ChipTypeEnum.CHIP_TYPE_4}_${ChipValueEnum.CHIP_VALUE_0}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/4_0\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_4}_${ChipValueEnum.CHIP_VALUE_1}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/4_1\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_4}_${ChipValueEnum.CHIP_VALUE_2}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/4_2\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_4}_${ChipValueEnum.CHIP_VALUE_3}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/4_3\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_4}_${ChipValueEnum.CHIP_VALUE_4}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/4_4\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_4}_${ChipValueEnum.CHIP_VALUE_5}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/4_5\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_4}_${ChipValueEnum.CHIP_VALUE_6}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/4_6\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_4}_${ChipValueEnum.CHIP_VALUE_7}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/4_7\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_4}_${ChipValueEnum.CHIP_VALUE_8}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/4_8\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_4}_${ChipValueEnum.CHIP_VALUE_9}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/4_9\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_4}_${ChipValueEnum.CHIP_VALUE_C}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/4_c\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_4}_${ChipValueEnum.CHIP_VALUE_COMMA}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/4_comma\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_4}_${ChipValueEnum.CHIP_VALUE_K}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/4_k\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_4}_${ChipValueEnum.CHIP_VALUE_M}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/4_m\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_4}_${ChipValueEnum.CHIP_VALUE_POINT}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/4_point\",\n                type: cc.SpriteFrame,\n            },\n\n            [`${ChipTypeEnum.CHIP_TYPE_5}_${ChipValueEnum.CHIP_VALUE_0}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/5_0\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_5}_${ChipValueEnum.CHIP_VALUE_1}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/5_1\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_5}_${ChipValueEnum.CHIP_VALUE_2}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/5_2\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_5}_${ChipValueEnum.CHIP_VALUE_3}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/5_3\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_5}_${ChipValueEnum.CHIP_VALUE_4}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/5_4\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_5}_${ChipValueEnum.CHIP_VALUE_5}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/5_5\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_5}_${ChipValueEnum.CHIP_VALUE_6}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/5_6\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_5}_${ChipValueEnum.CHIP_VALUE_7}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/5_7\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_5}_${ChipValueEnum.CHIP_VALUE_8}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/5_8\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_5}_${ChipValueEnum.CHIP_VALUE_9}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/5_9\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_5}_${ChipValueEnum.CHIP_VALUE_C}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/5_c\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_5}_${ChipValueEnum.CHIP_VALUE_COMMA}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/5_comma\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_5}_${ChipValueEnum.CHIP_VALUE_K}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/5_k\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_5}_${ChipValueEnum.CHIP_VALUE_M}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/5_m\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_5}_${ChipValueEnum.CHIP_VALUE_POINT}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/5_point\",\n                type: cc.SpriteFrame,\n            },\n\n            [`${ChipTypeEnum.CHIP_TYPE_6}_${ChipValueEnum.CHIP_VALUE_0}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/6_0\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_6}_${ChipValueEnum.CHIP_VALUE_1}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/6_1\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_6}_${ChipValueEnum.CHIP_VALUE_2}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/6_2\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_6}_${ChipValueEnum.CHIP_VALUE_3}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/6_3\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_6}_${ChipValueEnum.CHIP_VALUE_4}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/6_4\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_6}_${ChipValueEnum.CHIP_VALUE_5}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/6_5\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_6}_${ChipValueEnum.CHIP_VALUE_6}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/6_6\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_6}_${ChipValueEnum.CHIP_VALUE_7}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/6_7\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_6}_${ChipValueEnum.CHIP_VALUE_8}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/6_8\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_6}_${ChipValueEnum.CHIP_VALUE_9}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/6_9\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_6}_${ChipValueEnum.CHIP_VALUE_C}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/6_c\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_6}_${ChipValueEnum.CHIP_VALUE_COMMA}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/6_comma\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_6}_${ChipValueEnum.CHIP_VALUE_K}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/6_k\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_6}_${ChipValueEnum.CHIP_VALUE_M}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/6_m\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_6}_${ChipValueEnum.CHIP_VALUE_POINT}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/6_point\",\n                type: cc.SpriteFrame,\n            },\n\n            [`${ChipTypeEnum.CHIP_TYPE_7}_${ChipValueEnum.CHIP_VALUE_0}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/7_0\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_7}_${ChipValueEnum.CHIP_VALUE_1}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/7_1\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_7}_${ChipValueEnum.CHIP_VALUE_2}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/7_2\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_7}_${ChipValueEnum.CHIP_VALUE_3}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/7_3\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_7}_${ChipValueEnum.CHIP_VALUE_4}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/7_4\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_7}_${ChipValueEnum.CHIP_VALUE_5}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/7_5\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_7}_${ChipValueEnum.CHIP_VALUE_6}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/7_6\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_7}_${ChipValueEnum.CHIP_VALUE_7}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/7_7\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_7}_${ChipValueEnum.CHIP_VALUE_8}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/7_8\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_7}_${ChipValueEnum.CHIP_VALUE_9}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/7_9\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_7}_${ChipValueEnum.CHIP_VALUE_C}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/7_c\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_7}_${ChipValueEnum.CHIP_VALUE_COMMA}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/7_comma\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_7}_${ChipValueEnum.CHIP_VALUE_K}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/7_k\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_7}_${ChipValueEnum.CHIP_VALUE_M}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/7_m\",\n                type: cc.SpriteFrame,\n            },\n            [`${ChipTypeEnum.CHIP_TYPE_7}_${ChipValueEnum.CHIP_VALUE_POINT}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/7_point\",\n                type: cc.SpriteFrame,\n            },\n        },\n\n        commonChipType: {\n            [`common_chip_0${ChipTypeEnum.CHIP_TYPE_1}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/common_chip_01\",\n                type: cc.SpriteFrame,\n            },\n            [`common_chip_0${ChipTypeEnum.CHIP_TYPE_2}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/common_chip_02\",\n                type: cc.SpriteFrame,\n            },\n            [`common_chip_0${ChipTypeEnum.CHIP_TYPE_3}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/common_chip_03\",\n                type: cc.SpriteFrame,\n            },\n            [`common_chip_0${ChipTypeEnum.CHIP_TYPE_4}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/common_chip_04\",\n                type: cc.SpriteFrame,\n            },\n            [`common_chip_0${ChipTypeEnum.CHIP_TYPE_5}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/common_chip_05\",\n                type: cc.SpriteFrame,\n            },\n            [`common_chip_0${ChipTypeEnum.CHIP_TYPE_6}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/common_chip_06\",\n                type: cc.SpriteFrame,\n            },\n            [`common_chip_0${ChipTypeEnum.CHIP_TYPE_7}`]: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/chips/common_chip_07\",\n                type: cc.SpriteFrame,\n            },\n        },\n\n        ToastUI: <IResDescribe>{\n            resPath: \"skin/skin-light/prefab/toast/LightToastUI\",\n            type: cc.Prefab,\n        },\n\n        loadingToast: <IResDescribe>{\n            resPath: \"skin/skin-light/prefab/loading_toast/LightLoadingToastUi\",\n            type: cc.Prefab,\n        },\n        LoadingUI: <IResDescribe>{\n            resPath: \"skin/skin-light/prefab/loadingUI/LightLoadingUI\",\n            type: cc.Prefab,\n        },\n\n        Alert: <IResDescribe>{\n            resPath: \"skin/skin-light/prefab/alert/LightAlert\",\n            type: cc.Prefab,\n        },\n\n        tipsInfo: <IResDescribe>{\n            resPath: \"skin/skin-light/prefab/LightTipsInfo\",\n            type: cc.Prefab,\n        },\n\n        /** 道具icon */\n        prop: {\n            1001: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/prop/lt_common_props_coin\",\n                type: cc.SpriteFrame,\n            },\n\n            2001: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/prop/lt_common_props_bfxs\",\n                type: cc.SpriteFrame,\n            },\n\n            3001: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/prop/lt_common_props_avatarvip\",\n                type: cc.SpriteFrame,\n            },\n\n            default: <IResDescribe>{\n                resPath: \"skin/skin-light/texture/auto_atlas/prop/lt_common_props_default\",\n                type: cc.SpriteFrame,\n            },\n        },\n        JumpToAppealAnim: <IResDescribe>{\n            resPath: \"skin/skin-light/animation/jump_to_appeal/lt_common_sec_turn\",\n            type: sp.SkeletonData,\n        },\n        StartAndStopAnim: <IResDescribe>{\n            resPath: \"skin/skin-light/prefab/LightStartAndStopAnim\",\n            type: cc.Prefab,\n        },\n        avatar: {\n            [UserAvatarModel.AVATAR_ID.DYNAMIC_0]: <IResDescribe>{\n                resPath: \"skin/skin-light/animation/avatar/lt_vip_head/lt_vip_head\",\n                type: sp.SkeletonData,\n            },\n            [`head_${UserAvatarModel.GENDER.MALE}_${UserAvatarModel.AVATAR_ID.NORMAL_1}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-light/texture/auto_atlas/head/lt_common_head_man_1\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.MALE}_${UserAvatarModel.AVATAR_ID.NORMAL_2}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-light/texture/auto_atlas/head/lt_common_head_man_2\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.MALE}_${UserAvatarModel.AVATAR_ID.NORMAL_3}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-light/texture/auto_atlas/head/lt_common_head_man_3\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.MALE}_${UserAvatarModel.AVATAR_ID.NORMAL_4}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-light/texture/auto_atlas/head/lt_common_head_man_4\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.MALE}_${UserAvatarModel.AVATAR_ID.NORMAL_5}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-light/texture/auto_atlas/head/lt_common_head_man_5\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.MALE}_${UserAvatarModel.AVATAR_ID.NORMAL_6}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-light/texture/auto_atlas/head/lt_common_head_man_6\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.MALE}_${UserAvatarModel.AVATAR_ID.NORMAL_7}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-light/texture/auto_atlas/head/lt_common_head_man_7\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.MALE}_${UserAvatarModel.AVATAR_ID.NORMAL_8}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-light/texture/auto_atlas/head/lt_common_head_man_8\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.FEMALE}_${UserAvatarModel.AVATAR_ID.NORMAL_1}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-light/texture/auto_atlas/head/lt_common_head_woman_1\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.FEMALE}_${UserAvatarModel.AVATAR_ID.NORMAL_2}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-light/texture/auto_atlas/head/lt_common_head_woman_2\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.FEMALE}_${UserAvatarModel.AVATAR_ID.NORMAL_3}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-light/texture/auto_atlas/head/lt_common_head_woman_3\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.FEMALE}_${UserAvatarModel.AVATAR_ID.NORMAL_4}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-light/texture/auto_atlas/head/lt_common_head_woman_4\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.FEMALE}_${UserAvatarModel.AVATAR_ID.NORMAL_5}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-light/texture/auto_atlas/head/lt_common_head_woman_5\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.FEMALE}_${UserAvatarModel.AVATAR_ID.NORMAL_6}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-light/texture/auto_atlas/head/lt_common_head_woman_6\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.FEMALE}_${UserAvatarModel.AVATAR_ID.NORMAL_7}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-light/texture/auto_atlas/head/lt_common_head_woman_7\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.FEMALE}_${UserAvatarModel.AVATAR_ID.NORMAL_8}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-light/texture/auto_atlas/head/lt_common_head_woman_8\",\n                type: cc.SpriteFrame,\n            },\n        },\n\n        /**  TAB TAG */\n        tag_1: <IResDescribe>{\n            resPath: \"skin/skin-light/texture/auto_atlas/lt_common_tips_bg_05\",\n            type: cc.SpriteFrame,\n        },\n\n        /**  TAB TAG */\n        tag_2: <IResDescribe>{\n            resPath: \"skin/skin-light/texture/auto_atlas/lt_common_tips_bg_04\",\n            type: cc.SpriteFrame,\n        },\n\n        /**  TAB TAG */\n        tag_3: <IResDescribe>{\n            resPath: \"skin/skin-light/texture/auto_atlas/lt_common_tips_bg_03\",\n            type: cc.SpriteFrame,\n        },\n\n        /**  TAB TAG */\n        tag_4: <IResDescribe>{\n            resPath: \"skin/skin-light/texture/auto_atlas/lt_common_tips_bg_01\",\n            type: cc.SpriteFrame,\n        },\n        /**  TAB TAG */\n        tag_5: <IResDescribe>{\n            resPath: \"skin/skin-light/texture/auto_atlas/lt_common_tips_bg_02\",\n            type: cc.SpriteFrame,\n        },\n        safari_desk_icon: {\n            resPath: \"skin/skin-light/texture/desktop_icon/lt_icon\",\n            type: cc.SpriteFrame,\n        },\n    },\n    unpriority: {\n        UserAvatar: {\n            resPath: \"skin/skin-light/prefab/LightUserAvatar\",\n            type: cc.Prefab,\n        },\n        BetChip: <IResDescribe>{ resPath: \"skin/skin-light/prefab/LightBetChip\", type: cc.Prefab },\n        gameRuleContent: <IResDescribe>{\n            resPath: \"skin/skin-light/prefab/rule/LightRuleContent\",\n            type: cc.Prefab,\n        },\n        poker: {\n            [PokerResEnum.POKER_BG]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/img_poker_bg\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.POKER_GRAY]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/img_poker_gray\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.POKER_NORMAL]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/img_poker_normal\",\n                type: cc.SpriteFrame,\n            },\n\n            [PokerResEnum.SPADE_BIG]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/img_spade_big\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.SPADE_SMALL]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/img_spade_small\",\n                type: cc.SpriteFrame,\n            },\n\n            [PokerResEnum.HEART_BIG]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/img_heart_big\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.HEART_SMALL]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/img_heart_small\",\n                type: cc.SpriteFrame,\n            },\n\n            [PokerResEnum.DIAMOND_BIG]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/img_diamond_big\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.DIAMOND_SMALL]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/img_diamond_small\",\n                type: cc.SpriteFrame,\n            },\n\n            [PokerResEnum.CLUB_BIG]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/img_club_big\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.CLUB_SMALL]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/img_club_small\",\n                type: cc.SpriteFrame,\n            },\n\n            [PokerResEnum.CLUB_SMALL]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/img_club_small\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.CLUB_SMALL]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/img_club_small\",\n                type: cc.SpriteFrame,\n            },\n\n            [PokerResEnum.BLACK_FLOWER_J]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/img_j_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_FLOWER_Q]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/img_q_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_FLOWER_K]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/img_k_black\",\n                type: cc.SpriteFrame,\n            },\n\n            [PokerResEnum.RED_FLOWER_J]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/img_j_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_FLOWER_Q]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/img_q_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_FLOWER_K]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/img_k_red\",\n                type: cc.SpriteFrame,\n            },\n\n            [PokerResEnum.BLACK_2]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/txt_2_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_3]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/txt_3_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_4]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/txt_4_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_5]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/txt_5_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_6]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/txt_6_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_7]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/txt_7_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_8]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/txt_8_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_9]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/txt_9_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_10]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/txt_10_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_J]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/txt_j_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_Q]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/txt_q_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_K]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/txt_k_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_A]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/txt_a_black\",\n                type: cc.SpriteFrame,\n            },\n\n            [PokerResEnum.RED_2]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/txt_2_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_3]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/txt_3_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_4]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/txt_4_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_5]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/txt_5_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_6]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/txt_6_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_7]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/txt_7_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_8]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/txt_8_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_9]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/txt_9_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_10]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/txt_10_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_J]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/txt_j_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_Q]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/txt_q_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_K]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/txt_k_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_A]: {\n                resPath: \"skin/skin-light/texture/auto_atlas/poker/txt_a_red\",\n                type: cc.SpriteFrame,\n            },\n        },\n    },\n    loadOnDemand: {\n        hhdz_zs_bar_red: <IResDescribe>{\n            resPath: \"skin/skin-light/texture/game/red_black/lt_gameroom_btn_01\",\n            type: cc.SpriteFrame,\n        },\n        hhdz_zs_bar_black: <IResDescribe>{\n            resPath: \"skin/skin-light/texture/game/red_black/lt_gameroom_btn_02\",\n            type: cc.SpriteFrame,\n        },\n\n        /** 弹窗打开音效 */\n        windowOpen: <IResDescribe>{\n            resPath: \"skin/skin-light/audio/WindowOpen\",\n            type: cc.AudioClip,\n        },\n\n        /** 弹窗关闭音效 */\n        windowClose: <IResDescribe>{\n            resPath: \"skin/skin-light/audio/WindowClose\",\n            type: cc.AudioClip,\n        },\n\n        /** 点击按钮音效 */\n        btnEffect: <IResDescribe>{\n            resPath: \"skin/skin-light/audio/btn_click\",\n            type: cc.AudioClip,\n        },\n\n        /** 通用Poker */\n        Poker: <IResDescribe>{ resPath: \"skin/skin-light/prefab/LightPoker\", type: cc.Prefab },\n\n        Show: <IResDescribe>{ resPath: \"skin/skin-light/audio/show\", type: cc.AudioClip },\n        Start: <IResDescribe>{ resPath: \"skin/skin-light/audio/startbetting\", type: cc.AudioClip },\n        Stop: <IResDescribe>{ resPath: \"skin/skin-light/audio/stopbetting\", type: cc.AudioClip },\n        alert: <IResDescribe>{ resPath: \"skin/skin-light/audio/alert\", type: cc.AudioClip },\n        CountDown: <IResDescribe>{ resPath: \"skin/skin-light/audio/count\", type: cc.AudioClip },\n\n        CommonUserSetting: <IResDescribe>{\n            resPath: \"skin/skin-light/prefab/LightCommonUserSetting\",\n            type: cc.Prefab,\n        },\n\n        /** game */\n        commonPeopleBtn: <IResDescribe>{\n            resPath: \"skin/skin-light/texture/game/lt_common_btn_people\",\n            type: cc.SpriteFrame,\n        },\n\n        RechargeBtn: <IResDescribe>{\n            resPath: \"skin/skin-light/texture/game/lt_common_btn_recharge\",\n            type: cc.SpriteFrame,\n        },\n\n        backBtn: <IResDescribe>{\n            resPath: \"skin/skin-light/texture/auto_atlas/lt_common_btn_back\",\n            type: cc.SpriteFrame,\n        },\n\n        BetChip: <IResDescribe>{\n            resPath: \"skin/skin-light/prefab/LightBetChip\",\n            type: cc.Prefab,\n        },\n\n        level_1: <IResDescribe>{\n            resPath: \"skin/skin-light/texture/auto_atlas/cardtype/lt_level_1\",\n            type: cc.SpriteFrame,\n        },\n        level_2: <IResDescribe>{\n            resPath: \"skin/skin-light/texture/auto_atlas/cardtype/lt_level_2\",\n            type: cc.SpriteFrame,\n        },\n        level_3: <IResDescribe>{\n            resPath: \"skin/skin-light/texture/auto_atlas/cardtype/lt_level_3\",\n            type: cc.SpriteFrame,\n        },\n        level_4: <IResDescribe>{\n            resPath: \"skin/skin-light/texture/auto_atlas/cardtype/lt_level_4\",\n            type: cc.SpriteFrame,\n        },\n        Star: <IResDescribe>{ resPath: \"skin/skin-light/prefab/LightStar\", type: cc.Prefab },\n        LoadingWithFont: <IResDescribe>{\n            resPath: \"skin/skin-light/prefab/LightLoadingWithFont\",\n            type: cc.Prefab,\n        },\n        tk_dvst_ic_dragon: <IResDescribe>{\n            resPath: \"skin/skin-light/texture/game/big_battle/lt_dvst_d\",\n            type: cc.SpriteFrame,\n        },\n        tk_dvst_ic_tiger: <IResDescribe>{\n            resPath: \"skin/skin-light/texture/game/big_battle/lt_dvst_red\",\n            type: cc.SpriteFrame,\n        },\n        tk_dvst_ic_peace: <IResDescribe>{\n            resPath: \"skin/skin-light/texture/game/big_battle/lt_dvst_tie\",\n            type: cc.SpriteFrame,\n        },\n        gameRuleContent: <IResDescribe>{\n            resPath: \"skin/skin-light/prefab/rule/LightRuleContent\",\n            type: cc.Prefab,\n        },\n        Rule: <IResDescribe>{\n            resPath: \"skin/skin-light/prefab/rule/LightRule\",\n            type: cc.Prefab,\n        },\n        tk_room_quan_blue: <IResDescribe>{\n            resPath: \"skin/skin-light/texture/game/lt_dvst_lhd_zs_quan_blue\",\n            type: cc.SpriteFrame,\n        },\n        tk_room_quan_black: <IResDescribe>{\n            resPath: \"skin/skin-light/texture/game/lt_gmaeromm_img_black\",\n            type: cc.SpriteFrame,\n        },\n        tk_room_quan_red: <IResDescribe>{\n            resPath: \"skin/skin-light/texture/game/lt_gmaeromm_img_red\",\n            type: cc.SpriteFrame,\n        },\n        SevenUpDownRule: <IResDescribe>{\n            resPath: \"skin/skin-light/prefab/rule/seven_up_down/LightSevenUpDownRule\",\n            type: cc.Prefab,\n        },\n        /** 字体 */\n        ssp_bold: <IResDescribe>{\n            resPath: \"skin/skin-light/font/SourceSansPro-Bold\",\n            type: cc.Font,\n        },\n        ssp_regular: <IResDescribe>{\n            resPath: \"skin/skin-light/font/SourceSansPro-Regular\",\n            type: cc.Font,\n        },\n        ssp_semibold: <IResDescribe>{\n            resPath: \"skin/skin-light/font/SourceSansPro-SemiBold\",\n            type: cc.Font,\n        },\n        CommonRetrievePassword: <IResDescribe>{\n            resPath: \"skin/skin-light/prefab/user/LightCommonRetrievePassword\",\n            type: cc.Prefab,\n        },\n        Register: <IResDescribe>{\n            resPath: \"skin/skin-light/prefab/user/LightCommonRegister\",\n            type: cc.Prefab,\n        },\n        PasswordLogin: <IResDescribe>{\n            resPath: \"skin/skin-light/prefab/user/LightCommonPasswordLogin\",\n            type: cc.Prefab,\n        },\n        CommonKycInfo: <IResDescribe>{\n            resPath: \"skin/skin-light/prefab/user/LightCommonKycInfo\",\n            type: cc.Prefab,\n        },\n        CommonRegisterForGiftView: <IResDescribe>{\n            resPath: \"skin/skin-light/prefab/user/LightCommonRegisterForGiftView\",\n            type: cc.Prefab,\n        },\n\n        /** 通用领取奖励弹框 */\n        getAwardDialog: <IResDescribe>{\n            resPath: \"skin/skin-light/prefab/get_award/LightGetAwardDialog\",\n            type: cc.Prefab,\n        },\n\n        Rules: {\n            [GameType.LUDO]: <IResDescribe>{\n                resPath: \"skin/skin-light/prefab/rule/tudo/LightLudoRule\",\n                type: cc.Prefab,\n            },\n            [GameType.RUMMY_POINT]: <IResDescribe>{\n                resPath: \"skin/skin-light/prefab/rule/rummy_point/LightRummyPointRule\",\n                type: cc.Prefab,\n            },\n            [GameType.TEENPATTI]: <IResDescribe>{\n                resPath: \"skin/skin-light/prefab/rule/teenpatti/LightTeenpattiRule\",\n                type: cc.Prefab,\n            },\n        },\n\n        GameRule: {},\n        Score: {\n            /** 输 */\n            lose: <IResDescribe>{\n                resPath: \"skin/skin-light/font/lt_txt_lose_number/lt_txt_lose_number\",\n                type: cc.Font,\n            },\n            /** 赢 */\n            win: <IResDescribe>{\n                resPath: \"skin/skin-light/font/lt_txt_win_number/lt_txt_win_number\",\n                type: cc.Font,\n            },\n        },\n    },\n};\n","import { GameType } from \"../../../../../../../main/core/conf/GameType\";\nimport { PokerResEnum } from \"../../../Component/Poker/enums/PokerResEnum\";\nimport UserAvatarModel from \"../../../Component/UserAvatar/UserAvatarModel\";\nexport let CommonResWorldCup = {\n    priority: {\n        CommonBroadCast: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/broad_cast/CommonBroadCast\",\n            type: cc.Prefab,\n        },\n        font_bold: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/font/tk_txt_common_system_bold\",\n            type: cc.Font,\n        },\n\n        btn_normal: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/texture/auto_atlas/tk_common_dialog_left_btn_n\",\n            type: cc.SpriteFrame,\n        },\n\n        btn_seleced: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/texture/auto_atlas/tk_common_dialog_left_btn_s\",\n            type: cc.SpriteFrame,\n        },\n\n        commonGame: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/texture/commongame/common_game\",\n            type: cc.SpriteAtlas,\n        },\n\n        ToastUI: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/toast/ToastUI\",\n            type: cc.Prefab,\n        },\n\n        LoadingUI: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/loadingUI/LoadingUI\",\n            type: cc.Prefab,\n        },\n\n        loadingToast: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/loading_toast/LoadingToastUi\",\n            type: cc.Prefab,\n        },\n\n        Alert: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/alert/Alert\",\n            type: cc.Prefab,\n        },\n\n        tipsInfo: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/TipsInfo\",\n            type: cc.Prefab,\n        },\n\n        CountDownTimer: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/CountDownTimer\",\n            type: cc.Prefab,\n        },\n\n        /** 道具icon */\n        prop: {\n            1001: <IResDescribe>{\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/prop/tk_common_props_coin\",\n                type: cc.SpriteFrame,\n            },\n\n            2001: <IResDescribe>{\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/prop/tk_common_props_bfxs\",\n                type: cc.SpriteFrame,\n            },\n\n            3001: <IResDescribe>{\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/prop/tk_common_props_avatarvip\",\n                type: cc.SpriteFrame,\n            },\n\n            default: <IResDescribe>{\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/prop/tk_common_props_default\",\n                type: cc.SpriteFrame,\n            },\n        },\n\n        StartAndStopAnim: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/StartAndStopAnim\",\n            type: cc.Prefab,\n        },\n        avatar: {\n            [UserAvatarModel.AVATAR_ID.DYNAMIC_0]: <IResDescribe>{\n                resPath:\n                    \"skin/skin-world_cup/animation/avatar/tk_common_head_vip1/tk_common_head_vip1\",\n                type: sp.SkeletonData,\n            },\n            [`head_${UserAvatarModel.GENDER.MALE}_${UserAvatarModel.AVATAR_ID.NORMAL_1}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/head/head_boy1\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.MALE}_${UserAvatarModel.AVATAR_ID.NORMAL_2}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/head/head_boy2\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.MALE}_${UserAvatarModel.AVATAR_ID.NORMAL_3}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/head/head_boy3\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.MALE}_${UserAvatarModel.AVATAR_ID.NORMAL_4}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/head/head_boy4\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.MALE}_${UserAvatarModel.AVATAR_ID.NORMAL_5}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/head/head_boy5\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.MALE}_${UserAvatarModel.AVATAR_ID.NORMAL_6}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/head/head_boy6\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.MALE}_${UserAvatarModel.AVATAR_ID.NORMAL_7}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/head/head_boy7\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.MALE}_${UserAvatarModel.AVATAR_ID.NORMAL_8}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/head/head_boy8\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.FEMALE}_${UserAvatarModel.AVATAR_ID.NORMAL_1}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/head/head_girl1\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.FEMALE}_${UserAvatarModel.AVATAR_ID.NORMAL_2}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/head/head_girl2\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.FEMALE}_${UserAvatarModel.AVATAR_ID.NORMAL_3}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/head/head_girl3\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.FEMALE}_${UserAvatarModel.AVATAR_ID.NORMAL_4}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/head/head_girl4\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.FEMALE}_${UserAvatarModel.AVATAR_ID.NORMAL_5}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/head/head_girl5\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.FEMALE}_${UserAvatarModel.AVATAR_ID.NORMAL_6}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/head/head_girl6\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.FEMALE}_${UserAvatarModel.AVATAR_ID.NORMAL_7}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/head/head_girl7\",\n                type: cc.SpriteFrame,\n            },\n            [`head_${UserAvatarModel.GENDER.FEMALE}_${UserAvatarModel.AVATAR_ID.NORMAL_8}`]: <\n                IResDescribe\n            >{\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/head/head_girl8\",\n                type: cc.SpriteFrame,\n            },\n        },\n        safari_desk_icon: {\n            resPath: \"skin/skin-world_cup/texture/desktop_icon/tk_icon\",\n            type: cc.SpriteFrame,\n        },\n        JumpToAppealAnim: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/animation/jump_to_appeal/common_sec_turn\",\n            type: sp.SkeletonData,\n        },\n    },\n    unpriority: {\n        UserAvatar: {\n            resPath: \"skin/skin-world_cup/prefab/UserAvatar\",\n            type: cc.Prefab,\n        },\n        BetChip: <IResDescribe>{ resPath: \"skin/skin-world_cup/prefab/BetChip\", type: cc.Prefab },\n        gameRuleContent: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/rule/RuleContent\",\n            type: cc.Prefab,\n        },\n\n        poker: {\n            [PokerResEnum.POKER_BG]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/img_poker_bg\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.POKER_GRAY]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/img_poker_gray\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.POKER_NORMAL]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/img_poker_normal\",\n                type: cc.SpriteFrame,\n            },\n\n            [PokerResEnum.SPADE_BIG]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/img_spade_big\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.SPADE_SMALL]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/img_spade_small\",\n                type: cc.SpriteFrame,\n            },\n\n            [PokerResEnum.HEART_BIG]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/img_heart_big\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.HEART_SMALL]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/img_heart_small\",\n                type: cc.SpriteFrame,\n            },\n\n            [PokerResEnum.DIAMOND_BIG]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/img_diamond_big\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.DIAMOND_SMALL]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/img_diamond_small\",\n                type: cc.SpriteFrame,\n            },\n\n            [PokerResEnum.CLUB_BIG]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/img_club_big\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.CLUB_SMALL]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/img_club_small\",\n                type: cc.SpriteFrame,\n            },\n\n            [PokerResEnum.CLUB_SMALL]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/img_club_small\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.CLUB_SMALL]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/img_club_small\",\n                type: cc.SpriteFrame,\n            },\n\n            [PokerResEnum.BLACK_FLOWER_J]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/img_j_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_FLOWER_Q]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/img_q_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_FLOWER_K]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/img_k_black\",\n                type: cc.SpriteFrame,\n            },\n\n            [PokerResEnum.RED_FLOWER_J]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/img_j_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_FLOWER_Q]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/img_q_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_FLOWER_K]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/img_k_red\",\n                type: cc.SpriteFrame,\n            },\n\n            [PokerResEnum.BLACK_2]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/txt_2_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_3]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/txt_3_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_4]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/txt_4_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_5]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/txt_5_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_6]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/txt_6_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_7]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/txt_7_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_8]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/txt_8_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_9]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/txt_9_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_10]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/txt_10_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_J]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/txt_j_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_Q]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/txt_q_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_K]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/txt_k_black\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.BLACK_A]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/txt_a_black\",\n                type: cc.SpriteFrame,\n            },\n\n            [PokerResEnum.RED_2]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/txt_2_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_3]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/txt_3_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_4]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/txt_4_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_5]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/txt_5_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_6]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/txt_6_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_7]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/txt_7_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_8]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/txt_8_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_9]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/txt_9_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_10]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/txt_10_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_J]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/txt_j_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_Q]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/txt_q_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_K]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/txt_k_red\",\n                type: cc.SpriteFrame,\n            },\n            [PokerResEnum.RED_A]: {\n                resPath: \"skin/skin-world_cup/texture/auto_atlas/poker/txt_a_red\",\n                type: cc.SpriteFrame,\n            },\n        },\n    },\n    loadOnDemand: {\n        hhdz_zs_bar_red: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/texture/game/red_black/hhdz_zs_bar_red\",\n            type: cc.SpriteFrame,\n        },\n        hhdz_zs_bar_black: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/texture/game/red_black/hhdz_zs_bar_black\",\n            type: cc.SpriteFrame,\n        },\n\n        Rules: {\n            [GameType.TRUCO]: <IResDescribe>{\n                resPath: \"skin/skin-world_cup/prefab/rule/truco/TrucoRuleDialog\",\n                type: cc.Prefab,\n            },\n            [GameType.BINGO]: <IResDescribe>{\n                resPath: \"skin/skin-world_cup/prefab/rule/bingo/BingoRuleDialog\",\n                type: cc.Prefab,\n            },\n            [GameType.CACHETA]: <IResDescribe>{\n                resPath: \"skin/skin-world_cup/prefab/rule/cacheta/CachetaRuleDialog\",\n                type: cc.Prefab,\n            },\n        },\n\n        /** 弹窗打开音效 */\n        windowOpen: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/audio/WindowOpen\",\n            type: cc.AudioClip,\n        },\n\n        /** 弹窗关闭音效 */\n        windowClose: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/audio/WindowClose\",\n            type: cc.AudioClip,\n        },\n\n        /** 点击按钮音效 */\n        btnEffect: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/audio/btn_click\",\n            type: cc.AudioClip,\n        },\n\n        /** 大厅bgm */\n        hall_bg: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/audio/hall_bg\",\n            type: cc.AudioClip,\n        },\n        /**转盘bgm */\n        spin_bg: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/audio/spin_bg\",\n            type: cc.AudioClip,\n        },\n        btn_bg: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/audio/btn_bg\",\n            type: cc.AudioClip,\n        },\n        /** 通用Poker */\n        Poker: <IResDescribe>{ resPath: \"skin/skin-world_cup/prefab/Poker\", type: cc.Prefab },\n\n        Show: <IResDescribe>{ resPath: \"skin/skin-world_cup/audio/show\", type: cc.AudioClip },\n        Start: <IResDescribe>{ resPath: \"skin/skin-world_cup/audio/start_bet\", type: cc.AudioClip },\n        Stop: <IResDescribe>{ resPath: \"skin/skin-world_cup/audio/stop_bet\", type: cc.AudioClip },\n        alert: <IResDescribe>{ resPath: \"skin/skin-world_cup/audio/alert\", type: cc.AudioClip },\n        CountDown: <IResDescribe>{ resPath: \"skin/skin-world_cup/audio/count\", type: cc.AudioClip },\n\n        CommonUserSetting: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/CommonUserSetting\",\n            type: cc.Prefab,\n        },\n\n        /** game */\n        commonPeopleBtn: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/texture/game/tk_common_btn_online\",\n            type: cc.SpriteFrame,\n        },\n\n        RechargeBtn: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/texture/game/tk_common_btn_recharge\",\n            type: cc.SpriteFrame,\n        },\n\n        backBtn: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/texture/auto_atlas/tk_common_btn_back\",\n            type: cc.SpriteFrame,\n        },\n\n        BetChip: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/BetChip\",\n            type: cc.Prefab,\n        },\n\n        level_1: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/texture/auto_atlas/cardtype/level_1\",\n            type: cc.SpriteFrame,\n        },\n        level_2: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/texture/auto_atlas/cardtype/level_2\",\n            type: cc.SpriteFrame,\n        },\n        level_3: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/texture/auto_atlas/cardtype/level_3\",\n            type: cc.SpriteFrame,\n        },\n        level_4: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/texture/auto_atlas/cardtype/level_4\",\n            type: cc.SpriteFrame,\n        },\n        Star: <IResDescribe>{ resPath: \"skin/skin-world_cup/prefab/Star\", type: cc.Prefab },\n        LoadingWithFont: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/LoadingWithFont\",\n            type: cc.Prefab,\n        },\n        tk_dvst_ic_dragon: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/texture/game/big_battle/tk_dvst_ic_dragon\",\n            type: cc.SpriteFrame,\n        },\n        tk_dvst_ic_tiger: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/texture/game/big_battle/tk_dvst_ic_tiger\",\n            type: cc.SpriteFrame,\n        },\n        tk_dvst_ic_peace: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/texture/game/big_battle/tk_dvst_ic_peace\",\n            type: cc.SpriteFrame,\n        },\n        gameRuleContent: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/rule/RuleContent\",\n            type: cc.Prefab,\n        },\n        Rule: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/rule/Rule\",\n            type: cc.Prefab,\n        },\n        tk_room_quan_blue: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/texture/game/tk_room_quan_blue\",\n            type: cc.SpriteFrame,\n        },\n        tk_room_quan_black: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/texture/game/tk_room_quan_black\",\n            type: cc.SpriteFrame,\n        },\n        tk_room_quan_red: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/texture/game/tk_room_quan_red\",\n            type: cc.SpriteFrame,\n        },\n        SevenUpDownRule: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/rule/seven_up_down/SevenUpDownRule\",\n            type: cc.Prefab,\n        },\n        /** 字体 */\n        ssp_bold: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/font/SourceSansPro-Bold\",\n            type: cc.Font,\n        },\n        ssp_regular: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/font/SourceSansPro-Regular\",\n            type: cc.Font,\n        },\n        ssp_semibold: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/font/SourceSansPro-SemiBold\",\n            type: cc.Font,\n        },\n        cs_regular: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/font/tk_txt_common_system_regular\",\n            type: cc.Font,\n        },\n        CommonRetrievePassword: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/user/CommonRetrievePassword\",\n            type: cc.Prefab,\n        },\n        Register: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/user/CommonRegister\",\n            type: cc.Prefab,\n        },\n        PasswordLogin: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/user/CommonPasswordLogin\",\n            type: cc.Prefab,\n        },\n        CommonKycInfo: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/user/CommonKycInfo\",\n            type: cc.Prefab,\n        },\n        CommonRegisterForGiftView: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/user/CommonRegisterForGiftView\",\n            type: cc.Prefab,\n        },\n\n        /** 通用领取奖励弹框 */\n        getAwardDialog: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/get_award/GetAwardDialog\",\n            type: cc.Prefab,\n        },\n        Score: {\n            /** 输 */\n            lose: <IResDescribe>{\n                resPath: \"skin/skin-world_cup/font/qb_txt_lose_numble/qb_txt_lose_numble\",\n                type: cc.Font,\n            },\n            /** 赢 */\n            win: <IResDescribe>{\n                resPath: \"skin/skin-world_cup/font/qb_txt_win_numble/qb_txt_win_numble\",\n                type: cc.Font,\n            },\n        },\n        CommonGameReplay: <IResDescribe>{\n            resPath: \"skin/skin-world_cup/prefab/replay/CommonGameReplay\",\n            type: cc.Prefab,\n        },\n    },\n};\n","export enum CommonResultType {\n    Unkown,\n    Success,\n    Failed,\n}\n","import PopUpViewBase from \"../../../../../../main/core/popUpViewUtils/PopUpViewBase\";\nimport EnumActive from \"../../../../../../main/core/ui/component/EnumActive\";\nimport { UserManager } from \"../../../../../../main/core/user/UserManager\";\nimport { lodash } from \"../../../../../../main/core/utils/NpmExport\";\nimport UIMgr from \"../../Component/base/UIMgr\";\nimport CommonLanguage from \"../../conf/lang/CommonLanguage\";\nimport ApiMgr from \"../../service/api/ApiMgr\";\nimport { ApiProto } from \"../../service/api/ApiProto\";\nimport { FormatTestUtil } from \"../../utils/FormatTestUtil\";\nimport { InfoMosaicUtil } from \"../../utils/InfoMosaicUtil\";\nimport { CommonAccountUtil } from \"../utils/CommonAccountUtil\";\nimport { CommonUserLoginUiUtil } from \"../utils/CommonUserLoginUiUtil\";\nimport CommonSmsCode from \"./CommonSmsCode\";\nimport EnumController from \"../../../../../../main/core/ui/component/EnumController\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class CommonRetrievePassword extends PopUpViewBase {\n    @property({ type: cc.EditBox, displayName: \"\" })\n    accountEd: cc.EditBox = null;\n    @property({ type: cc.EditBox, displayName: \"\" })\n    phoneEd: cc.EditBox = null;\n    @property({ type: cc.Label, displayName: \"\" })\n    phone: cc.Label = null;\n\n    @property({ type: cc.Node, displayName: \"\" })\n    code: cc.Node = null;\n    @property({ type: cc.EditBox, displayName: \"\" })\n    newPass: cc.EditBox = null;\n    @property({ type: cc.Node, displayName: \"\" })\n    regioCodeEd: cc.Node = null;\n\n    protected start(): void {\n        let codeComp = this.code.getComponent(CommonSmsCode);\n        codeComp.setGetSmsBtnClick(() => this.onGetSmsCode());\n    }\n\n    public init(): void {\n        this.getComponentInChildren(EnumController).show4Name(\n            CommonDepend.UserManager.phone && CommonDepend.UserManager.uid ? \"phone\" : \"empty\"\n        );\n        this.phone.string = InfoMosaicUtil.phone2Mosaic(UserManager.getInstance().phone);\n    }\n\n    private onGetSmsCode() {\n        if (CommonDepend.UserManager.phone && UserManager.getInstance().uid) {\n            const phone = UserManager.getInstance().phone;\n            this.code.getComponent(CommonSmsCode).requestCode(phone);\n        } else {\n            this.verifyBindPhone();\n        }\n    }\n\n    @UIMgr.applyLoadingUi\n    private verifyBindPhone() {\n        let account = lodash.toLower(this.accountEd.string);\n        if (account && account.length >= 6) {\n            if (FormatTestUtil.containInvaildSymbol(account)) {\n                UIMgr.showToast(CommonLanguage.accountRuleError);\n                return;\n            }\n        } else {\n            UIMgr.showToast(CommonLanguage.accountRuleShort);\n            return;\n        }\n        const phone = this.regioCodeEd.getComponent(cc.Label).string + this.phoneEd.string;\n        return ApiMgr.getInstance()\n            .verifyBindPhone({\n                phone: phone.replace(/(\\D+)/g, \"\"),\n                account_no: lodash.toLower(this.accountEd.string),\n            })\n            .then(() => {\n                this.code.getComponent(CommonSmsCode).requestCode(phone);\n            });\n    }\n\n    @UIMgr.applyLoadingUi\n    private async onRetrievePasswordBtnClicked() {\n        let account = \"\";\n        if (!CommonDepend.UserManager.phone || !UserManager.getInstance().uid) {\n            account = lodash.toLower(this.accountEd.string);\n            if (account && account.length >= 6) {\n                if (FormatTestUtil.containInvaildSymbol(account)) {\n                    UIMgr.showToast(CommonLanguage.accountRuleError);\n                    return;\n                }\n            } else {\n                UIMgr.showToast(CommonLanguage.accountRuleShort);\n                return;\n            }\n        } else {\n            account = CommonAccountUtil.getLastAccount()?.[2];\n        }\n\n        const code = this.code.getComponent(CommonSmsCode).code;\n\n        if (!code || code.length < 6) {\n            UIMgr.showToast(CommonLanguage.codeInvalid);\n            return;\n        }\n\n        const phone = (\n            this.code.getComponent(CommonSmsCode).phone ||\n            this.regioCodeEd.getComponent(cc.Label).string + this.phoneEd.string\n        ).replace(/(\\D+)/g, \"\");\n        const newPass = this.newPass.string;\n        if (!newPass || !code) {\n            return;\n        }\n        if (FormatTestUtil.containInvaildSymbol(this.newPass.string)) {\n            UIMgr.showToast(CommonLanguage.passworldFormot);\n            return;\n        }\n\n        if (this.newPass.string.length < 6) {\n            UIMgr.showToast(CommonLanguage.passworldLenLimit);\n            return;\n        }\n\n        return ApiMgr.getInstance()\n            .resetPass({\n                type: ApiProto.ResetPwdType.RETRIEVE_PWD,\n                cert: {\n                    vcode: code,\n                },\n                new_password: newPass,\n                account_no: account,\n                phone: phone,\n            })\n            .then(() => {\n                UIMgr.showToast(CommonLanguage.findPasswordSuccess);\n                this.close();\n                CommonUserLoginUiUtil.launchHall();\n            });\n    }\n}\n","let CommonRuleLanguageEn = {\n    rule: {\n        brcBigbattle: [\n            {\n                title: \"Game Rules\",\n                content: `1. Dragon Tiger is a multi-player casual game. The game begins when players bet on Dragon, Tiger, or Tie options on the table, and the players win if the highest card appears on their betting option.\n2. This game uses 8 decks of playing cards without Jockers, a total of 416 cards. One card is dealt to the Dragon and Tiger area in each round, and the player with the larger card wins when the card is drawn.\n3. Poker hand rankings: only compare the number of points, not the suit, and it will be \"Tie\" if the numbers are the same. K is the highest card, A is the lowest, 2~10 is ranked based on the card number, and 10<J<Q<K.`,\n                contentRich: false,\n            },\n            {\n                title: \"ODDS\",\n                content: `1. Dragon 1:1 (Refund if Tie wins)\n2. Tiger 1:1 (Refund if Tie wins)\n3. Tie 1:13`,\n                contentRich: false,\n            },\n        ],\n        brcRedBlack: [\n            {\n                title: \"Hands Description\",\n                content:\n                    \"52 cards without Jokers\\n\" +\n                    \"<color={tag_color}>Trio: </color>Three cards with the same value. Such as: AAA, 222 (AAA is the highest, 222 is the lowest);\\n\" +\n                    \"<color={tag_color}>Straight Flush: </color>Straights of the same suit. Example: 456 spades, 789 hearts. The highest STRAIGHT FLUSH is QKA with the same suit, and the lowest  is A23 with the same suit (KQA is the highest, A23 is the lowest);\\n\" +\n                    \"<color={tag_color}>Flush: </color>the same suit, non-straight, such as 357 spades, 359 diamonds (KJA is the highest, 235 is the lowest);\\n\" +\n                    \"<color={tag_color}>Straight: </color>Straights of different suits. Example: 5 spades, 6 hearts, 7 diamonds. The highest straight is QKA with different suits and the lowest straight is A23 with different suits;\\n\" +\n                    \"<color={tag_color}>Pair: </color>Two cards with the same value. Such as: 223,557 (AAK is the highest, 223 is the lowest);\\n\" +\n                    \"<color={tag_color}>High card: </color>Three cards that do not form any type of hands; (KJA is the highest, 235 is the lowest)\",\n                contentRich: true,\n            },\n            {\n                title: \"Hands Ranking\",\n                content: `1. Trio > Straight Flush >Straight > Flush > Pair > High card;\n2. If the hand types are the same, then compare the values from the highest card to the smallest card.  Card values are ranked, from highest to lowest:  A, K, Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2. \n3. Straight Flush and Straight: KQA> JQK> 10JQ> 910J> 8910> 789> 678> 567> 456> 345> 234> A23;\n4. Comparison order: For example, if there are two hands of Pairs, the one with higher pair wins. If the ranks are the same, then compare the third card. If there are two hands of Single Card, comparing the largest single card first, if the same, comparing the second largest single card, and so on;\n5. In case of the same value, compare by suit sequence Spades > Hearts > Clubs > Diamonds.`,\n                contentRich: false,\n            },\n            {\n                title: \"Betting Areas\",\n                content: `1. Red: The red side wins the payout accordingly;\n2. Black: The black side wins the payout accordingly;\n3. Special card type: When a special card type appears, can get paid accordingly`,\n                contentRich: false,\n            },\n        ],\n        brcShark: [\n            {\n                title: \"Game Rules\",\n                content:\n                    \"After entering the game, during the betting time, players can choose the icon to place a bet. After the draw, the icon where the colored light is will be the drawn icon. (Players' gain will be deducted a little and deposited in the Prize Pool)\",\n                contentRich: false,\n            },\n            {\n                title: \"Banker Rules\",\n                content:\n                    \"If you bring a certain amount of coins, you can click on the button to be the banker of the game. When your coins are insufficient, you will be replaced by the players who apply for the banker or by the banker of the system. It is 5 rounds consecutive at most to be the banker each time.\",\n                contentRich: false,\n            },\n            {\n                title: \"Banker Bankruptcy Rules\",\n                content: `When the banker does not have enough coins to settle, the player's winnings will be reduced accordingly;\nThe banker's gain cannot exceed the amount of coins he brings at the start of each round. `,\n                contentRich: false,\n            },\n            {\n                title: \"Special Play\",\n                content:\n                    \"When a special surprise occurs, you can receive a large amount of the Prize, the more you bet, the more you win, maximum up to 100 times.\\n\" +\n                    \"<color={tag_color}>Shark Frenzy: </color> In this game that unlocks four sharks, all players who bet on sharks will get a pro rata bonus split from 80% of the prize pool;\\n\" +\n                    \"<color={tag_color}>King of the Sky:</color>When all colored lights are drawn in this round, all players will split 60% of the Prize Pool according to the betting ratio; \\n\" +\n                    \"<color={tag_color}>Four Beasts of Happiness: </color>When the four different beasts are drawn in this round, which is a combination of Four Beasts of Happiness, All players who bet on the Beast and Beast type animals will share 50% of the Total Prize proportionally；\\n\" +\n                    \"<color={tag_color}>Long Line of Birds:</color>When the four different birds are drawn in this round, which is combination of Long Line of Birds, All players who bet on the Bird and Bird Type animals will split 50% of the Total Prize proportionally；\",\n                contentRich: true,\n            },\n        ],\n        bigsmall: [\n            {\n                title: \"BASIC RULES\",\n                content: `1. The betting time is 30 seconds.\n2. Players have Big and Small options for betting. The total score of the three rolled dice will determine whether you win or lose.\n3. Big: >=11 points.\n4. Small: <=10 points.\n5. The profit is 1:1 (bet amount: odds).`,\n                contentRich: false,\n            },\n        ],\n        cacheta: [\n            {\n                pageTitle: \"Description\",\n                content: `The objective is to arrange and lay on the table the nine or ten cards in your hand forming Sets or Sequences before other players.`,\n            },\n            {\n                pageTitle: \"Card Types\",\n                title1: \"Wild Card\",\n                content1: `The first card drawn from the drawing pile is called Flip Card. The next higher cards of the same color as the Flip Card will be Wild Cards, which can represent any card in a straight or set.`,\n                title2: \"Straight\",\n                content2: `Three or four consecutive cards from the same suit. The Aces can be used on both ends, before the two or after the King.`,\n                content5: `Only one Wild Card is allowed in each Straight.`,\n                title3: \"Set\",\n                content3: `Three or four cards of the same value using only three suits.`,\n                content4: `Only one Wild Card is allowed in each Set.`,\n            },\n            {\n                pageTitle: \"Tutorial\",\n                title1: \"Knock Out\",\n                content1: `Arrange your nine-card or ten-card hand into valid Straights and/or Sets.`,\n                title2: \"Ready\",\n                content2: `Only one card from knocking out. When it's your turn to act, you can click the 'Ready' button.`,\n                title3: \"Cut the line\",\n                content3: `Buying from the discard pile when it is not your turn. This can only be done by players who announced they are ready to knock out. If more than one player cuts the line, the priority goes down clockwise according to the position relative to the player who is on his turn.`,\n            },\n        ],\n    },\n};\n\nexport default CommonRuleLanguageEn;\n","let CommonRuleLanguagePt = {\n    rule: {\n        brcBigbattle: [\n            {\n                title: \"Regras do Jogo\",\n                content: `1. DRAGÃO TIGRE é um jogo simples e recreativo. Os jogadores prevêem as cartas do Dragão e do Tigre e podem apostar nas 3 áreas: 'Dragão', 'Tigre', 'Empate'.\n2. Este jogo usa 8 baralhos de cartas (excluindo Coringas) com um total de 416 cartas. Em cada rodada, distribui uma carta para a área do dragão e do tigre, ganha aquele com carta mais alta.\n3. Sequência do valor das cartas é: só compara o valor da carta não o naipe, empata caso mesmo valor. K é a carta mais alta, A é a menor, entre as quais 2~10 as cartas são determinadas somente pelo valor nominal e 10<J<Q<K.`,\n                contentRich: false,\n            },\n            {\n                title: \"PROBABILIDADE DE APOSTA\",\n                content: `1. Multiplicador de pagamento do Dragão: 1：1 ( Caso empate reembolsa tudo)\n2. Multiplicador de pagamento do Tigre: 1：1 (Caso empate reembolsa tudo)\n3. Multiplicador de pagamento do Empate: 1：13`,\n                contentRich: false,\n            },\n        ],\n        brcRedBlack: [\n            {\n                title: \"Descrição das jogadas:\",\n                content:\n                    \"52 cartas sem Coringas\\n\" +\n                    \"<color={tag_color}>TRINCA: </color>São 3 cartas iguais. Exemplo: (AAA é o mais alto, 222 é o mais baixo);\\n\" +\n                    \"<color={tag_color}>SEQUÊNCIA DE COR: </color>São cartas seguidas do mesmo naipe. Exemplo: 456 espadas, 789 copas. O Sequência de cor maior é QKA do mesmo naipe, o Sequência de cor menor é A23 do mesmo naipe (KQA é a mais alto, A23 é a mais baixa);\\n\" +\n                    \"<color={tag_color}>COR: </color>São cartas do mesmo naipe, não seguidas. Exemplo: 357 espadas, 359 ouros (KJA é o mais alto, 235 é o mais baixo);\\n\" +\n                    \"<color={tag_color}>SEQUÊNCIA: </color>São cartas seguidas com naipes diferentes. Exemplo: 5 espadas 6 copas 7 ouros. A Sequência maior  é QKA dos naipes diferentes, a Sequência menor é A23 dos naipes diferentes;\\n\" +\n                    \"<color={tag_color}>PAR: </color>São 2 cartas iguais. Exemplo: 223, 557 (AAK é o mais alto, 223 é o mais baixo);\\n\" +\n                    \"<color={tag_color}>3 cartas que não possam formar nunhum tipo de jogada (KJA é a mais alta, 235 é a mais baixa)\",\n                contentRich: true,\n            },\n            {\n                title: \"Classificação das jogadas\",\n                content: `1. Trinca > Sequência de Cor > Sequência > Cor > Par > Carta Alta\n2. Se as jogadas de mão forem as mesmas, compare os valores da carta mais alta para a carta mais baixa. A classificação dos valores de carta, de alto para baixo: A, K, Q, J, 10, 9, 8, 7, 6, 5, 4, 3, 2.\n3. Sequência de Cor, Sequência, o ranking: KQA > JQK > 10JQ > 910J > 8910 > 789 > 678 > 567 > 456 > 345 > 234 > A23;\n4. Ordem da comparação. Por exemplo, comparação do Par, ganha aquele que possuir o maior par, caso os pares sejam iguais ganha aquele que possuir a maior carta. Comparação da Carta Alta, compara primeiro a carta maior, caso empate, compara a carta segundo maior, etc;\n5. Caso empate o valor, compara pela sequência do naipe Espadas > Copas > Paus > Ouros.`,\n                contentRich: false,\n            },\n            {\n                title: \"Área de Apostas\",\n                content: `1. Vermelho: O lado vermelho vence e ganha nas probabilidades correspondentes;\n2. Preto: O lado preto vence e ganha nas probabilidades correspondentes;\n3. Jogadas especiais: Quando ocorrer jogada especial na partida, você pode ganhar nas probabilidades correspondentes`,\n                contentRich: false,\n            },\n        ],\n        brcShark: [\n            {\n                title: \"Quy Tắc Chơi\",\n                content:\n                    \"Sau khi tham gia chơi, trong thời gian đặt cược, người chơi chọn biểu tượng và đặt cược, đèn sáng ở ô nào tức ô đó mở thưởng, và tiền thưởng tương ứng được chi trả ( tiền thắng của người chơi sẽ được khấu trừ một phần nhỏ đặt vào hũ thưởng).\",\n                contentRich: false,\n            },\n            {\n                title: \"Quy Tắc Nhà Cái\",\n                content:\n                    \"Cầm theo một lượng coins nhất định sẽ được nhấn nút nhà cái, khi tiền không đủ thì hệ thống sẽ thay thế cầm cái hoặc bị người chơi khác thay thế cầm cái. Mỗi hiệp được liên tiếp làm cái 5 ván.\",\n                contentRich: false,\n            },\n            {\n                title: \"Quy Tắc Cái Phá Sản\",\n                content:\n                    \"Khi nhà cái không đủ tiền trả cược, tiền thưởng của người chơi cũng bị giảm;\\n\" +\n                    \"Lợi nhuận mỗi ván cầm cái không vượt quá số tiền cầm theo khi mở ván.\",\n                contentRich: false,\n            },\n            {\n                title: \"Cách Chơi Đặc Sắc\",\n                content:\n                    \"NThêm giải thưởng bất ngờ cực lớn khi mở ra phong bao, cược càng nhiều nhận càng nhiều.  Phần thưởng cao nhất không quá 100 lần tiền cược.\\n\" +\n                    \"<color={tag_color}>Cá Mập Ập Đến: </color>Trong ván này mở ra bốn con cá mập, tất cả người chơi đặt cược cá mập sẽ được chia 80% tổng giải thưởng theo tỷ lệ tiền cược tương ứng.\\n\" +\n                    \"<color={tag_color}>Đế Vương Bầu Trời: </color>Trong ván này mở ra đèn màu, tất cả người chơi sẽ được chia 60% tổng giải thưởng theo tỷ lệ tiền cược tương ứng.\\n\" +\n                    \"<color={tag_color}>Tứ Thú Đại Hỉ: </color>Trong ván này mở ra bốn con thú khác nhau, tất cả người chơi đặt cược Thú sẽ được chia 50% tổng giải thưởng theo tỷ lệ tiền cược tương ứng.\\n\" +\n                    \"<color={tag_color}>Chim Bay Kết Rồng: </color>Trong ván này mở ra bốn loại chim, tức là Chim bay kết thành rồng, tất cả người chơi đặt cược Chim sẽ được chia 50% tổng giải thưởng theo tỷ lệ tiền cược tương ứng.\",\n                contentRich: true,\n            },\n        ],\n        bigsmall: [\n            {\n                title: \"REGRAS BÁSICAS\",\n                content:\n                    \"1. O tempo de aposta é de 30 segundos.\\n\" +\n                    \"2. Os jogadores têm opções de Grande e Pequeno para apostar. O resultado da pontuação dos três dados lançados determinará se o jogo está ganho ou perdido.\\n\" +\n                    \"3. Big: >=11 pontos.\\n\" +\n                    \"4. Small: <=10 pontos.\\n\" +\n                    \"5. O lucro é de 1:1 (valor da aposta : probabilidade)\",\n                contentRich: false,\n            },\n        ],\n        cacheta: [\n            {\n                pageTitle: \"Descrição\",\n                content: `O objetivo é combinar sua mão de nove ou dez cartas em Sequências e/ou Trincas válidas antes que outros jogadores.`,\n            },\n            {\n                pageTitle: \"Jogadas\",\n                title1: \"Curinga\",\n                content1: `Vira uma carta do monte de compra para determinar o curinga, as duas cartas de mesmo naipe acima da que foi virada são os curingas, podem substituir qualquer carta em uma Sequência ou Trinca.`,\n                title2: \"Sequência\",\n                content2: `Três ou mais cartas do mesmo naipe em sequência de valores. O Ás, nas sequências, pode ser utilizado acima do Rei ou abaixo do Dois.`,\n                content5: `Só pode usar um curinga em cada Sequência.`,\n                title3: \"Trinca\",\n                content3: `Três ou quatro cartas de mesmo valor com somente três naipes diferentes.`,\n                content4: `Só pode usar um Curinga em cada Trinca.`,\n            },\n            {\n                pageTitle: \"Tutorial\",\n                title1: \"Bater\",\n                content1: `Combinar as nove ou as dez cartas da mão, formando Trincas e/ou Sequências.`,\n                title2: \"Ficar na boa\",\n                content2: `Avisar aos demais jogadores que você precisa de apenas uma carta para bater, podendo Ficar na boa.`,\n                title3: \"Furar a fila\",\n                content3: `Comprar da lixeira fora da sua vez. Isso pode ser feito apenas por jogadores que anunciaram que estão \"na boa\". Se mais de um jogador fura a fila, a prioridade desce no sentido horário de acordo com a posição relativa ao jogador que esteja na vez dele.`,\n            },\n        ],\n    },\n};\n\nexport default CommonRuleLanguagePt;\n","import { LanguageType } from \"../../../../../../../main/core/conf/LanguageType\";\nimport BaseBundleLanguage from \"../../../../../../../main/core/language/BaseBundleLanguage\";\nimport CommonRuleLanguageEn from \"./en/CommonRuleLanguageEn\";\nimport CommonRuleLanguagePt from \"./pt/CommonRuleLanguagePt\";\n\ntype TLanguage = typeof CommonRuleLanguageEn & typeof CommonRuleLanguageEn;\nclass CommonRuleLanguage extends BaseBundleLanguage<TLanguage> {\n    protected language: LG.ILanguageConfigs = {\n        [LanguageType.EN]: CommonRuleLanguageEn,\n        [LanguageType.PT]: CommonRuleLanguagePt,\n    };\n}\nexport default new CommonRuleLanguage().get();\n","// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nimport PopUpViewBase from \"../../../../../../main/core/popUpViewUtils/PopUpViewBase\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class CommonRule extends PopUpViewBase {}\n","import BaseBundleSkin from \"../../../../../../main/core/bd/bd_skin/BaseBundleSkin\";\nimport { BundleNames } from \"../../../../../../main/core/conf/BundleNames\";\nimport { SkinType } from \"../../../../../../main/core/conf/SkinType\";\nimport { CommonResLight } from \"./light/CommonResLight\";\nimport { CommonResWorldCup } from \"./world_cup/CommonResWorldCup\";\n\ntype TBundleInfo = typeof CommonResWorldCup;\nclass CommonSkin extends BaseBundleSkin<TBundleInfo> {\n    protected skin: BdSkin.TSkinInfo = {\n        [SkinType.WORLD_CUP]: CommonResWorldCup,\n        [SkinType.LIGHT]: CommonResWorldCup,\n    };\n\n    constructor() {\n        super(BundleNames.COMMON);\n    }\n}\n\nexport default new CommonSkin();\n","import { LocalStorageMgr } from \"../../../../../../main/core/storage/LocalStorageMgr\";\nimport EnumActive from \"../../../../../../main/core/ui/component/EnumActive\";\nimport ObjectLabel from \"../../../../../../main/core/ui/component/ObjectLabel\";\nimport UIMgr from \"../../Component/base/UIMgr\";\nimport CommonLanguage from \"../../conf/lang/CommonLanguage\";\nimport ApiMgr from \"../../service/api/ApiMgr\";\nimport FormatConstUtil from \"../../utils/FormatConstUtil\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class CommonSmsCode extends cc.Component {\n    @property({ type: cc.EditBox, displayName: \"\" })\n    codeEd: cc.EditBox = null;\n\n    private _phone: string = \"\";\n    public get phone(): string {\n        return this._phone;\n    }\n    public set phone(v: string) {\n        this._phone = v.replace(/(\\D+)/g, \"\");\n    }\n\n    public get code() {\n        return this.codeEd.string;\n    }\n\n    public setGetSmsBtnClick(callfunc: () => void) {\n        cc.find(\"layout/getCodeBtn\", this.node)?.on(\"click\", callfunc, this);\n    }\n\n    @UIMgr.applyLoadingUi\n    public requestCode(phone: string) {\n        this.phone = phone;\n        if (this.phone.length < FormatConstUtil.MIN_PHONE_LEN + 2) {\n            UIMgr.showToast(CommonLanguage.phoneNumberError);\n            return;\n        }\n        return ApiMgr.getInstance()\n            .smsCodeReq({\n                phone: this.phone,\n            })\n            .then((res) => {\n                this.toCodeCd();\n                LocalStorageMgr.getInstance().saveFormalUserAccount(phone);\n            });\n    }\n\n    private toCodeCd() {\n        this.getComponent(EnumActive).show4Name(\"codeCdBtn\");\n        let object = {\n            value: 60,\n        };\n        this.getComponentInChildren(ObjectLabel).object = object;\n        this.schedule(\n            () => {\n                object.value -= 1;\n                if (object.value < 0) {\n                    this.getComponent(EnumActive).show4Name(\"getCodeBtn\");\n                    return;\n                }\n                this.getComponentInChildren(ObjectLabel).object = object;\n            },\n            1,\n            object.value\n        );\n    }\n}\n","import BaseSocketAttachment from \"./BaseSocketAttachment\";\nimport { DateUtils } from \"../../../../../../../main/core/utils/DateUtils\";\nimport CommonSocket from \"../../../../../../../main/core/ws/CommonSocket\";\nimport HeartCheck from \"../heartCheck/HeartCheck\";\nimport { CommonProto } from \"../proto/CommonProto\";\nimport { GameType } from \"../../../../../../../main/core/conf/GameType\";\nimport { lodash } from \"../../../../../../../main/core/utils/NpmExport\";\nimport BackHeartCheck from \"../heartCheck/BackHeartCheck\";\nimport FrontHeartCheck from \"../heartCheck/FrontHeartCheck\";\nimport { CommonSocketUtil } from \"../CommonSocketUtil\";\n\nenum MsgType {\n    Ping = 0,\n    Pong = 99,\n    ErrorST = 100,\n}\nexport type TMsgData<T extends { toObject: any }> = ReturnType<Pick<T, \"toObject\">[\"toObject\"]>;\nexport default class CommonSocketAttachment extends BaseSocketAttachment {\n    private _heartCheck: HeartCheck = null;\n\n    private createHearkCheck() {\n        this._heartCheck?.close();\n        this._heartCheck = new (lodash.get(\n            {\n                [GameType.UNIVERSE]: BackHeartCheck,\n            },\n            this.options.gameId,\n            FrontHeartCheck\n        ) as typeof HeartCheck)();\n        return this._heartCheck;\n    }\n\n    public getMessageCtor(msgType: MsgType) {\n        return {\n            0: CommonProto.Ping,\n            99: CommonProto.Pong,\n        }[msgType];\n    }\n\n    public onInit(option: Socket.SocketOption): void {\n        this.options.gameId = option.gameId;\n    }\n\n    private ping() {\n        let nowTimer = new Date().getTime();\n        let ping = new CommonProto.Ping({\n            Timestamp: nowTimer,\n        });\n        this.send(0, ping);\n    }\n\n    public onOpen(): void {\n        this.createHearkCheck()\n            .init({\n                gameId: this.options.gameId,\n                connect: () => {\n                    this.reconnect();\n                },\n                ping: () => {\n                    this.ping();\n                },\n            })\n            .play();\n    }\n\n    public onBeforeUserClose(): void {\n        this._heartCheck?.close();\n        this._heartCheck = null;\n    }\n\n    public onClose(): void {\n        /*  this._heartCheck?.close();\n        this._heartCheck = null; */\n    }\n\n    public onMessage(data: Socket.TMessageObject<number, any>): void {\n        this._heartCheck?.updateLastTime();\n        switch (data.msgId) {\n            case MsgType.Pong: {\n                this.onPong(data.msgData);\n                break;\n            }\n        }\n    }\n\n    private onPong(data: TMsgData<CommonProto.Pong>) {\n        DateUtils.getInstance().checkTimestampDiff(data.Timestamp);\n    }\n}\n","export class CommonSocketUtil {\n    private static _instance: CommonSocketUtil = null;\n\n    public static getInstance() {\n        if (!this._instance) {\n            this._instance = new CommonSocketUtil();\n        }\n\n        return this._instance;\n    }\n\n    private constructor() {}\n\n    /**\n     * @protobufData websocket消息onmessage里收到的protobuf数据\n     * @desc 根据 protobufData 解析出 messageId\n     */\n    public getMessageId(protobufData: ArrayBuffer) {\n        let dv = new DataView(protobufData);\n        let messageId = dv.getUint16(0, false);\n        return messageId;\n    }\n\n    /**\n     * @buffer proto编码后的消息体\n     * @desc 将 messageId 作为固定2字节，放在消息体最前面，并返回 totalBuffer\n     */\n    public addMessageId(messageId: number, buffer: Uint8Array) {\n        return this.add2byteToBuffer(messageId, buffer);\n    }\n\n    /**\n     * @buffer proto编码后的消息体\n     * @desc 将 key 作为固定2字节，放在消息体最前面，并返回 totalBuffer\n     */\n    public addCryptId(key, buffer) {\n        return this.add2byteToBuffer(key, buffer);\n    }\n\n    private add2byteToBuffer(id: number, buffer: Uint8Array) {\n        let totalBuffer = new Uint8Array(2 + buffer.byteLength);\n        let indexBuffer = new ArrayBuffer(2);\n        let dv = new DataView(indexBuffer);\n        dv.setUint16(0, id, false);\n        totalBuffer.set(new Uint8Array(indexBuffer), 0);\n        totalBuffer.set(new Uint8Array(buffer), 2);\n        return totalBuffer;\n    }\n}\n","import { UniverseProto } from \"../universe/proto/UniverseProto\";\n\nconst { ccclass, property } = cc._decorator;\ntype SlapFaceData = ProtoObject<UniverseProto.PopUpsConfResp>[\"PopUps\"];\n\nconst BOOLEAN_TO_STORAGE = {\n    FLASE: \"0\",\n    TRUE: \"1\",\n};\n\nconst STORAGE_TO_BOOLEAN = {\n    [BOOLEAN_TO_STORAGE.FLASE]: false,\n    [BOOLEAN_TO_STORAGE.TRUE]: true,\n};\n@ccclass\nexport default class CommonStorageMgr {\n    private static _instance: CommonStorageMgr = null;\n\n    public static getInstance() {\n        if (!this._instance) {\n            this._instance = new CommonStorageMgr();\n        }\n\n        return this._instance;\n    }\n\n    private constructor() { }\n\n    /**\n     * 游戏-gameType\n     */\n    public saveGameType(param) {\n        CommonDepend.LocalStorageMgr.saveData(\"_gameType\", param);\n    }\n\n    public readGameType() {\n        let gameType = CommonDepend.LocalStorageMgr.readData(\"_gameType\");\n        return gameType;\n    }\n\n    /**\n     * 小红点-客服\n     */\n    public saveCustomerRed(count: number) {\n        CommonDepend.LocalStorageMgr.saveData(\"_CustomerRed\", String(count));\n    }\n\n    /**\n     * 小红点-Master 记录\n     */\n    public saveRechargeRed(count: number) {\n        CommonDepend.LocalStorageMgr.saveData(\"_RechargeRed\", String(count));\n    }\n\n    /**\n     * 小红点-任务系统\n     */\n    public saveTaskSystemRed(count: number) {\n        CommonDepend.LocalStorageMgr.saveData(\"_TaskSystemRed\", String(count));\n    }\n\n    /**\n     * 启动-APP首次启动：从Loading界面开始\n     */\n    public saveAppFirstStart(isFirst: boolean) {\n        let value: string = isFirst ? BOOLEAN_TO_STORAGE.TRUE : BOOLEAN_TO_STORAGE.FLASE;\n        CommonDepend.LocalStorageMgr.saveData(\"_app_first_start\", value);\n    }\n\n    public readAppFirstStart(): boolean {\n        let value = CommonDepend.LocalStorageMgr.readData(\"_app_first_start\");\n        if (value == null) {\n            return true; // 默认是第一次打开\n        }\n        return STORAGE_TO_BOOLEAN[value];\n    }\n\n    /** 保存是否显示活动提醒悬浮窗状态 */\n    public saveActivityReminderShowState(param: string) {\n        CommonDepend.LocalStorageMgr.saveData(\"_activity_reminder_show_state\", param);\n    }\n\n    /** 读取是否显示活动提醒悬浮窗状态 */\n    public readActivityReminderShowState(): boolean {\n        let flag = CommonDepend.LocalStorageMgr.readData(\"_activity_reminder_show_state\");\n        if (flag == null) {\n            this.saveActivityReminderShowState(\"on\"); // 默认是显示\n            flag = \"on\";\n        }\n        return flag == \"on\";\n    }\n\n    public savaActivityReminderPreData(param: string) {\n        CommonDepend.LocalStorageMgr.saveData(\"_activity_reminder_pre_data\", param);\n    }\n\n    public readActivityReminderPreData(): string {\n        return CommonDepend.LocalStorageMgr.readData(\"_activity_reminder_pre_data\");\n    }\n\n    public savaDrumRedDotFlag(redDotFlag: boolean) {\n        let value: string = redDotFlag ? BOOLEAN_TO_STORAGE.TRUE : BOOLEAN_TO_STORAGE.FLASE;\n        CommonDepend.LocalStorageMgr.saveData(\"_drum_red_dot_flag\", value);\n    }\n\n    public readDrumRedDotFlag(): boolean {\n        let value = CommonDepend.LocalStorageMgr.readData(\"_drum_red_dot_flag\");\n        if (value == null) {\n            return false;\n        }\n        return STORAGE_TO_BOOLEAN[value];\n    }\n\n    public savaFirstOpenActivityReminderFlag(isFirst: boolean) {\n        let value: string = isFirst ? BOOLEAN_TO_STORAGE.TRUE : BOOLEAN_TO_STORAGE.FLASE;\n        CommonDepend.LocalStorageMgr.saveData(\"_first_open_activity_reminder\", value);\n    }\n\n    public readFirstOpenActivityReminderFlag(): boolean {\n        let value = CommonDepend.LocalStorageMgr.readData(\"_first_open_activity_reminder\");\n        if (value == null) {\n            this.savaFirstOpenActivityReminderFlag(false);\n            return true; // 默认是第一次打开\n        }\n        return STORAGE_TO_BOOLEAN[value];\n    }\n\n    public savaDrumPos(PosStr: string) {\n        CommonDepend.LocalStorageMgr.saveData(\"_drum_Pos\", PosStr);\n    }\n\n    public readDrumPos(): string {\n        let PosStr = CommonDepend.LocalStorageMgr.readData(\"_drum_Pos\");\n        return PosStr;\n    }\n\n    public savaTaskSystemId(taskId: string, userId: number) {\n        CommonDepend.LocalStorageMgr.saveData(\"_task_system_task_id\" + userId, taskId);\n    }\n\n    public readTaskSystemId(userId: number): string {\n        return CommonDepend.LocalStorageMgr.readData(\"_task_system_task_id\" + userId);\n    }\n\n    /**\n     * 写入 公告已读记录\n     * @param id\n     */\n    writeNoticeReadRecords(id) {\n        let localData = CommonDepend.LocalStorageMgr.readData(\"_notice_read_data_\") ?? \"[]\";\n        let noticeReadRecordList = JSON.parse(localData);\n        noticeReadRecordList.push(id);\n        CommonDepend.LocalStorageMgr.saveData(\n            \"_notice_read_data_\",\n            JSON.stringify(noticeReadRecordList)\n        );\n    }\n\n    /**\n     * 读取 公告已读记录\n     */\n    readNoticeReadRecords() {\n        let ret = CommonDepend.LocalStorageMgr.readData(\"_notice_read_data_\") ?? \"[]\";\n        return JSON.parse(ret);\n    }\n\n    /**\n     * 强力覆盖存储 公告已读记录\n     * @param readRecordList\n     * @returns\n     */\n    forceSaceNoticeReadRecords(readRecordList) {\n        if (!readRecordList || readRecordList.length === 0) return;\n        let localStorageMgr = CommonDepend.LocalStorageMgr;\n        localStorageMgr.saveData(\"_notice_read_data_\", JSON.stringify(readRecordList));\n    }\n\n    /**\n     * 写入 公告打脸记录\n     * @param id\n     */\n    writeNoticeSlapRecords(id) {\n        let localStorageMgr = CommonDepend.LocalStorageMgr;\n        let localData = localStorageMgr.readData(\"_notice_slap_data_\") ?? \"[]\";\n        let noticeSlapList = JSON.parse(localData);\n        noticeSlapList.push(id);\n        localStorageMgr.saveData(\"_notice_slap_data_\", JSON.stringify(noticeSlapList));\n    }\n\n    readNoticeSlapRecords() {\n        let localStorageMgr = CommonDepend.LocalStorageMgr;\n        let ret = localStorageMgr.readData(\"_notice_slap_data_\") ?? \"[]\";\n        return JSON.parse(ret);\n    }\n\n    /**\n     * 读取 提现公告（打脸）\n     * @returns\n     */\n    readWithdrawUps() {\n        let slapfaceLocalJson = CommonDepend.LocalStorageMgr.readData(\"_withdraw_ups\");\n        if (!slapfaceLocalJson) return false;\n        return JSON.parse(slapfaceLocalJson);\n    }\n\n    /**\n     * 写入 提现公告（打脸）\n     * @param upsConf\n     */\n    writeWithdrawUps(upsConf: SlapFaceData) {\n        !!upsConf && this._saveSlapfaceData(\"_withdraw_ups\", upsConf);\n    }\n\n    /**\n     * 清除本地  提现公告（打脸）\n     */\n    clearWithdrawUps() {\n        CommonDepend.LocalStorageMgr.clearData(\"_withdraw_ups\");\n    }\n\n    /**\n     * 读取 充值公告（打脸）\n     * @returns\n     */\n    readTopupUps() {\n        let slapfaceLocalJson = CommonDepend.LocalStorageMgr.readData(\"_topup_ups\");\n        if (!slapfaceLocalJson) return false;\n        return JSON.parse(slapfaceLocalJson);\n    }\n\n    /**\n     * 写入 充值公告（打脸）\n     * @param upsConf\n     */\n    writeTopupUps(upsConf: SlapFaceData) {\n        !!upsConf && this._saveSlapfaceData(\"_topup_ups\", upsConf);\n    }\n\n    /**\n     * 清除本地 充值公告 缓存\n     */\n    clearTopupUps() {\n        CommonDepend.LocalStorageMgr.clearData(\"_topup_ups\");\n    }\n\n    /**\n     * 读取 捕鱼新手充值（打脸）\n     * @returns\n     */\n    readFishTopUpUps() {\n        let slapfaceLocalJson = CommonDepend.LocalStorageMgr.readData(\"_fish_topup_ups\");\n        if (!slapfaceLocalJson) return false;\n        return JSON.parse(slapfaceLocalJson);\n    }\n\n    /**\n     * 写入 捕鱼新手充值（打脸）\n     * @param upsConf\n     */\n    writeFishTopUpUps(upsConf: SlapFaceData) {\n        !!upsConf && this._saveSlapfaceData(\"_fish_topup_ups\", upsConf);\n    }\n\n    /**\n     * 清除本地 捕鱼新手充值 缓存\n     */\n    clearFishTopUpUps() {\n        CommonDepend.LocalStorageMgr.clearData(\"_fish_topup_ups\");\n    }\n\n    /**\n     * 读取 充值失败公告（打脸）\n     * @returns\n     */\n    readTopupFailUps() {\n        let slapfaceLocalJson = CommonDepend.LocalStorageMgr.readData(\"_topup_fail_ups\");\n        if (!slapfaceLocalJson) return false;\n        return JSON.parse(slapfaceLocalJson);\n    }\n\n    /**\n     * 写入 充值失败公告（打脸）\n     * @param upsConf\n     */\n    writeTopupFailUps(upsConf: SlapFaceData) {\n        !!upsConf && this._saveSlapfaceData(\"_topup_fail_ups\", upsConf);\n    }\n\n    /**\n     * 清除本地 充值失败公告（打脸）\n     */\n    clearTopupFailUps() {\n        CommonDepend.LocalStorageMgr.clearData(\"_topup_fail_ups\");\n    }\n\n    /**\n     * 保存公告相关数据\n     * @param key\n     * @param upsConf\n     */\n    private _saveSlapfaceData(key: string, upsConf: SlapFaceData) {\n        let topupSaveJson = JSON.stringify(upsConf);\n        CommonDepend.LocalStorageMgr.saveData(key, topupSaveJson);\n    }\n\n    /**\n     * 提现红点\n     * @param visible\n     */\n    writeWithdrawRecords(visible: boolean) {\n        let saveVisible = visible ? \"1\" : \"0\";\n        CommonDepend.LocalStorageMgr.saveData(\"withdraw_records\", saveVisible);\n    }\n\n    /**\n     * 提现红点\n     */\n    readWithdrawRecords() {\n        return !!~~CommonDepend.LocalStorageMgr.readData(\"withdraw_records\");\n    }\n\n    /**\n     * 充值红点\n     * @param visible\n     */\n    writeTopupRecords(visible: boolean) {\n        let saveVisible = visible ? \"1\" : \"0\";\n        CommonDepend.LocalStorageMgr.saveData(\"topup_records\", saveVisible);\n    }\n\n    /**\n     * 充值红点\n     */\n    readTopupRecords() {\n        return !!~~CommonDepend.LocalStorageMgr.readData(\"topup_records\");\n    }\n\n    /**\n     * 客户未读信息红点\n     */\n    writeCustomerUnreadMsg(visible: boolean) {\n        let saveVisible = visible ? \"1\" : \"0\";\n        CommonDepend.LocalStorageMgr.saveData(\"customer_unread_msg\", saveVisible);\n    }\n\n    /**\n     * 客户未读信息红点\n     */\n    readCustomerUnreadMsg() {\n        return !!~~CommonDepend.LocalStorageMgr.readData(\"customer_unread_msg\");\n    }\n\n    /**\n    * 读取 捕鱼开火数\n    * @returns\n    */\n    readFishingFireCount() {\n        let count = CommonDepend.LocalStorageMgr.readData(\"_fish_fire_count\") ?? \"0\";\n        return Number(count);\n    }\n\n    /**\n     * 写入 捕鱼开火数\n     * @param upsConf\n     */\n    writeFishingFireCount(count: string) {\n        CommonDepend.LocalStorageMgr.saveData(\"_fish_fire_count\", count);\n    }\n\n    /**\n     * 清除本地 捕鱼开火数\n     */\n    clearFishingFireCount() {\n        CommonDepend.LocalStorageMgr.clearData(\"_fish_fire_count\");\n    }\n\n}\n","/** \n * 该文件为自动生成\n * 2022/9/22下午6:23:02\n * \n **/\n\nexport const CommonUiLanguageEn = {\n    CommonKycInfo: {\n        C1: \"KYC INFO\",\n        C2: \"Name\",\n        C3: \"Please enter name\",\n        C4: \"*The name must contain at least 2 characters.\",\n        C5: \"Telephone (+91)\",\n        C6: \"Please input 10 digits.\",\n        C7: \"*Please enter valid phone number.\",\n        C8: \"Email\",\n        C9: \"Please enter email\",\n        C10: \"*Email format invalid.\",\n        C11: \"Save\",\n        C12: \"Cancel\",\n        C13: \"CEP\",\n        C14: \"CPF/CNPJ\",\n        C15: \"*The CPF/CNPJ length is incorrect.\",\n        C16: \"Please enter 8 digits CEP number\",\n        C17: \"Please enter CPF/CNPJ account\",\n        D1: \"SYSTEM NOTIFICATION\",\n        D2: \"For the security of your account, please bind your phone number to retrieve the password in case you forget it.\",\n        D3: \"Bind Phone Number\",\n        D4: \"Continue Editing\",\n    },\n    CommonRetrievePassword: {\n        F1: \"RECOVER PASSWORD\",\n        F2: \"Account\",\n        F3: \"Please enter an account of 6~20 characters\",\n        F4: \"Binding phone number\",\n        F5: \"Please enter binding phone number\",\n        F6: \"New password\",\n        F7: \"Verification code\",\n        F8: \"Please enter verification code\",\n        F9: \"OTP\",\n        F10: \"6-20 characters of letters/numbers/dot/minus/underscore\",\n        F11: \"Confirm\",\n    },\n    CommonUserSetting: {\n        H1: \"SETTINGS\",\n        H2: \"Event notification\",\n        H3: \"ON\",\n        H4: \"OFF\",\n        H5: \"Current version:{value}\",\n        H6: \"Sound\",\n        H7: \"Music\",\n        H8: \"Terms & Conditions\",\n        H9: \"Privacy Policy\",\n        H10: \"Cancellation & Refund Policy\",\n        H11: \"About Us\",\n    },\n    CommonRegister: {\n        A1: \"REGISTER\",\n        A2: \"Account\",\n        A3: \"Please enter an account of 6~20 characters\",\n        A4: \"Set up password\",\n        A5: \"6-20 characters of letters/numbers/dot/minus/underscore\",\n        A6: \"Confirm password\",\n        A7: \"6-20 characters of letters/numbers/dot/minus/underscore\",\n        A8: \"Confirm\",\n        A9: \"Have an invite code?\",\n        A10: \"Enter invite code (Optional)\",\n    },\n    CommonPasswordLogin: {\n        B1: \"LOGIN\",\n        B2: \"Account\",\n        B3: \"Please enter an account of 6~20 characters\",\n        B4: \"Password  \",\n        B5: \"6-20 characters of letters/numbers/dot/minus/underscore\",\n        B6: \"Register\",\n        B7: \"Confirm\",\n        B8: \"Forgot Password?\",\n    },\n    CommonRegisterForGiftView: {\n        D1: \"UPGRADE ACCOUNT\",\n        D2: \"Claim\",\n        D3: \"Account\",\n        D4: \"Please enter an account of 6~20 characters\",\n        D5: \"Password\",\n        D6: \"6-20 characters of letters/numbers/dot/minus/underscore\",\n        D7: \"Confirm password\",\n        D8: \"6-20 characters of letters/numbers/dot/minus/underscore\",\n        D9: \"Upgrade\",\n        D10: \"Already Registered? Login Now\",\n        D11: \"Terms & Conditions\",\n        D12: \"Privacy Policy\",\n        D13: \"Cancellation & Refund Policy\",\n        D14: \"About Us\",\n        D15: \"Have an invite code?\",\n        D16: \"Enter invite code (Optional)\",\n        D17: \"Incorrect invite code. Please confirm with the person who invited you.\",\n        D18: \"Get Bonus\",\n        D19: \"Register\",\n    },\n};\n","/** \n * 该文件为自动生成\n * 2022/9/22下午6:23:02\n * \n **/\n\nexport const CommonUiLanguageHi = {\n    CommonKycInfo: {\n        C1: \"केवाईसी जानकारी\",\n        C2: \"नाम\",\n        C3: \"कृपया नाम दर्ज करें\",\n        C4: \"नाम में कम से कम 2 अक्षर होने चाहिए।\",\n        C5: \"टेलीफोन (+91)\",\n        C6: \"कृपया 10 अंक इनपुट करें\",\n        C8: \"ईमेल\",\n        C9: \"कृपया ईमेल दर्ज करें\",\n        C10: \"*ईमेल प्रारूप अमान्य\",\n        C11: \"सहेजें\",\n        C12: \"रद्द करना\",\n        C15: \"CPF/CNPJ लंबाई अमान्य\",\n        C16: \"कृपया 8 अंक सीईपी नंबर दर्ज करें\",\n        D1: \"सिस्टम अधिसूचना\",\n        D2: \"अपने खाते की सुरक्षा के लिए, यदि आप पासवर्ड भूल जाते हैं तो पुनः इसे प्राप्त करने के लिए कृपया अपना फ़ोन नंबर बांधें\",\n        D3: \"फोन नंबर बांधें\",\n        D4: \"संपादन जारी रखें\",\n    },\n    CommonRetrievePassword: {\n        F1: \"पासवर्ड वापस पाये\",\n        F2: \"खाता\",\n        F3: \"कृपया 6 ~ 20 वर्णों का खाता दर्ज करें\",\n        F4: \"फोन नंबर बांधें\",\n        F5: \"कृपया बाइंडिंग फ़ोन नंबर दर्ज करें\",\n        F6: \"नया पासवर्ड\",\n        F7: \"पुष्टि संख्या\",\n        F8: \"कृपया सत्यापन कोड दर्ज करें\",\n        F9: \"ओटीपी\",\n        F10: \"6-20 अक्षर जिसमे अक्षर/संख्या/डॉट/माइनस/अंडरस्कोर हो \",\n        F11: \"पुष्टि करें\",\n    },\n    CommonUserSetting: {\n        H1: \"समायोजन\",\n        H2: \"प्रतिस्पर्धा अधिसूचना\",\n        H3: \"ON\",\n        H4: \"OFF\",\n        H5: \"वर्तमान संस्करण:{value}\",\n        H8: \"नियम एवं शर्तें\",\n        H9: \"गोपनीयता नीति\",\n        H10: \"रद्दीकरण और वापसी नीति\",\n        H11: \"हमारे बारे में\",\n    },\n    CommonRegister: {\n        A1: \"रजिस्टर करें\",\n        A2: \"खाता\",\n        A3: \"कृपया 6 ~ 20 वर्णों का खाता दर्ज करें\",\n        A4: \"पासवर्ड सेट करें\",\n        A5: \"6-20 अक्षर जिसमे अक्षर/संख्या/डॉट/माइनस/अंडरस्कोर हो \",\n        A6: \"पासवर्ड की पुष्टि कीजिये\",\n        A7: \"6-20 अक्षर जिसमे अक्षर/संख्या/डॉट/माइनस/अंडरस्कोर हो \",\n        A8: \"पुष्टि करें\",\n        A9: \"आमंत्रण कोड है क्या?\",\n        A10: \"आमंत्रण कोड दर्ज करें (वैकल्पिक)\",\n    },\n    CommonPasswordLogin: {\n        B1: \"लॉग इन करें\",\n        B2: \"खाता\",\n        B3: \"कृपया 6 ~ 20 वर्णों का खाता दर्ज करें\",\n        B4: \"पासवर्ड\",\n        B5: \"6-20 अक्षर जिसमे अक्षर/संख्या/डॉट/माइनस/अंडरस्कोर हो \",\n        B6: \"पंजीकरण करवाना\",\n        B7: \"पुष्टि करें\",\n        B8: \"पासवर्ड भूल गए?\",\n    },\n    CommonRegisterForGiftView: {\n        D1: \"खाता अपग्रेड करें\",\n        D2: \"दावा\",\n        D3: \"खाता\",\n        D4: \"कृपया 6 ~ 20 वर्णों का खाता दर्ज करें\",\n        D5: \" पासवर्ड\",\n        D6: \"6-20 अक्षर जिसमे अक्षर/संख्या/डॉट/माइनस/अंडरस्कोर हो \",\n        D7: \"पासवर्ड की पुष्टि कीजिये\",\n        D8: \"6-20 अक्षर जिसमे अक्षर/संख्या/डॉट/माइनस/अंडरस्कोर हो \",\n        D9: \"उन्नत करना\",\n        D10: \"पहले से ही पंजीकृत? अब प्रवेश करें\",\n        D11: \"नियम एवं शर्तें\",\n        D12: \"गोपनीयता नीति\",\n        D13: \"रद्दीकरण और वापसी नीति\",\n        D14: \"हमारे बारे में\",\n        D15: \"आमंत्रण कोड है क्या?\",\n        D16: \"आमंत्रण कोड दर्ज करें (वैकल्पिक)\",\n        D17: \"गलत आमंत्रण कोड। कृपया उस व्यक्ति से पुष्टि करें जिसने आपको अमंत्रित किया है।\",\n    },\n};\n","/** \n * 该文件为自动生成\n * 2022/9/22下午6:23:02\n * \n **/\n\nexport const CommonUiLanguageId = {\n    CommonKycInfo: {\n        C1: \"INFO KYC\",\n        C2: \"Nama\",\n        C3: \"Silakan masukkan nama\",\n        C4: \"Nama minimal 2 karakter .\",\n        C5: \"Telepon (+91)\",\n        C6: \"Silakan masukkan 11 digit\",\n        C7: \"Masukkan no HP yang valid\",\n        C8: \"Email\",\n        C9: \"Silakan masukkan email\",\n        C10: \"*Format email tidak valid\",\n        C11: \"Simpan\",\n        C12: \"Batal\",\n        C13: \"Kode Pos \",\n        C14: \"No Pajak Perorangan / No Pendaftaran Nasional Badan Hukum \",\n        C15: \"Panjang CPF/CNPJ tidak valid\",\n        C16: \"Masukkan 8 digit nomor CEP\",\n        D1: \"NOTIFIKASI SISTEM\",\n        D2: \"Demi keamanan akun Anda, harap ikat no ponsel Anda untuk mendapat kata sandi jika Anda lupa\",\n        D3: \"Ikat Nomor HP\",\n        D4: \"Lanjutkan Mengedit\",\n    },\n    CommonRetrievePassword: {\n        F1: \"PEMULIHAN KATA SANDI\",\n        F2: \"Akun\",\n        F3: \"Masukkan akun 6~20 karakter\",\n        F4: \"Ikat no ponsel\",\n        F5: \"Masukkan no ponsel yang terikat\",\n        F6: \"Kata sandi baru\",\n        F7: \"Kode verifikasi\",\n        F8: \"Masukkan kode verifikasi\",\n        F9: \"Minta OTP\",\n        F10: \"6-20 karakter huruf/angka/titik/minus/garis bawah\",\n        F11: \"Konfirmasi\",\n    },\n    CommonUserSetting: {\n        H1: \"PENGATURAN\",\n        H2: \"Notifikasi Event\",\n        H3: \"ON\",\n        H4: \"OFF\",\n        H5: \"Versi sekarang:{value}\",\n        H8: \"Syarat & Ketentuan\",\n        H9: \"Kebijakan privasi\",\n        H10: \"Kebijakan Pembatalan & Pengembalian Dana\",\n        H11: \"Tentang kami\",\n    },\n    CommonRegister: {\n        A1: \"DAFTAR\",\n        A2: \"Akun\",\n        A3: \"Masukkan akun 6~20 karakter\",\n        A4: \"Set kata sandi\",\n        A5: \"6-20 karakter huruf/angka/titik/minus/garis bawah\",\n        A6: \"Ulangi Kata Sandi\",\n        A7: \"6-20 karakter huruf/angka/titik/minus/garis bawah\",\n        A8: \"Konfirmasi\",\n        A9: \"Punya kode undangan?\",\n        A10: \"Masukkan kode undangan (Opsional)\",\n    },\n    CommonPasswordLogin: {\n        B1: \"LOGIN\",\n        B2: \"Akun\",\n        B3: \"Masukkan akun 6~20 karakter\",\n        B4: \"Kata sandi\",\n        B5: \"6-20 karakter huruf/angka/titik/minus/garis bawah\",\n        B6: \"Daftar\",\n        B7: \"Konfirmasi\",\n        B8: \"Pulihkan Kata Sandi\",\n    },\n    CommonRegisterForGiftView: {\n        D1: \"UPGRADE AKUN\",\n        D2: \"Klaim\",\n        D3: \"Akun\",\n        D4: \"Masukkan akun 6~20 karakter\",\n        D5: \"Kata sandi\",\n        D6: \"6-20 karakter huruf/angka/titik/minus/garis bawah\",\n        D7: \"Konfirmasi kata sandi\",\n        D8: \"6-20 karakter huruf/angka/titik/minus/garis bawah\",\n        D9: \"Upgrade\",\n        D10: \"Sudah Terdaftar? Login Sekarang\",\n        D11: \"Syarat & Ketentuan\",\n        D12: \"Kebijakan privasi\",\n        D13: \"Kebijakan Pembatalan & Pengembalian Dana\",\n        D14: \"Tentang kami\",\n        D15: \"Punya kode undangan?\",\n        D16: \"Masukkan kode undangan (Opsional)\",\n        D17: \"Kode undangan salah. Harap konfirmasi dengan teman yang merekomendasi.\",\n    },\n};\n","/** \n * 该文件为自动生成\n * 2022/9/22下午6:23:02\n * \n **/\n\nexport const CommonUiLanguagePt = {\n    CommonKycInfo: {\n        C1: \"INFORM. KYC\",\n        C2: \"Nome\",\n        C3: \"Por favor, insira o nome\",\n        C4: \"*O nome deve conter pelo menos 2 caracteres.\",\n        C5: \"Telephone (+55)\",\n        C6: \"Por favor insira 11 dígitos.\",\n        C7: \"*Por favor, insira o número de telefone válido.\",\n        C8: \"E-mail\",\n        C9: \"Por favor insira o e-mail\",\n        C10: \"*Formato de e-mail inválido.\",\n        C11: \"Salvar\",\n        C12: \"Cancelar\",\n        C13: \"CEP\",\n        C14: \"CPF/CNPJ\",\n        C15: \"*O comprimento do CPF/CNPJ eatá incorreto.\",\n        C16: \"Insira o CEP de 8 dígitos \",\n        C17: \"Por favor, insira a conta de CPF/CNPJ\",\n        D1: \"LEMBRETE\",\n        D2: \"Para a segurança de sua conta, vincule seu número de telefone para recuperar a senha caso você a esqueça.\",\n        D3: \"Vincular Número De Celular\",\n        D4: \"Continuar Editar\",\n    },\n    CommonRetrievePassword: {\n        F1: \"RECUPERAR SENHA\",\n        F2: \"Conta\",\n        F3: \"Por favor, insira uma conta de 6 a 20 caracteres\",\n        F4: \"Número de telefone vinculado\",\n        F5: \"Insira o número de telefone vinculado\",\n        F6: \"Senha nova\",\n        F7: \"Código de verificação\",\n        F8: \"Por favor, insira o código de verificação\",\n        F9: \"Obter\",\n        F10: \"6-20 caracteres de letras/números/ponto/sinal de menos/sublinhado\",\n        F11: \"Confirmar\",\n    },\n    CommonUserSetting: {\n        H1: \"CONFIGURAÇÃO\",\n        H2: \"Notificação de evento\",\n        H3: \"ON\",\n        H4: \"OFF\",\n        H5: \"Versão atual:{value}\",\n        H6: \"Som\",\n        H7: \"Música\",\n        H8: \"Termos & Condições \",\n        H9: \"Política de Privacidade \",\n        H10: \"Política de Cancelamento & Reembolso\",\n        H11: \"Sobre Nós \",\n    },\n    CommonRegister: {\n        A1: \"REGISTRAR\",\n        A2: \"Conta\",\n        A3: \"Por favor, insira uma conta de 6 a 20 caracteres\",\n        A4: \"Definir senha\",\n        A5: \"6-20 caracteres de letras/números/ponto/sinal de menos/sublinhado\",\n        A6: \"Confirmar senha\",\n        A7: \"6-20 caracteres de letras/números/ponto/sinal de menos/sublinhado\",\n        A8: \"Confirmar \",\n        A9: \"Tem um código de convite?\",\n        A10: \"Insira o código de convite (opcional)\",\n    },\n    CommonPasswordLogin: {\n        B1: \"LOGIN\",\n        B2: \"Conta\",\n        B3: \"Por favor, insira uma conta de 6 a 20 caracteres\",\n        B4: \"Senha  \",\n        B5: \"6-20 caracteres de letras/números/ponto/sinal de menos/sublinhado\",\n        B6: \"Registrar\",\n        B7: \"Confirmar\",\n        B8: \"Esqueceu Senha?\",\n    },\n    CommonRegisterForGiftView: {\n        D1: \"CONTA UPGRADE\",\n        D2: \"Receber\",\n        D3: \"Conta\",\n        D4: \"Por favor, insira uma conta de 6 a 20 caracteres\",\n        D5: \"Senha\",\n        D6: \"6-20 caracteres de letras/números/ponto/sinal de menos/sublinhado\",\n        D7: \"Confirmar senha\",\n        D8: \"6-20 caracteres de letras/números/ponto/sinal de menos/sublinhado\",\n        D9: \"Upgrade\",\n        D10: \"Já Tem Uma Conta? Faça Login Agora\",\n        D11: \"Termos & Condições \",\n        D12: \"Política de Privacidade \",\n        D13: \"Política de Cancelamento & Reembolso\",\n        D14: \"Sobre Nós \",\n        D15: \"Tem um código de convite?\",\n        D16: \"Insira o código de convite (opcional)\",\n        D17: \"Código de convite incorreto. Por favor, confirme com a pessoa que o convidou.\",\n        D18: \"Receba Bônus\",\n        D19: \"Registrar\",\n    },\n};\n","/** \n * 该文件为自动生成\n * 2022/9/22下午6:23:02\n * \n **/\n\nexport const CommonUiLanguageZh = {\n    CommonKycInfo: {\n        C1: \"KYC 信息\",\n        C2: \"姓名\",\n        C3: \"请输入名字\",\n        C4: \"名字长度不可少于2个字符\",\n        C5: \"电话号码 (根据版本国家区别)\",\n        C6: \"请输入10位数\",\n        C7: \"请输入有效电话号码\",\n        C8: \"邮箱\",\n        C9: \"请输入邮箱\",\n        C10: \"无效邮箱格式\",\n        C11: \"保存\",\n        C12: \"取消\",\n        C13: \"邮政编码(巴西)\",\n        C14: \"个人税务登记号/法人国家登记号(巴西)\",\n        C15: \"CPF/CNPJ长度不正确\",\n        C16: \"请输入8位CEP号码\",\n        C17: \"请输入CPF/CNPJ\",\n        D1: \"系统提示\",\n        D2: \"为了您的账号安全，请绑定手机号以便忘记密码时找回密码。\",\n        D3: \"绑定手机号码\",\n        D4: \"继续编辑\",\n    },\n    CommonRetrievePassword: {\n        F1: \"找回密码\",\n        F2: \"账号\",\n        F3: \"请输入6~20位账号\",\n        F4: \"绑定的手机号\",\n        F5: \"请输入绑定的手机号\",\n        F6: \"新密码\",\n        F7: \"验证码\",\n        F8: \"请输入验证码\",\n        F9: \"获取\",\n        F10: \"6-20位英文/数字/点/减号/下划线\",\n    },\n    CommonUserSetting: {\n        H1: \"设置\",\n        H2: \"活动通知\",\n        H3: \"开\",\n        H4: \"关\",\n        H5: \"当前版本:{value}\",\n        H6: \"音效\",\n        H7: \"音乐\",\n        H8: \"条款和条件\",\n        H9: \"隐私政策\",\n        H10: \"取消和退款政策\",\n        H11: \"关于我们\",\n    },\n    CommonRegister: {\n        A1: \"注册\",\n        A2: \"账号\",\n        A3: \"请输入6~20位账号\",\n        A4: \"设置密码\",\n        A5: \"6-20位英文/数字/点/减号/下划线\",\n        A6: \"确认密码\",\n        A7: \"6-20位英文/数字/点/减号/下划线\",\n        A8: \"确认 \",\n        A9: \"是否有邀请码？\",\n        A10: \"输入邀请码（选填）\",\n    },\n    CommonPasswordLogin: {\n        B1: \"登录\",\n        B2: \"账号\",\n        B3: \"请输入6~20位账号\",\n        B4: \"密码  \",\n        B5: \"6~20位英文字母/数字/点/减号/下划线\",\n        B6: \"注册\",\n        B7: \"确认\",\n        B8: \"忘记密码？\",\n    },\n    CommonRegisterForGiftView: {\n        D1: \"升级账号\",\n        D2: \"领取\",\n        D3: \"账号\",\n        D4: \"请输入6~20位账号\",\n        D5: \"密码\",\n        D6: \"6-20位英文/数字/点/减号/下划线\",\n        D7: \"确认密码\",\n        D8: \"6-20位英文/数字/点/减号/下划线\",\n        D9: \"升级\",\n        D10: \"已经有账号？现在登录\",\n        D11: \"条款和条件\",\n        D12: \"隐私政策\",\n        D13: \"取消和退款政策\",\n        D14: \"关于我们\",\n        D15: \"是否有邀请码？\",\n        D16: \"输入邀请码（选填）\",\n        D17: \"邀请码错误，请和您的推荐人确认\",\n        D18: \"获得奖励\",\n        D19: \"注册账号\",\n    },\n};\n","/** 该文件为自动生成\n * 2022/9/22下午6:23:02\n * \n **/\n\nimport { LanguageType } from \"../../../../../../main/core/conf/LanguageType\";\nimport BaseBundleLanguage from \"../../../../../../main/core/language/BaseBundleLanguage\";\nimport {\n    Instance,\n    setInstance,\n} from \"../../../../../../main/core/utils/decorators/InstanceClassDecorator\";\nimport { CommonUiLanguageZh } from \"./zh/CommonUiLanguageZh\";\nimport { CommonUiLanguageEn } from \"./en/CommonUiLanguageEn\";\nimport { CommonUiLanguagePt } from \"./pt/CommonUiLanguagePt\";\nimport { CommonUiLanguageHi } from \"./hi/CommonUiLanguageHi\";\nimport { CommonUiLanguageId } from \"./id/CommonUiLanguageId\";\n\ntype TLanguage = typeof CommonUiLanguageZh &\n    typeof CommonUiLanguageEn &\n    typeof CommonUiLanguagePt &\n    typeof CommonUiLanguageHi &\n    typeof CommonUiLanguageId;\n@cc._decorator.ccclass(\"CommonUiLanguage\")\n@setInstance\nclass CommonUiLanguage extends BaseBundleLanguage<TLanguage> {\n    protected language: LG.ILanguageConfigs = {\n        [LanguageType.ZH]: CommonUiLanguageZh,\n        [LanguageType.EN]: CommonUiLanguageEn,\n        [LanguageType.PT]: CommonUiLanguagePt,\n        [LanguageType.HI]: CommonUiLanguageHi,\n        [LanguageType.ID]: CommonUiLanguageId,\n    };\n}\nexport default Instance(CommonUiLanguage).get();\n","import { ProjectInfo } from \"../../../../../main/core/conf/ProjectInfo\";\nimport CacheObserver from \"../../../../../main/core/utils/class/CacheObserver\";\nimport {\n    setInstance,\n    Instance,\n} from \"../../../../../main/core/utils/decorators/InstanceClassDecorator\";\nimport { UniverseProto } from \"../universe/proto/UniverseProto\";\nimport { PlatformUtil } from \"../../../../../main/core/platform/PlatformUtil\";\nimport UIMgr from \"../Component/base/UIMgr\";\nimport { SceneControl } from \"../SceneControl\";\nimport { SceneType } from \"../SceneType\";\nimport { H5Util } from \"../../../../../main/core/platform/H5Util\";\nimport { BrowserUtil } from \"../utils/BrowserUtil\";\nimport { lodash } from \"../../../../../main/core/utils/NpmExport\";\nimport { PlatformType } from \"../../../../../main/core/platform/PlatformType\";\n\ntype TData = ProtoObject<UniverseProto.UpdateNewNT> & {\n    isUpdate?: boolean;\n    stop?: boolean;\n};\n\n@setInstance\nexport default class CommonUpdateNewObserver extends CacheObserver<TData> {\n    protected getCacheKey(): string {\n        return \"_update_new\";\n    }\n\n    protected onNotice(newValue: TData) {\n        super.onNotice(newValue);\n    }\n\n    private compareVersion(curent: string, target: string) {\n        /***\n         *  local - remote\n         *  大于等于0，无更新\n         *  小于0，有更新\n         */\n\n        let vL = curent.split(\".\");\n        let vR = target.split(\".\");\n        for (let i = 0; i < vL.length; ++i) {\n            let a = parseInt(vL[i]);\n            let b = parseInt(vR[i] || \"0\");\n            if (a === b) {\n                continue;\n            } else {\n                return a - b;\n            }\n        }\n        if (vR.length > vL.length) {\n            return -1;\n        } else {\n            return 0;\n        }\n    }\n\n    public check() {\n        let data = this.get();\n        this.tryUpdate(data);\n        this.saveUrl();\n    }\n\n    public saveUrl() {\n        let data = this.get();\n        const gameVersion = ProjectInfo.getInstance().GAME_VERSION;\n        if (gameVersion !== data?.VersionName) {\n            return;\n        }\n        let url = data.UpdateUrl;\n        if (!url) {\n            return;\n        }\n        this.set({});\n        PlatformUtil.getInstance().saveGameUrl(url);\n    }\n\n    public tryUpdate(data: TData) {\n        if (PlatformUtil.getInstance().type == PlatformType.H5) {\n            return;\n        }\n        if (lodash.isEmpty(data)) {\n            return;\n        }\n        const gameVersion = ProjectInfo.getInstance().GAME_VERSION;\n        if (this.compareVersion(gameVersion, data?.VersionName ?? \"0.0.0\") >= 0) {\n            CC_DEBUG && cc.log(\"[CommonUpdateNewObserver] current is up to date\");\n            return;\n        }\n        CC_DEBUG && cc.log(\"[CommonUpdateNewObserver] start update\");\n        this.modify(data);\n        switch (data.UpdateType) {\n            case UniverseProto.UpdateTypeEnu.FORCE_HOT:\n            case UniverseProto.UpdateTypeEnu.NORMAL_HOT: {\n                if (SceneControl.getInstance().scene !== SceneType.None) {\n                    if (UniverseProto.UpdateTypeEnu.FORCE_HOT == data.UpdateType) {\n                        if (SceneControl.getInstance().scene === SceneType.Hall) {\n                            UIMgr.showAlert({\n                                contentText: data.Content,\n                                contextAlign: cc.macro.TextAlignment.CENTER,\n                                style: UIMgr.ALERT_STYLE.POSITIVE,\n                            }).onClose((result) => {\n                                if (result) {\n                                    this.onUpdateH5(data);\n                                }\n                            });\n                        }\n                    }\n                } else {\n                    this.onUpdateH5(data);\n                }\n                break;\n            }\n        }\n    }\n\n    onUpdateH5(data: TData) {\n        Instance(CommonUpdateNewObserver).modify({\n            isUpdate: true,\n        });\n\n        H5Util.getInstance().loadUrl(data.UpdateUrl);\n    }\n}\n","import ValueObserver from \"../../../../../../main/core/utils/class/ValueObserver\";\nimport { lodash } from \"../../../../../../main/core/utils/NpmExport\";\nimport { UniverseProto } from \"../../universe/proto/UniverseProto\";\nimport { CommonBroadCastType } from \"../define/CommonBroadCastType\";\n\ninterface TDataItem extends ProtoObject<UniverseProto.BroadCastNT> {\n    vipLevel?: number;\n}\ntype TData = {\n    [K in CommonBroadCastType]?: TDataItem[];\n};\nexport default class CommonUserBroadCastObserver extends ValueObserver<TData> {\n    private readonly MSG_TYPE_MAX_COUNT: number = 300; //一个类型保存300条\n\n    protected onInit(): TData {\n        return {};\n    }\n\n    public totalLength() {\n        return lodash.sum(\n            [\n                CommonBroadCastType.VipLevelUp,\n                CommonBroadCastType.CashSuccess,\n                CommonBroadCastType.OnlineReward,\n                CommonBroadCastType.Game,\n            ].map((v) => {\n                return this.get(v, []).length;\n            })\n        );\n    }\n\n    public getOld(del: boolean = false, count: number = 0) {\n        const otherCount = lodash.sumBy(\n            [\n                CommonBroadCastType.CashSuccess,\n                CommonBroadCastType.OnlineReward,\n                CommonBroadCastType.Game,\n            ],\n            (value) => {\n                return this.get(value, []).length;\n            }\n        );\n        if (otherCount <= count) {\n            [\n                CommonBroadCastType.CashSuccess,\n                CommonBroadCastType.OnlineReward,\n                CommonBroadCastType.Game,\n            ].forEach((v) => {\n                this.set(v, []);\n            });\n            if (this.get(CommonBroadCastType.VipLevelUp, []).length <= count - otherCount) {\n                this.set(CommonBroadCastType.VipLevelUp, []);\n            } else {\n                this.set(\n                    CommonBroadCastType.VipLevelUp,\n                    this.get(CommonBroadCastType.VipLevelUp, []).splice(0, count - otherCount)\n                );\n            }\n        } else {\n            lodash\n                .chain([\n                    CommonBroadCastType.CashSuccess,\n                    CommonBroadCastType.OnlineReward,\n                    CommonBroadCastType.Game,\n                ])\n                .reduce((pre, type) => {\n                    return pre.concat(this.get(type, []));\n                }, [])\n                .sortBy(\"Timestamp\")\n                .splice(0, count)\n                .forEach((v: TDataItem) => {\n                    let list = this.get(v.BroadCastType as CommonBroadCastType);\n                    lodash.remove(list, v);\n                    this.set(v.BroadCastType as CommonBroadCastType, list);\n                })\n                .value();\n        }\n    }\n\n    public push(value: TDataItem) {\n        this.parseData(value);\n        const type = value.BroadCastType as CommonBroadCastType;\n        const list = this.get(type, []);\n        if (lodash.isEmpty(list)) {\n            this.set(type, list);\n        }\n        if (list.length >= 20) {\n            list.shift();\n        }\n        list.push(value);\n    }\n\n    private parseData(value: TDataItem) {\n        try {\n            let desc = value.Desc;\n            if (!desc) {\n                return;\n            }\n            let data: {\n                kind: string;\n                level: number;\n            } = JSON.parse(desc);\n\n            if (data.kind === \"vip\") {\n                value.BroadCastType = CommonBroadCastType.VipLevelUp;\n                value.vipLevel = data.level;\n            }\n        } catch {}\n    }\n\n    public popMessage(): TDataItem | undefined {\n        let type = [\n            CommonBroadCastType.VipLevelUp,\n            CommonBroadCastType.CashSuccess,\n            CommonBroadCastType.OnlineReward,\n            CommonBroadCastType.Game,\n        ].find((v) => {\n            return !lodash.isEmpty(this.get(v, null));\n        });\n        let array = lodash.sortBy(this.get(type, []), \"Timestamp\");\n        this.set(type, array);\n        return array?.pop?.() ?? null;\n    }\n}\n","import { UserManager } from \"../../../../../../main/core/user/UserManager\";\nimport { ApiProto } from \"../../service/api/ApiProto\";\nimport ApiMgr from \"../../service/api/ApiMgr\";\nimport { CommonResultType } from \"../define/CommonResultType\";\n\nexport namespace CommonUserInfoUtil {\n    export function updateUserInfo(\n        login = false\n    ): Promise<CommonUser.TLoginResultWithType<ProtoObject<ApiProto.UserInfo>>> {\n        return new Promise((resolve, reject) => {\n            ApiMgr.getInstance()\n                .getUserInfoRequest(login, {\n                    success: (userInfo: ApiProto.UserInfo) => {\n                        const info = userInfo.toObject();\n                        UserManager.getInstance().initUser(info);\n                        resolve({\n                            result: CommonResultType.Success,\n                            content: info,\n                        });\n                    },\n                    error: (err: RespHeader) => {\n                        resolve({\n                            result: CommonResultType.Failed,\n                            content: err,\n                        });\n                    },\n                })\n                .catch((res) => {\n                    if (CC_DEBUG) console.warn(\"updateUserInfo failed\", res);\n                });\n        });\n    }\n\n    export function updateUserBalance(): Promise<\n        CommonUser.TLoginResultWithType<ProtoObject<ApiProto.UserBalance>>\n    > {\n        return new Promise((resolve, reject) => {\n            ApiMgr.getInstance().getUserBalanceRequest({\n                success: (userInfo: ApiProto.UserBalance) => {\n                    const info = userInfo.toObject();\n                    UserManager.getInstance().initUser(info);\n                    resolve({\n                        result: CommonResultType.Success,\n                        content: info,\n                    });\n                },\n                error: (err: RespHeader) => {\n                    resolve({\n                        result: CommonResultType.Failed,\n                        content: err,\n                    });\n                },\n            });\n        });\n    }\n}\n","import CacheObserver from \"../../../../../../main/core/utils/class/CacheObserver\";\nimport { setInstance } from \"../../../../../../main/core/utils/decorators/InstanceClassDecorator\";\nimport { lodash } from \"../../../../../../main/core/utils/NpmExport\";\nimport { Tools } from \"../../../../../../main/core/utils/Tools\";\n\ninterface IUser {\n    previous: number;\n    current: number;\n    count: number;\n}\n\ninterface IData {\n    [userId: string]: Partial<IUser>;\n}\n\n@setInstance\nexport default class CommonUserLastLoginObserver extends CacheObserver<IData> {\n    protected getCacheKey(): string {\n        return \"_user_last_login_time\";\n    }\n\n    private toUserId(userId: number) {\n        return `uid:${userId}`;\n    }\n\n    public loginCount(userId: number) {\n        return lodash.get(this.get(this.toUserId(userId), {}), \"count\", 0);\n    }\n\n    public login(userId: number) {\n        let userData = this.get(this.toUserId(userId), { previous: 0, current: 0, count: 0 });\n\n        let nowTime = Date.now();\n        [userData.previous, userData.current] = [userData.current, nowTime];\n\n        if (userData.previous != 0 && Tools.isToday(userData.previous, userData.current)) {\n            userData.count++;\n        } else {\n            userData.count = 0;\n        }\n        this.set(this.toUserId(userId), userData);\n    }\n}\n","import { Instance } from \"../../../../../../main/core/utils/decorators/InstanceClassDecorator\";\nimport { ApiProto } from \"../../service/api/ApiProto\";\nimport { CommonResultType } from \"../define/CommonResultType\";\nimport CommonUserLoginInfoObserver from \"../obs/CommonUserLoginInfoObserver\";\nimport { CommonAccountUtil } from \"../utils/CommonAccountUtil\";\nimport { CommonUserInfoUtil } from \"../utils/CommonUserInfoUtil\";\nimport CommonUserLoginBase from \"./CommonUserLoginBase\";\n\nexport default class CommonUserLoginAuto extends CommonUserLoginBase<CommonUser.IPasswordLoginOptions> {\n    private userInfo: ProtoObject<ApiProto.UserInfo> = null;\n    protected onLogin(): Promise<CommonUser.ILoginResult> {\n        this.userInfo = null;\n        return CommonUserInfoUtil.updateUserInfo(true).then((data) => {\n            switch (data.result) {\n                case CommonResultType.Success: {\n                    this.userInfo = data.content;\n                    Instance(CommonUserLoginInfoObserver).set({});\n                    break;\n                }\n                case CommonResultType.Failed: {\n                    break;\n                }\n            }\n\n            return data;\n        });\n    }\n\n    protected onLoginSuccess(data: ProtoObject<ApiProto.UserInfo>): Promise<void> {\n        if (\n            this.handlers\n                .map((handler) => handler.onEnterLoginSuccess?.(data) ?? true)\n                .includes(false)\n        ) {\n            return;\n        }\n\n        CommonAccountUtil.updateAccountToLast();\n\n        this.handlers.forEach((handler) => handler.onLoginSuccess?.(data));\n    }\n}\n","import { ApiProto } from \"../../service/api/ApiProto\";\nimport { CommonResultType } from \"../define/CommonResultType\";\nimport { CommonAccountUtil } from \"../utils/CommonAccountUtil\";\nimport { ApiErrorHelper } from \"../../service/api/ApiErrorHelper\";\nimport { lodash } from \"../../../../../../main/core/utils/NpmExport\";\nimport { CommonUserInfoUtil } from \"../utils/CommonUserInfoUtil\";\nimport { ServiceErrorUtils } from \"../../service/service_error/ServiceErrorUtils\";\nimport { AdjustTrack } from \"../../../../../../main/core/track/AdjustTrack\";\nimport { CommonSocketModel } from \"../../../../../../main/core/ws/CommonSocketModel\";\n\nexport interface ISuccessOptions extends ProtoObject<ApiProto.LoginInfo> {\n    isFormal?: boolean;\n}\n\nexport type IFailureOptions = RespHeader\n\nexport interface ILogincHandler {\n    onEnterLoginSuccess?: (data: any) => boolean;\n    onLoginSuccess?: (data: any) => void;\n    onEnterLoginFailure?: (data: any) => boolean;\n    onLoginFailure?: (data: any) => void;\n}\n\nexport default abstract class CommonUserLoginBase<T extends CommonUser.ILoginOptions> {\n    protected options: T = null;\n\n    protected handlers: ILogincHandler[] = [];\n\n    public login(options?: T) {\n        this.options = options;\n        return this.onLogin(options).then(async (response) => {\n            switch (response.result) {\n                case CommonResultType.Success: {\n                    await this.onLoginSuccess(response.content);\n                    break;\n                }\n                case CommonResultType.Failed: {\n                    this.onLoginFailure(response.content);\n                    break;\n                }\n                default: {\n                    if (CC_DEBUG) {\n                        CC_DEBUG && cc.warn(\"login result is unknown\");\n                    }\n                    break;\n                }\n            }\n            return response;\n        });\n    }\n\n    public applyHandler(handler: ILogincHandler) {\n        if (this.handlers.includes(handler)) {\n            return;\n        }\n        this.handlers.push(handler);\n    }\n\n    public removeHandler(handler: ILogincHandler) {\n        lodash.pull(this.handlers, handler);\n    }\n\n    protected abstract onLogin(options: T): Promise<CommonUser.ILoginResult>;\n\n    protected async onLoginSuccess(data: ISuccessOptions) {\n        if (\n            this.handlers\n                .map((handler) => handler.onEnterLoginSuccess?.(data) ?? true)\n                .includes(false)\n        ) {\n            return;\n        }\n\n        CommonDepend.LocalStorageMgr.saveUserDataEvent(data);\n        CommonAccountUtil.updateLastAccount(data.token);\n        CommonSocketModel.getInstance().init();\n        switch (data.newbie_type) {\n            case ApiProto.NewbieType.NB_ANONYMOUS: {\n                AdjustTrack.getInstance().trackEvent(AdjustTrack.getInstance().user_active);\n                break;\n            }\n        }\n\n        return CommonUserInfoUtil.updateUserInfo().then(() => {\n            this.handlers.forEach((handler) => handler.onLoginSuccess?.(data));\n        });\n    }\n\n    protected onLoginFailure(data: IFailureOptions) {\n        if (\n            this.handlers\n                .map((handler) => handler.onEnterLoginFailure?.(data) ?? true)\n                .includes(false)\n        ) {\n            return;\n        }\n\n        this.handlers.forEach((handler) => handler.onLoginFailure?.(data));\n    }\n}\n","import UIMgr from \"../../Component/base/UIMgr\";\nimport CommonLanguage from \"../../conf/lang/CommonLanguage\";\nimport { FormatTestUtil } from \"../../utils/FormatTestUtil\";\n\nexport namespace CommonUserLoginCheckUtil {\n    export function checkAccount(account: string) {\n        if (account && account.length >= 6) {\n            if (FormatTestUtil.containInvaildSymbol(account)) {\n                UIMgr.showToast(CommonLanguage.accountRuleError);\n                return false;\n            }\n            return true;\n        } else {\n            UIMgr.showToast(CommonLanguage.accountRuleShort);\n            return false;\n        }\n    }\n\n    export function checkPassword(password: string) {\n        if (password && password.length >= 6) {\n            if (FormatTestUtil.containInvaildSymbol(password)) {\n                UIMgr.showToast(CommonLanguage.passworldFormot);\n                return false;\n            }\n            return true;\n        } else {\n            UIMgr.showToast(CommonLanguage.passworldLenLimit);\n            return false;\n        }\n    }\n}\n","import { AccountType } from \"../../../../../../main/core/conf/GameEnum\";\n\nimport { ApiProto } from \"../../service/api/ApiProto\";\nimport ApiMgr from \"../../service/api/ApiMgr\";\nimport { CommonResultType } from \"../define/CommonResultType\";\nimport { CommonAccountUtil } from \"../utils/CommonAccountUtil\";\nimport CommonUserLoginBase, { ISuccessOptions } from \"./CommonUserLoginBase\";\nimport CommonUserLoginInfoObserver from \"../obs/CommonUserLoginInfoObserver\";\nimport { Instance } from \"../../../../../../main/core/utils/decorators/InstanceClassDecorator\";\nimport { CommonUserInfoUtil } from \"../utils/CommonUserInfoUtil\";\nimport { ServiceErrorUtils } from \"../../service/service_error/ServiceErrorUtils\";\n\nexport default class CommonUserLoginGuest extends CommonUserLoginBase<CommonUser.ILoginOptions> {\n    protected onLogin(): Promise<CommonUser.ILoginResult> {\n        return new Promise<CommonUser.ILoginResult>((resolve, reject) => {\n            let httpCallBack: IHttpCallback = {\n                success: async (resp: ApiProto.LoginInfo) => {\n                    let data = resp.toObject();\n\n                    resolve({\n                        result: CommonResultType.Success,\n                        content: {\n                            ...data,\n                        },\n                    });\n                    Instance(CommonUserLoginInfoObserver).set(data);\n                    //保存登录的账号\n                    CommonAccountUtil.addAccount(\n                        data.user_id,\n                        data.token,\n                        null,\n                        null,\n                        null,\n                        AccountType.TYPE_GUEST\n                    );\n                },\n                error: (respHeader: RespHeader) => {\n                    resolve({\n                        result: CommonResultType.Failed,\n                        content: respHeader,\n                    });\n                },\n            };\n            let aid = CommonDepend.AppParamManager.getDeviceID();\n            ApiMgr.getInstance()\n                .guestLogin(aid, httpCallBack)\n                .catch(() => {\n                    if (CC_DEBUG) {\n                        CC_DEBUG && cc.warn(\"guest login error\");\n                    }\n                });\n        });\n    }\n    protected onLoginSuccess(data: ISuccessOptions): Promise<void> {\n        return super.onLoginSuccess(data);\n    }\n}\n","import ValueObserver from \"../../../../../../main/core/utils/class/ValueObserver\";\nimport { setInstance } from \"../../../../../../main/core/utils/decorators/InstanceClassDecorator\";\nimport { lodash } from \"../../../../../../main/core/utils/NpmExport\";\nimport { ApiProto } from \"../../service/api/ApiProto\";\n\ntype ILoginInfo = ProtoObject<ApiProto.LoginInfo>\n\n@setInstance\nexport default class CommonUserLoginInfoObserver extends ValueObserver<ILoginInfo> {\n    protected onInit(): ILoginInfo {\n        return {};\n    }\n\n    /**\n     * 自动登录没有登录信息\n     *  */\n    public isAutoLogin() {\n        return !!lodash.isEmpty(this.get());\n    }\n}\n","import { AccountType } from \"../../../../../../main/core/conf/GameEnum\";\nimport { ApiProto } from \"../../service/api/ApiProto\";\nimport ApiMgr from \"../../service/api/ApiMgr\";\nimport { CommonResultType } from \"../define/CommonResultType\";\nimport { CommonAccountUtil } from \"../utils/CommonAccountUtil\";\nimport { CommonUserInfoUtil } from \"../utils/CommonUserInfoUtil\";\nimport CommonUserLoginBase, { ISuccessOptions } from \"./CommonUserLoginBase\";\nimport { Instance } from \"../../../../../../main/core/utils/decorators/InstanceClassDecorator\";\nimport CommonUserLoginInfoObserver from \"../obs/CommonUserLoginInfoObserver\";\nimport { ServiceErrorUtils } from \"../../service/service_error/ServiceErrorUtils\";\n\nexport default class CommonUserLoginPassword extends CommonUserLoginBase<CommonUser.IPasswordLoginOptions> {\n    protected onLogin(options: CommonUser.IPasswordLoginOptions): Promise<CommonUser.ILoginResult> {\n        let account = options?.account ?? CommonAccountUtil.getLastAccount()?.[2];\n        let password = options?.password;\n        return new Promise<CommonUser.ILoginResult>((resolve, reject) => {\n            let httpCallBack: IHttpCallback = {\n                success: async (resp: ApiProto.LoginInfo) => {\n                    let data = resp.toObject();\n                    resolve({\n                        result: CommonResultType.Success,\n                        content: {\n                            ...data,\n                        },\n                    });\n                    Instance(CommonUserLoginInfoObserver).set(data);\n                    CommonAccountUtil.addAccount(\n                        data.user_id,\n                        data.token,\n                        account,\n                        password,\n                        null,\n                        AccountType.TYPE_ACCOUNT\n                    );\n                },\n                error: (respHeader: RespHeader) => {\n                    resolve({\n                        result: CommonResultType.Failed,\n                        content: respHeader,\n                    });\n                },\n            };\n            ApiMgr.getInstance()\n                .passwordLogin(account, password, httpCallBack)\n                .catch(() => {\n                    if (CC_DEBUG) {\n                        CC_DEBUG && cc.warn(\"password login error\");\n                    }\n                });\n        });\n    }\n    protected onLoginSuccess(data: ISuccessOptions): Promise<void> {\n        return super.onLoginSuccess(data);\n    }\n}\n","import { GameType } from \"../../../../../../main/core/conf/GameType\";\nimport { UserManager } from \"../../../../../../main/core/user/UserManager\";\nimport { Instance } from \"../../../../../../main/core/utils/decorators/InstanceClassDecorator\";\nimport { SceneControl } from \"../../SceneControl\";\nimport Switch from \"../../Switch\";\nimport UniverseSocketMgr from \"../../universe/UniverseSocketMgr\";\nimport { BlackIpUtil } from \"../../utils/BlackIpUtil\";\nimport CommonUserLastLoginObserver from \"../obs/CommonUserLastLoginObserver\";\n\nexport namespace CommonUserLoginUiUtil {\n    export function launchHall() {\n        Switch.needTriggerHallStartupChain = true;\n        Instance(CommonUserLastLoginObserver).login(UserManager.getInstance().user_id);\n        //有无在黑名单;\n        if (BlackIpUtil.chcekIsInBlackList(false)) return;\n        UniverseSocketMgr.onAuthReq();\n        return SceneControl.getInstance().launchScene(GameType.LOGIN);\n    }\n}\n","import PopUpViewBase from \"../../../../../main/core/popUpViewUtils/PopUpViewBase\";\nimport { lodash } from \"../../../../../main/core/utils/NpmExport\";\nimport EnumActive from \"../../../../../main/core/ui/component/EnumActive\";\nimport { AudioManager } from \"../../../../../main/core/audio/AudioManager\";\nimport CommonLanguage from \"../conf/lang/CommonLanguage\";\nimport CommonStorageMgr from \"../Storage/CommonStorageMgr\";\nimport { Instance } from \"../../../../../main/core/utils/decorators/InstanceClassDecorator\";\nimport CommonNetworkSwitchObserver from \"../obs/CommonNetworkSwitchObserver\";\nimport Listener from \"../../../../../main/core/utils/Listener\";\nimport CommonEventName from \"../CommonEventName\";\nimport { PlayButtonSoundUtils } from \"../../../../../main/core/utils/playButtonSoundUtils/PlayButtonSoundUtils\";\nimport { H5Page } from \"../h5/H5Page\";\nimport MultLangLabel from \"../../../../../main/core/ui/component/mult_lang/MultLangLabel\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class CommonUserSetting extends PopUpViewBase {\n    @property({ type: MultLangLabel, displayName: \"\" })\n    versionLb: MultLangLabel = null;\n    protected start(): void {\n        this._content.getChildByName(\"layout\").children.forEach((item) => {\n            let func = this[`on${lodash.capitalize(item.name)}BtnClicked`];\n            let initFunc = this[`get${lodash.capitalize(item.name)}State`];\n            let toggle = item.getChildByName(\"toggle\");\n            let toggleComp = toggle.getComponent(EnumActive);\n            PlayButtonSoundUtils.getInstance().addPlaySoundComp(toggle);\n            toggleComp.show4Name(initFunc?.() ?? \"off\");\n            toggle.addComponent(cc.Button);\n            toggle.on(\n                \"click\",\n                () => {\n                    toggleComp.show4Name(toggleComp.currentName == \"off\" ? \"on\" : \"off\");\n                    func?.(toggleComp.currentName);\n                },\n                this\n            );\n        });\n\n        this.versionLb.object = {\n            value: CommonDepend.ProjectInfo.GAME_VERSION_V,\n        };\n        cc.find(\"content/layout/activity\", this.node).active = Instance(\n            CommonNetworkSwitchObserver\n        ).getSwitch(\"activity_center\");\n    }\n\n    protected getMusicState() {\n        return AudioManager.getInstance().isMusicOpen() ? \"on\" : \"off\";\n    }\n\n    protected onMusicBtnClicked(state: \"off\" | \"on\"): void {\n        AudioManager.getInstance().setMusicOpen(state == \"on\" ? true : false);\n    }\n\n    protected getEffectState() {\n        return AudioManager.getInstance().isEffectOpen() ? \"on\" : \"off\";\n    }\n    protected onEffectBtnClicked(state: \"off\" | \"on\"): void {\n        AudioManager.getInstance().setEffectOpen(state == \"on\" ? true : false);\n    }\n\n    protected getActivityState() {\n        return CommonStorageMgr.getInstance().readActivityReminderShowState() ? \"on\" : \"off\";\n    }\n\n    protected onActivityBtnClicked(state: \"off\" | \"on\"): void {\n        CommonStorageMgr.getInstance().saveActivityReminderShowState(state);\n    }\n\n    private onClickCloseBtn() {\n        let showState: boolean = CommonStorageMgr.getInstance().readActivityReminderShowState();\n        Listener.emit(CommonEventName.ACTIVITY_REMINDER_SHOW_STATE, showState);\n        this.close();\n    }\n\n    onPrivacyClicked() {\n        H5Page.onPrivacyClicked();\n    }\n    onTermsClicked() {\n        H5Page.onTermsClicked();\n    }\n    onRefundClicked() {\n        H5Page.onRefundClicked();\n    }\n    onAboutClicked() {\n        H5Page.onAboutClicked();\n    }\n}\n","import { GameType } from \"../../../../../main/core/conf/GameType\";\nimport UIMgr from \"../Component/base/UIMgr\";\nimport CommonSkin from \"../conf/skin/CommonSkin\";\nimport { SceneControl } from \"../SceneControl\";\nimport { ApiProto } from \"../service/api/ApiProto\";\nimport { CommonResultType } from \"./define/CommonResultType\";\nimport CommonUserLoginAuto from \"./login/CommonUserLoginAuto\";\nimport { ILogincHandler } from \"./login/CommonUserLoginBase\";\nimport CommonUserLoginGuest from \"./login/CommonUserLoginGuest\";\nimport CommonUserLoginPassword from \"./login/CommonUserLoginPassword\";\nimport { CommonUserInfoUtil } from \"./utils/CommonUserInfoUtil\";\nimport ApiMgr from \"../service/api/ApiMgr\";\nexport namespace CommonUserUtil {\n    let _passwordLogin: CommonUserLoginPassword = new CommonUserLoginPassword();\n    let _guestLogin: CommonUserLoginGuest = new CommonUserLoginGuest();\n    let _autoLogin: CommonUserLoginAuto = new CommonUserLoginAuto();\n\n    interface ILoginOption<T> {\n        success?: (data: T) => void;\n        error?: (data: RespHeader) => boolean;\n    }\n\n    export async function checkReferId(id: number) {\n        try {\n            return await ApiMgr.getInstance().promoterVerifyReferId(id);\n        } catch {\n            return false;\n        }\n    }\n\n    //更新用户金额\n    export function updateUserBalance() {\n        return CommonUserInfoUtil.updateUserBalance().then((data) => {\n            if (data.result === CommonResultType.Success) {\n                return true;\n            } else {\n                return false;\n            }\n        });\n    }\n\n    let updateTime = 0;\n\n    //更新用户信息\n    export function updateUserInfo() {\n        let nowTime = Date.now();\n        if (nowTime - updateTime > 1000) {\n            updateTime = nowTime;\n            return CommonUserInfoUtil.updateUserInfo(false).then((data) => {\n                if (data.result === CommonResultType.Success) {\n                    return true;\n                } else {\n                    return false;\n                }\n            });\n        }\n    }\n\n    export function guestLogin(options?: ILoginOption<ProtoObject<ApiProto.LoginInfo>>) {\n        let handler: ILogincHandler = {\n            onLoginSuccess: options?.success,\n            onEnterLoginFailure: options?.error,\n        };\n\n        _guestLogin.applyHandler(handler);\n        return _guestLogin.login().then((ret) => {\n            _guestLogin.removeHandler(handler);\n            if (ret.result === CommonResultType.Success) {\n                return ret.content;\n            } else {\n                throw ret.content;\n            }\n        });\n    }\n\n    export function passwordLogin(\n        options?: CommonUser.IPasswordLoginOptions & ILoginOption<ProtoObject<ApiProto.LoginInfo>>\n    ) {\n        let handler: ILogincHandler = {\n            onLoginSuccess: options?.success,\n            onEnterLoginFailure: options?.error,\n        };\n\n        _passwordLogin.applyHandler(handler);\n        return _passwordLogin.login(options).then((ret) => {\n            _passwordLogin.removeHandler(handler);\n            if (ret.result === CommonResultType.Success) {\n                return ret.content;\n            } else {\n                throw ret.content;\n            }\n        });\n    }\n\n    export function autoLogin(options: ILoginOption<ApiProto.UserInfo> = {}) {\n        let handler: ILogincHandler = {\n            onLoginSuccess: options?.success,\n            onEnterLoginFailure: options?.error,\n        };\n\n        _autoLogin.applyHandler(handler);\n        return _autoLogin.login().then((ret) => {\n            _autoLogin.removeHandler(handler);\n            if (ret.result === CommonResultType.Success) {\n                return ret.content;\n            } else {\n                throw ret.content;\n            }\n        });\n    }\n\n    export function logout() {\n        CommonDepend.UserManager.clearAccount();\n        CommonDepend.UserManager.clearAvailableAvatar();\n        CommonDepend.LocalStorageMgr.clearNewAvatarId();\n        CommonDepend.LocalStorageMgr.clearUserLoginData();\n        SceneControl.getInstance().launchScene(GameType.LOGIN);\n    }\n}\n","export const Z_ORDER = {\n    DIALOG: 500,\n    TOAST: 8000,\n};\n","import { AudioManager } from \"../../../../../main/core/audio/AudioManager\";\nimport CommonSkin from \"../conf/skin/CommonSkin\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class CountDownTimer extends cc.Component {\n    @property(cc.Label)\n    timerLabel: cc.Label = null;\n\n    @property([cc.String])\n    animName: string[] = [\"clock_bg\", \"loop\"];\n\n    @property(cc.String)\n    boneName: string = \"text\";\n\n    private _skeleton: sp.Skeleton = null;\n    private _currBone = null;\n    private _duration: number = 0;\n    private _endCb: Function = null;\n\n    protected onLoad(): void {\n        this._skeleton = this.node.getComponent(sp.Skeleton);\n        this._currBone = this._skeleton.findBone(this.boneName);\n        this.node && (this.node.opacity = 0);\n    }\n\n    public startTimer(duration, endCountDownCallBack): void {\n        if (duration <= 0) {\n            if (endCountDownCallBack && typeof endCountDownCallBack == \"function\") {\n                endCountDownCallBack();\n            }\n            return;\n        }\n\n        this.node && (this.node.opacity = 255);\n        this._duration = duration;\n        this._endCb = endCountDownCallBack;\n\n        if (this._duration <= 5) {\n            this._skeleton?.setAnimation(0, this.animName[1], false);\n            AudioManager.getInstance().playEffect(CommonSkin.LoadOnDemand.CountDown, false, 1);\n        } else {\n            if (this.animName[0] == \"\") {\n                let track = this._skeleton?.setAnimation(0, this.animName[1], false);\n                track && (track.trackTime = track.animationEnd);\n            } else {\n                this._skeleton?.setAnimation(0, this.animName[0], false);\n            }\n        }\n        this.timerLabel && (this.timerLabel.string = this._duration.toFixed());\n        this.unschedule(this.running_process);\n        this.schedule(this.running_process, 1, this._duration);\n    }\n\n    public stopTimer(): void {\n        this._endCb = null;\n        this._duration = 0;\n        this.node && (this.node.opacity = 0);\n        this.unschedule(this.running_process);\n    }\n\n    private running_process() {\n        this._duration--;\n        if (this._duration <= 0) {\n            this.unschedule(this.running_process);\n            if (this._endCb && typeof this._endCb == \"function\") {\n                this._endCb();\n            }\n            return;\n        }\n        this.timerLabel && (this.timerLabel.string = this._duration.toFixed());\n        if (this._duration <= 5) {\n            this._skeleton?.setAnimation(0, this.animName[1], false);\n            AudioManager.getInstance().playEffect(CommonSkin.LoadOnDemand.CountDown, false, 1);\n        }\n    }\n\n    protected update(dt: number): void {\n        if (this._duration <= 0) {\n            return;\n        }\n        if (!this._currBone || !this.timerLabel) {\n            return;\n        }\n        this.timerLabel.node.setPosition(this._currBone.worldX, this._currBone.worldY);\n        this.timerLabel.node.scaleX = this._currBone.scaleX;\n        this.timerLabel.node.scaleY = this._currBone.scaleY;\n    }\n}\n","import { MoneyUtil } from \"../../../../../../main/core/utils/MoneyUtil\";\nimport { numeral } from \"../../../../../../main/core/utils/NpmExport\";\n\n/**\n * 巴西\n */\nexport namespace CurrencyBRL {\n    /**\n     * 超过999999以M为单位，不显示千分位，带小数\n     * 捕鱼新手场3位，其余2位\n     * @param money\n     */\n    export function formatMoney(money: number, digit?: number): string {\n        if (money >= 1000000) {\n            money = money / 1000000;\n            if (digit == 3) {\n                return Math.floor(money * 1000) / 1000 + \"M\";\n            } else {\n                return MoneyUtil.getInstance().keepDigitPrecision(money) + \"M\";\n            }\n        } else {\n            if (digit == 3) {\n                return MoneyUtil.getInstance().keepDigitPrecision(money, 3);\n            } else {\n                return MoneyUtil.getInstance().keepDigitPrecision(money);\n            }\n        }\n    }\n}\n","import { numeral } from \"../../../../../../main/core/utils/NpmExport\";\n\n/**\n * 印尼\n */\nexport namespace CurrencyIDR {\n    /**\n     * @param money\n     */\n    export function formatMoney(money: number): string {\n        return \"\";\n    }\n}\n","import { MoneyUtil } from \"../../../../../../main/core/utils/MoneyUtil\";\n\n/**\n * 印度\n */\nexport namespace CurrencyINR {\n    /**\n     * 超过999999以M为单位，不显示千分位，带小数\n     * @param money\n     */\n    export function formatMoney(money: number): string {\n        if (money >= 10000000) {\n            money = money / 10000000;\n            return MoneyUtil.getInstance().keepDigitPrecision(money) + \"Cr\";\n        } else {\n            return MoneyUtil.getInstance().keepDigitPrecision(money);\n        }\n    }\n\n    export function formatChipMoney(money: number): string {\n        if (money >= 10000000) {\n            money = money / 10000000;\n            return MoneyUtil.getInstance().keepDigitPrecision(money) + \"Cr\";\n        } else if (money >= 10000) {\n            money = money / 1000;\n            return MoneyUtil.getInstance().keepDigitPrecision(money) + \"K\";\n        } else {\n            return MoneyUtil.getInstance().keepDigitPrecision(money).toString();\n        }\n    }\n}\n","import Flavor from \"../../../../../main/core/conf/Flavor\";\nimport { MoneyUtil } from \"../../../../../main/core/utils/MoneyUtil\";\nimport { CurrencyBRL } from \"./currency/CurrencyBRL\";\nimport { CurrencyINR } from \"./currency/CurrencyINR\";\nimport { CurrencyVND } from \"./currency/CurrencyVND\";\n\nexport namespace CurrencyUtil {\n    /**\n     * 通用逻辑\n     * 越南盾：超过999,999以M为单位/超过999以K为单位，显示千分位，带小数\n     * 巴西币：超过999999以M为单位，不显示千分位，带小数（捕鱼新手场3位，其余2位）\n     * 印度卢比：超过9999999.99以Cr为单位，不显示千分位，带小数\n     * @param money\n     */\n    export function formatMoney(money: number, digit?: number): string {\n        if (money < 0) return money.toString();\n        money = MoneyUtil.getInstance().liToYuan(money);\n        if (Flavor.Skin.isBall()) {\n            return CurrencyVND.formatMoney(money);\n        } else if (Flavor.Skin.isWorldCup()) {\n            return CurrencyBRL.formatMoney(money, digit);\n        } else if (Flavor.Skin.isLight()) {\n            return CurrencyINR.formatMoney(money);\n        }\n    }\n\n    /**\n     * 筹码逻辑\n     * 越南盾：跟formatMoney一样\n     * 巴西币：跟formatMoney一样\n     * 印度卢比：超过9999999.99以Cr为单位，筹码超过9999以K位单位\n     * @param money\n     */\n    export function formatChipMoney(money: number, digit?: number): string {\n        if (money < 0) return \"0\";\n        money = MoneyUtil.getInstance().liToYuan(money);\n        if (Flavor.Skin.isBall()) {\n            return CurrencyVND.formatMoney(money);\n        } else if (Flavor.Skin.isWorldCup()) {\n            return CurrencyBRL.formatMoney(money, digit);\n        } else if (Flavor.Skin.isLight()) {\n            return CurrencyINR.formatChipMoney(money);\n        }\n    }\n\n    /**\n     * 通用逻辑（仅用于金币，即 1:1）\n     * 越南盾：超过999,999以M为单位/超过999以K为单位，显示千分位，带小数\n     * 巴西币：超过999999以M为单位，不显示千分位，带小数（捕鱼新手场3位，其余2位）\n     * 印度卢比：超过9999999.99以Cr为单位，不显示千分位，带小数\n     * @param money\n     */\n    export function formatGold(money: number, digit?: number): string {\n        if (money < 0) return \"0\";\n        if (Flavor.Skin.isBall()) {\n            return CurrencyVND.formatMoney(money);\n        } else if (Flavor.Skin.isWorldCup()) {\n            return CurrencyBRL.formatMoney(money, digit);\n        } else if (Flavor.Skin.isLight()) {\n            return CurrencyINR.formatMoney(money);\n        }\n    }\n}\n","import { MoneyUtil } from \"../../../../../../main/core/utils/MoneyUtil\";\n\n/**\n * 越南\n */\nexport namespace CurrencyVND {\n    /**\n     * 超过999,999以M为单位/超过999以K为单位，显示千分位，带小数\n     * @param money\n     */\n    export function formatMoney(money: number): string {\n        if (money >= 1000000) {\n            money = MoneyUtil.getInstance().roundDown(money);\n            return MoneyUtil.getInstance().toThousandthsPass999999WithMWithD(money);\n        } else if (money >= 1000) {\n            money = MoneyUtil.getInstance().roundDown(money);\n            return MoneyUtil.getInstance().toThousandthsPass999WithKWithD(money);\n        } else {\n            return money.toString();\n        }\n    }\n\n    /**\n     * 超过999,999,999使用B为单位,超过999999使用M为单位，并输出千分位格式, 带小数\n     * @param money\n     */\n    export function formatMoneyPass999999999WithB(money) {\n        if (money > 999999999) {\n            money = MoneyUtil.getInstance().roundDown(money);\n            return MoneyUtil.getInstance().toThousandthsPass999999999WithB(money);\n        } else if (money > 999999) {\n            money = MoneyUtil.getInstance().roundDown(money);\n            return MoneyUtil.getInstance().toThousandthsPass999999WithMWithD(money);\n        } else {\n            return this.formatShortMoney(money);\n        }\n    }\n\n    /**\n     * 超过999,999使用M为单位，并输出千分位格式, 带小数\n     * @param money\n     */\n    export function formatMoneyPass999999WithM(money) {\n        if (money > 999999) {\n            money = MoneyUtil.getInstance().roundDown(money);\n            return MoneyUtil.getInstance().toThousandthsPass999999WithMWithD(money);\n        } else {\n            return this.formatShortMoney(money);\n        }\n    }\n\n    /**\n     * 超过999,999,999使用M为单位，并输出千分位格式, 保留小数点后两位\n     * 小于等于999,999,999时，不需要带K\n     * @param money\n     */\n    export function formatMoneyForCount(money) {\n        if (money > 999999999) {\n            money = MoneyUtil.getInstance().roundDown(money);\n            return MoneyUtil.getInstance().toThousandthsPass999999999WithM(money);\n        } else {\n            return this.formatWithoutK(money);\n        }\n    }\n\n    /**\n     * 超过999,999,999使用M为单位，并输出千分位格式, 保留小数点后两位\n     * * 超过999,999时使用K为单位\n     * @param money\n     */\n    export function formatMoneyForAmount(money) {\n        if (money > 999999999) {\n            money = MoneyUtil.getInstance().roundDown(money);\n            return MoneyUtil.getInstance().toThousandthsPass999999999WithM(money);\n        } else {\n            return this.formatLongMoney(money);\n        }\n    }\n\n    /**\n     * 功能：个人中心、大廳、闪告、Slots余额、捕鱼余额、補魚-擊殺分、補魚-特殊結算、補魚-BigWin、\n     *      棋牌百人场余额|区域总射击 、棋牌百人场个人射击 、棋牌-在线列表余额、棋牌-台桌輪贏、\n     *      Master 、垃圾桶&兑换时输入的金额、垃圾桶余额、垃圾桶推荐存钱档位\n     * 逻辑：顯示位數含千分位，超过999,999使用K为单位、Master 界面推荐Master 档位，不带小数\n     */\n    export function formatLongMoney(money: number) {\n        money = MoneyUtil.getInstance().roundDown(money);\n        return MoneyUtil.getInstance().toThousandthsPass999999WithK(money);\n    }\n\n    /**\n     * 功能：个人中心\n     * 逻辑：展示位数含千分位，不使用K为单位\n     */\n    export function toThousandthsPass999(money) {\n        money = MoneyUtil.getInstance().roundDown(money);\n        return MoneyUtil.getInstance().toThousandthsPass999(money);\n    }\n\n    /**\n     * 功能：棋牌-籌碼、捕鱼房间列表\n     * 逻辑：顯示位數含千分位，超过999使用K为单位，不带小数\n     */\n    export function formatShortMoney(money) {\n        money = MoneyUtil.getInstance().roundDown(money);\n        return MoneyUtil.getInstance().toThousandthsPass999WithK(money);\n    }\n\n    /**\n     * 功能：棋牌-籌碼\n     * 逻辑：超过999使用K为单位，不展示千分位，不带小数\n     */\n    export function formatChipMoney(money) {\n        money = MoneyUtil.getInstance().roundDown(money);\n        return MoneyUtil.getInstance().to999WithK(money);\n    }\n\n    /**\n     * 功能：棋牌-籌碼、捕鱼房间列表\n     * 逻辑：顯示位數含千分位，超过999使用K为单位，向上取整，不带小数\n     */\n    export function formatRoundUpMoney(money) {\n        money = MoneyUtil.getInstance().roundUp(money);\n        return MoneyUtil.getInstance().toRoundUpThousandthsPass999WithK(money);\n    }\n\n    /**\n     * 功能：Slot-注額、Slot-線分、Slot-贏分、Slot-FG結算、Slot-BigWin、補魚-注額\n     * 逻辑：顯示位數含千分位，不带K，不带小数\n     */\n    export function formatWithoutK(money) {\n        money = MoneyUtil.getInstance().roundDown(money);\n        return MoneyUtil.getInstance().toThousandths(money);\n    }\n\n    /**\n     * 功能：将千分位转回原始金额\n     */\n    export function toMoney(thousandths) {\n        return MoneyUtil.getInstance().toMoney(thousandths);\n    }\n\n    /**\n     * 棋牌百人场余额|区域总射击\n     */\n    export function showGoldForBrcBalance(amount) {\n        return this.formatLongMoney(amount);\n    }\n}\n","import Listener from \"../../../../main/core/utils/Listener\";\nimport CommonEventName from \"./CommonEventName\";\n\nconst DEFALUT_NAVITEM_INDEX: string = \"0\";\n\nexport class DataCacheMgr {\n    private static _instance: DataCacheMgr = null;\n\n    private loginBonusData: ILoginBonusData = null;\n    /** 记录大厅导航item索引 默认为\"0\"*/\n    private navItemIndex: string = DEFALUT_NAVITEM_INDEX;\n\n    public static getInstance() {\n        if (!this._instance) {\n            this._instance = new DataCacheMgr();\n        }\n\n        return this._instance;\n    }\n\n    private constructor() {}\n\n    public setLoginBonusData(loginBonusData: ILoginBonusData) {\n        this.loginBonusData = loginBonusData;\n        Listener.send(CommonEventName.LOGIN_BONUS_MSG, this.loginBonusData);\n    }\n\n    public getLoginBonusData() {\n        return this.loginBonusData;\n    }\n\n    public clearLoginBonusData() {\n        this.loginBonusData = null;\n    }\n\n    public setNavItemIndex(index: string) {\n        this.navItemIndex = index;\n    }\n\n    public getNavItemIndex(): string {\n        return this.navItemIndex;\n    }\n\n    public initDataCache() {\n        this.setNavItemIndex(DEFALUT_NAVITEM_INDEX);\n    }\n}\n","import { GameType } from \"../../../../../../../main/core/conf/GameType\";\nimport { lodash } from \"../../../../../../../main/core/utils/NpmExport\";\nimport BaseSocketAttachment from \"./BaseSocketAttachment\";\n\nexport default class DebugLogAttachment extends BaseSocketAttachment {\n    public tag: string = \"log\";\n\n    public onMessage(data: Socket.TMessageObject<number, any>): void {\n        let date = new Date();\n        CC_DEBUG && cc.log(\n            `%c[${date.toLocaleString()}:${date.getMilliseconds()}] <socket> gameId: >${\n                GameType[this.options.gameId]\n            }< on=> Id:${data.msgId}->${data?.ctor?.name ?? \"Unknown\"} \\n`,\n            \"color:#a5a\",\n            lodash.cloneDeep(data.msgData)\n        );\n    }\n\n    public onSendMessage(msgType: number, data: Socket.IMessageClass): void {\n        if (!msgType) {\n            return;\n        }\n        let date = new Date();\n        CC_DEBUG && cc.log(\n            `%c[${date.toLocaleString()}:${date.getMilliseconds()}] <socket> gameId:>${\n                GameType[this.options.gameId]\n            }< send=> Id:${msgType}->${data?.[\"constructor\"]?.name ?? \"Unknown\"} \\n`,\n            \"color:#f0f\",\n            lodash.cloneDeep(data?.toObject?.())\n        );\n    }\n}\n","import DropDown from \"./DropDown\";\n\nconst { ccclass, property } = cc._decorator;\n@ccclass()\nexport default class DropDownItem extends cc.Component {\n    @property(cc.Label)\n    public label: cc.Label = undefined;\n    @property(cc.Sprite)\n    public sprite: cc.Sprite = undefined;\n    @property(cc.Toggle)\n    public toggle: cc.Toggle = undefined;\n}\n","const { ccclass, property } = cc._decorator;\n\n@ccclass(\"DropDownOptionData\")\nexport default class DropDownOptionData {\n    @property(cc.String)\n    public optionString: string = \"\";\n    @property(cc.SpriteFrame)\n    public optionSf: cc.SpriteFrame = undefined;\n}\n","import DropDownOptionData from \"./DropDownOptionData\";\nimport DropDownItem from \"./DropDownItem\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass()\nexport default class DropDown extends cc.Component {\n    @property(cc.Node)\n    private template: cc.Node = undefined;\n    @property(cc.Label)\n    protected labelCaption: cc.Label = undefined;\n    @property(cc.Sprite)\n    private spriteCaption: cc.Sprite = undefined;\n    @property(cc.Label)\n    private labelItem: cc.Label = undefined;\n    @property(cc.Sprite)\n    private spriteItem: cc.Sprite = undefined;\n\n    @property([DropDownOptionData])\n    optionDatas: DropDownOptionData[] = [];\n\n    @property(cc.Node)\n    comboxTiggerNode: cc.Node = null;\n\n    private _dropDown: cc.Node;\n    private validTemplate: boolean = false;\n    private items: DropDownItem[] = [];\n    private isShow: boolean = false;\n\n    private _selectedIndex: number = -1;\n    public get selectedIndex(): number {\n        return this._selectedIndex;\n    }\n    public set selectedIndex(value: number) {\n        this._selectedIndex = value;\n        this.refreshShownValue();\n    }\n\n    public addOptionDatas(optionDatas: DropDownOptionData[]) {\n        optionDatas &&\n            optionDatas.forEach((data) => {\n                this.optionDatas.push(data);\n            });\n        this.refreshShownValue();\n    }\n\n    public clearOptionDatas() {\n        cc.js.clear(this.optionDatas);\n        this.refreshShownValue();\n    }\n\n    public show() {\n        if (!this.validTemplate) {\n            this.setUpTemplate();\n            if (!this.validTemplate) {\n                return;\n            }\n        }\n\n        if (this.optionDatas.length <= 1) return;\n\n        this.isShow = true;\n\n        this._dropDown = this.createDropDownList(this.template);\n        this._dropDown.name = \"DropDown List\";\n        this._dropDown.active = true;\n        this._dropDown.setParent(this.template.parent);\n\n        let itemTemplate = this._dropDown.getComponentInChildren<DropDownItem>(DropDownItem);\n        let content = itemTemplate.node.parent;\n        itemTemplate.node.active = true;\n\n        cc.js.clear(this.items);\n\n        for (let i = 0, len = this.optionDatas.length; i < len; i++) {\n            let data = this.optionDatas[i];\n            let item: DropDownItem = this.addItem(\n                data,\n                i == this.selectedIndex,\n                itemTemplate,\n                this.items\n            );\n            if (!item) {\n                continue;\n            }\n            item.toggle.isChecked = i == this.selectedIndex;\n            item.toggle.node.on(\"toggle\", this.onSelectedItem, this);\n            // if(i == this.selectedIndex){\n            //     this.onSelectedItem(item.toggle);\n            // }\n        }\n        itemTemplate.node.active = false;\n\n        content.height = itemTemplate.node.height * this.optionDatas.length;\n\n        if (this.comboxTiggerNode) {\n            this.comboxTiggerNode.rotation = 180;\n        }\n    }\n\n    private addItem(\n        data: DropDownOptionData,\n        selected: boolean,\n        itemTemplate: DropDownItem,\n        dropDownItems: DropDownItem[]\n    ): DropDownItem {\n        let item = this.createItem(itemTemplate);\n        item.node.setParent(itemTemplate.node.parent);\n        item.node.active = true;\n        item.node.name = `item_${this.items.length + data.optionString ? data.optionString : \"\"}`;\n        if (item.toggle) {\n            item.toggle.isChecked = false;\n        }\n        if (item.label) {\n            item.label.string = data.optionString;\n        }\n        if (item.sprite) {\n            item.sprite.spriteFrame = data.optionSf;\n            item.sprite.enabled = data.optionSf != undefined;\n        }\n        this.items.push(item);\n        return item;\n    }\n\n    public hide() {\n        this.isShow = false;\n        if (this._dropDown != undefined) {\n            this.delayedDestroyDropdownList(0.15);\n        }\n\n        if (this.comboxTiggerNode) {\n            this.comboxTiggerNode.rotation = 0;\n        }\n    }\n\n    public closeList() {\n        if (!this._dropDown) return;\n        let itemTemplate = this._dropDown.getComponentInChildren<DropDownItem>(DropDownItem);\n        itemTemplate.node.active = false;\n    }\n\n    private async delayedDestroyDropdownList(delay: number) {\n        // await WaitUtil.waitForSeconds(delay);\n        // wait delay;\n        for (let i = 0, len = this.items.length; i < len; i++) {\n            if (this.items[i] != undefined) this.destroyItem(this.items[i]);\n        }\n        cc.js.clear(this.items);\n        if (this._dropDown != undefined) this.destroyDropDownList(this._dropDown);\n        this._dropDown = undefined;\n    }\n\n    private destroyItem(item) {}\n\n    // 设置模板，方便后面item\n    private setUpTemplate() {\n        this.validTemplate = false;\n\n        if (!this.template) {\n            CC_DEBUG && cc.error(\n                \"The dropdown template is not assigned. The template needs to be assigned and must have a child GameObject with a Toggle component serving as the item\"\n            );\n            return;\n        }\n        this.template.active = true;\n        let itemToggle: cc.Toggle = this.template.getComponentInChildren<cc.Toggle>(cc.Toggle);\n        this.validTemplate = true;\n        // 一些判断\n        if (!itemToggle || itemToggle.node == this.template) {\n            this.validTemplate = false;\n            CC_DEBUG && cc.error(\n                \"The dropdown template is not valid. The template must have a child Node with a Toggle component serving as the item.\"\n            );\n        } else if (this.labelItem != undefined && !this.labelItem.node.isChildOf(itemToggle.node)) {\n            this.validTemplate = false;\n            CC_DEBUG && cc.error(\n                \"The dropdown template is not valid. The Item Label must be on the item Node or children of it.\"\n            );\n        } else if (\n            this.spriteItem != undefined &&\n            !this.spriteItem.node.isChildOf(itemToggle.node)\n        ) {\n            this.validTemplate = false;\n            CC_DEBUG && cc.error(\n                \"The dropdown template is not valid. The Item Sprite must be on the item Node or children of it.\"\n            );\n        }\n\n        if (!this.validTemplate) {\n            this.template.active = false;\n            return;\n        }\n        let item = itemToggle.node.addComponent<DropDownItem>(DropDownItem);\n        item.label = this.labelItem;\n        item.sprite = this.spriteItem;\n        item.toggle = itemToggle;\n        item.node = itemToggle.node;\n\n        this.template.active = false;\n        this.validTemplate = true;\n    }\n\n    // 刷新显示的选中信息\n    private refreshShownValue() {\n        if (this.optionDatas.length <= 0) {\n            return;\n        }\n\n        let data = this.optionDatas[this.clamp(this.selectedIndex, 0, this.optionDatas.length - 1)];\n        if (this.labelCaption) {\n            if (data && data.optionString) {\n                this.labelCaption.string = data.optionString;\n            } else {\n                this.labelCaption.string = \"\";\n            }\n        }\n        if (this.spriteCaption) {\n            if (data && data.optionSf) {\n                this.spriteCaption.spriteFrame = data.optionSf;\n            } else {\n                this.spriteCaption.spriteFrame = undefined;\n            }\n            this.spriteCaption.enabled = this.spriteCaption.spriteFrame != undefined;\n        }\n    }\n\n    protected createDropDownList(template: cc.Node): cc.Node {\n        return cc.instantiate(template);\n    }\n\n    protected destroyDropDownList(dropDownList: cc.Node) {\n        dropDownList.destroy();\n    }\n\n    protected createItem(itemTemplate: DropDownItem): DropDownItem {\n        let newItem = cc.instantiate(itemTemplate.node);\n        return newItem.getComponent<DropDownItem>(DropDownItem);\n    }\n\n    /** 当toggle被选中 */\n    private onSelectedItem(toggle: cc.Toggle) {\n        let parent = toggle.node.parent;\n        for (let i = 0; i < parent.childrenCount; i++) {\n            if (parent.children[i] == toggle.node) {\n                // Subtract one to account for template child.\n                this.selectedIndex = i - 1;\n                break;\n            }\n        }\n        this.hide();\n    }\n\n    private onClick() {\n        if (!this.isShow) {\n            this.show();\n        } else {\n            this.hide();\n        }\n    }\n\n    start() {\n        this.template.active = false;\n        this.refreshShownValue();\n    }\n\n    onEnable() {\n        this.node.on(\"touchend\", this.onClick, this);\n    }\n\n    onDisable() {\n        this.node.off(\"touchend\", this.onClick, this);\n    }\n\n    private clamp(value: number, min: number, max: number): number {\n        if (value < min) return min;\n        if (value > max) return max;\n        return value;\n    }\n}\n","const { ccclass, property } = cc._decorator;\n\nimport DynamicMounNodeUtil from \"./DynamicMounNodeUtil\";\n\n@ccclass\nexport default class DynamicMounNodeComponent extends cc.Component {\n\n    @property(cc.Node)\n    spSkeletonNode: cc.Node = null;\n    _spSkeleton: sp.Skeleton = null;\n\n    _DynamicMounNodeUtil = null;\n\n    _mounNode = null;\n    _boneName = null;\n\n    _playingAnim = false;\n\n    onLoad() {\n        let self = this;\n        self._spSkeleton = self.spSkeletonNode.getComponent(sp.Skeleton);\n        self._playingAnim = false;\n        self._DynamicMounNodeUtil = new DynamicMounNodeUtil(self.spSkeletonNode);\n    }\n\n    startSkeletonAnimation(mounNode, skeletonAnimName, boneName, completeListener, addEventListener = null) {\n        let self = this;\n        if (!self._spSkeleton) {\n            return;\n        }\n        self._mounNode = mounNode;\n        self._boneName = boneName;\n        self._playingAnim = true;\n        self.spSkeletonNode.active = true;\n        self.spSkeletonNode.opacity = 255;\n\n        self._spSkeleton.setEventListener(function (trackEntry, eventData) {\n            if (eventData) {\n                let dataInfo = eventData.data;\n                if (dataInfo) {\n                    let trackName = dataInfo.name;\n                    if (trackName) {\n                        if (addEventListener) {\n                            addEventListener(trackName);\n                        }\n                    }\n                }\n            }\n        });\n\n        self._spSkeleton.setAnimation(0, skeletonAnimName, false);\n        self._spSkeleton.setCompleteListener(function () {\n            self._playingAnim = false;\n            if (completeListener) {\n                completeListener();\n            }\n        });\n    }\n\n    getSpineSkeleton() {\n        return this._spSkeleton;\n    }\n\n    update(dt) {\n        let self = this;\n        if (!self._playingAnim) {\n            return;\n        }\n        if (self._DynamicMounNodeUtil) {\n            self._DynamicMounNodeUtil.updateMountNode(self._mounNode, self._boneName);\n        }\n    }\n\n}","export default class DynamicMounNodeUtil {\n\n    _spSkeleton = null;\n\n    constructor(spSkeletonNode) {\n        let self = this;\n\n        if (!spSkeletonNode) {\n        }\n\n        let spine = spSkeletonNode.getComponent(sp.Skeleton);\n\n        if (!spine) {\n            return;\n        }\n\n        self._spSkeleton = spine;\n    }\n\n    /**\n     * 实时同步Node与骨骼的坐标，实现挂载效果\n     * 缺点：Node只能在Spine上部/底部，不能在Spine动画层级中间\n     *\n     * @param mountNode\n     * @param boneName\n     */\n    public updateMountNode(mountNode, boneName, updateScale = true, callFun = null) {\n        let self = this;\n        if (!self._spSkeleton) {\n            return;\n        }\n\n        if (!cc.isValid(self._spSkeleton) || !cc.isValid(self._spSkeleton.node.parent)) {\n            return;\n        }\n\n        if (!mountNode) {\n            return;\n        }\n\n        if (!boneName) {\n            return;\n        }\n\n        if (!cc.isValid(mountNode) || !cc.isValid(mountNode.parent)) {\n            return;\n        }\n\n        let currBone = self._spSkeleton.findBone(boneName);\n\n        if (!currBone) {\n            return;\n        }\n\n        let worldPos = self._spSkeleton.node.parent.convertToWorldSpaceAR(self._spSkeleton.node.getPosition());\n        let pos = mountNode.parent.convertToNodeSpaceAR(worldPos);\n\n        mountNode.setPosition(pos.x + currBone.worldX, pos.y + currBone.worldY);\n        if (updateScale) {\n            mountNode.scaleX = currBone.scaleX;\n            mountNode.scaleY = currBone.scaleY;\n        }\n        if (callFun) {\n            callFun();\n        }\n    }\n\n    /**\n     *\n     * @param mountArr = {\n     *     mountNode : xx,\n     *     boneName : xx,\n     * }\n     */\n    public updateMultipleMountNode(mounArr) {\n        let self = this;\n        if (!mounArr) {\n            return;\n        }\n\n        for (let index = 0; index < mounArr.length; index++) {\n            let mountObj = mounArr[index];\n            if (mountObj && mountObj.mountNode && mountObj.boneName) {\n                let callFun = null;\n                if (mountObj.isFirstTrigger) {\n                    mountObj.isFirstTrigger = false;\n                    callFun = mountObj.firstTriggerFun;\n                }\n                let updateScale = true;\n                if (mountObj.updateScale != undefined) {\n                    updateScale = mountObj.updateScale;\n                }\n                self.updateMountNode(mountObj.mountNode, mountObj.boneName, updateScale, callFun);\n            }\n        }\n    }\n\n}\n","const {ccclass, property} = cc._decorator;\n\nimport DynamicMounNodeUtil from \"./DynamicMounNodeUtil\";\n\n@ccclass\nexport default class DynamicMultipleMounNodeComponent extends cc.Component {\n\n    @property(cc.Node)\n    spSkeletonNode: cc.Node = null;\n\n    _spSkeleton: sp.Skeleton = null;\n\n    _DynamicMounNodeUtil = null;\n\n    _mounNode = null;\n    _boneName = null;\n\n    _hasSafetyCorrective = false;\n    /**\n     * MounNodeObj\n     */\n    _mounArr = [];\n    /**\n     * key: eventName\n     * value: [\n     *      MounNodeObj\n     * ]\n     */\n    _targetMultipleMounMap = {};\n\n    _playingAnim = false;\n\n    onLoad() {\n        let self = this;\n        self._spSkeleton = self.spSkeletonNode.getComponent(sp.Skeleton);\n        self._playingAnim = false;\n        self._DynamicMounNodeUtil = new DynamicMounNodeUtil(self.spSkeletonNode);\n    }\n\n    /**\n     *\n     * @param skeletonAnimName\n     * @param targetMultipleMounMap = {\n     *     eventName: [{\n     *         mountNode: xx,\n     *         boneName: xx\n     *     }]\n     * }\n     * @param completeListener\n     */\n    startSkeletonAnimation(skeletonAnimName, targetMultipleMounMap, addEventListener, completeListener, delayTimeAfterComplete?) {\n        let self = this;\n        self.startSkeletonAnimationLogic(skeletonAnimName, targetMultipleMounMap, addEventListener, completeListener, delayTimeAfterComplete, false);\n    }\n\n    startSkeletonAnimationLoop(skeletonAnimName, targetMultipleMounMap, addEventListener, completeListener, delayTimeAfterComplete?) {\n        let self = this;\n        self.startSkeletonAnimationLogic(skeletonAnimName, targetMultipleMounMap, addEventListener, completeListener, delayTimeAfterComplete, true);\n    }\n\n    /**\n     * 所有依赖于动画事件的处理，不要在addEventListener中处理，建议使用\n     * noMount + firstTriggerFun\n     * 原因：为了兼容低端机型，在动画结束后会对所有挂载操作决定是否同步执行一次\n     *\n     *\n     * @param skeletonAnimName\n     * @param targetMultipleMounMap\n     * @param addEventListener\n     * @param completeListener\n     * @param delayTimeAfterComplete\n     * @param isLoop\n     */\n    startSkeletonAnimationLogic(skeletonAnimName, targetMultipleMounMap, addEventListener, completeListener, delayTimeAfterComplete?, isLoop?) {\n        let self = this;\n        self._hasSafetyCorrective = false;\n        self._mounArr = [];\n        self._targetMultipleMounMap = targetMultipleMounMap;\n        self._playingAnim = true;\n        self.spSkeletonNode.active = true;\n        self.spSkeletonNode.opacity = 255;\n\n        let obj: MounNodeObj[] = self._targetMultipleMounMap[\"dwc_pack_default\"];\n        if (obj && (obj.length > 0)) {\n            for (let index = 0; index < obj.length; index++) {\n                self._mounArr.push(obj[index]);\n            }\n        }\n\n        self._spSkeleton.timeScale = 1;\n        self._spSkeleton.setEventListener(function (trackEntry, eventData) {\n            if (self._targetMultipleMounMap) {\n                if (eventData) {\n                    let dataInfo = eventData.data;\n                    if (dataInfo) {\n                        let trackName = dataInfo.name;\n                        if (trackName) {\n                            let obj: MounNodeObj[] = self._targetMultipleMounMap[trackName];\n                            if (obj && (obj.length > 0)) {\n                                for (let index = 0; index < obj.length; index++) {\n                                    if (obj[index].noMount) {\n                                        if (obj[index].firstTriggerFun) {\n                                            obj[index].firstTriggerFun();\n                                        }\n                                    } else {\n                                        self._mounArr.push(obj[index]);\n                                    }\n                                }\n                            }\n\n                            if (addEventListener) {\n                                addEventListener(trackName);\n                            }\n                        }\n                    }\n                }\n            }\n        });\n\n        self._spSkeleton.setAnimation(0, skeletonAnimName, isLoop);\n        self._spSkeleton.setCompleteListener(function () {\n            if (delayTimeAfterComplete) {\n                let timer = setTimeout(function () {\n                    self._playingAnim = false;\n                    clearTimeout(timer);\n                }, delayTimeAfterComplete);\n            } else {\n                self._playingAnim = false;\n            }\n\n            self.safetyCorrective();\n\n            if (completeListener) {\n                completeListener();\n            }\n        });\n    }\n\n    getSpineSkeleton() {\n        return this._spSkeleton;\n    }\n\n    update(dt) {\n        let self = this;\n        if (!self._playingAnim) {\n            return;\n        }\n        if (self._DynamicMounNodeUtil) {\n            self._DynamicMounNodeUtil.updateMultipleMountNode(self._mounArr);\n        }\n    }\n\n    private safetyCorrective() {\n        let self = this;\n\n        if (!self._mounArr) {\n            return;\n        }\n\n        if (self._hasSafetyCorrective) {\n            return;\n        }\n        self._hasSafetyCorrective = true;\n\n        let findNotTrigger = self.findNotTrigger();\n        let findAllTargetArr = self.findAllTargetMount();\n\n        if ((findAllTargetArr.allTargetArr.length == self._mounArr.length)\n            && (!findNotTrigger)) {\n            return;\n        }\n\n        if (self._DynamicMounNodeUtil) {\n            self._DynamicMounNodeUtil.updateMultipleMountNode(findAllTargetArr.allTargetArr);\n            for (let fun of findAllTargetArr.directTriggerFunArr) {\n                if (fun) {\n                    fun();\n                }\n            }\n        }\n    }\n\n    private findNotTrigger() {\n        let self = this;\n        let findNotTrigger = false;\n        for (let index = 0; index < self._mounArr.length; index++) {\n            let mountObj = self._mounArr[index];\n            if (mountObj && mountObj.mountNode && mountObj.boneName) {\n                if (mountObj.isFirstTrigger != undefined) {\n                    if (mountObj.isFirstTrigger == true) {\n                        findNotTrigger = true;\n                    }\n                    mountObj.isFirstTrigger = true;\n                }\n            }\n        }\n\n        return findNotTrigger;\n    }\n\n    private findAllTargetMount() {\n        let self = this;\n\n        let allTargetArr = [];\n        let directTriggerFunArr = [];\n        for (let key in self._targetMultipleMounMap) {\n            let obj: MounNodeObj[] = self._targetMultipleMounMap[key];\n            if (obj && (obj.length > 0)) {\n                for (let index = 0; index < obj.length; index++) {\n                    if (obj[index].noMount) {\n                        if (obj[index].firstTriggerFun) {\n                            directTriggerFunArr.push(obj[index].firstTriggerFun);\n                        }\n                    } else {\n                        allTargetArr.push(obj[index]);\n                    }\n                }\n            }\n        }\n\n        return {\n            allTargetArr: allTargetArr,\n            directTriggerFunArr: directTriggerFunArr\n        };\n    }\n\n}\n\ninterface MounNodeObj {\n    mountNode: cc.Node,\n    boneName: string,\n    noMount: false, \n    isFirstTrigger: true,\n    firstTriggerFun: Function\n}\n","import CommonSkin from \"../../../conf/skin/CommonSkin\";\nimport { ServiceErrorUtils } from \"../../service_error/ServiceErrorUtils\";\nimport { CommonProto } from \"../proto/CommonProto\";\nimport BaseSocketAttachment from \"./BaseSocketAttachment\";\n\nenum MsgType {\n    Ping = 0,\n    Pong = 99,\n    ErrorST = 100,\n}\nexport type TMsgData<T extends { toObject: any }> = ReturnType<Pick<T, \"toObject\">[\"toObject\"]>;\nexport default class ErrorStSocketAttachment extends BaseSocketAttachment {\n    public getMessageCtor(msgType: MsgType) {\n        return {\n            100: CommonProto.ErrorST,\n        }[msgType];\n    }\n\n    public onMessage(data: Socket.TMessageObject<number, any>): void {\n        switch (data.msgId) {\n            case MsgType.ErrorST: {\n                try {\n                    this.onErrorST(data.msgData);\n                } catch {\n                    //错误已处理\n                }\n                break;\n            }\n        }\n    }\n\n    private onErrorST(data: TMsgData<CommonProto.ErrorST>) {\n        switch (data.Status) {\n            case CommonProto.STATUS.OK: {\n                //0~99, 通用错误码\n                break;\n            }\n            case CommonProto.STATUS.UNKNOWN_ERROR: {\n                // 未知错误\n                break;\n            }\n            case CommonProto.STATUS.PARAM_ERROR: {\n                //参数错误\n                break;\n            }\n            // 需要重新认证\n            case CommonProto.STATUS.NOT_AUTH:\n            //房间人数已满\n            case CommonProto.STATUS.ROOM_IS_FULL:\n            //服务器已经关闭\n            case CommonProto.STATUS.SERVER_CLOSED:\n            //重复登录\n            case CommonProto.STATUS.DUP_LOGIN:\n            // token错误\n            case CommonProto.STATUS.TOKEN_INVALID:\n            //金币锁冲突\n            case CommonProto.STATUS.GOLDLOCK_CONFLICT:\n            // 房间桌子不存在\n            case CommonProto.STATUS.CUBE_ROOM_NOT_EXIST: {\n                this.close();\n            }\n            //上庄队列已满\n            case CommonProto.STATUS.CUBE_BANKER_FULL:\n            //单个区域射击 金额超出限制\n            case CommonProto.STATUS.CUBE_BET_OVER_LIMIT:\n            //金额不足下庄\n            case CommonProto.STATUS.CUBE_OFF_BANKER_FOR_CREDIT:\n            //连庄达到上限下庄\n            case CommonProto.STATUS.CUBE_OFF_BANKER_FOR_COUNT:\n            //本局射击 金额已达上限\n            case CommonProto.STATUS.CUBE_BET_INSUFFICIENT:\n            // 低于限红的下限金额\n            case CommonProto.STATUS.CUBE_BET_RED_LIMIT_LOW:\n            // 高于限红的上限金额\n            case CommonProto.STATUS.CUBE_BET_RED_LIMIT_HIGH:\n            //TODO @stone 服务端说现在没有上庄游戏不处理 上庄金额不足\n            case CommonProto.STATUS.CUBE_BANKER_INSUFFICIENT:\n\n            //射击 失败 钱不够\n            case CommonProto.STATUS.CUBE_BET_OVER_CREDIT: {\n                ServiceErrorUtils.applySocketError(data);\n                break;\n            }\n            case CommonProto.STATUS.REDIRECT: {\n                // 需要用户重连到另外的服务器\n                if (data.Msg) {\n                    this.close();\n                    this.reconnect({\n                        host: data.Msg,\n                    });\n                } else {\n                    this.close();\n                    ServiceErrorUtils.applySocketError(data);\n                }\n                break;\n            }\n            // 余额不足\n            case CommonProto.STATUS.INSUFFICIENT:\n            //筹码错误\n            case CommonProto.STATUS.CUBE_CHIP_ERROR:\n            //闲置时间过长\n            case CommonProto.STATUS.IDLE_TIMEOUT:\n            //操作不符合规则\n            case CommonProto.STATUS.PLAY_RULE: {\n                //业务层处理\n                break;\n            }\n        }\n        this.error(data);\n    }\n}\n","export namespace FormatConstBRL {\n    /** 手机号最小长度 */\n    export const MIN_PHONE_LEN = 10;\n    /** 手机号最大长度 */\n    export const MAX_PHONE_LEN = 11;\n\n    export const PHONE_MOSAIC = {\n        reg: /(\\d{2})(\\d{2})(.+)(\\d{4})$/,\n        template: \"($1)($2)****$4\",\n    };\n\n    export const PHONE_FORMAT = {\n        reg: /^(\\d{2})(\\d{5})(\\d+)/,\n        template: \"($1)$2-$3\",\n    };\n}\n","export namespace FormatConstINR {\n    /** 手机号最小长度 */\n    export const MIN_PHONE_LEN = 10;\n    /** 手机号最大长度 */\n    export const MAX_PHONE_LEN = 10;\n\n    export const PHONE_MOSAIC = {\n        reg: /(\\d{2})(.+)(\\d{4})$/,\n        template: \"(+$1)******$3\",\n    };\n\n    export const PHONE_FORMAT = {\n        reg: \"\",\n        template: \"\",\n    };\n}\n","import { SkinType } from \"../../../../../main/core/conf/SkinType\";\nimport { FormatConstBRL } from \"./format_const/FormatConstBRL\";\nimport { FormatConstINR } from \"./format_const/FormatConstINR\";\nimport Flavor from \"../../../../../main/core/conf/Flavor\";\nclass FormatConstUtil {\n    readonly map = {\n        [SkinType.WORLD_CUP]: FormatConstBRL,\n        [SkinType.LIGHT]: FormatConstINR,\n    };\n\n    get(): typeof FormatConstBRL {\n        return this.map[Flavor.Skin.curMainSkin] || FormatConstBRL;\n    }\n}\n\nexport default new FormatConstUtil().get();\n","import FormatConstUtil from \"./FormatConstUtil\";\n\nexport namespace FormatTemplateUtil {\n    export function cpf(str: string) {\n        return str.replace(/^(\\d{3})(\\d{3})(\\d{3})(\\d{2})$/, \"$1.$2.$3-$4\");\n    }\n    export function cnpj(str: string) {\n        return str.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d+)$/, \"$1.$2.$3/$4-$5\");\n    }\n    export function cep(str: string) {\n        return str.replace(/(\\d{5})(.+)/, \"$1-$2\");\n    }\n    export function phone(str: string) {\n        const config = FormatConstUtil.PHONE_FORMAT;\n        return str.replace(config.reg, config.template);\n    }\n    export function evp(str: string) {\n        return str.replace(\n            /^([A-Za-z0-9]{8})([A-Za-z0-9]{4})([A-Za-z0-9]{4})([A-Za-z0-9]{4})([A-Za-z0-9]+)$/,\n            \"$1-$2-$3-$4-$5\"\n        );\n    }\n    export function upi(upiStr: string, lengthCount = 27): string {\n        // let reg = /^[A-Za-z0-9]+(?=@)/;\n        // let str:RegExpExecArray = reg.exec(upiStr);\n        // let frontStr:string = \"\";\n        // if (str && str[0]) {\n        //     frontStr = str[0];\n        // } else {\n        //     return upiStr;\n        // }\n\n        // if (frontStr.length > 4) {\n        //     frontStr = frontStr.slice(0, 4);\n        //     frontStr += \"...\"\n        // }\n\n        let str: string[] = upiStr.split(\"@\");\n        if (str.length <= 1) {\n            return upiStr;\n        }\n\n        let frontStr = str[0];\n        let tailStr = str[1];\n\n        if (frontStr.length > 4) {\n            frontStr = frontStr.slice(0, 4);\n            frontStr += \"***\";\n        }\n\n        let retStr = frontStr + \"@\" + tailStr;\n\n        return retStr.limtLength(lengthCount);\n    }\n    export function bank(bankStr: string): string {\n        return bankStr.replace(/^(\\d{4})(\\d+)(\\d{4})$/, \"$1***$3\");\n    }\n\n    export function emailMosaic(emailStr: string, lengthCount = 40): string {\n        let str: string[] = emailStr.split(\"@\");\n        if (str.length <= 1) {\n            return emailStr;\n        }\n\n        let frontStr = str[0];\n        let tailStr = str[1].limtLength(23);\n\n        if (frontStr.length > 4) {\n            frontStr = frontStr.slice(0, 4);\n            frontStr += \"***\";\n        }\n\n        let retStr = frontStr + \"@\" + tailStr;\n\n        return retStr.limtLength(lengthCount);\n    }\n\n    export function phoneMosaic(str: string) {\n        return str.replace(/(\\d{2})(.+)(\\d{4})$/, \"($1)*****-$3\");\n    }\n\n    export function cpfMosaic(str: string) {\n        return str.replace(/^(\\d{2})(\\d{1})(\\d{3})(\\d{3})(\\d{2})$/, \"$1*.***.***-$5\");\n    }\n\n    export function cnpjMosaic(str: string) {\n        return str.replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d+)$/, \"$1.***.***/****-$5\");\n    }\n\n    /**\n     * 去掉字符串中的表情\n     * @param str\n     * @returns\n     */\n    export function removeEmoji(str: string): string {\n        let emojiReg =\n            /([\\u00A9\\u00AE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9-\\u21AA\\u231A-\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA-\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614-\\u2615\\u2618\\u261D\\u2620\\u2622-\\u2623\\u2626\\u262A\\u262E-\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u2660\\u2663\\u2665-\\u2666\\u2668\\u267B\\u267F\\u2692-\\u2697\\u2699\\u269B-\\u269C\\u26A0-\\u26A1\\u26AA-\\u26AB\\u26B0-\\u26B1\\u26BD-\\u26BE\\u26C4-\\u26C5\\u26C8\\u26CE-\\u26CF\\u26D1\\u26D3-\\u26D4\\u26E9-\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733-\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763-\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934-\\u2935\\u2B05-\\u2B07\\u2B1B-\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70-\\uDD71\\uDD7E-\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01-\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50-\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96-\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF])|(\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F-\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95-\\uDD96\\uDDA4-\\uDDA5\\uDDA8\\uDDB1-\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDEE0-\\uDEE5\\uDEE9\\uDEEB-\\uDEEC\\uDEF0\\uDEF3-\\uDEF6])|(\\uD83E[\\uDD10-\\uDD1E\\uDD20-\\uDD27\\uDD30\\uDD33-\\uDD3A\\uDD3C-\\uDD3E\\uDD40-\\uDD45\\uDD47-\\uDD4B\\uDD50-\\uDD5E\\uDD80-\\uDD91\\uDDC0])/g;\n        return str.replace(emojiReg, \"\");\n    }\n\n    /**\n     * 去除字符串中多余的字符 超过长度的部分不要 计算长度的时候中文字符算两个字符\n     * @param str\n     * @param maxLen\n     * @returns\n     */\n    export function removeRedundantCharacter(str: string, maxLen: number): string {\n        let len = 0;\n        let retStr = \"\";\n        let reg = /[\\u4e00-\\u9fa5]/;\n        for (let i = 0, strLen = str.length; i < strLen; i++) {\n            let character = str.charAt(i);\n            if (reg.test(character)) {\n                len += 2;\n            } else {\n                len += 1;\n            }\n\n            if (len <= maxLen) {\n                retStr += character;\n            } else {\n                break;\n            }\n        }\n\n        return retStr;\n    }\n}\n","import { Tools } from \"../../../../../main/core/utils/Tools\";\n\nexport namespace FormatTestUtil {\n    export const MIN_ACCOUNT_LENGTH = 6;\n    export const MAX_ACCOUNT_LENGTH = 15;\n\n    export const MIN_CODE_LENGTH = 3;\n    export const MAX_CODE_LENGTH = 8;\n\n    /** 名字最小长度 */\n    export const MIN_NAME_LEN = 2;\n    /** 名字最大长度 */\n    export const MAX_NAME_LEN = 14;\n    /** CPF长度 */\n    export const CPF_LEN = 11;\n    /** 手机号最小长度 */\n    export const MIN_PHONE_LEN = 10;\n    /** 手机号最大长度 */\n    export const MAX_PHONE_LEN = 11;\n    /** CNPJ长度 */\n    export const CNPJ_LEN = 14;\n    /** EVP长度 */\n    export const EVP_LEN = 32;\n    /** 邮箱最大长度 */\n    export const MAX_EMAIL_LEN = 120;\n    /** 银行账号最小长度 */\n    export const MIN_BANK_LEN = 9;\n    /** 银行账号最大长度 */\n    export const MAX_BANK_LEN = 20;\n    /** 印度手机号长度 (这里的长度不包含区号)*/\n    export const INDIA_PHONE_LEN = 10;\n    /** 印度Address最小长度*/\n    export const MIN_INDIA_ADDRESS_LEN = 2;\n    /** 印度Address最大长度*/\n    export const MAX_INDIA_ADDRESS_LEN = 150;\n\n    /** 测试手机号格式 */\n    export function testPhoneNumber(phone: string) {\n        let isPhoneValid = false;\n        let phoneReg = /^[0-9]+$/;\n        isPhoneValid = phoneReg.test(phone);\n        if (!isPhoneValid) {\n            return false;\n        }\n        return true;\n    }\n\n    /** 测试验证码格式 */\n    export function testValidCode(code: string) {\n        let isCodeValid = false;\n        let codeReg = /^[A-Za-z0-9]+$/;\n        isCodeValid =\n            codeReg.test(code) && code.length >= MIN_CODE_LENGTH && code.length <= MAX_CODE_LENGTH;\n        if (!isCodeValid) {\n            return false;\n        }\n        return true;\n    }\n\n    /** 测试只包含 a-z 0-9 A-Z _ - . */\n    export function containInvaildSymbol(str: string) {\n        if (str && str.length >= 6 && str.length <= 20) {\n            let strReg = /^[a-z0-9A-Z_\\-\\.]{6,20}$/;\n            if (!strReg.test(str)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /** 测试只包含数字和英文字母 */\n    export function containNumberAndLetter(str: string) {\n        let strReg = /^[A-Za-z0-9]+$/;\n        if (strReg.test(str)) {\n            return true;\n        }\n        return false;\n    }\n\n    export function testNickNameLength(nickName: string) {\n        return Tools.isLimit(\n            nickName.replace(/[^\\x00-\\xff]/g, \"**\").length,\n            MIN_NAME_LEN,\n            MAX_NAME_LEN\n        );\n    }\n\n    export function testEmail(email: string) {\n        let emailReg = /^[A-Za-z0-9\\u4e00-\\u9fa5]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]{2,})$/;\n        if (emailReg.test(email)) {\n            return true;\n        }\n        return false;\n    }\n\n    export function testUpi(upi: string) {\n        let emailReg = /^[A-Za-z0-9]+@[a-zA-Z0-9]+$/;\n        if (emailReg.test(upi)) {\n            return true;\n        }\n        return false;\n    }\n\n    export function testIfsc(ifsc: string) {\n        let emailReg = /^[A-Za-z0-9]{4}0[a-zA-Z0-9]{6}$/;\n        if (emailReg.test(ifsc)) {\n            return true;\n        }\n        return false;\n    }\n}\n","import HeartCheck from \"./HeartCheck\";\nimport UIMgr from \"../../../Component/base/UIMgr\";\nimport CommonLanguage from \"../../../conf/lang/CommonLanguage\";\nimport { Tools } from \"../../../../../../../main/core/utils/Tools\";\n\nexport default class FrontHeartCheck extends HeartCheck {}\n","import { UniverseProto } from \"./universe/proto/UniverseProto\";\n\ntype GameTag = ProtoObject<UniverseProto.FeatureConfResp.GameTag>[];\n\nclass GameNavigation {\n    public static navigation: ProtoObject<UniverseProto.FeatureConfResp.GameNavigation>[];\n    public static gameTag: GameTag;\n    private static gameTagTypeMap: Map<number, UniverseProto.GameTagType> = new Map();\n\n    public static gameSocket: {};\n\n    public static initGameTagTypeMap(gameTag: GameTag) {\n        this.gameTag = gameTag;\n\n        for (let i = 0; i < this.gameTag.length; i++) {\n            let gameIds = this.gameTag[i].game_ids;\n            let tagType = this.gameTag[i].type;\n            if (tagType == UniverseProto.GameTagType.TAG_TYPE_NEWBIE_GUIDE) {\n                //新手引导标签抽离tag\n                continue;\n            }\n            for (let j = 0; j < gameIds.length; j++) {\n                this.gameTagTypeMap.set(gameIds[j], tagType);\n            }\n        }\n    }\n\n    public static getGameTagWithId(gameId: number): UniverseProto.GameTagType {\n        return this.gameTagTypeMap.get(gameId);\n    }\n}\n\nexport default GameNavigation;\n","import { ApiProto } from \"../../service/api/ApiProto\";\n\ninterface IGameReplayMessageData {\n    msgId: number;\n    msgData: any;\n}\n\ninterface IGameReplayOptions {\n    messageMap?: {\n        [index: number]: Socket.IMessageCtor;\n    };\n    timeScale?: number;\n    messageDelay?: {\n        [msgId: number]: number;\n    };\n    onMessage?: (data: IGameReplayMessageData) => void;\n}\n\nclass GameReplayMessageItem {\n    constructor(private _message: ProtoObject<ApiProto.Msgs>) { }\n\n    public timestamp() {\n        return this._message.timestamp;\n    }\n\n    public toObject(): IGameReplayMessageData {\n        return {\n            msgId: this._message.msg_type,\n            msgData: JSON.parse(this._message.msg_info),\n        };\n    }\n}\n\nenum State {\n    None,\n    Play,\n    Pause,\n}\n\nexport enum ReplayState {\n    None,\n    Play,\n    Pause,\n}\n\nexport enum ReplayOperate {\n    /** 播放 */\n    Play,\n    /** 暂停 */\n    Pause,\n    /** 恢复播放 */\n    Resume,\n    /** 停止 */\n    Stop,\n}\n\nexport default class GameReplayControl {\n    private _queue: GameReplayMessageItem[] = null;\n    private _playIndex: number = -1;\n\n    private _state: State = State.None;\n\n    private _delayTimeId: NodeJS.Timeout = null;\n\n    constructor(\n        private _data: ProtoObject<ApiProto.GameReplayRecord>,\n        private _options: IGameReplayOptions = {}\n    ) {\n        this.initialize();\n    }\n\n    public play() {\n        this._playIndex = 0;\n        this.state = State.Play;\n    }\n    public pause() {\n        this.state = State.Pause;\n    }\n    public resume() {\n        this.state = State.Play;\n    }\n    public stop() {\n        this.state = State.None;\n    }\n\n    public get timeScale(): number {\n        return this._options?.timeScale ?? 1;\n    }\n\n    public set timeScale(value: number) {\n        this._options.timeScale = value;\n    }\n\n    private initialize() {\n        this.createQueue();\n\n        cc.game.on(\n            cc.game.EVENT_SHOW,\n            () => {\n                this.resume();\n            },\n            this\n        );\n        cc.game.on(\n            cc.game.EVENT_HIDE,\n            () => {\n                this.pause();\n            },\n            this\n        );\n    }\n\n    public destroy() {\n        this.stop();\n        cc.game.targetOff(this);\n    }\n\n    private get state() {\n        return this._state;\n    }\n\n    private set state(value: State) {\n        if (value === this.state) {\n            console.warn(\"invalid state set\", this.state, value);\n            return;\n        }\n        switch (value) {\n            case State.None: {\n                this._playIndex = -1;\n                this.stopDelay();\n                break;\n            }\n            case State.Pause: {\n                if (this.state == State.None) {\n                    console.warn(\"invalid state set\", this.state, value);\n                    return;\n                }\n                this.stopDelay();\n                break;\n            }\n            case State.Play: {\n                this.toNext(0);\n                break;\n            }\n        }\n\n        this._state = value;\n    }\n\n    private stopDelay() {\n        if (this._delayTimeId) {\n            clearTimeout(this._delayTimeId);\n        }\n        this._delayTimeId = null;\n    }\n\n    private toNext(delayTime: number) {\n        this.stopDelay();\n        this._delayTimeId = setTimeout(() => {\n            this.next();\n        }, delayTime);\n    }\n\n    private next() {\n        let message = this._queue[this._playIndex++];\n        if (!message) {\n            console.warn(\"[GameReplayHelper] message is empty!\");\n            this.stop();\n            return;\n        }\n        const nextMessage = this._queue[this._playIndex];\n\n        const objectData = message.toObject();\n        const data = {\n            msgId: objectData.msgId,\n            msgData:\n                this._options?.messageMap?.[objectData.msgId]\n                    ?.fromObject?.(objectData.msgData)\n                    ?.toObject() ?? objectData.msgData,\n        };\n\n        const delayTime =\n            (this._options?.messageDelay?.[objectData.msgId] ??\n                (nextMessage?.timestamp?.() ?? message.timestamp()) - message.timestamp()) /\n            this.timeScale;\n\n        let date = new Date();\n        CC_DEBUG &&\n            cc.log(\n                `%c[${date.toLocaleString()}:${date.getMilliseconds()}] <replay> on=> Id:${data.msgId\n                }->${this._options?.messageMap?.[objectData.msgId]?.name ?? \"Unknown\"\n                } ,delayTime:${delayTime} \\n`,\n                \"color:#a5a\",\n                data.msgData\n            );\n        this._options?.onMessage?.(data);\n\n        this.toNext(delayTime);\n    }\n\n    private createQueue() {\n        this._queue = this._data.msgs.map((msg) => {\n            return new GameReplayMessageItem(msg);\n        });\n    }\n}\n","\nimport { DialogActionType } from \"../../../../../../main/core/conf/GameEnum\";\nimport PopUpViewBase from \"../../../../../../main/core/popUpViewUtils/PopUpViewBase\";\nimport CommonLanguage from \"../../conf/lang/CommonLanguage\";\nimport GetAwardItem from \"./GetAwardItem\";\nimport { AwardItem } from \"./GetAwardType\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class GetAwardDialog extends PopUpViewBase {\n    @property(cc.Node)\n    awardListNode: cc.Node = null;\n\n    @property(cc.Layout)\n    awardListLayout: cc.Layout = null;\n\n    @property(cc.Node)\n    confirmeBtn: cc.Node = null;\n\n    @property(cc.Prefab)\n    awardItemPerfab: cc.Prefab = null;\n\n    @property(cc.Label)\n    confirmeBtnLabel: cc.Label = null;\n\n    @property(cc.Node)\n    coinAnim: cc.Node = null;\n\n    private dialogData;\n    private isShowCoinAnim: boolean;\n\n    public init(...args: any[]): void {\n        let [awardList] = args;\n        this.dialogData = awardList;\n        this.refreshUI();\n    }\n\n    onEnable() { }\n\n    refreshUI() {\n        if (!this.dialogData) return;\n        this.awardListNode.removeAllChildren();\n        (this.dialogData as AwardItem[]).forEach((vo) => {\n            let awardItemNode = cc.instantiate(this.awardItemPerfab);\n            let awardItemComp = awardItemNode.getComponent(GetAwardItem);\n            awardItemComp.setUIByVO(vo);\n            this.awardListNode.addChild(awardItemNode);\n            this.isShowCoinAnim = vo.isShowCoinAnim;\n        });\n\n        this.showCoinAnim();\n\n        //i18n\n        this.confirmeBtnLabel.string = CommonLanguage.confirm;\n    }\n\n    protected async onClose(): Promise<void> {\n        this.executeDoneCallBack(DialogActionType.Close);\n        this.hideCoinAnim();\n    }\n\n    executeDoneCallBack(actType: DialogActionType) {\n        this.close(actType);\n    }\n\n    onConfirme() {\n        this.executeDoneCallBack(DialogActionType.Confirm);\n    }\n\n    showCoinAnim() {\n        if (this.isShowCoinAnim) {\n            this.coinAnim.active = true;\n        }\n    }\n\n    hideCoinAnim() {\n        if (this.isShowCoinAnim) {\n            this.coinAnim.active = false;\n        }\n    }\n\n}\n","import { FrameEvent } from './GetAwardType';\nimport Listener from \"../../../../../../main/core/utils/Listener\";\n\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class GetAwardFrameCtrl extends cc.Component {\n    protected onEnable(): void {\n        this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchStart, this);\n    }\n\n    protected onDisable(): void {\n        this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchStart, this);\n    }\n\n    private _onTouchStart() {\n        Listener.emit(FrameEvent.FRAME_TOUCH);\n    }\n}\n","import MathUtils from \"../../../../../../main/core/utils/MathUtils\";\nimport CommonSkin from \"../../conf/skin/CommonSkin\";\nimport PropConfMgr from \"../../PropConfMgr\";\nimport { TipsInfoDir } from \"../../TipsInfo\";\nimport UIMgr from \"../base/UIMgr\";\nimport GetAwardTipsCtrl from \"./GetAwardTipsCtrl\";\nimport { AwardItem, AwardTips } from \"./GetAwardType\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class GetAwardItem extends cc.Component {\n    @property(cc.Label)\n    nameLabel: cc.Label = null;\n\n    @property(cc.Sprite)\n    iconSprite: cc.Sprite = null;\n\n    @property(cc.Label)\n    countLabel: cc.Label = null;\n\n    @property(cc.Node)\n    tipsNode: cc.Node = null;\n\n    private _vo: AwardItem = null;\n\n    setUIByVO(vo: AwardItem) {\n        this._vo = vo;\n        this.nameLabel.string = vo.name ?? \"\";\n        this.iconSprite.spriteFrame = PropConfMgr.getInstance().getPropSpriteFrameById(vo.id);\n        this.countLabel.string = MathUtils.saveTowDecimal(vo.count) + \"\";\n    }\n\n    protected onClickAwardItem() {\n        if (!this._vo) return;\n        let worldPos = this.node.convertToWorldSpaceAR(cc.v2(0, 0)); // 世界坐标\n        let iconScale = this.node.scale;\n        let offsetHight = (this.node.height / 2) * iconScale;\n        worldPos = worldPos.add(cc.v2(0, offsetHight + 10));\n\n        let poopConf: IPropsConf = PropConfMgr.getInstance().getPropConfById(this._vo.id);\n        if (poopConf) {\n            let parm: ITipsInfoParm = {\n                title: poopConf.name,\n                content: poopConf.desc,\n                width: 376,\n                worldPos: worldPos,\n                direction: TipsInfoDir.UP,\n            };\n            UIMgr.showUISync(CommonSkin.Priority.tipsInfo, {\n                args: [parm],\n            });\n        }\n    }\n}\n","import Listener from \"../../../../../../main/core/utils/Listener\";\nimport { AwardTips, FrameEvent } from \"./GetAwardType\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class GetAwardTipsCtrl extends cc.Component {\n    @property(cc.Node)\n    container: cc.Node = null;\n\n    @property(cc.Label)\n    titleLabel: cc.Label = null;\n\n    @property(cc.Label)\n    contentLabel: cc.Label = null;\n\n    onEnable() {\n        Listener.on(FrameEvent.FRAME_TOUCH, this.onOtherAwardItemTouch, this);\n    }\n\n    onDisable(): void {\n        Listener.off(FrameEvent.FRAME_TOUCH, this.onOtherAwardItemTouch, this);\n    }\n\n    setUiByVO(vo: AwardTips) {\n        this.titleLabel.string = vo.title;\n        this.contentLabel.string = vo.content;\n    }\n\n    onOtherAwardItemTouch() {\n        this.node && (this.node.active = false);\n    }\n}\n","export type AwardItem = {\n    id: number;\n    count: number;\n    name?: string;\n    tips: AwardTips;\n    isShowCoinAnim?: boolean;\n};\n\nexport type AwardTips = {\n    title: string;\n    content: string;\n};\n\nexport enum FrameEvent {\n    FRAME_TOUCH = \"FrameTouch\"\n}","import Listener from \"../../../../../../main/core/utils/Listener\";\nimport CommonEventName from \"../../CommonEventName\";\nimport CommonSkin from \"../../conf/skin/CommonSkin\";\nimport UIMgr from \"../base/UIMgr\";\n\nclass GetAwardUtils {\n    constructor() {\n        Listener.on(CommonEventName.EVENT_GET_AWARD, (data) => this.openAwardDialog(data));\n    }\n\n    public openAwardDialog(awardList) {\n        UIMgr.showUI(CommonSkin.LoadOnDemand.getAwardDialog, {\n            args: [awardList],\n        });\n    }\n}\nlet getAwardUtils = new GetAwardUtils();\nwindow[\"getAwardUtils\"] = getAwardUtils;\n","import { AppParamManager } from \"../../../../../main/core/app/AppParamManager\";\nimport Flavor from \"../../../../../main/core/conf/Flavor\";\nimport { ProjectInfo } from \"../../../../../main/core/conf/ProjectInfo\";\nimport { PlatformUtil } from \"../../../../../main/core/platform/PlatformUtil\";\nimport { UserManager } from \"../../../../../main/core/user/UserManager\";\nimport { lodash } from \"../../../../../main/core/utils/NpmExport\";\nimport UIMgr from \"../Component/base/UIMgr\";\nimport CommonLanguage from \"../conf/lang/CommonLanguage\";\nimport { UniverseProto } from \"../universe/proto/UniverseProto\";\nimport { BrowserUtil } from \"../utils/BrowserUtil\";\n\nclass H5Customer {\n    private static _instance: H5Customer = null;\n\n    public static getInstance() {\n        if (!this._instance) {\n            this._instance = new H5Customer();\n        }\n\n        return this._instance;\n    }\n\n    private constructor() {}\n\n    private customerInfo: ProtoObject<UniverseProto.CustomerConfResp>;\n\n    public setCustomerInfo(customerInfo: ProtoObject<UniverseProto.CustomerConfResp>) {\n        this.customerInfo = customerInfo;\n    }\n\n    public getCustomerInfo(): ProtoObject<UniverseProto.CustomerConfResp> {\n        return this.customerInfo;\n    }\n\n    private h5CustomerBase(pathAndFixedParams: string, direction?: BrowserUtil.DirectionType) {\n        let customerInfo = this.getCustomerInfo();\n        if (customerInfo) {\n            let token = customerInfo.token;\n            let domain = customerInfo.domain;\n            let browser_type = customerInfo.browser_type;\n\n            if (lodash.isEmpty(domain)) {\n                return;\n            }\n\n            // scheme\n            let prefixIndex = domain.indexOf(\"https\");\n            if (prefixIndex < 0) {\n                domain = \"https://\" + domain;\n            }\n            // host\n            let arr = domain.split(\"?\");\n            let host = arr[0];\n            if (host.charAt(host.length - 1) != \"/\") {\n                host += \"/\";\n            }\n            // token\n            if (pathAndFixedParams.includes(\"token={0}\")) {\n                pathAndFixedParams = pathAndFixedParams.format(token);\n            }\n            let fullUrl = host + pathAndFixedParams;\n            // dynamicParams(是否有运营后台配置的动态参数)\n            if (arr.length > 1) {\n                let dynamicParams = arr[1];\n                fullUrl += \"&\" + dynamicParams;\n            }\n\n            BrowserUtil.open({\n                url: fullUrl,\n                type: browser_type,\n                direction,\n                param: {\n                    code: Flavor.Country.code,\n                    aid: CommonDepend.AppParamManager.getDeviceID(),\n                    level: UserManager.getInstance().vip,\n                    brand: AppParamManager.getInstance().getBrandCode(),\n                    chn: AppParamManager.getInstance().getChn(),\n                    game_version: ProjectInfo.getInstance().GAME_VERSION,\n                    platform: PlatformUtil.getInstance().getSvn(),\n                },\n            });\n        } else {\n            UIMgr.showToast(CommonLanguage.abnormalLaterRetry);\n        }\n    }\n\n    public toCustomerPage(direction?) {\n        let userId = UserManager.getInstance().user_id;\n        let url: string = `customerServicePage/?token={0}&user_id=${userId}`;\n        this.h5CustomerBase(url, direction);\n    }\n\n    public toCustomerWorkOrder(direction?: BrowserUtil.DirectionType) {\n        let userId = UserManager.getInstance().user_id;\n        let url: string = `withDraw/?token={0}&problem_id=2&template_code=204&user_id=${userId}&second_id=5`;\n        this.h5CustomerBase(url, direction);\n    }\n\n    public toRechargeAppealPage(orderid?, direction?: BrowserUtil.DirectionType) {\n        let userId = UserManager.getInstance().user_id;\n        let url: string = `rechargeStatement/?token={0}&user_id=${userId}&order_id=${orderid}&problem_id=1&template_code=501&second_id=1`;\n        this.h5CustomerBase(url, direction);\n    }\n\n    public toWithdrawAppealPage(orderid?, direction?: BrowserUtil.DirectionType) {\n        let userId = UserManager.getInstance().user_id;\n        let url: string = `withDraw/?token={0}&user_id=${userId}&order_id=${orderid}&problem_id=2&template_code=201&second_id=2`;\n        this.h5CustomerBase(url, direction);\n    }\n\n    public toWithdrawPermissionPage(direction?: BrowserUtil.DirectionType) {\n        let userId = UserManager.getInstance().user_id;\n        let url: string = `withDraw/?token={0}&user_id=${userId}&problem_id=2&template_code=204&second_id=5`;\n        this.h5CustomerBase(url, direction);\n    }\n\n    public toLogin() {\n        let url: string = `accountFeedback/?problem_id=9&template_code=302&second_id=32`;\n        this.h5CustomerBase(url);\n    }\n}\n\nexport default H5Customer;\n","import { Instance } from \"../../../../../main/core/utils/decorators/InstanceClassDecorator\";\nimport CommonLaunchConfigObserver from \"../obs/CommonLaunchConfigObserver\";\nimport UniverseSocketMgr from \"../universe/UniverseSocketMgr\";\nimport { BrowserUtil } from \"../utils/BrowserUtil\";\n\nexport namespace H5Page {\n    export function onPrivacyClicked() {\n        let url = Instance(CommonLaunchConfigObserver).get(\"homepage\");\n        if (url) {\n            BrowserUtil.open({\n                url: `${url}/privacy.html`,\n                type: BrowserUtil.BrowserType.Browser,\n            });\n        } else {\n            UniverseSocketMgr.onLaunchConfReq();\n        }\n    }\n    export function onTermsClicked() {\n        let url = Instance(CommonLaunchConfigObserver).get(\"homepage\");\n        if (url) {\n            BrowserUtil.open({\n                url: `${url}/terms.html`,\n                type: BrowserUtil.BrowserType.Browser,\n            });\n        } else {\n            UniverseSocketMgr.onLaunchConfReq();\n        }\n    }\n    export function onRefundClicked() {\n        let url = Instance(CommonLaunchConfigObserver).get(\"homepage\");\n        if (url) {\n            BrowserUtil.open({\n                url: `${url}/refund.html`,\n                type: BrowserUtil.BrowserType.Browser,\n            });\n        } else {\n            UniverseSocketMgr.onLaunchConfReq();\n        }\n    }\n    export function onAboutClicked() {\n        let url = Instance(CommonLaunchConfigObserver).get(\"homepage\");\n        if (url) {\n            BrowserUtil.open({\n                url: `${url}/about.html`,\n                type: BrowserUtil.BrowserType.Browser,\n            });\n        } else {\n            UniverseSocketMgr.onLaunchConfReq();\n        }\n    }\n}\n","import { GameType } from \"../../../../../../../main/core/conf/GameType\";\n\nconst INTERVAL_HEART_CHECK: number = 5000;\nconst INTERVAL_RECONNECT: number = 5000; // reconnect timeout为5s\n/**\n * 任何业务response都可以视为pong，极端情况下，没有任务业务request/response，那信道中\n * 应该只有ping/pong，基于ping是5s一次，返回pong的timeout设定为5s，则pong应该在10s内收到\n */\nconst TIMEOUT_SECS_PONG: number = 10;\n\ninterface IHeartCheckOptions {\n    gameId: number;\n    connect(): void;\n    ping(): void;\n}\n\nexport default class HeartCheck {\n    private needCheck: boolean = false;\n    private lastTime: number = 0;\n    private connectCount: number = 0;\n    private checkIntervalTimeId: NodeJS.Timer = null;\n    private reconnectIntervalTimeId: NodeJS.Timer = null;\n    private options: IHeartCheckOptions = null;\n\n    public init(options: IHeartCheckOptions) {\n        this.options = options;\n        this.log(\"init\");\n        this.needCheck = true;\n        this.updateLastTime();\n        this.connectCount = 0;\n        return this;\n    }\n\n    public play() {\n        this.log(\"play\");\n        this.stop();\n        this.needCheck = true;\n        this.checkIntervalTimeId = setInterval(() => {\n            this.tryReconnect();\n        }, INTERVAL_HEART_CHECK);\n    }\n\n    public updateLastTime() {\n        this.lastTime = this.getNow();\n    }\n\n    public stop() {\n        if (this.checkIntervalTimeId) {\n            this.log(\"stop\");\n            clearInterval(this.checkIntervalTimeId);\n            this.checkIntervalTimeId = null;\n        }\n    }\n\n    public close() {\n        this.log(\"close\");\n        this.needCheck = false;\n        this.stop();\n    }\n\n    private getNow() {\n        return Date.parse(new Date().toString()) / 1000;\n    }\n\n    private tryReconnect() {\n        if (!this.needCheck) {\n            return;\n        }\n        let isPongTimeout = this.getNow() - this.lastTime > TIMEOUT_SECS_PONG;\n        if (isPongTimeout) {\n            if (CC_DEBUG) {\n                this.log(\"timeout -> reconnect\");\n            }\n            this.reconnect();\n        }\n        this.options.ping();\n    }\n\n    public reconnect() {\n        if (!this.needCheck) {\n            return;\n        }\n        this.stop();\n        if (CC_DEBUG) {\n            this.log(\"reconnect\");\n        }\n        this.options.connect();\n    }\n\n    protected log(str: string) {\n        if (!this.options) {\n            return;\n        }\n        CC_DEBUG && cc.log(\n            `%c[${new Date().toLocaleString()}] <socket> heartCheck heartCheck gameId:${\n                GameType[this.options.gameId]\n            } ${str}`,\n            \"color:#a00\"\n        );\n    }\n\n    protected onReConnect() {}\n}\n","import { GameType } from \"../../../../../../main/core/conf/GameType\";\nimport { lodash } from \"../../../../../../main/core/utils/NpmExport\";\nimport { Tools } from \"../../../../../../main/core/utils/Tools\";\n\ninterface IGameCode {\n    [index: number]: string;\n}\n\nexport default class HostListLogic {\n    constructor(private _template: string, private _gameCode: IGameCode = {}) {}\n\n    public mergeGameCode(gameCode: IGameCode) {\n        lodash.merge(this._gameCode, gameCode);\n    }\n\n    public getHosts(hosts: string[], gameType: GameType) {\n        return lodash\n            .chain(hosts)\n            .map((host) =>\n                Tools.formatString(this._template, {\n                    game_code: this._gameCode[gameType],\n                    host,\n                })\n            )\n            .value();\n    }\n}\n","import { GameType } from \"../../../../main/core/conf/GameType\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class I18nUtil extends cc.Component {\n    @property({ type: cc.Enum(GameType) })\n    gameType = GameType.GAME_HALL;\n\n    @property(cc.String)\n    wroldPath: string = \"\";\n\n    @property(cc.Integer)\n    maxLength: number = -1;\n\n    private _targetComponent: cc.Label | cc.RichText | cc.EditBox;\n\n    async onEnable() {\n        //检查 node 节点是否有 cc.Label 或 cc.RichText\n        let hasValidComponent =\n            this.node.getComponent(cc.Label) || this.node.getComponent(cc.RichText) || cc.EditBox;\n        if (!hasValidComponent) {\n            throw new Error(\"此节点无 cc.Label 或 cc.RichText 组件\");\n        }\n        let langMap = await this.getLanguageMap();\n        if (!langMap) return;\n\n        if (this.node.getComponent(cc.Label)) {\n            this._targetComponent = this.node.getComponent(cc.Label);\n            let text = this.getValueByObjPath(langMap, this.wroldPath);\n            this._targetComponent.string = text;\n        } else if (this.node.getComponent(cc.RichText)) {\n            this._targetComponent = this.node.getComponent(cc.RichText);\n            let text = this.getValueByObjPath(langMap, this.wroldPath);\n            this._targetComponent.string = text;\n        } else if (this.node.getComponent(cc.EditBox)) {\n            this._targetComponent = this.node.getComponent(cc.EditBox);\n            let text = this.getValueByObjPath(langMap, this.wroldPath);\n            this._targetComponent.placeholder = text;\n        }\n\n        //长度限制\n        if (this.maxLength > -1) {\n            this._targetComponent.string = this._targetComponent.string.limtLength(this.maxLength);\n        }\n    }\n\n    getLanguageMap() {\n        return new Promise((resolve, reject) => {\n            let modulePath;\n            switch (this.gameType) {\n                case GameType.SHARK:\n                    modulePath = \"SharkLanguage\";\n                    break;\n\n                case GameType.WALLET:\n                    modulePath = \"WalletLanguage\";\n                    break;\n                case GameType.GAME_HALL:\n                    modulePath = \"HallLanguage\";\n                    break;\n            }\n\n            import(modulePath)\n                .then((obj) => {\n                    resolve(obj.default);\n                })\n                .catch((err) => {\n                    reject(err);\n                });\n        });\n    }\n\n    getValueByObjPath(obj, path: string) {\n        const paths = path.split(\".\");\n        let res = obj;\n        let tempPath;\n        while ((tempPath = paths.shift())) {\n            res = res[tempPath];\n        }\n        return res;\n    }\n}\n","import FormatConstUtil from \"./FormatConstUtil\";\n\nexport namespace InfoMosaicUtil {\n    export function phone2Mosaic(str: string) {\n        if (!str) {\n            return str;\n        }\n        const config = FormatConstUtil.PHONE_MOSAIC;\n        return str.replace(config.reg, config.template);\n    }\n}\n","const { ccclass, property, menu, requireComponent, disallowMultiple, executeInEditMode } =\n    cc._decorator;\n\nexport const Gradient = cc.Enum({\n    None: 0,\n    OneColor: 1,\n    TwoColor: 2,\n    TriColor: 3,\n});\n\n/**\n * 字体效果\n * - 描边\n * - 颜色渐变\n */\n@ccclass\n@menu(\"UI/LabelShader\")\n@requireComponent(cc.Label)\n@disallowMultiple()\n@executeInEditMode()\nexport default class LabelShader extends cc.Component {\n    //-----------------------描边\n    @property\n    private _outlineUse: boolean = false;\n    @property({\n        tooltip: \"是否使用描边\",\n    })\n    get outlineUse() {\n        return this._outlineUse;\n    }\n    set outlineUse(v: boolean) {\n        this._outlineUse = v;\n        if (CC_EDITOR) {\n            this.updateMat();\n        }\n    }\n\n    @property\n    private _outlineWidth: number = 1;\n    @property({\n        tooltip: \"描边宽度（像素）\",\n        min: 1,\n        visible: function () {\n            return this.outlineUse;\n        },\n    })\n    get outlineWidth() {\n        return this._outlineWidth;\n    }\n    set outlineWidth(v: number) {\n        this._outlineWidth = v;\n        if (CC_EDITOR) {\n            this.updateMat();\n        }\n    }\n\n    @property\n    private _outlineColor: cc.Color = cc.color(255, 255, 255, 255);\n    @property({\n        tooltip: \"描边颜色\",\n        visible: function () {\n            return this.outlineUse;\n        },\n    })\n    get outlineColor() {\n        return this._outlineColor;\n    }\n    set outlineColor(v: cc.Color) {\n        this._outlineColor = v;\n        if (CC_EDITOR) {\n            this.updateMat();\n        }\n    }\n\n    //-----------------------文字颜色、渐变\n    @property\n    private _gradient = Gradient.None;\n    @property({\n        tooltip:\n            \"文字颜色\\nNone: 单色, 使用节点color\\nOneColor: 单色, 使用color1\\nTwoColor: 渐变色-双色\\nTriColor: 渐变色-三色\",\n        type: cc.Enum(Gradient),\n    })\n    get gradient() {\n        return this._gradient;\n    }\n    set gradient(v: number) {\n        this._gradient = v;\n        if (CC_EDITOR) {\n            this.updateMat();\n        }\n    }\n\n    @property\n    private _color1: cc.Color = cc.color(255, 0, 0, 255);\n    @property({\n        visible: function () {\n            return this.gradient > Gradient.None;\n        },\n    })\n    get color1() {\n        return this._color1;\n    }\n    set color1(v: cc.Color) {\n        this._color1 = v;\n        if (CC_EDITOR) {\n            this.updateMat();\n        }\n    }\n\n    @property\n    private _color2: cc.Color = cc.color(0, 255, 0, 255);\n    @property({\n        visible: function () {\n            return this.gradient > Gradient.OneColor;\n        },\n    })\n    get color2() {\n        return this._color2;\n    }\n    set color2(v: cc.Color) {\n        this._color2 = v;\n        if (CC_EDITOR) {\n            this.updateMat();\n        }\n    }\n\n    @property\n    private _color3: cc.Color = cc.color(0, 0, 255, 255);\n    @property({\n        visible: function () {\n            return this.gradient > Gradient.TwoColor;\n        },\n    })\n    get color3() {\n        return this._color3;\n    }\n    set color3(v: cc.Color) {\n        this._color3 = v;\n        if (CC_EDITOR) {\n            this.updateMat();\n        }\n    }\n\n    @property(cc.Boolean)\n    renderNextFrame: boolean = false;\n\n    private _mtl: cc.Material = null;\n\n    protected onEnable(): void {\n        if (this.renderNextFrame) {\n            return;\n        }\n        cc.director.once(cc.Director.EVENT_AFTER_DRAW, this.updateMat, this);\n    }\n    protected onDisable(): void {\n        if (this.renderNextFrame) {\n            return;\n        }\n        cc.director.off(cc.Director.EVENT_AFTER_DRAW, this.updateMat, this);\n        this.node[\"_renderFlag\"] |= cc[\"RenderFlow\"].FLAG_COLOR;\n    }\n\n    public setLabel(str: string) {\n        let label = this.node.getComponent(cc.Label);\n        if (!label) return;\n        label.string = str;\n        this.scheduleOnce(() => {\n            this.initMat();\n        });\n    }\n\n    public updateMat() {\n        if (CC_EDITOR) {\n            this._mtl = this.node.getComponent(cc.Label).getMaterial(0);\n            if (this._mtl.name.indexOf(LabelShader.name) > -1) {\n                this.initMat();\n            }\n        } else {\n            this.initMat();\n        }\n    }\n\n    private initMat() {\n        this._mtl = this.node.getComponent(cc.Label).getMaterial(0);\n        this._mtl.define(\"USE_TEXTURE\", true, 0);\n        this.node.getComponent(cc.Label).setMaterial(0, this._mtl);\n        this.use();\n    }\n\n    private use() {\n        if (!this._mtl || this.node.width == 0 || this.node.height == 0) return;\n        this._mtl.setProperty(\"i_outline\", this.outlineUse ? 1 : 0);\n        this._mtl.setProperty(\"i_outlineWidth\", [\n            this.outlineWidth / this.node.width,\n            this.outlineWidth / this.node.height,\n        ]);\n        this._mtl.setProperty(\"i_outlineColor\", [\n            this.outlineColor.r / 255,\n            this.outlineColor.g / 255,\n            this.outlineColor.b / 255,\n            this.outlineColor.a / 255,\n        ]);\n        this._mtl.setProperty(\"i_gradient\", this.gradient - 1);\n        switch (this.gradient) {\n            case Gradient.None:\n                this._mtl.setProperty(\"i_color1\", [\n                    this.node.color.r / 255,\n                    this.node.color.g / 255,\n                    this.node.color.b / 255,\n                    this.node.color.a / 255,\n                ]);\n                break;\n            case Gradient.OneColor:\n            case Gradient.TwoColor:\n            case Gradient.TriColor:\n                this._mtl.setProperty(\"i_color1\", [\n                    this.node.color.r / 255,\n                    this.node.color.g / 255,\n                    this.node.color.b / 255,\n                    this.node.color.a / 255,\n                ]);\n                this._mtl.setProperty(\"i_color1\", [\n                    this.color1.r / 255,\n                    this.color1.g / 255,\n                    this.color1.b / 255,\n                    this.color1.a / 255,\n                ]);\n                this._mtl.setProperty(\"i_color2\", [\n                    this.color2.r / 255,\n                    this.color2.g / 255,\n                    this.color2.b / 255,\n                    this.color2.a / 255,\n                ]);\n                this._mtl.setProperty(\"i_color3\", [\n                    this.color3.r / 255,\n                    this.color3.g / 255,\n                    this.color3.b / 255,\n                    this.color3.a / 255,\n                ]);\n                break;\n        }\n    }\n}\n","/******************************************\n * @author kL <klk0@qq.com>\n * @date 2019/6/6\n * @doc 列表Item组件.\n * 说明：\n *      1、此组件须配合List组件使用。（配套的配套的..）\n * @end\n ******************************************/\nconst { ccclass, property, disallowMultiple, menu, executionOrder } = cc._decorator;\n\nimport List from \"./List\";\n\nenum SelectedType {\n    NONE = 0,\n    TOGGLE = 1,\n    SWITCH = 2,\n}\n\n@ccclass\n@disallowMultiple()\n@menu(\"自定义组件/List Item\")\n@executionOrder(-5001) //先于List\nexport default class ListItem extends cc.Component {\n    //图标\n    @property({ type: cc.Sprite, tooltip: CC_DEV && \"图标\" })\n    icon: cc.Sprite = null;\n    //标题\n    @property({ type: cc.Node, tooltip: CC_DEV && \"标题\" })\n    title: cc.Node = null;\n    //选择模式\n    @property({\n        type: cc.Enum(SelectedType),\n        tooltip: CC_DEV && \"选择模式\",\n    })\n    selectedMode: SelectedType = SelectedType.NONE;\n    //被选标志\n    @property({\n        type: cc.Node,\n        tooltip: CC_DEV && \"被选标识\",\n        visible() {\n            return this.selectedMode > SelectedType.NONE;\n        },\n    })\n    selectedFlag: cc.Node = null;\n    //被选择的SpriteFrame\n    @property({\n        type: cc.SpriteFrame,\n        tooltip: CC_DEV && \"被选择的SpriteFrame\",\n        visible() {\n            return this.selectedMode == SelectedType.SWITCH;\n        },\n    })\n    selectedSpriteFrame: cc.SpriteFrame = null;\n    //未被选择的SpriteFrame\n    _unselectedSpriteFrame: cc.SpriteFrame = null;\n    //自适应尺寸\n    @property({\n        tooltip: CC_DEV && \"自适应尺寸（宽或高）\",\n    })\n    adaptiveSize: boolean = false;\n    //选择\n    _selected: boolean = false;\n    set selected(val: boolean) {\n        this._selected = val;\n        this.onSelectIndexChange();\n        if (!this.selectedFlag) return;\n        switch (this.selectedMode) {\n            case SelectedType.TOGGLE:\n                this.selectedFlag.active = val;\n                break;\n            case SelectedType.SWITCH:\n                let sp: cc.Sprite = this.selectedFlag.getComponent(cc.Sprite);\n                if (sp) {\n                    sp.spriteFrame = val ? this.selectedSpriteFrame : this._unselectedSpriteFrame;\n                }\n                break;\n        }\n    }\n    get selected() {\n        return this._selected;\n    }\n    //按钮组件\n    private _btnCom: any;\n    get btnCom() {\n        if (!this._btnCom) this._btnCom = this.node.getComponent(cc.Button);\n        return this._btnCom;\n    }\n    //依赖的List组件\n    public list: List;\n    //是否已经注册过事件\n    private _eventReg = false;\n    //序列id\n    public listId: number;\n    onLoad() {\n        // //没有按钮组件的话，selectedFlag无效\n        // if (!this.btnCom)\n        //     this.selectedMode == SelectedType.NONE;\n        //有选择模式时，保存相应的东西\n        if (this.selectedMode == SelectedType.SWITCH) {\n            let com: cc.Sprite = this.selectedFlag.getComponent(cc.Sprite);\n            this._unselectedSpriteFrame = com.spriteFrame;\n        }\n    }\n    onDestroy() {\n        this.node.off(cc.Node.EventType.SIZE_CHANGED, this._onSizeChange, this);\n    }\n    _registerEvent() {\n        if (!this._eventReg) {\n            if (this.btnCom && this.list.selectedMode > 0) {\n                this.btnCom.clickEvents.unshift(this.createEvt(this, \"onClickThis\"));\n            }\n            if (this.adaptiveSize) {\n                this.node.on(cc.Node.EventType.SIZE_CHANGED, this._onSizeChange, this);\n            }\n            this._eventReg = true;\n        }\n    }\n    _onSizeChange() {\n        this.list._onItemAdaptive(this.node);\n    }\n    /**\n     * 创建事件\n     * @param {cc.Component} component 组件脚本\n     * @param {string} handlerName 触发函数名称\n     * @param {cc.Node} node 组件所在node（不传的情况下取component.node）\n     * @returns cc.Component.EventHandler\n     */\n    createEvt(component: cc.Component, handlerName: string, node: cc.Node = null) {\n        if (!component.isValid) return; //有些异步加载的，节点以及销毁了。\n        component[\"comName\"] =\n            component[\"comName\"] ||\n            component.name\n                .match(/\\<(.*?)\\>/g)\n                .pop()\n                .replace(/\\<|>/g, \"\");\n        let evt = new cc.Component.EventHandler();\n        evt.target = node || component.node;\n        evt.component = component[\"comName\"];\n        evt.handler = handlerName;\n        return evt;\n    }\n    showAni(aniType: number, callFunc: Function, del: boolean) {\n        let t: any = this;\n        let tween: cc.Tween;\n        switch (aniType) {\n            case 0: //向上消失\n                tween = cc\n                    .tween(t.node)\n                    .to(0.2, { scale: 0.7 })\n                    .by(0.3, { y: t.node.height * 2 });\n                break;\n            case 1: //向右消失\n                tween = cc\n                    .tween(t.node)\n                    .to(0.2, { scale: 0.7 })\n                    .by(0.3, { x: t.node.width * 2 });\n                break;\n            case 2: //向下消失\n                tween = cc\n                    .tween(t.node)\n                    .to(0.2, { scale: 0.7 })\n                    .by(0.3, { y: t.node.height * -2 });\n                break;\n            case 3: //向左消失\n                tween = cc\n                    .tween(t.node)\n                    .to(0.2, { scale: 0.7 })\n                    .by(0.3, { x: t.node.width * -2 });\n                break;\n            default: //默认：缩小消失\n                tween = cc.tween(t.node).to(0.3, { scale: 0.1 });\n                break;\n        }\n        if (callFunc || del) {\n            tween.call(() => {\n                if (del) {\n                    t.list._delSingleItem(t.node);\n                    for (let n: number = t.list.displayData.length - 1; n >= 0; n--) {\n                        if (t.list.displayData[n].id == t.listId) {\n                            t.list.displayData.splice(n, 1);\n                            break;\n                        }\n                    }\n                }\n                callFunc();\n            });\n        }\n        tween.start();\n    }\n    onClickThis() {\n        this.list.selectedId = this.listId;\n    }\n    onSelectIndexChange() {}\n}\n","/******************************************\n * @author kL <klk0@qq.com>\n * @date 2019/6/6\n * @doc 列表组件.\n * @end\n ******************************************/\nconst { ccclass, property, disallowMultiple, menu, executionOrder, requireComponent } =\n    cc._decorator;\n\nimport ListItem from \"./ListItem\";\n\nenum TemplateType {\n    NODE = 1,\n    PREFAB = 2,\n}\n\nenum SlideType {\n    NORMAL = 1, //普通\n    ADHERING = 2, //粘附模式，将强制关闭滚动惯性\n    PAGE = 3, //页面模式，将强制关闭滚动惯性\n}\n\nenum SelectedType {\n    NONE = 0,\n    SINGLE = 1, //单选\n    MULT = 2, //多选\n}\n\n@ccclass\n@disallowMultiple()\n@menu(\"自定义组件/List\")\n@requireComponent(cc.ScrollView)\n//脚本生命周期回调的执行优先级。小于 0 的脚本将优先执行，大于 0 的脚本将最后执行。该优先级只对 onLoad, onEnable, start, update 和 lateUpdate 有效，对 onDisable 和 onDestroy 无效。\n@executionOrder(-5000)\nexport default class List extends cc.Component {\n    //模板类型\n    @property({ type: cc.Enum(TemplateType), tooltip: CC_DEV && \"模板类型\" })\n    private templateType: TemplateType = TemplateType.NODE;\n    //模板Item（Node）\n    @property({\n        type: cc.Node,\n        tooltip: CC_DEV && \"模板Item\",\n        visible() {\n            return this.templateType == TemplateType.NODE;\n        },\n    })\n    tmpNode: cc.Node = null;\n    //模板Item（Prefab）\n    @property({\n        type: cc.Prefab,\n        tooltip: CC_DEV && \"模板Item\",\n        visible() {\n            return this.templateType == TemplateType.PREFAB;\n        },\n    })\n    tmpPrefab: cc.Prefab = null;\n    //滑动模式\n    @property()\n    private _slideMode: SlideType = SlideType.NORMAL;\n    @property({\n        type: cc.Enum(SlideType),\n        tooltip: CC_DEV && \"滑动模式\",\n    })\n    set slideMode(val: SlideType) {\n        this._slideMode = val;\n    }\n    get slideMode() {\n        return this._slideMode;\n    }\n    //翻页作用距离\n    @property({\n        type: cc.Float,\n        range: [0, 1, 0.1],\n        tooltip: CC_DEV && \"翻页作用距离\",\n        slide: true,\n        visible() {\n            return this._slideMode == SlideType.PAGE;\n        },\n    })\n    public pageDistance: number = 0.3;\n    //页面改变事件\n    @property({\n        type: cc.Component.EventHandler,\n        tooltip: CC_DEV && \"页面改变事件\",\n        visible() {\n            return this._slideMode == SlideType.PAGE;\n        },\n    })\n    private pageChangeEvent: cc.Component.EventHandler = new cc.Component.EventHandler();\n    //是否为虚拟列表（动态列表）\n    @property()\n    private _virtual: boolean = true;\n    @property({\n        type: cc.Boolean,\n        tooltip: CC_DEV && \"是否为虚拟列表（动态列表）\",\n    })\n    set virtual(val: boolean) {\n        if (val != null) this._virtual = val;\n        if (!CC_DEV && this._numItems != 0) {\n            this._onScrolling();\n        }\n    }\n    get virtual() {\n        return this._virtual;\n    }\n    //是否为循环列表\n    @property({\n        tooltip: CC_DEV && \"是否为循环列表\",\n        visible() {\n            let val: boolean = /*this.virtual &&*/ this.slideMode == SlideType.NORMAL;\n            if (!val) this.cyclic = false;\n            return val;\n        },\n    })\n    public cyclic: boolean = false;\n    //缺省居中\n    @property({\n        tooltip: CC_DEV && \"Item数量不足以填满Content时，是否居中显示Item（不支持Grid布局）\",\n        visible() {\n            return this.virtual;\n        },\n    })\n    public lackCenter: boolean = false;\n    //缺省可滑动\n    @property({\n        tooltip: CC_DEV && \"Item数量不足以填满Content时，是否可滑动\",\n        visible() {\n            let val: boolean = this.virtual && !this.lackCenter;\n            if (!val) this.lackSlide = false;\n            return val;\n        },\n    })\n    public lackSlide: boolean = false;\n    //刷新频率\n    @property({ type: cc.Integer })\n    private _updateRate: number = 0;\n    @property({\n        type: cc.Integer,\n        range: [0, 6, 1],\n        tooltip: CC_DEV && \"刷新频率（值越大刷新频率越低、性能越高）\",\n        slide: true,\n    })\n    set updateRate(val: number) {\n        if (val >= 0 && val <= 6) {\n            this._updateRate = val;\n        }\n    }\n    get updateRate() {\n        return this._updateRate;\n    }\n    //分帧渲染（每帧渲染的Item数量（<=0时关闭分帧渲染））\n    @property({\n        type: cc.Integer,\n        range: [0, 12, 1],\n        tooltip: CC_DEV && \"逐帧渲染时，每帧渲染的Item数量（<=0时关闭分帧渲染）\",\n        slide: true,\n    })\n    public frameByFrameRenderNum: number = 0;\n    //渲染事件（渲染器）\n    @property({\n        type: cc.Component.EventHandler,\n        tooltip: CC_DEV && \"渲染事件（渲染器）\",\n    })\n    private renderEvent: cc.Component.EventHandler = new cc.Component.EventHandler();\n    //选择模式\n    @property({\n        type: cc.Enum(SelectedType),\n        tooltip: CC_DEV && \"选择模式\",\n    })\n    public selectedMode: SelectedType = SelectedType.NONE;\n    @property({\n        tooltip: CC_DEV && \"是否重复响应单选事件\",\n        visible() {\n            return this.selectedMode == SelectedType.SINGLE;\n        },\n    })\n    public repeatEventSingle: boolean = false;\n    //触发选择事件\n    @property({\n        type: cc.Component.EventHandler,\n        tooltip: CC_DEV && \"触发选择事件\",\n        visible() {\n            return this.selectedMode > SelectedType.NONE;\n        },\n    })\n    private selectedEvent: cc.Component.EventHandler = new cc.Component.EventHandler();\n    //当前选择id\n    private _selectedId: number = -1;\n    private _lastSelectedId: number;\n    private multSelected: number[];\n    set selectedId(val: number) {\n        let t: any = this;\n        let item: any;\n        switch (t.selectedMode) {\n            case SelectedType.SINGLE: {\n                if (!t.repeatEventSingle && val == t._selectedId) return;\n                item = t.getItemByListId(val);\n                // if (!item && val >= 0)\n                //     return;\n                let listItem: ListItem;\n                if (t._selectedId >= 0) t._lastSelectedId = t._selectedId;\n                //如果＜0则取消选择，把_lastSelectedId也置空吧，如果以后有特殊需求再改吧。\n                else t._lastSelectedId = null;\n                t._selectedId = val;\n                if (item) {\n                    listItem = item.getComponent(ListItem);\n                    listItem.selected = true;\n                }\n                if (t._lastSelectedId >= 0 && t._lastSelectedId != t._selectedId) {\n                    let lastItem: any = t.getItemByListId(t._lastSelectedId);\n                    if (lastItem) {\n                        lastItem.getComponent(ListItem).selected = false;\n                    }\n                }\n                if (t.selectedEvent) {\n                    cc.Component.EventHandler.emitEvents(\n                        [t.selectedEvent],\n                        item,\n                        val % this._actualNumItems,\n                        t._lastSelectedId == null ? null : t._lastSelectedId % this._actualNumItems\n                    );\n                }\n                break;\n            }\n            case SelectedType.MULT: {\n                item = t.getItemByListId(val);\n                if (!item) return;\n                let listItem = item.getComponent(ListItem);\n                if (t._selectedId >= 0) t._lastSelectedId = t._selectedId;\n                t._selectedId = val;\n                let bool: boolean = !listItem.selected;\n                listItem.selected = bool;\n                let sub: number = t.multSelected.indexOf(val);\n                if (bool && sub < 0) {\n                    t.multSelected.push(val);\n                } else if (!bool && sub >= 0) {\n                    t.multSelected.splice(sub, 1);\n                }\n                if (t.selectedEvent) {\n                    cc.Component.EventHandler.emitEvents(\n                        [t.selectedEvent],\n                        item,\n                        val % this._actualNumItems,\n                        t._lastSelectedId == null ? null : t._lastSelectedId % this._actualNumItems,\n                        bool\n                    );\n                }\n                break;\n            }\n        }\n    }\n    get selectedId() {\n        return this._selectedId;\n    }\n    private _forceUpdate: boolean = false;\n    private _align: number;\n    private _horizontalDir: number;\n    private _verticalDir: number;\n    private _startAxis: number;\n    private _alignCalcType: number;\n    public content: cc.Node;\n    private firstListId: number;\n    public displayItemNum: number;\n    private _updateDone: boolean = true;\n    private _updateCounter: number;\n    public _actualNumItems: number;\n    private _cyclicNum: number;\n    private _cyclicPos1: number;\n    private _cyclicPos2: number;\n    //列表数量\n    @property({\n        serializable: false,\n    })\n    private _numItems: number = 0;\n    set numItems(val: number) {\n        let t = this;\n        if (!t.checkInited(false)) return;\n        if (val == null || val < 0) {\n            CC_DEBUG && cc.error(\"numItems set the wrong::\", val);\n            return;\n        }\n        t._actualNumItems = t._numItems = val;\n        t._forceUpdate = true;\n\n        if (t._virtual) {\n            t._resizeContent();\n            if (t.cyclic) {\n                t._numItems = t._cyclicNum * t._numItems;\n            }\n            t._onScrolling();\n            if (!t.frameByFrameRenderNum && t.slideMode == SlideType.PAGE)\n                t.curPageNum = t.nearestListId;\n        } else {\n            if (t.cyclic) {\n                t._resizeContent();\n                t._numItems = t._cyclicNum * t._numItems;\n            }\n            let layout: cc.Layout = t.content.getComponent(cc.Layout);\n            if (layout) {\n                layout.enabled = true;\n            }\n            t._delRedundantItem();\n\n            t.firstListId = 0;\n            if (t.frameByFrameRenderNum > 0) {\n                //先渲染几个出来\n                let len: number =\n                    t.frameByFrameRenderNum > t._numItems ? t._numItems : t.frameByFrameRenderNum;\n                for (let n: number = 0; n < len; n++) {\n                    t._createOrUpdateItem2(n);\n                }\n                if (t.frameByFrameRenderNum < t._numItems) {\n                    t._updateCounter = t.frameByFrameRenderNum;\n                    t._updateDone = false;\n                }\n            } else {\n                for (let n: number = 0; n < t._numItems; n++) {\n                    t._createOrUpdateItem2(n);\n                }\n                t.displayItemNum = t._numItems;\n            }\n        }\n    }\n    get numItems() {\n        return this._actualNumItems;\n    }\n\n    private _inited: boolean = false;\n    private _scrollView: cc.ScrollView;\n    get scrollView() {\n        return this._scrollView;\n    }\n    private _layout: cc.Layout;\n    private _resizeMode: cc.Layout.ResizeMode;\n    private _topGap: number;\n    private _rightGap: number;\n    private _bottomGap: number;\n    private _leftGap: number;\n\n    private _columnGap: number;\n    private _lineGap: number;\n    private _colLineNum: number;\n\n    private _lastDisplayData: number[];\n    public displayData: any[];\n    private _pool: cc.NodePool;\n\n    private _itemTmp: any;\n    private _needUpdateWidget: boolean = false;\n    private _itemSize: cc.Size;\n    private _sizeType: boolean;\n\n    public _customSize: any;\n\n    private frameCount: number;\n    private _aniDelRuning: boolean = false;\n    private _aniDelCB: Function;\n    private _aniDelItem: any;\n    private _aniDelBeforePos: cc.Vec2;\n    private _aniDelBeforeScale: number;\n    private viewTop: number;\n    private viewRight: number;\n    private viewBottom: number;\n    private viewLeft: number;\n\n    private _doneAfterUpdate: boolean = false;\n\n    private elasticTop: number;\n    private elasticRight: number;\n    private elasticBottom: number;\n    private elasticLeft: number;\n\n    private scrollToListId: number;\n\n    private adhering: boolean = false;\n\n    private _adheringBarrier: boolean = false;\n    private nearestListId: number;\n\n    public curPageNum: number = 0;\n    private _beganPos: number;\n    private _scrollPos: number;\n    private curScrollIsTouch: boolean; //当前滑动是否为手动\n\n    private _scrollToListId: number;\n    private _scrollToEndTime: number;\n    private _scrollToSo: any;\n\n    private _lack: boolean;\n    private _allItemSize: number;\n    private _allItemSizeNoEdge: number;\n\n    private _scrollItem: any; //当前控制 ScrollView 滚动的 Item\n\n    //----------------------------------------------------------------------------\n\n    onLoad() {\n        this._init();\n    }\n\n    onDestroy() {\n        let t: any = this;\n        if (cc.isValid(t._itemTmp)) t._itemTmp.destroy();\n        if (cc.isValid(t.tmpNode)) t.tmpNode.destroy();\n        t._pool && t._pool.clear();\n    }\n\n    onEnable() {\n        // if (!CC_EDITOR)\n        this._registerEvent();\n        this._init();\n        // 处理重新显示后，有可能上一次的动画移除还未播放完毕，导致动画卡住的问题\n        if (this._aniDelRuning) {\n            this._aniDelRuning = false;\n            if (this._aniDelItem) {\n                if (this._aniDelBeforePos) {\n                    this._aniDelItem.position = this._aniDelBeforePos;\n                    delete this._aniDelBeforePos;\n                }\n                if (this._aniDelBeforeScale) {\n                    this._aniDelItem.scale = this._aniDelBeforeScale;\n                    delete this._aniDelBeforeScale;\n                }\n                delete this._aniDelItem;\n            }\n            if (this._aniDelCB) {\n                this._aniDelCB();\n                delete this._aniDelCB;\n            }\n        }\n    }\n\n    onDisable() {\n        // if (!CC_EDITOR)\n        this._unregisterEvent();\n    }\n    //注册事件\n    _registerEvent() {\n        let t: any = this;\n        t.node.on(cc.Node.EventType.TOUCH_START, t._onTouchStart, t, true);\n        t.node.on(\"touch-up\", t._onTouchUp, t);\n        t.node.on(cc.Node.EventType.TOUCH_CANCEL, t._onTouchCancelled, t, true);\n        t.node.on(\"scroll-began\", t._onScrollBegan, t, true);\n        t.node.on(\"scroll-ended\", t._onScrollEnded, t, true);\n        t.node.on(\"scrolling\", t._onScrolling, t, true);\n        t.node.on(cc.Node.EventType.SIZE_CHANGED, t._onSizeChanged, t);\n    }\n    //卸载事件\n    _unregisterEvent() {\n        let t: any = this;\n        t.node.off(cc.Node.EventType.TOUCH_START, t._onTouchStart, t, true);\n        t.node.off(\"touch-up\", t._onTouchUp, t);\n        t.node.off(cc.Node.EventType.TOUCH_CANCEL, t._onTouchCancelled, t, true);\n        t.node.off(\"scroll-began\", t._onScrollBegan, t, true);\n        t.node.off(\"scroll-ended\", t._onScrollEnded, t, true);\n        t.node.off(\"scrolling\", t._onScrolling, t, true);\n        t.node.off(cc.Node.EventType.SIZE_CHANGED, t._onSizeChanged, t);\n    }\n    //初始化各种..\n    _init() {\n        let t: any = this;\n        if (t._inited) return;\n\n        t._scrollView = t.node.getComponent(cc.ScrollView);\n\n        t.content = t._scrollView.content;\n        if (!t.content) {\n            CC_DEBUG && cc.error(t.node.name + \"'s CC_DEBUG && cc.ScrollView unset content!\");\n            return;\n        }\n\n        t._layout = t.content.getComponent(cc.Layout);\n\n        t._align = t._layout.type; //排列模式\n        t._resizeMode = t._layout.resizeMode; //自适应模式\n        t._startAxis = t._layout.startAxis;\n\n        t._topGap = t._layout.paddingTop; //顶边距\n        t._rightGap = t._layout.paddingRight; //右边距\n        t._bottomGap = t._layout.paddingBottom; //底边距\n        t._leftGap = t._layout.paddingLeft; //左边距\n\n        t._columnGap = t._layout.spacingX; //列距\n        t._lineGap = t._layout.spacingY; //行距\n\n        t._colLineNum; //列数或行数（非GRID模式则=1，表示单列或单行）;\n\n        t._verticalDir = t._layout.verticalDirection; //垂直排列子节点的方向\n        t._horizontalDir = t._layout.horizontalDirection; //水平排列子节点的方向\n\n        t.setTemplateItem(\n            cc.instantiate(t.templateType == TemplateType.PREFAB ? t.tmpPrefab : t.tmpNode)\n        );\n\n        // 特定的滑动模式处理\n        if (t._slideMode == SlideType.ADHERING || t._slideMode == SlideType.PAGE) {\n            t._scrollView.inertia = false;\n            t._scrollView._onMouseWheel = function () {\n                return;\n            };\n        }\n        if (!t.virtual)\n            // lackCenter 仅支持 Virtual 模式\n            t.lackCenter = false;\n\n        t._lastDisplayData = []; //最后一次刷新的数据\n        t.displayData = []; //当前数据\n        t._pool = new cc.NodePool(); //这是个池子..\n        t._forceUpdate = false; //是否强制更新\n        t._updateCounter = 0; //当前分帧渲染帧数\n        t._updateDone = true; //分帧渲染是否完成\n\n        t.curPageNum = 0; //当前页数\n\n        if (t.cyclic || 0) {\n            t._scrollView._processAutoScrolling = this._processAutoScrolling.bind(t);\n            t._scrollView._startBounceBackIfNeeded = function () {\n                return false;\n            };\n            // t._scrollView._scrollChildren = function () {\n            //     return false;\n            // }\n        }\n\n        switch (t._align) {\n            case cc.Layout.Type.HORIZONTAL: {\n                switch (t._horizontalDir) {\n                    case cc.Layout.HorizontalDirection.LEFT_TO_RIGHT:\n                        t._alignCalcType = 1;\n                        break;\n                    case cc.Layout.HorizontalDirection.RIGHT_TO_LEFT:\n                        t._alignCalcType = 2;\n                        break;\n                }\n                break;\n            }\n            case cc.Layout.Type.VERTICAL: {\n                switch (t._verticalDir) {\n                    case cc.Layout.VerticalDirection.TOP_TO_BOTTOM:\n                        t._alignCalcType = 3;\n                        break;\n                    case cc.Layout.VerticalDirection.BOTTOM_TO_TOP:\n                        t._alignCalcType = 4;\n                        break;\n                }\n                break;\n            }\n            case cc.Layout.Type.GRID: {\n                switch (t._startAxis) {\n                    case cc.Layout.AxisDirection.HORIZONTAL:\n                        switch (t._verticalDir) {\n                            case cc.Layout.VerticalDirection.TOP_TO_BOTTOM:\n                                t._alignCalcType = 3;\n                                break;\n                            case cc.Layout.VerticalDirection.BOTTOM_TO_TOP:\n                                t._alignCalcType = 4;\n                                break;\n                        }\n                        break;\n                    case cc.Layout.AxisDirection.VERTICAL:\n                        switch (t._horizontalDir) {\n                            case cc.Layout.HorizontalDirection.LEFT_TO_RIGHT:\n                                t._alignCalcType = 1;\n                                break;\n                            case cc.Layout.HorizontalDirection.RIGHT_TO_LEFT:\n                                t._alignCalcType = 2;\n                                break;\n                        }\n                        break;\n                }\n                break;\n            }\n        }\n        // 清空 content\n        // t.content.children.forEach((child: cc.Node) => {\n        //     child.removeFromParent();\n        //     if (child != t.tmpNode && child.isValid)\n        //         child.destroy();\n        // });\n        t.content.removeAllChildren();\n        t._inited = true;\n    }\n    /**\n     * 为了实现循环列表，必须覆写cc.ScrollView的某些函数\n     * @param {Number} dt\n     */\n    _processAutoScrolling(dt: number) {\n        let brakingFactor: number = 1;\n        this._scrollView[\"_autoScrollAccumulatedTime\"] += dt * (1 / brakingFactor);\n\n        let percentage: number = Math.min(\n            1,\n            this._scrollView[\"_autoScrollAccumulatedTime\"] /\n                this._scrollView[\"_autoScrollTotalTime\"]\n        );\n        if (this._scrollView[\"_autoScrollAttenuate\"]) {\n            let time: number = percentage - 1;\n            percentage = time * time * time * time * time + 1;\n        }\n\n        let newPosition: any = this._scrollView[\"_autoScrollStartPosition\"].add(\n            this._scrollView[\"_autoScrollTargetDelta\"].mul(percentage)\n        );\n        let EPSILON: number = this._scrollView[\"getScrollEndedEventTiming\"]();\n        let reachedEnd: boolean = Math.abs(percentage - 1) <= EPSILON;\n\n        let fireEvent: boolean =\n            Math.abs(percentage - 1) <= this._scrollView[\"getScrollEndedEventTiming\"]();\n        if (fireEvent && !this._scrollView[\"_isScrollEndedWithThresholdEventFired\"]) {\n            this._scrollView[\"_dispatchEvent\"](\"scroll-ended-with-threshold\");\n            this._scrollView[\"_isScrollEndedWithThresholdEventFired\"] = true;\n        }\n\n        if (reachedEnd) {\n            this._scrollView[\"_autoScrolling\"] = false;\n        }\n\n        let deltaMove: any = newPosition.sub(this._scrollView.getContentPosition());\n        this._scrollView[\"_moveContent\"](this._scrollView[\"_clampDelta\"](deltaMove), reachedEnd);\n        this._scrollView[\"_dispatchEvent\"](\"scrolling\");\n\n        // scollTo API controll move\n        if (!this._scrollView[\"_autoScrolling\"]) {\n            this._scrollView[\"_isBouncing\"] = false;\n            this._scrollView[\"_scrolling\"] = false;\n            this._scrollView[\"_dispatchEvent\"](\"scroll-ended\");\n        }\n    }\n    //设置模板Item\n    setTemplateItem(item: any) {\n        if (!item) return;\n        let t: any = this;\n        t._itemTmp = item;\n\n        if (t._resizeMode == cc.Layout.ResizeMode.CHILDREN) t._itemSize = t._layout.cellSize;\n        else t._itemSize = cc.size(item.width, item.height);\n\n        //获取ListItem，如果没有就取消选择模式\n        let com = item.getComponent(ListItem);\n        let remove = false;\n        if (!com) remove = true;\n        // if (com) {\n        //     if (!com._btnCom && !item.getComponent(cc.Button)) {\n        //         remove = true;\n        //     }\n        // }\n        if (remove) {\n            t.selectedMode = SelectedType.NONE;\n        }\n        com = item.getComponent(cc.Widget);\n        if (com && com.enabled) {\n            t._needUpdateWidget = true;\n        }\n        if (t.selectedMode == SelectedType.MULT) t.multSelected = [];\n\n        switch (t._align) {\n            case cc.Layout.Type.HORIZONTAL:\n                t._colLineNum = 1;\n                t._sizeType = false;\n                break;\n            case cc.Layout.Type.VERTICAL:\n                t._colLineNum = 1;\n                t._sizeType = true;\n                break;\n            case cc.Layout.Type.GRID:\n                switch (t._startAxis) {\n                    case cc.Layout.AxisDirection.HORIZONTAL:\n                        //计算列数\n                        let trimW: number = t.content.width - t._leftGap - t._rightGap;\n                        t._colLineNum = Math.floor(\n                            (trimW + t._columnGap) / (t._itemSize.width + t._columnGap)\n                        );\n                        t._sizeType = true;\n                        break;\n                    case cc.Layout.AxisDirection.VERTICAL:\n                        //计算行数\n                        let trimH: number = t.content.height - t._topGap - t._bottomGap;\n                        t._colLineNum = Math.floor(\n                            (trimH + t._lineGap) / (t._itemSize.height + t._lineGap)\n                        );\n                        t._sizeType = false;\n                        break;\n                }\n                break;\n        }\n    }\n    /**\n     * 检查是否初始化\n     * @param {Boolean} printLog 是否打印错误信息\n     * @returns\n     */\n    checkInited(printLog: boolean = true) {\n        if (!this._inited) {\n            if (printLog) cc.error(\"List initialization not completed!\");\n            return false;\n        }\n        return true;\n    }\n    //禁用 Layout 组件，自行计算 Content Size\n    _resizeContent() {\n        let t: any = this;\n        let result: number;\n\n        switch (t._align) {\n            case cc.Layout.Type.HORIZONTAL: {\n                if (t._customSize) {\n                    let fixed: any = t._getFixedSize(null);\n                    result =\n                        t._leftGap +\n                        fixed.val +\n                        t._itemSize.width * (t._numItems - fixed.count) +\n                        t._columnGap * (t._numItems - 1) +\n                        t._rightGap;\n                } else {\n                    result =\n                        t._leftGap +\n                        t._itemSize.width * t._numItems +\n                        t._columnGap * (t._numItems - 1) +\n                        t._rightGap;\n                }\n                break;\n            }\n            case cc.Layout.Type.VERTICAL: {\n                if (t._customSize) {\n                    let fixed: any = t._getFixedSize(null);\n                    result =\n                        t._topGap +\n                        fixed.val +\n                        t._itemSize.height * (t._numItems - fixed.count) +\n                        t._lineGap * (t._numItems - 1) +\n                        t._bottomGap;\n                } else {\n                    result =\n                        t._topGap +\n                        t._itemSize.height * t._numItems +\n                        t._lineGap * (t._numItems - 1) +\n                        t._bottomGap;\n                }\n                break;\n            }\n            case cc.Layout.Type.GRID: {\n                //网格模式不支持居中\n                if (t.lackCenter) t.lackCenter = false;\n                switch (t._startAxis) {\n                    case cc.Layout.AxisDirection.HORIZONTAL:\n                        let lineNum: number = Math.ceil(t._numItems / t._colLineNum);\n                        result =\n                            t._topGap +\n                            t._itemSize.height * lineNum +\n                            t._lineGap * (lineNum - 1) +\n                            t._bottomGap;\n                        break;\n                    case cc.Layout.AxisDirection.VERTICAL:\n                        let colNum: number = Math.ceil(t._numItems / t._colLineNum);\n                        result =\n                            t._leftGap +\n                            t._itemSize.width * colNum +\n                            t._columnGap * (colNum - 1) +\n                            t._rightGap;\n                        break;\n                }\n                break;\n            }\n        }\n\n        let layout: cc.Layout = t.content.getComponent(cc.Layout);\n        if (layout) layout.enabled = false;\n\n        t._allItemSize = result;\n        t._allItemSizeNoEdge =\n            t._allItemSize - (t._sizeType ? t._topGap + t._bottomGap : t._leftGap + t._rightGap);\n\n        if (t.cyclic) {\n            let totalSize: number = t._sizeType ? t.node.height : t.node.width;\n\n            t._cyclicPos1 = 0;\n            totalSize -= t._cyclicPos1;\n            t._cyclicNum = Math.ceil(totalSize / t._allItemSizeNoEdge) + 1;\n            let spacing: number = t._sizeType ? t._lineGap : t._columnGap;\n            t._cyclicPos2 = t._cyclicPos1 + t._allItemSizeNoEdge + spacing;\n            t._cyclicAllItemSize =\n                t._allItemSize +\n                t._allItemSizeNoEdge * (t._cyclicNum - 1) +\n                spacing * (t._cyclicNum - 1);\n            t._cycilcAllItemSizeNoEdge = t._allItemSizeNoEdge * t._cyclicNum;\n            t._cycilcAllItemSizeNoEdge += spacing * (t._cyclicNum - 1);\n            // cc.log('_cyclicNum ->', t._cyclicNum, t._allItemSizeNoEdge, t._allItemSize, t._cyclicPos1, t._cyclicPos2);\n        }\n\n        t._lack = !t.cyclic && t._allItemSize < (t._sizeType ? t.node.height : t.node.width);\n        let slideOffset: number = (!t._lack || !t.lackCenter) && t.lackSlide ? 0 : 0.1;\n\n        let targetWH: number = t._lack\n            ? (t._sizeType ? t.node.height : t.node.width) - slideOffset\n            : t.cyclic\n            ? t._cyclicAllItemSize\n            : t._allItemSize;\n        if (targetWH < 0) targetWH = 0;\n\n        if (t._sizeType) {\n            t.content.height = targetWH;\n        } else {\n            t.content.width = targetWH;\n        }\n\n        // cc.log('_resizeContent()  numItems =', t._numItems, '，content =', t.content);\n    }\n\n    //滚动进行时...\n    _onScrolling(ev: cc.Event = null) {\n        if (this.frameCount == null) this.frameCount = this._updateRate;\n        if (!this._forceUpdate && ev && ev.type != \"scroll-ended\" && this.frameCount > 0) {\n            this.frameCount--;\n            return;\n        } else this.frameCount = this._updateRate;\n\n        if (this._aniDelRuning) return;\n\n        //循环列表处理\n        if (this.cyclic) {\n            let scrollPos: any = this.content.getPosition();\n            scrollPos = this._sizeType ? scrollPos.y : scrollPos.x;\n\n            let addVal =\n                this._allItemSizeNoEdge + (this._sizeType ? this._lineGap : this._columnGap);\n            let add: any = this._sizeType ? cc.v2(0, addVal) : cc.v2(addVal, 0);\n\n            switch (this._alignCalcType) {\n                case 1: //单行HORIZONTAL（LEFT_TO_RIGHT）、网格VERTICAL（LEFT_TO_RIGHT）\n                    if (scrollPos > -this._cyclicPos1) {\n                        this.content.x = -this._cyclicPos2;\n                        if (this._scrollView.isAutoScrolling()) {\n                            this._scrollView[\"_autoScrollStartPosition\"] =\n                                this._scrollView[\"_autoScrollStartPosition\"].sub(add);\n                        }\n                        // if (this._beganPos) {\n                        //     this._beganPos += add;\n                        // }\n                    } else if (scrollPos < -this._cyclicPos2) {\n                        this.content.x = -this._cyclicPos1;\n                        if (this._scrollView.isAutoScrolling()) {\n                            this._scrollView[\"_autoScrollStartPosition\"] =\n                                this._scrollView[\"_autoScrollStartPosition\"].add(add);\n                        }\n                        // if (this._beganPos) {\n                        //     this._beganPos -= add;\n                        // }\n                    }\n                    break;\n                case 2: //单行HORIZONTAL（RIGHT_TO_LEFT）、网格VERTICAL（RIGHT_TO_LEFT）\n                    if (scrollPos < this._cyclicPos1) {\n                        this.content.x = this._cyclicPos2;\n                        if (this._scrollView.isAutoScrolling()) {\n                            this._scrollView[\"_autoScrollStartPosition\"] =\n                                this._scrollView[\"_autoScrollStartPosition\"].add(add);\n                        }\n                    } else if (scrollPos > this._cyclicPos2) {\n                        this.content.x = this._cyclicPos1;\n                        if (this._scrollView.isAutoScrolling()) {\n                            this._scrollView[\"_autoScrollStartPosition\"] =\n                                this._scrollView[\"_autoScrollStartPosition\"].sub(add);\n                        }\n                    }\n                    break;\n                case 3: //单列VERTICAL（TOP_TO_BOTTOM）、网格HORIZONTAL（TOP_TO_BOTTOM）\n                    if (scrollPos < this._cyclicPos1) {\n                        this.content.y = this._cyclicPos2;\n                        if (this._scrollView.isAutoScrolling()) {\n                            this._scrollView[\"_autoScrollStartPosition\"] =\n                                this._scrollView[\"_autoScrollStartPosition\"].add(add);\n                        }\n                    } else if (scrollPos > this._cyclicPos2) {\n                        this.content.y = this._cyclicPos1;\n                        if (this._scrollView.isAutoScrolling()) {\n                            this._scrollView[\"_autoScrollStartPosition\"] =\n                                this._scrollView[\"_autoScrollStartPosition\"].sub(add);\n                        }\n                    }\n                    break;\n                case 4: //单列VERTICAL（BOTTOM_TO_TOP）、网格HORIZONTAL（BOTTOM_TO_TOP）\n                    if (scrollPos > -this._cyclicPos1) {\n                        this.content.y = -this._cyclicPos2;\n                        if (this._scrollView.isAutoScrolling()) {\n                            this._scrollView[\"_autoScrollStartPosition\"] =\n                                this._scrollView[\"_autoScrollStartPosition\"].sub(add);\n                        }\n                    } else if (scrollPos < -this._cyclicPos2) {\n                        this.content.y = -this._cyclicPos1;\n                        if (this._scrollView.isAutoScrolling()) {\n                            this._scrollView[\"_autoScrollStartPosition\"] =\n                                this._scrollView[\"_autoScrollStartPosition\"].add(add);\n                        }\n                    }\n                    break;\n            }\n        }\n\n        this._calcViewPos();\n\n        let vTop: number, vRight: number, vBottom: number, vLeft: number;\n        if (this._sizeType) {\n            vTop = this.viewTop;\n            vBottom = this.viewBottom;\n        } else {\n            vRight = this.viewRight;\n            vLeft = this.viewLeft;\n        }\n\n        if (this._virtual) {\n            this.displayData = [];\n            let itemPos: any;\n\n            let curId: number = 0;\n            let endId: number = this._numItems - 1;\n\n            if (this._customSize) {\n                let breakFor: boolean = false;\n                //如果该item的位置在可视区域内，就推入displayData\n                for (; curId <= endId && !breakFor; curId++) {\n                    itemPos = this._calcItemPos(curId);\n                    switch (this._align) {\n                        case cc.Layout.Type.HORIZONTAL:\n                            if (itemPos.right >= vLeft && itemPos.left <= vRight) {\n                                this.displayData.push(itemPos);\n                            } else if (curId != 0 && this.displayData.length > 0) {\n                                breakFor = true;\n                            }\n                            break;\n                        case cc.Layout.Type.VERTICAL:\n                            if (itemPos.bottom <= vTop && itemPos.top >= vBottom) {\n                                this.displayData.push(itemPos);\n                            } else if (curId != 0 && this.displayData.length > 0) {\n                                breakFor = true;\n                            }\n                            break;\n                        case cc.Layout.Type.GRID:\n                            switch (this._startAxis) {\n                                case cc.Layout.AxisDirection.HORIZONTAL:\n                                    if (itemPos.bottom <= vTop && itemPos.top >= vBottom) {\n                                        this.displayData.push(itemPos);\n                                    } else if (curId != 0 && this.displayData.length > 0) {\n                                        breakFor = true;\n                                    }\n                                    break;\n                                case cc.Layout.AxisDirection.VERTICAL:\n                                    if (itemPos.right >= vLeft && itemPos.left <= vRight) {\n                                        this.displayData.push(itemPos);\n                                    } else if (curId != 0 && this.displayData.length > 0) {\n                                        breakFor = true;\n                                    }\n                                    break;\n                            }\n                            break;\n                    }\n                }\n            } else {\n                let ww: number = this._itemSize.width + this._columnGap;\n                let hh: number = this._itemSize.height + this._lineGap;\n                switch (this._alignCalcType) {\n                    case 1: //单行HORIZONTAL（LEFT_TO_RIGHT）、网格VERTICAL（LEFT_TO_RIGHT）\n                        curId = (vLeft - this._leftGap) / ww;\n                        endId = (vRight - this._leftGap) / ww;\n                        break;\n                    case 2: //单行HORIZONTAL（RIGHT_TO_LEFT）、网格VERTICAL（RIGHT_TO_LEFT）\n                        curId = (-vRight - this._rightGap) / ww;\n                        endId = (-vLeft - this._rightGap) / ww;\n                        break;\n                    case 3: //单列VERTICAL（TOP_TO_BOTTOM）、网格HORIZONTAL（TOP_TO_BOTTOM）\n                        curId = (-vTop - this._topGap) / hh;\n                        endId = (-vBottom - this._topGap) / hh;\n                        break;\n                    case 4: //单列VERTICAL（BOTTOM_TO_TOP）、网格HORIZONTAL（BOTTOM_TO_TOP）\n                        curId = (vBottom - this._bottomGap) / hh;\n                        endId = (vTop - this._bottomGap) / hh;\n                        break;\n                }\n                curId = Math.floor(curId) * this._colLineNum;\n                endId = Math.ceil(endId) * this._colLineNum;\n                endId--;\n                if (curId < 0) curId = 0;\n                if (endId >= this._numItems) endId = this._numItems - 1;\n                for (; curId <= endId; curId++) {\n                    this.displayData.push(this._calcItemPos(curId));\n                }\n            }\n            this._delRedundantItem();\n            if (this.displayData.length <= 0 || !this._numItems) {\n                //if none, delete all.\n                this._lastDisplayData = [];\n                return;\n            }\n            this.firstListId = this.displayData[0].id;\n            this.displayItemNum = this.displayData.length;\n\n            let len: number = this._lastDisplayData.length;\n\n            let haveDataChange: boolean = this.displayItemNum != len;\n            if (haveDataChange) {\n                // 如果是逐帧渲染，需要排序\n                if (this.frameByFrameRenderNum > 0) {\n                    this._lastDisplayData.sort((a, b) => {\n                        return a - b;\n                    });\n                }\n                // 因List的显示数据是有序的，所以只需要判断数组长度是否相等，以及头、尾两个元素是否相等即可。\n                haveDataChange =\n                    this.firstListId != this._lastDisplayData[0] ||\n                    this.displayData[this.displayItemNum - 1].id != this._lastDisplayData[len - 1];\n            }\n\n            if (this._forceUpdate || haveDataChange) {\n                //如果是强制更新\n                if (this.frameByFrameRenderNum > 0) {\n                    // if (this._updateDone) {\n                    // this._lastDisplayData = [];\n                    //逐帧渲染\n                    if (this._numItems > 0) {\n                        if (!this._updateDone) {\n                            this._doneAfterUpdate = true;\n                        } else {\n                            this._updateCounter = 0;\n                        }\n                        this._updateDone = false;\n                    } else {\n                        this._updateCounter = 0;\n                        this._updateDone = true;\n                    }\n                    // }\n                } else {\n                    //直接渲染\n                    this._lastDisplayData = [];\n                    // cc.log('List Display Data II::', this.displayData);\n                    for (let c = 0; c < this.displayItemNum; c++) {\n                        this._createOrUpdateItem(this.displayData[c]);\n                    }\n                    this._forceUpdate = false;\n                }\n            }\n            this._calcNearestItem();\n        }\n    }\n    //计算可视范围\n    _calcViewPos() {\n        let scrollPos: any = this.content.getPosition();\n        switch (this._alignCalcType) {\n            case 1: //单行HORIZONTAL（LEFT_TO_RIGHT）、网格VERTICAL（LEFT_TO_RIGHT）\n                this.elasticLeft = scrollPos.x > 0 ? scrollPos.x : 0;\n                this.viewLeft = (scrollPos.x < 0 ? -scrollPos.x : 0) - this.elasticLeft;\n                this.viewRight = this.viewLeft + this.node.width;\n                this.elasticRight =\n                    this.viewRight > this.content.width\n                        ? Math.abs(this.viewRight - this.content.width)\n                        : 0;\n                this.viewRight += this.elasticRight;\n                // cc.log(this.elasticLeft, this.elasticRight, this.viewLeft, this.viewRight);\n                break;\n            case 2: //单行HORIZONTAL（RIGHT_TO_LEFT）、网格VERTICAL（RIGHT_TO_LEFT）\n                this.elasticRight = scrollPos.x < 0 ? -scrollPos.x : 0;\n                this.viewRight = (scrollPos.x > 0 ? -scrollPos.x : 0) + this.elasticRight;\n                this.viewLeft = this.viewRight - this.node.width;\n                this.elasticLeft =\n                    this.viewLeft < -this.content.width\n                        ? Math.abs(this.viewLeft + this.content.width)\n                        : 0;\n                this.viewLeft -= this.elasticLeft;\n                // cc.log(this.elasticLeft, this.elasticRight, this.viewLeft, this.viewRight);\n                break;\n            case 3: //单列VERTICAL（TOP_TO_BOTTOM）、网格HORIZONTAL（TOP_TO_BOTTOM）\n                this.elasticTop = scrollPos.y < 0 ? Math.abs(scrollPos.y) : 0;\n                this.viewTop = (scrollPos.y > 0 ? -scrollPos.y : 0) + this.elasticTop;\n                this.viewBottom = this.viewTop - this.node.height;\n                this.elasticBottom =\n                    this.viewBottom < -this.content.height\n                        ? Math.abs(this.viewBottom + this.content.height)\n                        : 0;\n                this.viewBottom += this.elasticBottom;\n                // cc.log(this.elasticTop, this.elasticBottom, this.viewTop, this.viewBottom);\n                break;\n            case 4: //单列VERTICAL（BOTTOM_TO_TOP）、网格HORIZONTAL（BOTTOM_TO_TOP）\n                this.elasticBottom = scrollPos.y > 0 ? Math.abs(scrollPos.y) : 0;\n                this.viewBottom = (scrollPos.y < 0 ? -scrollPos.y : 0) - this.elasticBottom;\n                this.viewTop = this.viewBottom + this.node.height;\n                this.elasticTop =\n                    this.viewTop > this.content.height\n                        ? Math.abs(this.viewTop - this.content.height)\n                        : 0;\n                this.viewTop -= this.elasticTop;\n                // cc.log(this.elasticTop, this.elasticBottom, this.viewTop, this.viewBottom);\n                break;\n        }\n    }\n    //计算位置 根据id\n    _calcItemPos(id: number) {\n        let width: number,\n            height: number,\n            top: number,\n            bottom: number,\n            left: number,\n            right: number,\n            itemX: number,\n            itemY: number;\n        switch (this._align) {\n            case cc.Layout.Type.HORIZONTAL:\n                switch (this._horizontalDir) {\n                    case cc.Layout.HorizontalDirection.LEFT_TO_RIGHT: {\n                        if (this._customSize) {\n                            let fixed: any = this._getFixedSize(id);\n                            left =\n                                this._leftGap +\n                                (this._itemSize.width + this._columnGap) * (id - fixed.count) +\n                                (fixed.val + this._columnGap * fixed.count);\n                            let cs: number = this._customSize[id];\n                            width = cs > 0 ? cs : this._itemSize.width;\n                        } else {\n                            left = this._leftGap + (this._itemSize.width + this._columnGap) * id;\n                            width = this._itemSize.width;\n                        }\n                        if (this.lackCenter) {\n                            left -= this._leftGap;\n                            let offset: number =\n                                this.content.width / 2 - this._allItemSizeNoEdge / 2;\n                            left += offset;\n                        }\n                        right = left + width;\n                        return {\n                            id: id,\n                            left: left,\n                            right: right,\n                            x: left + this._itemTmp.anchorX * width,\n                            y: this._itemTmp.y,\n                        };\n                    }\n                    case cc.Layout.HorizontalDirection.RIGHT_TO_LEFT: {\n                        if (this._customSize) {\n                            let fixed: any = this._getFixedSize(id);\n                            right =\n                                -this._rightGap -\n                                (this._itemSize.width + this._columnGap) * (id - fixed.count) -\n                                (fixed.val + this._columnGap * fixed.count);\n                            let cs: number = this._customSize[id];\n                            width = cs > 0 ? cs : this._itemSize.width;\n                        } else {\n                            right = -this._rightGap - (this._itemSize.width + this._columnGap) * id;\n                            width = this._itemSize.width;\n                        }\n                        if (this.lackCenter) {\n                            right += this._rightGap;\n                            let offset: number =\n                                this.content.width / 2 - this._allItemSizeNoEdge / 2;\n                            right -= offset;\n                        }\n                        left = right - width;\n                        return {\n                            id: id,\n                            right: right,\n                            left: left,\n                            x: left + this._itemTmp.anchorX * width,\n                            y: this._itemTmp.y,\n                        };\n                    }\n                }\n                break;\n            case cc.Layout.Type.VERTICAL: {\n                switch (this._verticalDir) {\n                    case cc.Layout.VerticalDirection.TOP_TO_BOTTOM: {\n                        if (this._customSize) {\n                            let fixed: any = this._getFixedSize(id);\n                            top =\n                                -this._topGap -\n                                (this._itemSize.height + this._lineGap) * (id - fixed.count) -\n                                (fixed.val + this._lineGap * fixed.count);\n                            let cs: number = this._customSize[id];\n                            height = cs > 0 ? cs : this._itemSize.height;\n                        } else {\n                            top = -this._topGap - (this._itemSize.height + this._lineGap) * id;\n                            height = this._itemSize.height;\n                        }\n                        if (this.lackCenter) {\n                            top += this._topGap;\n                            let offset: number =\n                                this.content.height / 2 - this._allItemSizeNoEdge / 2;\n                            top -= offset;\n                        }\n                        bottom = top - height;\n                        return {\n                            id: id,\n                            top: top,\n                            bottom: bottom,\n                            x: this._itemTmp.x,\n                            y: bottom + this._itemTmp.anchorY * height,\n                        };\n                    }\n                    case cc.Layout.VerticalDirection.BOTTOM_TO_TOP: {\n                        if (this._customSize) {\n                            let fixed: any = this._getFixedSize(id);\n                            bottom =\n                                this._bottomGap +\n                                (this._itemSize.height + this._lineGap) * (id - fixed.count) +\n                                (fixed.val + this._lineGap * fixed.count);\n                            let cs: number = this._customSize[id];\n                            height = cs > 0 ? cs : this._itemSize.height;\n                        } else {\n                            bottom = this._bottomGap + (this._itemSize.height + this._lineGap) * id;\n                            height = this._itemSize.height;\n                        }\n                        if (this.lackCenter) {\n                            bottom -= this._bottomGap;\n                            let offset: number =\n                                this.content.height / 2 - this._allItemSizeNoEdge / 2;\n                            bottom += offset;\n                        }\n                        top = bottom + height;\n                        return {\n                            id: id,\n                            top: top,\n                            bottom: bottom,\n                            x: this._itemTmp.x,\n                            y: bottom + this._itemTmp.anchorY * height,\n                        };\n                        break;\n                    }\n                }\n            }\n            case cc.Layout.Type.GRID: {\n                let colLine: number = Math.floor(id / this._colLineNum);\n                switch (this._startAxis) {\n                    case cc.Layout.AxisDirection.HORIZONTAL: {\n                        switch (this._verticalDir) {\n                            case cc.Layout.VerticalDirection.TOP_TO_BOTTOM: {\n                                top =\n                                    -this._topGap -\n                                    (this._itemSize.height + this._lineGap) * colLine;\n                                bottom = top - this._itemSize.height;\n                                itemY = bottom + this._itemTmp.anchorY * this._itemSize.height;\n                                break;\n                            }\n                            case cc.Layout.VerticalDirection.BOTTOM_TO_TOP: {\n                                bottom =\n                                    this._bottomGap +\n                                    (this._itemSize.height + this._lineGap) * colLine;\n                                top = bottom + this._itemSize.height;\n                                itemY = bottom + this._itemTmp.anchorY * this._itemSize.height;\n                                break;\n                            }\n                        }\n                        itemX =\n                            this._leftGap +\n                            (id % this._colLineNum) * (this._itemSize.width + this._columnGap);\n                        switch (this._horizontalDir) {\n                            case cc.Layout.HorizontalDirection.LEFT_TO_RIGHT: {\n                                itemX += this._itemTmp.anchorX * this._itemSize.width;\n                                itemX -= this.content.anchorX * this.content.width;\n                                break;\n                            }\n                            case cc.Layout.HorizontalDirection.RIGHT_TO_LEFT: {\n                                itemX += (1 - this._itemTmp.anchorX) * this._itemSize.width;\n                                itemX -= (1 - this.content.anchorX) * this.content.width;\n                                itemX *= -1;\n                                break;\n                            }\n                        }\n                        return {\n                            id: id,\n                            top: top,\n                            bottom: bottom,\n                            x: itemX,\n                            y: itemY,\n                        };\n                    }\n                    case cc.Layout.AxisDirection.VERTICAL: {\n                        switch (this._horizontalDir) {\n                            case cc.Layout.HorizontalDirection.LEFT_TO_RIGHT: {\n                                left =\n                                    this._leftGap +\n                                    (this._itemSize.width + this._columnGap) * colLine;\n                                right = left + this._itemSize.width;\n                                itemX = left + this._itemTmp.anchorX * this._itemSize.width;\n                                itemX -= this.content.anchorX * this.content.width;\n                                break;\n                            }\n                            case cc.Layout.HorizontalDirection.RIGHT_TO_LEFT: {\n                                right =\n                                    -this._rightGap -\n                                    (this._itemSize.width + this._columnGap) * colLine;\n                                left = right - this._itemSize.width;\n                                itemX = left + this._itemTmp.anchorX * this._itemSize.width;\n                                itemX += (1 - this.content.anchorX) * this.content.width;\n                                break;\n                            }\n                        }\n                        itemY =\n                            -this._topGap -\n                            (id % this._colLineNum) * (this._itemSize.height + this._lineGap);\n                        switch (this._verticalDir) {\n                            case cc.Layout.VerticalDirection.TOP_TO_BOTTOM: {\n                                itemY -= (1 - this._itemTmp.anchorY) * this._itemSize.height;\n                                itemY += (1 - this.content.anchorY) * this.content.height;\n                                break;\n                            }\n                            case cc.Layout.VerticalDirection.BOTTOM_TO_TOP: {\n                                itemY -= this._itemTmp.anchorY * this._itemSize.height;\n                                itemY += this.content.anchorY * this.content.height;\n                                itemY *= -1;\n                                break;\n                            }\n                        }\n                        return {\n                            id: id,\n                            left: left,\n                            right: right,\n                            x: itemX,\n                            y: itemY,\n                        };\n                    }\n                }\n                break;\n            }\n        }\n    }\n    //计算已存在的Item的位置\n    _calcExistItemPos(id: number) {\n        let item: any = this.getItemByListId(id);\n        if (!item) return null;\n        let data: any = {\n            id: id,\n            x: item.x,\n            y: item.y,\n        };\n        if (this._sizeType) {\n            data.top = item.y + item.height * (1 - item.anchorY);\n            data.bottom = item.y - item.height * item.anchorY;\n        } else {\n            data.left = item.x - item.width * item.anchorX;\n            data.right = item.x + item.width * (1 - item.anchorX);\n        }\n        return data;\n    }\n    //获取Item位置\n    getItemPos(id: number) {\n        if (this._virtual) return this._calcItemPos(id);\n        else {\n            if (this.frameByFrameRenderNum) return this._calcItemPos(id);\n            else return this._calcExistItemPos(id);\n        }\n    }\n    //获取固定尺寸\n    _getFixedSize(listId: number) {\n        if (!this._customSize) return null;\n        if (listId == null) listId = this._numItems;\n        let fixed: number = 0;\n        let count: number = 0;\n        for (let id in this._customSize) {\n            if (parseInt(id) < listId) {\n                fixed += this._customSize[id];\n                count++;\n            }\n        }\n        return {\n            val: fixed,\n            count: count,\n        };\n    }\n    //滚动结束时..\n    _onScrollBegan() {\n        this._beganPos = this._sizeType ? this.viewTop : this.viewLeft;\n    }\n    //滚动结束时..\n    _onScrollEnded() {\n        let t: any = this;\n        t.curScrollIsTouch = false;\n        if (t.scrollToListId != null) {\n            let item: any = t.getItemByListId(t.scrollToListId);\n            t.scrollToListId = null;\n            if (item) {\n                cc.tween(item).to(0.1, { scale: 1.06 }).to(0.1, { scale: 1 }).start();\n            }\n        }\n        t._onScrolling();\n\n        if (t._slideMode == SlideType.ADHERING && !t.adhering) {\n            //cc.log(t.adhering, t._scrollView.isAutoScrolling(), t._scrollView.isScrolling());\n            t.adhere();\n        } else if (t._slideMode == SlideType.PAGE) {\n            if (t._beganPos != null && t.curScrollIsTouch) {\n                this._pageAdhere();\n            } else {\n                t.adhere();\n            }\n        }\n    }\n    // 触摸时\n    _onTouchStart(ev, captureListeners) {\n        if (this._scrollView[\"hasNestedViewGroup\"](ev, captureListeners)) return;\n        this.curScrollIsTouch = true;\n        let isMe = ev.eventPhase === cc.Event.AT_TARGET && ev.target === this.node;\n        if (!isMe) {\n            let itemNode: any = ev.target;\n            while (itemNode._listId == null && itemNode.parent) itemNode = itemNode.parent;\n            this._scrollItem = itemNode._listId != null ? itemNode : ev.target;\n        }\n    }\n    //触摸抬起时..\n    _onTouchUp() {\n        let t: any = this;\n        t._scrollPos = null;\n        if (t._slideMode == SlideType.ADHERING) {\n            if (this.adhering) this._adheringBarrier = true;\n            t.adhere();\n        } else if (t._slideMode == SlideType.PAGE) {\n            if (t._beganPos != null) {\n                this._pageAdhere();\n            } else {\n                t.adhere();\n            }\n        }\n        this._scrollItem = null;\n    }\n\n    _onTouchCancelled(ev, captureListeners) {\n        let t = this;\n        if (t._scrollView[\"hasNestedViewGroup\"](ev, captureListeners) || ev.simulate) return;\n\n        t._scrollPos = null;\n        if (t._slideMode == SlideType.ADHERING) {\n            if (t.adhering) t._adheringBarrier = true;\n            t.adhere();\n        } else if (t._slideMode == SlideType.PAGE) {\n            if (t._beganPos != null) {\n                t._pageAdhere();\n            } else {\n                t.adhere();\n            }\n        }\n        this._scrollItem = null;\n    }\n    //当尺寸改变\n    _onSizeChanged() {\n        if (this.checkInited(false)) this._onScrolling();\n    }\n    //当Item自适应\n    _onItemAdaptive(item) {\n        // if (this.checkInited(false)) {\n        if (\n            (!this._sizeType && item.width != this._itemSize.width) ||\n            (this._sizeType && item.height != this._itemSize.height)\n        ) {\n            if (!this._customSize) this._customSize = {};\n            let val = this._sizeType ? item.height : item.width;\n            if (this._customSize[item._listId] != val) {\n                this._customSize[item._listId] = val;\n                this._resizeContent();\n                // this.content.children.forEach((child: cc.Node) => {\n                //     this._updateItemPos(child);\n                // });\n                this.updateAll();\n                // 如果当前正在运行 scrollTo，肯定会不准确，在这里做修正\n                if (this._scrollToListId != null) {\n                    this._scrollPos = null;\n                    this.unschedule(this._scrollToSo);\n                    this.scrollTo(\n                        this._scrollToListId,\n                        Math.max(0, this._scrollToEndTime - new Date().getTime() / 1000)\n                    );\n                }\n            }\n        }\n        // }\n    }\n    //PAGE粘附\n    _pageAdhere() {\n        let t = this;\n        if (\n            !t.cyclic &&\n            (t.elasticTop > 0 || t.elasticRight > 0 || t.elasticBottom > 0 || t.elasticLeft > 0)\n        )\n            return;\n        let curPos = t._sizeType ? t.viewTop : t.viewLeft;\n        let dis = (t._sizeType ? t.node.height : t.node.width) * t.pageDistance;\n        let canSkip = Math.abs(t._beganPos - curPos) > dis;\n        if (canSkip) {\n            let timeInSecond = 0.5;\n            switch (t._alignCalcType) {\n                case 1: //单行HORIZONTAL（LEFT_TO_RIGHT）、网格VERTICAL（LEFT_TO_RIGHT）\n                case 4: //单列VERTICAL（BOTTOM_TO_TOP）、网格HORIZONTAL（BOTTOM_TO_TOP）\n                    if (t._beganPos > curPos) {\n                        t.prePage(timeInSecond);\n                        // cc.log('_pageAdhere   PPPPPPPPPPPPPPP');\n                    } else {\n                        t.nextPage(timeInSecond);\n                        // cc.log('_pageAdhere   NNNNNNNNNNNNNNN');\n                    }\n                    break;\n                case 2: //单行HORIZONTAL（RIGHT_TO_LEFT）、网格VERTICAL（RIGHT_TO_LEFT）\n                case 3: //单列VERTICAL（TOP_TO_BOTTOM）、网格HORIZONTAL（TOP_TO_BOTTOM）\n                    if (t._beganPos < curPos) {\n                        t.prePage(timeInSecond);\n                    } else {\n                        t.nextPage(timeInSecond);\n                    }\n                    break;\n            }\n        } else if (\n            t.elasticTop <= 0 &&\n            t.elasticRight <= 0 &&\n            t.elasticBottom <= 0 &&\n            t.elasticLeft <= 0\n        ) {\n            t.adhere();\n        }\n        t._beganPos = null;\n    }\n    //粘附\n    adhere() {\n        let t: any = this;\n        if (!t.checkInited()) return;\n        if (t.elasticTop > 0 || t.elasticRight > 0 || t.elasticBottom > 0 || t.elasticLeft > 0)\n            return;\n        t.adhering = true;\n        t._calcNearestItem();\n        let offset: number =\n            (t._sizeType ? t._topGap : t._leftGap) / (t._sizeType ? t.node.height : t.node.width);\n        let timeInSecond: number = 0.7;\n        t.scrollTo(t.nearestListId, timeInSecond, offset);\n    }\n    //Update..\n    update() {\n        if (this.frameByFrameRenderNum <= 0 || this._updateDone) return;\n        // cc.log(this.displayData.length, this._updateCounter, this.displayData[this._updateCounter]);\n        if (this._virtual) {\n            let len: number =\n                this._updateCounter + this.frameByFrameRenderNum > this.displayItemNum\n                    ? this.displayItemNum\n                    : this._updateCounter + this.frameByFrameRenderNum;\n            for (let n: number = this._updateCounter; n < len; n++) {\n                let data: any = this.displayData[n];\n                if (data) {\n                    this._createOrUpdateItem(data);\n                }\n            }\n\n            if (this._updateCounter >= this.displayItemNum - 1) {\n                //最后一个\n                if (this._doneAfterUpdate) {\n                    this._updateCounter = 0;\n                    this._updateDone = false;\n                    // if (!this._scrollView.isScrolling())\n                    this._doneAfterUpdate = false;\n                } else {\n                    this._updateDone = true;\n                    this._delRedundantItem();\n                    this._forceUpdate = false;\n                    this._calcNearestItem();\n                    if (this.slideMode == SlideType.PAGE) this.curPageNum = this.nearestListId;\n                }\n            } else {\n                this._updateCounter += this.frameByFrameRenderNum;\n            }\n        } else {\n            if (this._updateCounter < this._numItems) {\n                let len: number =\n                    this._updateCounter + this.frameByFrameRenderNum > this._numItems\n                        ? this._numItems\n                        : this._updateCounter + this.frameByFrameRenderNum;\n                for (let n: number = this._updateCounter; n < len; n++) {\n                    this._createOrUpdateItem2(n);\n                }\n                this._updateCounter += this.frameByFrameRenderNum;\n            } else {\n                this._updateDone = true;\n                this._calcNearestItem();\n                if (this.slideMode == SlideType.PAGE) this.curPageNum = this.nearestListId;\n            }\n        }\n    }\n    /**\n     * 创建或更新Item（虚拟列表用）\n     * @param {Object} data 数据\n     */\n    _createOrUpdateItem(data: any) {\n        let item: any = this.getItemByListId(data.id);\n        if (!item) {\n            //如果不存在\n            let canGet: boolean = this._pool.size() > 0;\n            if (canGet) {\n                item = this._pool.get();\n                // cc.log('从池中取出::   旧id =', item['_listId'], '，新id =', data.id, item);\n            } else {\n                item = cc.instantiate(this._itemTmp);\n                // cc.log('新建::', data.id, item);\n            }\n            if (!canGet || !cc.isValid(item)) {\n                item = cc.instantiate(this._itemTmp);\n                canGet = false;\n            }\n            if (item._listId != data.id) {\n                item._listId = data.id;\n                item.setContentSize(this._itemSize);\n            }\n            item.setPosition(cc.v2(data.x, data.y));\n            this._resetItemSize(item);\n            this.content.addChild(item);\n            if (canGet && this._needUpdateWidget) {\n                let widget: cc.Widget = item.getComponent(cc.Widget);\n                if (widget) widget.updateAlignment();\n            }\n            item.setSiblingIndex(this.content.childrenCount - 1);\n\n            let listItem: ListItem = item.getComponent(ListItem);\n            item[\"listItem\"] = listItem;\n            if (listItem) {\n                listItem.listId = data.id;\n                listItem.list = this;\n                listItem._registerEvent();\n            }\n            if (this.renderEvent) {\n                cc.Component.EventHandler.emitEvents(\n                    [this.renderEvent],\n                    item,\n                    data.id % this._actualNumItems\n                );\n            }\n        } else if (this._forceUpdate && this.renderEvent) {\n            //强制更新\n            item.setPosition(cc.v2(data.x, data.y));\n            this._resetItemSize(item);\n            // cc.log('ADD::', data.id, item);\n            if (this.renderEvent) {\n                cc.Component.EventHandler.emitEvents(\n                    [this.renderEvent],\n                    item,\n                    data.id % this._actualNumItems\n                );\n            }\n        }\n        this._resetItemSize(item);\n\n        this._updateListItem(item[\"listItem\"]);\n        if (this._lastDisplayData.indexOf(data.id) < 0) {\n            this._lastDisplayData.push(data.id);\n        }\n    }\n    //创建或更新Item（非虚拟列表用）\n    _createOrUpdateItem2(listId: number) {\n        let item: any = this.content.children[listId];\n        let listItem: ListItem;\n        if (!item) {\n            //如果不存在\n            item = cc.instantiate(this._itemTmp);\n            item._listId = listId;\n            this.content.addChild(item);\n            listItem = item.getComponent(ListItem);\n            item[\"listItem\"] = listItem;\n            if (listItem) {\n                listItem.listId = listId;\n                listItem.list = this;\n                listItem._registerEvent();\n            }\n            if (this.renderEvent) {\n                cc.Component.EventHandler.emitEvents(\n                    [this.renderEvent],\n                    item,\n                    listId % this._actualNumItems\n                );\n            }\n        } else if (this._forceUpdate && this.renderEvent) {\n            //强制更新\n            item._listId = listId;\n            if (listItem) listItem.listId = listId;\n            if (this.renderEvent) {\n                cc.Component.EventHandler.emitEvents(\n                    [this.renderEvent],\n                    item,\n                    listId % this._actualNumItems\n                );\n            }\n        }\n        this._updateListItem(listItem);\n        if (this._lastDisplayData.indexOf(listId) < 0) {\n            this._lastDisplayData.push(listId);\n        }\n    }\n\n    _updateListItem(listItem: ListItem) {\n        if (!listItem) return;\n        if (this.selectedMode > SelectedType.NONE) {\n            let item: any = listItem.node;\n            switch (this.selectedMode) {\n                case SelectedType.SINGLE:\n                    listItem.selected = this.selectedId == item._listId;\n                    break;\n                case SelectedType.MULT:\n                    listItem.selected = this.multSelected.indexOf(item._listId) >= 0;\n                    break;\n            }\n        }\n    }\n    //仅虚拟列表用\n    _resetItemSize(item: any) {\n        return;\n        let size: number;\n        if (this._customSize && this._customSize[item._listId]) {\n            size = this._customSize[item._listId];\n        } else {\n            if (this._colLineNum > 1) item.setContentSize(this._itemSize);\n            else size = this._sizeType ? this._itemSize.height : this._itemSize.width;\n        }\n        if (size) {\n            if (this._sizeType) item.height = size;\n            else item.width = size;\n        }\n    }\n    /**\n     * 更新Item位置\n     * @param {Number||Node} listIdOrItem\n     */\n    _updateItemPos(listIdOrItem: any) {\n        let item: any = isNaN(listIdOrItem) ? listIdOrItem : this.getItemByListId(listIdOrItem);\n        let pos: any = this.getItemPos(item._listId);\n        item.setPosition(pos.x, pos.y);\n    }\n    /**\n     * 设置多选\n     * @param {Array} args 可以是单个listId，也可是个listId数组\n     * @param {Boolean} bool 值，如果为null的话，则直接用args覆盖\n     */\n    setMultSelected(args: any, bool: boolean) {\n        let t: any = this;\n        if (!t.checkInited()) return;\n        if (!Array.isArray(args)) {\n            args = [args];\n        }\n        if (bool == null) {\n            t.multSelected = args;\n        } else {\n            let listId: number, sub: number;\n            if (bool) {\n                for (let n: number = args.length - 1; n >= 0; n--) {\n                    listId = args[n];\n                    sub = t.multSelected.indexOf(listId);\n                    if (sub < 0) {\n                        t.multSelected.push(listId);\n                    }\n                }\n            } else {\n                for (let n: number = args.length - 1; n >= 0; n--) {\n                    listId = args[n];\n                    sub = t.multSelected.indexOf(listId);\n                    if (sub >= 0) {\n                        t.multSelected.splice(sub, 1);\n                    }\n                }\n            }\n        }\n        t._forceUpdate = true;\n        t._onScrolling();\n    }\n    /**\n     * 获取多选数据\n     * @returns\n     */\n    getMultSelected() {\n        return this.multSelected;\n    }\n    /**\n     * 多选是否有选择\n     * @param {number} listId 索引\n     * @returns\n     */\n    hasMultSelected(listId: number) {\n        return this.multSelected && this.multSelected.indexOf(listId) >= 0;\n    }\n    /**\n     * 更新指定的Item\n     * @param {Array} args 单个listId，或者数组\n     * @returns\n     */\n    updateItem(args: any) {\n        if (!this.checkInited()) return;\n        if (!Array.isArray(args)) {\n            args = [args];\n        }\n        for (let n: number = 0, len: number = args.length; n < len; n++) {\n            let listId: number = args[n];\n            let item: any = this.getItemByListId(listId);\n            if (item)\n                cc.Component.EventHandler.emitEvents(\n                    [this.renderEvent],\n                    item,\n                    listId % this._actualNumItems\n                );\n        }\n    }\n    /**\n     * 更新全部\n     */\n    updateAll() {\n        if (!this.checkInited()) return;\n        let numItems = this.numItems;\n        this.numItems = numItems;\n    }\n    /**\n     * 根据ListID获取Item\n     * @param {Number} listId\n     * @returns\n     */\n    getItemByListId(listId: number) {\n        if (this.content) {\n            for (let n: number = this.content.childrenCount - 1; n >= 0; n--) {\n                let item: any = this.content.children[n];\n                if (item._listId == listId) return item;\n            }\n        }\n    }\n    /**\n     * 获取在显示区域外的Item\n     * @returns\n     */\n    _getOutsideItem() {\n        let item: any;\n        let result: any[] = [];\n        for (let n: number = this.content.childrenCount - 1; n >= 0; n--) {\n            item = this.content.children[n];\n            if (!this.displayData.find((d) => d.id == item._listId)) {\n                result.push(item);\n            }\n        }\n        return result;\n    }\n    //删除显示区域以外的Item\n    _delRedundantItem() {\n        if (this._virtual) {\n            let arr: any[] = this._getOutsideItem();\n            for (let n: number = arr.length - 1; n >= 0; n--) {\n                let item: any = arr[n];\n                if (this._scrollItem && item._listId == this._scrollItem._listId) continue;\n                item.isCached = true;\n                this._pool.put(item);\n                for (let m: number = this._lastDisplayData.length - 1; m >= 0; m--) {\n                    if (this._lastDisplayData[m] == item._listId) {\n                        this._lastDisplayData.splice(m, 1);\n                        break;\n                    }\n                }\n            }\n            // cc.log('存入::', str, '    pool.length =', this._pool.length);\n        } else {\n            while (this.content.childrenCount > this._numItems) {\n                this._delSingleItem(this.content.children[this.content.childrenCount - 1]);\n            }\n        }\n    }\n    //删除单个Item\n    _delSingleItem(item: any) {\n        // cc.log('DEL::', item['_listId'], item);\n        item.removeFromParent();\n        if (item.destroy) item.destroy();\n        item = null;\n    }\n    /**\n     * 动效删除Item（此方法只适用于虚拟列表，即_virtual=true）\n     * 一定要在回调函数里重新设置新的numItems进行刷新，毕竟本List是靠数据驱动的。\n     */\n    aniDelItem(listId: number, callFunc: Function, aniType: number) {\n        let t: any = this;\n\n        if (!t.checkInited() || t.cyclic || !t._virtual)\n            return cc.error(\"This function is not allowed to be called!\");\n\n        if (!callFunc)\n            return cc.error(\n                \"CallFunc are not allowed to be NULL, You need to delete the corresponding index in the data array in the CallFunc!\"\n            );\n\n        if (t._aniDelRuning) return cc.warn(\"Please wait for the current deletion to finish!\");\n\n        let item: any = t.getItemByListId(listId);\n        let listItem: ListItem;\n        if (!item) {\n            callFunc(listId);\n            return;\n        } else {\n            listItem = item.getComponent(ListItem);\n        }\n        t._aniDelRuning = true;\n        t._aniDelCB = callFunc;\n        t._aniDelItem = item;\n        t._aniDelBeforePos = item.position;\n        t._aniDelBeforeScale = item.scale;\n        let curLastId: number = t.displayData[t.displayData.length - 1].id;\n        let resetSelectedId: boolean = listItem.selected;\n        listItem.showAni(\n            aniType,\n            () => {\n                //判断有没有下一个，如果有的话，创建粗来\n                let newId: number;\n                if (curLastId < t._numItems - 2) {\n                    newId = curLastId + 1;\n                }\n                if (newId != null) {\n                    let newData: any = t._calcItemPos(newId);\n                    t.displayData.push(newData);\n                    if (t._virtual) t._createOrUpdateItem(newData);\n                    else t._createOrUpdateItem2(newId);\n                } else t._numItems--;\n                if (t.selectedMode == SelectedType.SINGLE) {\n                    if (resetSelectedId) {\n                        t._selectedId = -1;\n                    } else if (t._selectedId - 1 >= 0) {\n                        t._selectedId--;\n                    }\n                } else if (t.selectedMode == SelectedType.MULT && t.multSelected.length) {\n                    let sub: number = t.multSelected.indexOf(listId);\n                    if (sub >= 0) {\n                        t.multSelected.splice(sub, 1);\n                    }\n                    //多选的数据，在其后的全部减一\n                    for (let n: number = t.multSelected.length - 1; n >= 0; n--) {\n                        let id: number = t.multSelected[n];\n                        if (id >= listId) t.multSelected[n]--;\n                    }\n                }\n                if (t._customSize) {\n                    if (t._customSize[listId]) delete t._customSize[listId];\n                    let newCustomSize: any = {};\n                    let size: number;\n                    for (let id in t._customSize) {\n                        size = t._customSize[id];\n                        let idNumber: number = parseInt(id);\n                        newCustomSize[idNumber - (idNumber >= listId ? 1 : 0)] = size;\n                    }\n                    t._customSize = newCustomSize;\n                }\n                //后面的Item向前怼的动效\n                let sec: number = 0.2333;\n                let tween: cc.Tween, haveCB: boolean;\n                for (let n: number = newId != null ? newId : curLastId; n >= listId + 1; n--) {\n                    item = t.getItemByListId(n);\n                    if (item) {\n                        let posData: any = t._calcItemPos(n - 1);\n                        tween = cc.tween(item).to(sec, { position: cc.v2(posData.x, posData.y) });\n                        if (n <= listId + 1) {\n                            haveCB = true;\n                            tween.call(() => {\n                                t._aniDelRuning = false;\n                                callFunc(listId);\n                                delete t._aniDelCB;\n                            });\n                        }\n                        tween.start();\n                    }\n                }\n                if (!haveCB) {\n                    t._aniDelRuning = false;\n                    callFunc(listId);\n                    t._aniDelCB = null;\n                }\n            },\n            true\n        );\n    }\n    /**\n     * 滚动到..\n     * @param {Number} listId 索引（如果<0，则滚到首个Item位置，如果>=_numItems，则滚到最末Item位置）\n     * @param {Number} timeInSecond 时间\n     * @param {Number} offset 索引目标位置偏移，0-1\n     * @param {Boolean} overStress 滚动后是否强调该Item（这只是个实验功能）\n     */\n    scrollTo(\n        listId: number,\n        timeInSecond: number = 0.5,\n        offset: number = null,\n        overStress: boolean = false\n    ) {\n        let t = this;\n        if (!t.checkInited(false)) return;\n        // t._scrollView.stopAutoScroll();\n        if (timeInSecond == null)\n            //默认0.5\n            timeInSecond = 0.5;\n        else if (timeInSecond < 0) timeInSecond = 0;\n        if (listId < 0) listId = 0;\n        else if (listId >= t._numItems) listId = t._numItems - 1;\n        // 以防设置了numItems之后layout的尺寸还未更新\n        if (!t._virtual && t._layout && t._layout.enabled) t._layout.updateLayout();\n\n        let pos = t.getItemPos(listId);\n        if (!pos) {\n            return CC_DEV && cc.error(\"pos is null\", listId);\n        }\n        let targetX: number, targetY: number;\n\n        switch (t._alignCalcType) {\n            case 1: //单行HORIZONTAL（LEFT_TO_RIGHT）、网格VERTICAL（LEFT_TO_RIGHT）\n                targetX = pos.left;\n                if (offset != null) targetX -= t.node.width * offset;\n                else targetX -= t._leftGap;\n                pos = cc.v2(targetX, 0);\n                break;\n            case 2: //单行HORIZONTAL（RIGHT_TO_LEFT）、网格VERTICAL（RIGHT_TO_LEFT）\n                targetX = pos.right - t.node.width;\n                if (offset != null) targetX += t.node.width * offset;\n                else targetX += t._rightGap;\n                pos = cc.v2(targetX + t.content.width, 0);\n                break;\n            case 3: //单列VERTICAL（TOP_TO_BOTTOM）、网格HORIZONTAL（TOP_TO_BOTTOM）\n                targetY = pos.top;\n                if (offset != null) targetY += t.node.height * offset;\n                else targetY += t._topGap;\n                pos = cc.v2(0, -targetY);\n                break;\n            case 4: //单列VERTICAL（BOTTOM_TO_TOP）、网格HORIZONTAL（BOTTOM_TO_TOP）\n                targetY = pos.bottom + t.node.height;\n                if (offset != null) targetY -= t.node.height * offset;\n                else targetY -= t._bottomGap;\n                pos = cc.v2(0, -targetY + t.content.height);\n                break;\n        }\n        let viewPos: any = t.content.getPosition();\n        viewPos = Math.abs(t._sizeType ? viewPos.y : viewPos.x);\n\n        let comparePos = t._sizeType ? pos.y : pos.x;\n        let runScroll =\n            Math.abs((t._scrollPos != null ? t._scrollPos : viewPos) - comparePos) > 0.5;\n        // cc.log(runScroll, t._scrollPos, viewPos, comparePos)\n\n        // t._scrollView.stopAutoScroll();\n        if (runScroll) {\n            t._scrollView.scrollToOffset(pos, timeInSecond);\n            t._scrollToListId = listId;\n            t._scrollToEndTime = new Date().getTime() / 1000 + timeInSecond;\n            // cc.log(listId, t.content.width, t.content.getPosition(), pos);\n            t._scrollToSo = t.scheduleOnce(() => {\n                if (!t._adheringBarrier) {\n                    t.adhering = t._adheringBarrier = false;\n                }\n                t._scrollPos = t._scrollToListId = t._scrollToEndTime = t._scrollToSo = null;\n                //cc.log('2222222222', t._adheringBarrier)\n                if (overStress) {\n                    // t.scrollToListId = listId;\n                    let item = t.getItemByListId(listId);\n                    if (item) {\n                        cc.tween(item).to(0.1, { scale: 1.05 }).to(0.1, { scale: 1 }).start();\n                    }\n                }\n            }, timeInSecond + 0.1);\n\n            if (timeInSecond <= 0) {\n                t._onScrolling();\n            }\n        }\n    }\n    /**\n     * 计算当前滚动窗最近的Item\n     */\n    _calcNearestItem() {\n        let t: any = this;\n        t.nearestListId = null;\n        let data: any, center: number;\n\n        if (t._virtual) t._calcViewPos();\n\n        let vTop: number, vRight: number, vBottom: number, vLeft: number;\n        vTop = t.viewTop;\n        vRight = t.viewRight;\n        vBottom = t.viewBottom;\n        vLeft = t.viewLeft;\n\n        let breakFor: boolean = false;\n        for (let n = 0; n < t.content.childrenCount && !breakFor; n += t._colLineNum) {\n            data = t._virtual ? t.displayData[n] : t._calcExistItemPos(n);\n            if (data) {\n                center = t._sizeType\n                    ? (data.top + data.bottom) / 2\n                    : (center = (data.left + data.right) / 2);\n                switch (t._alignCalcType) {\n                    case 1: //单行HORIZONTAL（LEFT_TO_RIGHT）、网格VERTICAL（LEFT_TO_RIGHT）\n                        if (data.right >= vLeft) {\n                            t.nearestListId = data.id;\n                            if (vLeft > center) t.nearestListId += t._colLineNum;\n                            breakFor = true;\n                        }\n                        break;\n                    case 2: //单行HORIZONTAL（RIGHT_TO_LEFT）、网格VERTICAL（RIGHT_TO_LEFT）\n                        if (data.left <= vRight) {\n                            t.nearestListId = data.id;\n                            if (vRight < center) t.nearestListId += t._colLineNum;\n                            breakFor = true;\n                        }\n                        break;\n                    case 3: //单列VERTICAL（TOP_TO_BOTTOM）、网格HORIZONTAL（TOP_TO_BOTTOM）\n                        if (data.bottom <= vTop) {\n                            t.nearestListId = data.id;\n                            if (vTop < center) t.nearestListId += t._colLineNum;\n                            breakFor = true;\n                        }\n                        break;\n                    case 4: //单列VERTICAL（BOTTOM_TO_TOP）、网格HORIZONTAL（BOTTOM_TO_TOP）\n                        if (data.top >= vBottom) {\n                            t.nearestListId = data.id;\n                            if (vBottom > center) t.nearestListId += t._colLineNum;\n                            breakFor = true;\n                        }\n                        break;\n                }\n            }\n        }\n        //判断最后一个Item。。。（哎，这些判断真心恶心，判断了前面的还要判断最后一个。。。一开始呢，就只有一个布局（单列布局），那时候代码才三百行，后来就想着完善啊，艹..这坑真深，现在这行数都一千五了= =||）\n        data = t._virtual\n            ? t.displayData[t.displayItemNum - 1]\n            : t._calcExistItemPos(t._numItems - 1);\n        if (data && data.id == t._numItems - 1) {\n            center = t._sizeType\n                ? (data.top + data.bottom) / 2\n                : (center = (data.left + data.right) / 2);\n            switch (t._alignCalcType) {\n                case 1: //单行HORIZONTAL（LEFT_TO_RIGHT）、网格VERTICAL（LEFT_TO_RIGHT）\n                    if (vRight > center) t.nearestListId = data.id;\n                    break;\n                case 2: //单行HORIZONTAL（RIGHT_TO_LEFT）、网格VERTICAL（RIGHT_TO_LEFT）\n                    if (vLeft < center) t.nearestListId = data.id;\n                    break;\n                case 3: //单列VERTICAL（TOP_TO_BOTTOM）、网格HORIZONTAL（TOP_TO_BOTTOM）\n                    if (vBottom < center) t.nearestListId = data.id;\n                    break;\n                case 4: //单列VERTICAL（BOTTOM_TO_TOP）、网格HORIZONTAL（BOTTOM_TO_TOP）\n                    if (vTop > center) t.nearestListId = data.id;\n                    break;\n            }\n        }\n        // cc.log('t.nearestListId =', t.nearestListId);\n    }\n    //上一页\n    prePage(timeInSecond: number = 0.5) {\n        // cc.log('👈');\n        if (!this.checkInited()) return;\n        this.skipPage(this.curPageNum - 1, timeInSecond);\n    }\n    //下一页\n    nextPage(timeInSecond: number = 0.5) {\n        // cc.log('👉');\n        if (!this.checkInited()) return;\n        this.skipPage(this.curPageNum + 1, timeInSecond);\n    }\n    //跳转到第几页\n    skipPage(pageNum: number, timeInSecond: number) {\n        let t: any = this;\n        if (!t.checkInited()) return;\n        if (t._slideMode != SlideType.PAGE)\n            return cc.error(\"This function is not allowed to be called, Must SlideMode = PAGE!\");\n        if (pageNum < 0 || pageNum >= t._numItems) return;\n        if (t.curPageNum == pageNum) return;\n        // cc.log(pageNum);\n        t.curPageNum = pageNum;\n        if (t.pageChangeEvent) {\n            cc.Component.EventHandler.emitEvents([t.pageChangeEvent], pageNum);\n        }\n        t.scrollTo(pageNum, timeInSecond);\n    }\n    //计算 CustomSize（这个函数还是保留吧，某些罕见的情况的确还是需要手动计算customSize的）\n    calcCustomSize(numItems: number) {\n        let t: any = this;\n        if (!t.checkInited()) return;\n        if (!t._itemTmp) return cc.error(\"Unset template item!\");\n        if (!t.renderEvent) return cc.error(\"Unset Render-Event!\");\n        t._customSize = {};\n        let temp: any = cc.instantiate(t._itemTmp);\n        t.content.addChild(temp);\n        for (let n: number = 0; n < numItems; n++) {\n            cc.Component.EventHandler.emitEvents([t.renderEvent], temp, n);\n            if (temp.height != t._itemSize.height || temp.width != t._itemSize.width) {\n                t._customSize[n] = t._sizeType ? temp.height : temp.width;\n            }\n        }\n        if (!Object.keys(t._customSize).length) t._customSize = null;\n        temp.removeFromParent();\n        if (temp.destroy) temp.destroy();\n        return t._customSize;\n    }\n}\n","import ValueObserver from \"../../../../../main/core/utils/class/ValueObserver\";\nimport { BundleNames } from \"../../../../../main/core/conf/BundleNames\";\nimport { Injector } from \"../../../../../main/core/utils/decorators/Injector\";\n\nexport interface IBundleLoadingOptions {\n    bundleName: BundleNames;\n    progress: number;\n    success: boolean;\n    has: boolean;\n    error: boolean;\n}\n\n@Injector.Injectable()\nexport default class LoadingSceneStateObserver extends ValueObserver<IBundleLoadingOptions> {\n    private enterUi: boolean = false;\n\n    protected onInit(): IBundleLoadingOptions {\n        return {\n            has: false,\n            bundleName: BundleNames.UNKNOWN,\n            progress: 0,\n            success: false,\n            error: false,\n        };\n    }\n\n    public tryEnterGame() {\n        this.enterUi = true;\n    }\n\n    public enterGameBack() {\n        this.enterUi = false;\n    }\n\n    public onLoadingStart(bundleName: BundleNames) {\n        if (\n            [\n                BundleNames.FIRE_JOKER,\n                BundleNames.WOLFGOLD,\n                BundleNames.BIG_SMALL,\n                BundleNames.HALL,\n            ].includes(bundleName)\n        ) {\n            return;\n        }\n        this.modify({\n            has: this.enterUi,\n            bundleName: bundleName,\n            progress: 0,\n            success: false,\n            error: false,\n        });\n    }\n\n    public onLoadingSuccess(bundleName: BundleNames) {\n        switch (bundleName) {\n            case BundleNames.HALL: {\n                //如果是进大厅设置has 为false\n                this.set(\"has\", false, false);\n                break;\n            }\n        }\n        this.modify({\n            bundleName: bundleName,\n            progress: 0,\n            success: true,\n        });\n    }\n    public onError(bundleName: BundleNames) {\n        if ([BundleNames.FIRE_JOKER, BundleNames.WOLFGOLD].includes(bundleName)) {\n            return;\n        }\n        this.modify({\n            error: true,\n        });\n    }\n}\n","import PopUpViewBase from \"../../../../../../../main/core/popUpViewUtils/PopUpViewBase\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class LoadingToastUi extends PopUpViewBase {\n    @property(cc.Label)\n    label: cc.Label = null;\n\n    public init(message: string): void {\n        this.label.string = message;\n    }\n\n    protected async onShow(): Promise<void> {\n        return;\n    }\n}\n","const { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class LoadingUI extends cc.Component {\n    public init(delayShow?: number) {\n        if (delayShow) {\n            cc.tween<cc.Node>(this.node)\n                .set({ opacity: 0 })\n                .delay(delayShow)\n                .to(0.2, { opacity: 255 })\n                .start();\n        }\n    }\n\n    onDisable() {\n        this.node.stopAllActions();\n        this.node.opacity = 255;\n    }\n}\n","import CommonLanguage from \"../conf/lang/CommonLanguage\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class LoadingWithFont extends cc.Component {\n    @property(cc.Label)\n    text: cc.Label = null;\n\n    protected onLoad(): void {\n        let self = this;\n        if (cc.isValid(self.text)) {\n            UIDepend.LabelManager.setLabelString(self.text, CommonLanguage.computeing);\n            self.scheduleOnce(() => {\n                self.updateBgWidth();\n            });\n        }\n    }\n\n    private updateBgWidth() {\n        let bgNode = this.node.getChildByName(\"bg\");\n        if (!cc.isValid(bgNode)) return;\n        if (bgNode.width < this.text.node.width) {\n            bgNode.width = this.text.node.width + 100;\n        }\n    }\n}\n","import PopUpViewBase from \"../../../../../../../main/core/popUpViewUtils/PopUpViewBase\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class LudoGameRule extends PopUpViewBase {\n    // update (dt) {}\n}\n","import { ApiProto } from \"./service/api/ApiProto\";\nimport { UniverseProto } from \"./universe/proto/UniverseProto\";\nimport { GameType } from \"../../../../main/core/conf/GameType\";\nimport { lodash } from \"../../../../main/core/utils/NpmExport\";\nimport { Instance } from \"../../../../main/core/utils/decorators/InstanceClassDecorator\";\nimport CommonHostListObserver from \"./obs/CommonHostListObserver\";\nimport Listener from \"../../../../main/core/utils/Listener\";\nimport { CoreEvents } from \"../../../../main/core/event/CoreEvents\";\n\nconst KEY_HTTP_HOST = \"GameHttp\";\nconst KEY_WS_HOST = \"GameWs\";\n\n/**\n * {0} 为 host， {1} 为 gameCode，\n */\nconst UNIVERSE_ADDR = \"wss://un.{0}\";\nconst HALL_ADDR = \"https://lb.{0}\";\nconst GAME_WS_ADDR = \"wss://{0}.{1}\";\nconst GAME_HTTP_ADDR = \"https://{0}.{1}\";\n\nexport class NewGameInfo {\n    private static _instance: NewGameInfo = null;\n\n    public static getInstance() {\n        if (!this._instance) {\n            this._instance = new NewGameInfo();\n        }\n\n        return this._instance;\n    }\n\n    private constructor() {\n        Listener.listen(CoreEvents.SWITCH_HOST, (host: string) => {\n            this.switchHost(host);\n        });\n    }\n\n    public current: {\n        gameID: number;\n        room: number;\n        tableId: number;\n        replayRecord?: ProtoObject<ApiProto.GameReplayRecord>;\n    } = {\n        gameID: -1,\n        room: -1,\n        tableId: 0,\n    };\n\n    public h5GameInfo = {\n        use_h5: false,\n        h5_url: \"\",\n        frame_url: \"\",\n        hoverButton: true,\n        screenDirection: 0,\n        checkGoldLock: true,\n    };\n\n    public currentMiniGame = {\n        gameID: -1,\n        room: -1,\n        tableId: -1,\n    };\n\n    public roomList = {};\n\n    public isFishingRestore = false;\n\n    public startGameManually = false;\n\n    public lastGameRoomId = 0;\n\n    //wss://un.easycodedev.com\n\n    public getGameHttpServer(gameID: GameType): string[] {\n        return Instance(CommonHostListObserver).getHttpServer(gameID);\n    }\n\n    public getGameWsServer(gameID: GameType): string[] {\n        return Instance(CommonHostListObserver).getWsServer(gameID);\n    }\n\n    public switchHost(host: string): void {\n        Instance(CommonHostListObserver).next(host);\n    }\n\n    public hostLenght() {\n        return Instance(CommonHostListObserver).get().length;\n    }\n\n    public getRoomInfo(): ProtoObject<ApiProto.GameInfoResp.RoomInfo> {\n        let self = this;\n        let gameID = self.current.gameID;\n        let room = self.current.room;\n        let tableId = self.current.tableId;\n        let curRoomList = self.getSeeRoomListByGameID(gameID);\n        let foundRoom = {};\n        if (Array.isArray(curRoomList)) {\n            for (let i = 0; i < curRoomList.length; i++) {\n                let curRoom = curRoomList[i];\n                if (curRoom.id == room && (!tableId || curRoom.table_id == tableId)) {\n                    foundRoom = curRoom;\n                    break;\n                }\n            }\n        }\n        return foundRoom;\n    }\n\n    public updateRoomList(gameID: number, roomlist: ProtoObject<ApiProto.GameInfoResp.RoomInfo[]>) {\n        let self = this;\n        if (roomlist) {\n            self.roomList[gameID] = roomlist;\n        }\n    }\n\n    //   public getDefaultFirstRoom(gameID) {\n    //     let self = this;\n    //     let roomList = self.roomList;\n    //     if (roomList == null) {\n    //       return -1;\n    //     }\n    //     let curRoomList = roomList[gameID];\n    //     if (CommonDepend.BaseFormat.isArrayFn(curRoomList)) {\n    //       return curRoomList.length > 0 ? curRoomList[0].id : -1;\n    //     }\n    //     return -1;\n    //   }\n\n    //   public getDefaultFirstTable(gameID) {\n    //     let self = this;\n    //     let roomList = self.roomList;\n    //     if (roomList == null) {\n    //       return -1;\n    //     }\n    //     let curRoomList = roomList[gameID];\n    //     if (CommonDepend.BaseFormat.isArrayFn(curRoomList)) {\n    //       return curRoomList.length > 0 ? curRoomList[0].tableId : -1;\n    //     }\n    //     return -1;\n    //   }\n\n    //   public getRoomInfo() {\n    //     let self = this;\n    //     let gameID = self.current.gameID;\n    //     let room = self.current.room;\n    //     let tableId = self.current.tableId;\n    //     let curRoomList = self.getSeeRoomListByGameID(gameID);\n    //     let foundRoom = {};\n    //     if (CommonDepend.BaseFormat.isArrayFn(curRoomList)) {\n    //       for (let i = 0; i < curRoomList.length; i++) {\n    //         let curRoom = curRoomList[i];\n    //         if (curRoom.id == room && curRoom.tableId == tableId) {\n    //           foundRoom = curRoom;\n    //           break;\n    //         }\n    //       }\n    //     }\n    //     return foundRoom;\n    //   }\n\n    //   public getMiniGameRoomInfo() {\n    //     let self = this;\n    //     let gameID = self.currentMiniGame.gameID;\n    //     let room = self.currentMiniGame.room;\n    //     let tableId = self.currentMiniGame.tableId;\n    //     let curRoomList = self.getSeeRoomListByGameID(gameID);\n    //     if (CommonDepend.BaseFormat.isArrayFn(curRoomList)) {\n    //       for (let i = 0; i < curRoomList.length; i++) {\n    //         if (curRoomList[i].id == room && curRoomList[i].tableId == tableId) {\n    //           return curRoomList[i];\n    //         }\n    //       }\n    //     }\n    //     return {};\n    //   }\n\n    public getRoomInfoByGameID(gameID: number, room: number): ApiProto.GameInfoResp.RoomInfo {\n        let self = this;\n        let curRoomList = self.getSeeRoomListByGameID(gameID);\n        for (let i = 0; i < curRoomList.length; i++) {\n            let curRoom = curRoomList[i];\n            if (curRoom.id == room) {\n                return curRoom;\n            }\n        }\n    }\n\n    public getSeeRoomListByGameID(gameID: number): ApiProto.GameInfoResp.RoomInfo[] {\n        let self = this;\n        let roomList = self.roomList;\n        if (roomList == null) {\n            return [];\n        }\n        let curRoomList = roomList[gameID];\n        return curRoomList;\n    }\n\n    //   public getSeeRoomList(gameID) {\n    //     let self = this;\n    //     if (!gameID || gameID <= 0) {\n    //       gameID = self.current.gameID;\n    //     }\n    //     return self.getSeeRoomListByGameID(gameID);\n    //   }\n\n    //   public getSafeBoxCoolTime() {\n    //     let safeBoxCd = CommonDepend.LocalStorageMgr.readSafeBoxCd();\n    //     return safeBoxCd ? safeBoxCd : 0;\n    //   }\n\n    //   public getIndexByRoom(gameID, room) {\n    //     let self = this;\n    //     let roomSeeInfo = self.getSeeRoomListByGameID(gameID);\n    //     for (let i = 0; i < roomSeeInfo.length; i++) {\n    //       if (roomSeeInfo[i].id == room) {\n    //         return i;\n    //       }\n    //     }\n\n    //     return -1;\n    //   }\n\n    public setH5GameInfo(data) {\n        let self = this;\n        self.h5GameInfo = {\n            use_h5: data.useH5,\n            h5_url: data.h5Url,\n            frame_url: data.frameUrl,\n            hoverButton: data.hoverButton,\n            screenDirection: data.screenDirection,\n            checkGoldLock: true,\n        };\n    }\n}\n","import Listener from \"../../../../../../main/core/utils/Listener\";\nimport CommonEventName from \"../../CommonEventName\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class PageItem extends cc.Component {\n    @property({ type: cc.Label, tooltip: \"页数lab\" })\n    lab_pageNum: cc.Label = null;\n\n    private pageNun: number = 0;\n    private posIndex: number = 0;\n\n    onLoad() {\n        this.node.on(cc.Node.EventType.TOUCH_END, this.onClick, this);\n    }\n\n    start() {}\n\n    public init(pageNum: number, posIndex: number) {\n        this.pageNun = pageNum;\n        this.posIndex = posIndex;\n        this.lab_pageNum.string = String(pageNum);\n    }\n\n    public getPageNum() {\n        return this.pageNun;\n    }\n\n    public setPosIndex(posIndex: number) {\n        this.posIndex = posIndex;\n    }\n\n    public getPosIndex() {\n        return this.posIndex;\n    }\n\n    private onClick() {\n        Listener.emit(CommonEventName.CLICK_PAGE_ITEM, this.posIndex);\n    }\n}\n","import PopUpViewBase from \"../../../../../../main/core/popUpViewUtils/PopUpViewBase\";\nimport DropDownListEx from \"../../../../../../main/core/ui/component/DropDownListEx/DropDownListEx\";\nimport Listener from \"../../../../../../main/core/utils/Listener\";\nimport { lodash } from \"../../../../../../main/core/utils/NpmExport\";\nimport { Tools } from \"../../../../../../main/core/utils/Tools\";\nimport CommonEventName from \"../../CommonEventName\";\nimport UIMgr from \"../../Component/base/UIMgr\";\nimport CommonLanguage from \"../../conf/lang/CommonLanguage\";\nimport CommonSkin from \"../../conf/skin/CommonSkin\";\nimport { CommonUserUtil } from \"../CommonUserUtil\";\nimport { CommonAccountUtil } from \"../utils/CommonAccountUtil\";\nimport { CommonUserLoginCheckUtil } from \"../utils/CommonUserLoginCheckUtil\";\nimport { CommonUserLoginUiUtil } from \"../utils/CommonUserLoginUiUtil\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class PasswordLogin extends PopUpViewBase {\n    @property({ type: cc.EditBox })\n    accountNode: cc.EditBox = null;\n\n    @property({ type: cc.EditBox })\n    pwdNode: cc.EditBox = null;\n\n    public init() {\n        this.initUserDropList();\n    }\n\n    protected initUserDropList() {\n        let accounts = CommonAccountUtil.getHistoryAccounts() as string[][];\n        let dataList =\n            accounts\n                ?.filter((v) => {\n                    return !!v[3];\n                })\n                .map((v) => {\n                    return { title: v[2], password: v[3] };\n                })\n                .splice(0, 3) ?? [];\n        let dropList = this.getComponentInChildren(DropDownListEx);\n        dropList.initItems({\n            data: dataList,\n            onSelect: (index: number, data) => {\n                this.accountNode.string = data.title;\n                this.pwdNode.string = data[\"password\"];\n            },\n            onDelete: (index: number, data, list) => {\n                if (list.length <= 1) {\n                    UIMgr.showToast(CommonLanguage.deleteAccountFailed);\n                } else {\n                    CommonAccountUtil.deleteAccount(data.title);\n                }\n            },\n        });\n        if (dataList.length >= 1) {\n            this.accountNode.string = lodash.first(dataList).title;\n            this.pwdNode.string = lodash.first(dataList).password;\n        }\n    }\n\n    @UIMgr.applyLoadingUi\n    protected async onLoginBtnClick(event: { target: cc.Node }) {\n        let self = this;\n        Tools.clickManager(event.target);\n\n        let loginAccount = lodash.toLower(this.accountNode.string);\n        let password = this.pwdNode.string;\n\n        if (!this.verifyData(loginAccount, password)) {\n            return;\n        }\n\n        return CommonUserUtil.passwordLogin({\n            account: loginAccount,\n            password,\n            success: (data) => {},\n        }).then(() => {\n            Listener.emit(CommonEventName.PASSWORD_LOGIN_SUECECC);\n            return CommonUserLoginUiUtil.launchHall();\n        });\n    }\n\n    protected onRegisterBtnClick(event: { target: cc.Node }) {\n        Tools.clickManager(event.target);\n        this.close();\n        UIMgr.showUI(CommonSkin.LoadOnDemand.Register).then((res) => {\n            res.onClose((ret) => {\n                if (ret) {\n                    UIMgr.showUI(CommonSkin.LoadOnDemand.PasswordLogin);\n                }\n            });\n        });\n    }\n\n    protected onResetPassBtnClick(event: { target: cc.Node }) {\n        UIMgr.showUI(CommonSkin.LoadOnDemand.CommonRetrievePassword);\n    }\n\n    private verifyData(accountStr: string, pwdStr: string) {\n        if (!CommonUserLoginCheckUtil.checkAccount(accountStr)) {\n            return false;\n        }\n        if (!CommonUserLoginCheckUtil.checkPassword(pwdStr)) {\n            return false;\n        }\n        return true;\n    }\n}\n","export enum PokerCardEnum {\n    DIAMOND_A = 0,\n    DIAMOND_2 = 1,\n    DIAMOND_3 = 2,\n    DIAMOND_4 = 3,\n    DIAMOND_5 = 4,\n    DIAMOND_6 = 5,\n    DIAMOND_7 = 6,\n    DIAMOND_8 = 7,\n    DIAMOND_9 = 8,\n    DIAMOND_10 = 9,\n    DIAMOND_J = 10,\n    DIAMOND_Q = 11,\n    DIAMOND_K = 12,\n\n    CLUB_A = 13,\n    CLUB_2 = 14,\n    CLUB_3 = 15,\n    CLUB_4 = 16,\n    CLUB_5 = 17,\n    CLUB_6 = 18,\n    CLUB_7 = 19,\n    CLUB_8 = 20,\n    CLUB_9 = 21,\n    CLUB_10 = 22,\n    CLUB_J = 23,\n    CLUB_Q = 24,\n    CLUB_K = 25,\n\n    HEART_A = 26,\n    HEART_2 = 27,\n    HEART_3 = 28,\n    HEART_4 = 29,\n    HEART_5 = 30,\n    HEART_6 = 31,\n    HEART_7 = 32,\n    HEART_8 = 33,\n    HEART_9 = 34,\n    HEART_10 = 35,\n    HEART_J = 36,\n    HEART_Q = 37,\n    HEART_K = 38,\n\n    SPADE_A = 39,\n    SPADE_2 = 40,\n    SPADE_3 = 41,\n    SPADE_4 = 42,\n    SPADE_5 = 43,\n    SPADE_6 = 44,\n    SPADE_7 = 45,\n    SPADE_8 = 46,\n    SPADE_9 = 47,\n    SPADE_10 = 48,\n    SPADE_J = 49,\n    SPADE_Q = 50,\n    SPADE_K = 51,\n\n    JOKER_BLACK = 52,\n    JOKER_RED = 53,\n}\n","import { PokerCardEnum } from \"./enums/PokerCardEnum\";\nimport PokerResMgr from \"./PokerResMgr\";\n\nclass PokerCardMgr {\n    constructor() {}\n\n    private async getDiamondAFrames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerDiamondBig(),\n            number: await PokerResMgr.getPokerRedA(),\n            flowerColor: await PokerResMgr.getPokerDiamondSmall(),\n        };\n    }\n\n    private async getDiamond2Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerDiamondBig(),\n            number: await PokerResMgr.getPokerRed2(),\n            flowerColor: await PokerResMgr.getPokerDiamondSmall(),\n        };\n    }\n\n    private async getDiamond3Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerDiamondBig(),\n            number: await PokerResMgr.getPokerRed3(),\n            flowerColor: await PokerResMgr.getPokerDiamondSmall(),\n        };\n    }\n\n    private async getDiamond4Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerDiamondBig(),\n            number: await PokerResMgr.getPokerRed4(),\n            flowerColor: await PokerResMgr.getPokerDiamondSmall(),\n        };\n    }\n\n    private async getDiamond5Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerDiamondBig(),\n            number: await PokerResMgr.getPokerRed5(),\n            flowerColor: await PokerResMgr.getPokerDiamondSmall(),\n        };\n    }\n\n    private async getDiamond6Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerDiamondBig(),\n            number: await PokerResMgr.getPokerRed6(),\n            flowerColor: await PokerResMgr.getPokerDiamondSmall(),\n        };\n    }\n\n    private async getDiamond7Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerDiamondBig(),\n            number: await PokerResMgr.getPokerRed7(),\n            flowerColor: await PokerResMgr.getPokerDiamondSmall(),\n        };\n    }\n\n    private async getDiamond8Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerDiamondBig(),\n            number: await PokerResMgr.getPokerRed8(),\n            flowerColor: await PokerResMgr.getPokerDiamondSmall(),\n        };\n    }\n\n    private async getDiamond9Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerDiamondBig(),\n            number: await PokerResMgr.getPokerRed9(),\n            flowerColor: await PokerResMgr.getPokerDiamondSmall(),\n        };\n    }\n\n    private async getDiamond10Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerDiamondBig(),\n            number: await PokerResMgr.getPokerRed10(),\n            flowerColor: await PokerResMgr.getPokerDiamondSmall(),\n        };\n    }\n\n    private async getDiamondJFrames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerRedFlowerJ(),\n            number: await PokerResMgr.getPokerRedJ(),\n            flowerColor: await PokerResMgr.getPokerDiamondSmall(),\n        };\n    }\n\n    private async getDiamondQFrames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerRedFlowerQ(),\n            number: await PokerResMgr.getPokerRedQ(),\n            flowerColor: await PokerResMgr.getPokerDiamondSmall(),\n        };\n    }\n\n    private async getDiamondKFrames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerRedFlowerK(),\n            number: await PokerResMgr.getPokerRedK(),\n            flowerColor: await PokerResMgr.getPokerDiamondSmall(),\n        };\n    }\n\n    private async getClubAFrames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerClubBig(),\n            number: await PokerResMgr.getPokerBlackA(),\n            flowerColor: await PokerResMgr.getPokerClubSmall(),\n        };\n    }\n\n    private async getClub2Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerClubBig(),\n            number: await PokerResMgr.getPokerBlack2(),\n            flowerColor: await PokerResMgr.getPokerClubSmall(),\n        };\n    }\n\n    private async getClub3Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerClubBig(),\n            number: await PokerResMgr.getPokerBlack3(),\n            flowerColor: await PokerResMgr.getPokerClubSmall(),\n        };\n    }\n\n    private async getClub4Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerClubBig(),\n            number: await PokerResMgr.getPokerBlack4(),\n            flowerColor: await PokerResMgr.getPokerClubSmall(),\n        };\n    }\n\n    private async getClub5Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerClubBig(),\n            number: await PokerResMgr.getPokerBlack5(),\n            flowerColor: await PokerResMgr.getPokerClubSmall(),\n        };\n    }\n\n    private async getClub6Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerClubBig(),\n            number: await PokerResMgr.getPokerBlack6(),\n            flowerColor: await PokerResMgr.getPokerClubSmall(),\n        };\n    }\n\n    private async getClub7Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerClubBig(),\n            number: await PokerResMgr.getPokerBlack7(),\n            flowerColor: await PokerResMgr.getPokerClubSmall(),\n        };\n    }\n\n    private async getClub8Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerClubBig(),\n            number: await PokerResMgr.getPokerBlack8(),\n            flowerColor: await PokerResMgr.getPokerClubSmall(),\n        };\n    }\n\n    private async getClub9Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerClubBig(),\n            number: await PokerResMgr.getPokerBlack9(),\n            flowerColor: await PokerResMgr.getPokerClubSmall(),\n        };\n    }\n\n    private async getClub10Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerClubBig(),\n            number: await PokerResMgr.getPokerBlack10(),\n            flowerColor: await PokerResMgr.getPokerClubSmall(),\n        };\n    }\n\n    private async getClubJFrames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerBlackFlowerJ(),\n            number: await PokerResMgr.getPokerBlackJ(),\n            flowerColor: await PokerResMgr.getPokerClubSmall(),\n        };\n    }\n\n    private async getClubQFrames() {\n        return {\n            icon: await PokerResMgr.getPokerBlackFlowerQ(),\n            number: await PokerResMgr.getPokerBlackQ(),\n            flowerColor: await PokerResMgr.getPokerClubSmall(),\n        };\n    }\n\n    private async getClubKFrames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerBlackFlowerK(),\n            number: await PokerResMgr.getPokerBlackK(),\n            flowerColor: await PokerResMgr.getPokerClubSmall(),\n        };\n    }\n\n    private async getHeartAFrames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerHeartBig(),\n            number: await PokerResMgr.getPokerRedA(),\n            flowerColor: await PokerResMgr.getPokerHeartSmall(),\n        };\n    }\n\n    private async getHeart2Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerHeartBig(),\n            number: await PokerResMgr.getPokerRed2(),\n            flowerColor: await PokerResMgr.getPokerHeartSmall(),\n        };\n    }\n\n    private async getHeart3Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerHeartBig(),\n            number: await PokerResMgr.getPokerRed3(),\n            flowerColor: await PokerResMgr.getPokerHeartSmall(),\n        };\n    }\n\n    private async getHeart4Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerHeartBig(),\n            number: await PokerResMgr.getPokerRed4(),\n            flowerColor: await PokerResMgr.getPokerHeartSmall(),\n        };\n    }\n\n    private async getHeart5Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerHeartBig(),\n            number: await PokerResMgr.getPokerRed5(),\n            flowerColor: await PokerResMgr.getPokerHeartSmall(),\n        };\n    }\n\n    private async getHeart6Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerHeartBig(),\n            number: await PokerResMgr.getPokerRed6(),\n            flowerColor: await PokerResMgr.getPokerHeartSmall(),\n        };\n    }\n\n    private async getHeart7Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerHeartBig(),\n            number: await PokerResMgr.getPokerRed7(),\n            flowerColor: await PokerResMgr.getPokerHeartSmall(),\n        };\n    }\n\n    private async getHeart8Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerHeartBig(),\n            number: await PokerResMgr.getPokerRed8(),\n            flowerColor: await PokerResMgr.getPokerHeartSmall(),\n        };\n    }\n\n    private async getHeart9Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerHeartBig(),\n            number: await PokerResMgr.getPokerRed9(),\n            flowerColor: await PokerResMgr.getPokerHeartSmall(),\n        };\n    }\n\n    private async getHeart10Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerHeartBig(),\n            number: await PokerResMgr.getPokerRed10(),\n            flowerColor: await PokerResMgr.getPokerHeartSmall(),\n        };\n    }\n\n    private async getHeartJFrames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerRedFlowerJ(),\n            number: await PokerResMgr.getPokerRedJ(),\n            flowerColor: await PokerResMgr.getPokerHeartSmall(),\n        };\n    }\n\n    private async getHeartQFrames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerRedFlowerQ(),\n            number: await PokerResMgr.getPokerRedQ(),\n            flowerColor: await PokerResMgr.getPokerHeartSmall(),\n        };\n    }\n\n    private async getHeartKFrames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerRedFlowerK(),\n            number: await PokerResMgr.getPokerRedK(),\n            flowerColor: await PokerResMgr.getPokerHeartSmall(),\n        };\n    }\n\n    private async getSpadeAFrames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerSpadeBig(),\n            number: await PokerResMgr.getPokerBlackA(),\n            flowerColor: await PokerResMgr.getPokerSpadeSmall(),\n        };\n    }\n\n    private async getSpade2Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerSpadeBig(),\n            number: await PokerResMgr.getPokerBlack2(),\n            flowerColor: await PokerResMgr.getPokerSpadeSmall(),\n        };\n    }\n\n    private async getSpade3Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerSpadeBig(),\n            number: await PokerResMgr.getPokerBlack3(),\n            flowerColor: await PokerResMgr.getPokerSpadeSmall(),\n        };\n    }\n\n    private async getSpade4Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerSpadeBig(),\n            number: await PokerResMgr.getPokerBlack4(),\n            flowerColor: await PokerResMgr.getPokerSpadeSmall(),\n        };\n    }\n\n    private async getSpade5Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerSpadeBig(),\n            number: await PokerResMgr.getPokerBlack5(),\n            flowerColor: await PokerResMgr.getPokerSpadeSmall(),\n        };\n    }\n\n    private async getSpade6Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerSpadeBig(),\n            number: await PokerResMgr.getPokerBlack6(),\n            flowerColor: await PokerResMgr.getPokerSpadeSmall(),\n        };\n    }\n\n    private async getSpade7Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerSpadeBig(),\n            number: await PokerResMgr.getPokerBlack7(),\n            flowerColor: await PokerResMgr.getPokerSpadeSmall(),\n        };\n    }\n\n    private async getSpade8Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerSpadeBig(),\n            number: await PokerResMgr.getPokerBlack8(),\n            flowerColor: await PokerResMgr.getPokerSpadeSmall(),\n        };\n    }\n\n    private async getSpade9Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerSpadeBig(),\n            number: await PokerResMgr.getPokerBlack9(),\n            flowerColor: await PokerResMgr.getPokerSpadeSmall(),\n        };\n    }\n\n    private async getSpade10Frames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerSpadeBig(),\n            number: await PokerResMgr.getPokerBlack10(),\n            flowerColor: await PokerResMgr.getPokerSpadeSmall(),\n        };\n    }\n\n    private async getSpadeJFrames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerBlackFlowerJ(),\n            number: await PokerResMgr.getPokerBlackJ(),\n            flowerColor: await PokerResMgr.getPokerSpadeSmall(),\n        };\n    }\n\n    private async getSpadeQFrames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerBlackFlowerQ(),\n            number: await PokerResMgr.getPokerBlackQ(),\n            flowerColor: await PokerResMgr.getPokerSpadeSmall(),\n        };\n    }\n\n    private async getSpadeKFrames(): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        return {\n            icon: await PokerResMgr.getPokerBlackFlowerK(),\n            number: await PokerResMgr.getPokerBlackK(),\n            flowerColor: await PokerResMgr.getPokerSpadeSmall(),\n        };\n    }\n\n    public getCardFrames(cardID: PokerCardEnum): Promise<{\n        icon: cc.SpriteFrame;\n        number: cc.SpriteFrame;\n        flowerColor: cc.SpriteFrame;\n    }> {\n        let frames: Promise<{\n            icon: cc.SpriteFrame;\n            number: cc.SpriteFrame;\n            flowerColor: cc.SpriteFrame;\n        }>;\n        switch (cardID) {\n            case PokerCardEnum.DIAMOND_A:\n                frames = this.getDiamondAFrames();\n                break;\n            case PokerCardEnum.DIAMOND_2:\n                frames = this.getDiamond2Frames();\n                break;\n            case PokerCardEnum.DIAMOND_3:\n                frames = this.getDiamond3Frames();\n                break;\n            case PokerCardEnum.DIAMOND_4:\n                frames = this.getDiamond4Frames();\n                break;\n            case PokerCardEnum.DIAMOND_5:\n                frames = this.getDiamond5Frames();\n                break;\n            case PokerCardEnum.DIAMOND_6:\n                frames = this.getDiamond6Frames();\n                break;\n            case PokerCardEnum.DIAMOND_7:\n                frames = this.getDiamond7Frames();\n                break;\n            case PokerCardEnum.DIAMOND_8:\n                frames = this.getDiamond8Frames();\n                break;\n            case PokerCardEnum.DIAMOND_9:\n                frames = this.getDiamond9Frames();\n                break;\n            case PokerCardEnum.DIAMOND_10:\n                frames = this.getDiamond10Frames();\n                break;\n            case PokerCardEnum.DIAMOND_J:\n                frames = this.getDiamondJFrames();\n                break;\n            case PokerCardEnum.DIAMOND_Q:\n                frames = this.getDiamondQFrames();\n                break;\n            case PokerCardEnum.DIAMOND_K:\n                frames = this.getDiamondKFrames();\n                break;\n            case PokerCardEnum.CLUB_A:\n                frames = this.getClubAFrames();\n                break;\n            case PokerCardEnum.CLUB_2:\n                frames = this.getClub2Frames();\n                break;\n            case PokerCardEnum.CLUB_3:\n                frames = this.getClub3Frames();\n                break;\n            case PokerCardEnum.CLUB_4:\n                frames = this.getClub4Frames();\n                break;\n            case PokerCardEnum.CLUB_5:\n                frames = this.getClub5Frames();\n                break;\n            case PokerCardEnum.CLUB_6:\n                frames = this.getClub6Frames();\n                break;\n            case PokerCardEnum.CLUB_7:\n                frames = this.getClub7Frames();\n                break;\n            case PokerCardEnum.CLUB_8:\n                frames = this.getClub8Frames();\n                break;\n            case PokerCardEnum.CLUB_9:\n                frames = this.getClub9Frames();\n                break;\n            case PokerCardEnum.CLUB_10:\n                frames = this.getClub10Frames();\n                break;\n            case PokerCardEnum.CLUB_J:\n                frames = this.getClubJFrames();\n                break;\n            case PokerCardEnum.CLUB_Q:\n                frames = this.getClubQFrames();\n                break;\n            case PokerCardEnum.CLUB_K:\n                frames = this.getClubKFrames();\n                break;\n\n            case PokerCardEnum.HEART_A:\n                frames = this.getHeartAFrames();\n                break;\n            case PokerCardEnum.HEART_2:\n                frames = this.getHeart2Frames();\n                break;\n            case PokerCardEnum.HEART_3:\n                frames = this.getHeart3Frames();\n                break;\n            case PokerCardEnum.HEART_4:\n                frames = this.getHeart4Frames();\n                break;\n            case PokerCardEnum.HEART_5:\n                frames = this.getHeart5Frames();\n                break;\n            case PokerCardEnum.HEART_6:\n                frames = this.getHeart6Frames();\n                break;\n            case PokerCardEnum.HEART_7:\n                frames = this.getHeart7Frames();\n                break;\n            case PokerCardEnum.HEART_8:\n                frames = this.getHeart8Frames();\n                break;\n            case PokerCardEnum.HEART_9:\n                frames = this.getHeart9Frames();\n                break;\n            case PokerCardEnum.HEART_10:\n                frames = this.getHeart10Frames();\n                break;\n            case PokerCardEnum.HEART_J:\n                frames = this.getHeartJFrames();\n                break;\n            case PokerCardEnum.HEART_Q:\n                frames = this.getHeartQFrames();\n                break;\n            case PokerCardEnum.HEART_K:\n                frames = this.getHeartKFrames();\n                break;\n\n            case PokerCardEnum.SPADE_A:\n                frames = this.getSpadeAFrames();\n                break;\n            case PokerCardEnum.SPADE_2:\n                frames = this.getSpade2Frames();\n                break;\n            case PokerCardEnum.SPADE_3:\n                frames = this.getSpade3Frames();\n                break;\n            case PokerCardEnum.SPADE_4:\n                frames = this.getSpade4Frames();\n                break;\n            case PokerCardEnum.SPADE_5:\n                frames = this.getSpade5Frames();\n                break;\n            case PokerCardEnum.SPADE_6:\n                frames = this.getSpade6Frames();\n                break;\n            case PokerCardEnum.SPADE_7:\n                frames = this.getSpade7Frames();\n                break;\n            case PokerCardEnum.SPADE_8:\n                frames = this.getSpade8Frames();\n                break;\n            case PokerCardEnum.SPADE_9:\n                frames = this.getSpade9Frames();\n                break;\n            case PokerCardEnum.SPADE_10:\n                frames = this.getSpade10Frames();\n                break;\n            case PokerCardEnum.SPADE_J:\n                frames = this.getSpadeJFrames();\n                break;\n            case PokerCardEnum.SPADE_Q:\n                frames = this.getSpadeQFrames();\n                break;\n            case PokerCardEnum.SPADE_K:\n                frames = this.getSpadeKFrames();\n                break;\n            default:\n                CC_DEBUG && cc.log(\"cardID not in PokerCardEnum\");\n                break;\n        }\n\n        return frames;\n    }\n}\n\nexport default new PokerCardMgr();\n","export enum PokerFlowerEnum {\n    SPADE = 1, //黑桃\n    HEART = 2, //红心\n    CLUB = 3, //梅花\n    DIAMOND = 4, //方块\n}\n","// 大王(red joker)小王(black joker)黑桃(spade) 红桃(heart) 方块(diamond) 梅花(club)\nexport enum PokerResEnum {\n    POKER_BG = 1,\n    POKER_GRAY = 2,\n    POKER_NORMAL = 3,\n\n    SPADE_BIG = 10,\n    SPADE_SMALL = 11,\n\n    HEART_BIG = 20,\n    HEART_SMALL = 21,\n\n    DIAMOND_BIG = 30,\n    DIAMOND_SMALL = 31,\n\n    CLUB_BIG = 40,\n    CLUB_SMALL = 41,\n\n    BLACK_FLOWER_J = 100,\n    BLACK_FLOWER_Q = 101,\n    BLACK_FLOWER_K = 102,\n\n    RED_FLOWER_J = 200,\n    RED_FLOWER_Q = 201,\n    RED_FLOWER_K = 202,\n\n    BLACK_2 = 1000,\n    BLACK_3 = 1001,\n    BLACK_4 = 1002,\n    BLACK_5 = 1003,\n    BLACK_6 = 1004,\n    BLACK_7 = 1005,\n    BLACK_8 = 1006,\n    BLACK_9 = 1007,\n    BLACK_10 = 1008,\n    BLACK_J = 1009,\n    BLACK_Q = 1010,\n    BLACK_K = 1011,\n    BLACK_A = 1012,\n\n    RED_2 = 2000,\n    RED_3 = 2001,\n    RED_4 = 2002,\n    RED_5 = 2003,\n    RED_6 = 2004,\n    RED_7 = 2005,\n    RED_8 = 2006,\n    RED_9 = 2007,\n    RED_10 = 2008,\n    RED_J = 2009,\n    RED_Q = 2010,\n    RED_K = 2011,\n    RED_A = 2012,\n\n    BLACK_JOKER = 3000,\n    RED_JOKER = 3001,\n}\n","import CommonSkin from \"../../conf/skin/CommonSkin\";\nimport { PokerResEnum } from \"./enums/PokerResEnum\";\n\nclass PokerResMgr {\n    constructor() {}\n\n    public async getPokerBg(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.POKER_BG]\n        );\n    }\n\n    public async getPokerGray(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.POKER_GRAY]\n        );\n    }\n\n    public async getPokerNormal(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.POKER_NORMAL]\n        );\n    }\n\n    public async getPokerSpadeBig(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.SPADE_BIG]\n        );\n    }\n\n    public async getPokerSpadeSmall(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.SPADE_SMALL]\n        );\n    }\n\n    public async getPokerHeartBig(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.HEART_BIG]\n        );\n    }\n\n    public async getPokerHeartSmall(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.HEART_SMALL]\n        );\n    }\n\n    public async getPokerDiamondBig(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.DIAMOND_BIG]\n        );\n    }\n\n    public async getPokerDiamondSmall(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.DIAMOND_SMALL]\n        );\n    }\n\n    public async getPokerClubBig(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.CLUB_BIG]\n        );\n    }\n\n    public async getPokerClubSmall(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.CLUB_SMALL]\n        );\n    }\n\n    public async getPokerBlackFlowerJ(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.BLACK_FLOWER_J]\n        );\n    }\n\n    public async getPokerBlackFlowerQ(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.BLACK_FLOWER_Q]\n        );\n    }\n\n    public async getPokerBlackFlowerK(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.BLACK_FLOWER_K]\n        );\n    }\n\n    public async getPokerRedFlowerJ(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.RED_FLOWER_J]\n        );\n    }\n\n    public async getPokerRedFlowerQ(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.RED_FLOWER_Q]\n        );\n    }\n\n    public async getPokerRedFlowerK(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.RED_FLOWER_K]\n        );\n    }\n\n    public async getPokerBlack2(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.BLACK_2]\n        );\n    }\n\n    public async getPokerBlack3(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.BLACK_3]\n        );\n    }\n\n    public async getPokerBlack4(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.BLACK_4]\n        );\n    }\n\n    public async getPokerBlack5(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.BLACK_5]\n        );\n    }\n\n    public async getPokerBlack6(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.BLACK_6]\n        );\n    }\n\n    public async getPokerBlack7(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.BLACK_7]\n        );\n    }\n\n    public async getPokerBlack8(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.BLACK_8]\n        );\n    }\n\n    public async getPokerBlack9(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.BLACK_9]\n        );\n    }\n\n    public async getPokerBlack10(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.BLACK_10]\n        );\n    }\n\n    public async getPokerBlackJ(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.BLACK_J]\n        );\n    }\n\n    public async getPokerBlackQ() {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.BLACK_Q]\n        );\n    }\n\n    public async getPokerBlackK(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.BLACK_K]\n        );\n    }\n\n    public async getPokerBlackA(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.BLACK_A]\n        );\n    }\n\n    public async getPokerRed2(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.RED_2]\n        );\n    }\n\n    public async getPokerRed3(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.RED_3]\n        );\n    }\n\n    public async getPokerRed4(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.RED_4]\n        );\n    }\n\n    public async getPokerRed5(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.RED_5]\n        );\n    }\n\n    public async getPokerRed6(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.RED_6]\n        );\n    }\n\n    public async getPokerRed7(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.RED_7]\n        );\n    }\n\n    public async getPokerRed8(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.RED_8]\n        );\n    }\n\n    public async getPokerRed9(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.RED_9]\n        );\n    }\n\n    public async getPokerRed10(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.RED_10]\n        );\n    }\n\n    public async getPokerRedJ(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.RED_J]\n        );\n    }\n\n    public async getPokerRedQ(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.RED_Q]\n        );\n    }\n\n    public async getPokerRedK(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.RED_K]\n        );\n    }\n\n    public async getPokerRedA(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.RED_A]\n        );\n    }\n\n    public async getPokerBlackJoker(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.BLACK_JOKER]\n        );\n    }\n\n    public async getPokerRedJoker(): Promise<cc.SpriteFrame> {\n        return await UIDepend.SpriteManager.loadSpriteBundle(\n            CommonSkin.UnPriority.poker[PokerResEnum.RED_JOKER]\n        );\n    }\n}\n\nexport default new PokerResMgr();\n","import { PokerCardEnum } from \"./enums/PokerCardEnum\";\nimport PokerCardMgr from \"./PokerCardMgr\";\nimport PokerResMgr from \"./PokerResMgr\";\n\nconst { ccclass, property } = cc._decorator;\n\nconst SuitShift = 20;\nconst RankMask = (1 << SuitShift) - 1;\nenum Rank {\n    RA = 1 << 0,\n    R2 = 1 << 1,\n    R3 = 1 << 2,\n    R4 = 1 << 3,\n    R5 = 1 << 4,\n    R6 = 1 << 5,\n    R7 = 1 << 6,\n    R8 = 1 << 7,\n    R9 = 1 << 8,\n    R10 = 1 << 9,\n    RJ = 1 << 10,\n    RQ = 1 << 11,\n    RK = 1 << 12,\n    RX = 1 << 13, // small joker\n    RD = 1 << 14, // big joker\n}\nenum Suit {\n    Spade = 1 << (0 + SuitShift),\n    Heart = 1 << (1 + SuitShift),\n    Club = 1 << (2 + SuitShift),\n    Diamond = 1 << (3 + SuitShift),\n}\nexport class Card {\n    private code: number;\n\n    constructor(code: number) {\n        this.code = code;\n    }\n\n    suit(): Suit {\n        return (this.code >> SuitShift) << SuitShift;\n    }\n\n    rank(): Rank {\n        return this.code & RankMask;\n    }\n\n    getFlower(): number {\n        let temp = this.suit();\n        switch (temp) {\n            case Suit.Spade:\n                return 1;\n            case Suit.Heart:\n                return 2;\n            case Suit.Club:\n                return 3;\n            case Suit.Diamond:\n                return 4;\n            default:\n                return 0;\n        }\n    }\n\n    getNumber(): number {\n        let temp = this.rank();\n        switch (temp) {\n            case Rank.RA:\n                return 1;\n            case Rank.R2:\n                return 2;\n            case Rank.R3:\n                return 3;\n            case Rank.R4:\n                return 4;\n            case Rank.R5:\n                return 5;\n            case Rank.R6:\n                return 6;\n            case Rank.R7:\n                return 7;\n            case Rank.R8:\n                return 8;\n            case Rank.R9:\n                return 9;\n            case Rank.R10:\n                return 10;\n            case Rank.RJ:\n                return 11;\n            case Rank.RQ:\n                return 12;\n            case Rank.RK:\n                return 13;\n            default:\n                return 0;\n        }\n    }\n}\n\n@ccclass\nexport default class Poker extends cc.Component {\n    @property(cc.Sprite)\n    number: cc.Sprite = null;\n\n    @property(cc.Sprite)\n    flowerColor: cc.Sprite = null;\n\n    @property(cc.Sprite)\n    icon: cc.Sprite = null;\n\n    @property(cc.Node)\n    mask: cc.Node = null;\n\n    _isShowingCarFlower: boolean = false;\n\n    private getCardId(number: number, flower: number): number {\n        return (4 - flower) * 13 + number - 1;\n    }\n\n    public async init(number: number, flower: number, showMask?: boolean) {\n        showMask = false;\n        let cardId: PokerCardEnum = this.getCardId(number, flower);\n        let cardFrames = await PokerCardMgr.getCardFrames(cardId);\n        if (cardFrames) {\n            if (this.icon) {\n                this.icon.spriteFrame = cardFrames.icon;\n                this.icon.node.opacity = 255;\n            }\n            if (this.flowerColor) {\n                this.flowerColor.spriteFrame = cardFrames.flowerColor;\n            }\n            this.number.spriteFrame = cardFrames.number;\n            this.node.getComponent(cc.Sprite).spriteFrame = await PokerResMgr.getPokerBg();\n            if (showMask) {\n                this.showMask();\n            } else {\n                this.hideMask();\n            }\n        }\n    }\n\n    public showMask() {\n        this.mask.active = true;\n    }\n\n    public hideMask() {\n        this.mask.active = false;\n    }\n\n    public async showCardback() {\n        this.node.getComponent(cc.Sprite).spriteFrame = await PokerResMgr.getPokerNormal();\n        this.hideCardFlower();\n        this.hideMask();\n    }\n\n    public async showCardGiveup() {\n        this.node.getComponent(cc.Sprite).spriteFrame = await PokerResMgr.getPokerGray();\n        this.hideCardFlower();\n    }\n\n    public hideCardFlower(): void {\n        this._isShowingCarFlower = false;\n        if (this.number) {\n            this.number.spriteFrame = null;\n        }\n        if (this.flowerColor) {\n            this.flowerColor.spriteFrame = null;\n        }\n        if (this.icon) {\n            this.icon.spriteFrame = null;\n            this.icon.node.opacity = 0;\n        }\n    }\n\n    public isShowingCarFlower() {\n        return this._isShowingCarFlower;\n    }\n}\n","import { BundleMgr } from \"../../../../main/core/bd/BundleMgr\";\nimport CommonSkin from \"./conf/skin/CommonSkin\";\n\nexport default class PropConfMgr {\n    private static _instance: PropConfMgr = null;\n    private _PropConf: Map<number, IPropsConf> = new Map();\n\n    public static getInstance() {\n        if (!this._instance) {\n            this._instance = new PropConfMgr();\n        }\n\n        return this._instance;\n    }\n\n    private constructor() {}\n\n    /**\n     * 根据道具ID获取道具精灵帧\n     * @param id 道具ID\n     * @returns 道具icon的精灵帧\n     */\n    public getPropSpriteFrameById(id: number): cc.SpriteFrame {\n        let propConf: IPropsConf = this._PropConf.get(id);\n        let resDesc: IResDescribe = null;\n        if (propConf) {\n            resDesc = CommonSkin.Priority.prop[propConf.icon];\n        }\n        if (!resDesc) {\n            resDesc = CommonSkin.Priority.prop.default;\n        }\n\n        return BundleMgr.getInstance().getResFromBundle(resDesc);\n    }\n\n    /**\n     * 根据道具的icon属性获取道具精灵帧\n     * @param icon 道具icon\n     * @returns 道具icon的精灵帧\n     */\n    public getPropSpriteFrameByIcon(icon: number): cc.SpriteFrame {\n        let resDesc: IResDescribe = CommonSkin.Priority.prop[icon];\n        if (!resDesc) {\n            resDesc = CommonSkin.Priority.prop.default;\n        }\n\n        return BundleMgr.getInstance().getResFromBundle(resDesc);\n    }\n\n    /** 根据id获取道具描述信息 */\n    public getPropDescById(id: number): string {\n        let desc: string = \"\";\n        let propConf: IPropsConf = this._PropConf.get(id);\n        if (propConf) {\n            desc = propConf.desc;\n        }\n        return desc;\n    }\n\n    /** 根据id获取道具名称 */\n    public getPropNameById(id: number): string {\n        let name: string = \"\";\n        let propConf: IPropsConf = this._PropConf.get(id);\n        if (propConf) {\n            name = propConf.name;\n        }\n        return name;\n    }\n\n    /** 根据id获取道具配置 */\n    public getPropConfById(id: number): IPropsConf {\n        return this._PropConf.get(id);\n    }\n\n    public setPropConf(propConf: Map<number, IPropsConf>) {\n        this._PropConf = propConf;\n    }\n\n    public getPropConf(): Map<number, IPropsConf> {\n        return this._PropConf;\n    }\n}\n","export default class RandomUtil {\n    public static randomIntRange(min: number, max: number) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n}\n","export enum RedPointType {\n    None,\n    UserAvatars,\n    RegisterForGift,\n    NewbieGuide,\n    HallBar,\n    TaskSystem,\n    NewTripleBonus,\n}\n","import CacheObserver from \"../../../../../main/core/utils/class/CacheObserver\";\nimport { setInstance } from \"../../../../../main/core/utils/decorators/InstanceClassDecorator\";\nimport { lodash } from \"../../../../../main/core/utils/NpmExport\";\nimport { UniverseProto } from \"../universe/proto/UniverseProto\";\nimport { RedPointType } from \"./RedPointCacheKey\";\n\ninterface IRedPointData {\n    count: number;\n}\n\ninterface IItem {\n    [index: string | number]: IRedPointData;\n}\n\ntype IData = {\n    points: {\n        [key in RedPointType]?: IItem;\n    };\n};\n\n@setInstance\nexport default class RedPointObserver extends CacheObserver<IData> {\n    protected getCacheKey(): string {\n        return \"_red_points\";\n    }\n\n    private toIndex(index: number | string): string {\n        return `_${index}`;\n    }\n\n    public getPoint(key: RedPointType, index: number | string = 0) {\n        let data = this.get(\"points\", {});\n        let value = lodash.get(data, `${key}.${this.toIndex(index)}.count`, 0);\n        return value;\n    }\n\n    public hasPoint(key: RedPointType, index: number | string = 0) {\n        let data = this.get(\"points\", {});\n        return lodash.get(data, `${key}.${this.toIndex(index)}.count`, -1) != -1;\n    }\n\n    public resetPoint(key: RedPointType, index: number | string, value: number) {\n        delete this.get(\"points\")?.[key];\n        this.setPoint(key, index, value);\n    }\n\n    public setPoint(\n        key: RedPointType,\n        index: number | string,\n        value: number,\n        once: boolean = false\n    ) {\n        let data = this.get(\"points\", {});\n\n        if (once && this.hasPoint(key, index)) {\n            return;\n        }\n\n        lodash.set(data, `${key}.${this.toIndex(index)}.count`, value);\n        this.modify({\n            points: data,\n        });\n    }\n\n    public removePoint(key: RedPointType, index: number | string = 0) {\n        if (!this.hasPoint(key, index)) {\n            return;\n        }\n        this.setPoint(key, index, 0);\n    }\n\n    public initGameGuide(gameTag: ProtoObject<UniverseProto.FeatureConfResp.GameTag>[]) {\n        gameTag\n            .find((v) => {\n                return v.type == UniverseProto.GameTagType.TAG_TYPE_NEWBIE_GUIDE;\n            })\n            ?.game_ids.forEach((item) => {\n                this.setPoint(RedPointType.NewbieGuide, item, 1, true);\n            });\n    }\n\n    initBar(bar: UniverseProto.BarItem[]) {\n        delete this.get(\"points\")?.[RedPointType.HallBar];\n        bar.forEach((item) => {\n            this.setPoint(RedPointType.HallBar, item, 1, false);\n        });\n    }\n}\n","import { AccountType } from \"../../../../../../main/core/conf/GameEnum\";\nimport PopUpViewBase from \"../../../../../../main/core/popUpViewUtils/PopUpViewBase\";\nimport { lodash } from \"../../../../../../main/core/utils/NpmExport\";\nimport { Tools } from \"../../../../../../main/core/utils/Tools\";\nimport UIMgr from \"../../Component/base/UIMgr\";\nimport CommonLanguage from \"../../conf/lang/CommonLanguage\";\nimport ApiMgr from \"../../service/api/ApiMgr\";\nimport { ApiProto } from \"../../service/api/ApiProto\";\nimport { CommonUserUtil } from \"../CommonUserUtil\";\nimport { CommonAccountUtil } from \"../utils/CommonAccountUtil\";\nimport { CommonUserLoginCheckUtil } from \"../utils/CommonUserLoginCheckUtil\";\nimport { CommonUserLoginUiUtil } from \"../utils/CommonUserLoginUiUtil\";\nimport EnumController from \"../../../../../../main/core/ui/component/EnumController\";\nimport { Instance } from \"../../../../../../main/core/utils/decorators/InstanceClassDecorator\";\nimport CommonPromoterVerifyBrdObserver from \"../../obs/CommonPromoterVerifyBrdObserver\";\nimport EnumActive from \"../../../../../../main/core/ui/component/EnumActive\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class Register extends PopUpViewBase {\n    @property({ type: cc.EditBox })\n    accountNode: cc.EditBox = null;\n\n    @property({ type: cc.EditBox })\n    pwdNode: cc.EditBox = null;\n\n    @property({ type: cc.EditBox })\n    confirmPwdNode: cc.EditBox = null;\n\n    @property({ type: cc.EditBox })\n    inviteEdit: cc.EditBox = null;\n\n    @property(EnumActive)\n    inviteNode: EnumActive = null;\n    public init() {\n        this.getComponent(EnumController)?.show4Name(\n            Instance(CommonPromoterVerifyBrdObserver).get() ? \"invite\" : \"normal\"\n        );\n    }\n\n    protected onHasInviteCodeClicked() {\n        this.inviteNode.show4Name(\"editBox\");\n    }\n\n    protected onCloseClick(event: { target: cc.Node }) {\n        Tools.clickManager(event.target);\n        this.close(true);\n    }\n\n    private verifyData(accountStr: string, pwdStr: string, confirmPwd: string) {\n        if (!CommonUserLoginCheckUtil.checkAccount(accountStr)) {\n            return false;\n        }\n        if (!CommonUserLoginCheckUtil.checkPassword(pwdStr)) {\n            return false;\n        }\n        if (!CommonUserLoginCheckUtil.checkPassword(confirmPwd)) {\n            return false;\n        }\n\n        if (pwdStr != confirmPwd) {\n            UIMgr.showToast(CommonLanguage.passwordDifferent);\n            return false;\n        }\n\n        return true;\n    }\n\n    @UIMgr.applyLoadingUi\n    protected async onRegisterBtnClick(event: { target: cc.Node }) {\n        let self = this;\n\n        let accountStr = lodash.toLower(this.accountNode.string);\n        let pwdStr = this.pwdNode.string;\n        let confirmPwd = this.confirmPwdNode.string;\n\n        if (!self.verifyData(accountStr, pwdStr, confirmPwd)) {\n            return;\n        }\n\n        const inviteCode = Number(this.inviteEdit?.string || 0);\n\n        if (!!inviteCode && !(await CommonUserUtil.checkReferId(inviteCode))) {\n            UIMgr.showToast(CommonLanguage.invalidReferId);\n            return;\n        }\n\n        return ApiMgr.getInstance()\n            .registerRequest(accountStr, pwdStr, inviteCode)\n            .then((data) => {\n                self.updateUserInfo(data, accountStr, pwdStr);\n                this.close();\n                UIMgr.showToast(CommonLanguage.registerLogin);\n                return CommonUserUtil.passwordLogin({\n                    account: accountStr,\n                    password: pwdStr,\n                }).then(() => {\n                    return CommonUserLoginUiUtil.launchHall();\n                });\n            });\n    }\n\n    private updateUserInfo(data: ProtoObject<ApiProto.LoginInfo>, accountStr, pwdStr) {\n        if (data.newbie_type === ApiProto.NewbieType.NB_REGISTER) {\n            CommonDepend.LocalStorageMgr.saveUserDataEvent(data);\n            CommonDepend.AdjustTrack.trackEvent(CommonDepend.AdjustTrack.user_active);\n        }\n        CommonDepend.AdjustTrack.trackEvent(CommonDepend.AdjustTrack.register_account);\n\n        CommonAccountUtil.addAccount(\n            CommonDepend.UserManager.uid,\n            CommonDepend.UserManager.token,\n            accountStr,\n            pwdStr,\n            null,\n            AccountType.TYPE_ACCOUNT\n        );\n    }\n\n    protected formatPasswordEditbox(event: cc.EditBox): void {\n        let editbox = event;\n        let str = editbox.string;\n        editbox.textLabel.string = \"\";\n        for (let i = 0; i < str.length; i++) {\n            editbox.textLabel.string += \"●\";\n        }\n    }\n}\n","import { GameType } from \"../../../../../../main/core/conf/GameType\";\nimport CommonRuleLanguage from \"./lang/CommonRuleLanguage\";\nimport RuleItem from \"./RuleItem\";\nimport { BundleMgr } from \"../../../../../../main/core/bd/BundleMgr\";\nimport CommonSkin from \"../../conf/skin/CommonSkin\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class RuleContent extends cc.Component {\n    @property(cc.Prefab)\n    ruleItem: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    ruleItemRich: cc.Prefab = null;\n\n    protected onLoad(): void { }\n\n    public loadContent(gameID): void {\n        let self = this;\n        let content = null;\n        gameID = Number(gameID);\n        switch (gameID) {\n            case GameType.BIGBATTLE:\n                content = CommonRuleLanguage.rule.brcBigbattle;\n                break;\n            case GameType.REDBLACK:\n                content = CommonRuleLanguage.rule.brcRedBlack;\n                break;\n            case GameType.SHARK:\n                content = CommonRuleLanguage.rule.brcShark;\n                break;\n            case GameType.BIG_SMALL:\n                content = CommonRuleLanguage.rule.bigsmall;\n                break;\n            default: {\n                const desc = CommonSkin.LoadOnDemand.GameRule?.[gameID] ?? [];\n                this.loadSpriteRule(desc);\n                break;\n            }\n        }\n        self.fillContent(content, gameID);\n    }\n\n    private async loadSpriteRule(desc: IResDescribe[]) {\n        try {\n            for (let item of desc) {\n                let spriteFrame = await BundleMgr.getInstance().loadResFromBundle<cc.SpriteFrame>(\n                    item\n                );\n                if (!spriteFrame) {\n                    return;\n                }\n                const page = new cc.Node(\"page\");\n                let width = spriteFrame.getRect().width;\n                this.node.scale = this.node.width / width;\n                page.addComponent(cc.Sprite).spriteFrame = spriteFrame;\n                this.node.addChild(page);\n            }\n        } catch (e) { }\n    }\n\n    private fillContent(ruleContent, gameID): void {\n        let self = this;\n        if (!ruleContent) {\n            return;\n        }\n        self.node.removeAllChildren();\n        for (let key in ruleContent) {\n            let title = ruleContent[key].title;\n            let content = ruleContent[key].content;\n            let contentRich = ruleContent[key].contentRich;\n            let contentDeploy = ruleContent[key].contentDeploy;\n\n            if (contentRich) {\n                if (cc.isValid(self.ruleItemRich)) {\n                    let ruleItemNode = cc.instantiate(self.ruleItemRich);\n                    if (ruleItemNode) {\n                        self.node.addChild(ruleItemNode);\n                        if (ruleItemNode.getComponent(RuleItem)) {\n                            ruleItemNode\n                                .getComponent(RuleItem)\n                                .initView(title, content, contentRich, contentDeploy, gameID);\n                        }\n                    }\n                }\n            } else {\n                if (cc.isValid(self.ruleItem)) {\n                    let ruleItemNode = cc.instantiate(self.ruleItem);\n                    if (ruleItemNode) {\n                        self.node.addChild(ruleItemNode);\n                        if (ruleItemNode.getComponent(RuleItem)) {\n                            ruleItemNode\n                                .getComponent(RuleItem)\n                                .initView(title, content, contentRich, contentDeploy, gameID);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    public updateContent(ruleContent): void {\n        this.fillContent(ruleContent, null);\n    }\n}\n","//import BrcColorVariableModel from \"../../Game/Brc/BRC_ColorDish/Script/Model/BrcColorVariableModel\";\n\nimport { GameType } from \"../../../../../../main/core/conf/GameType\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class RuleItem extends cc.Component {\n    @property(cc.Label)\n    titleText: cc.Label = null;\n\n    @property(cc.Node)\n    contentNode: cc.Node = null;\n\n    @property(cc.Color)\n    tagColor: cc.Color = null;\n\n    protected onLoad(): void {}\n\n    public initView(title, content, contentRich, contentDeploy, gameID) {\n        let self = this;\n        if (cc.isValid(self.titleText)) {\n            if (title) {\n                self.titleText.node.active = true;\n                self.titleText.string = title;\n            } else {\n                self.titleText.node.active = false;\n                self.titleText.string = \"\";\n            }\n        }\n\n        let formatedContent = \"\";\n        if (content) {\n            let colorValue = \"\";\n\n            if (cc.isValid(self.tagColor)) {\n                colorValue = \"#\" + self.tagColor.toHEX(\"#rrggbb\");\n                formatedContent = content.replace(/{tag_color}/g, colorValue);\n            } else {\n                formatedContent = content;\n            }\n        }\n\n        if (formatedContent) {\n            if (cc.isValid(self.contentNode)) {\n                self.contentNode.active = true;\n                if (contentRich) {\n                    let richTextLabel = self.contentNode.getComponent(cc.RichText);\n                    if (cc.isValid(richTextLabel)) {\n                        richTextLabel.string = formatedContent;\n                    }\n                } else {\n                    let label = self.contentNode.getComponent(cc.Label);\n                    if (cc.isValid(label)) {\n                        label.string = formatedContent;\n                    }\n                }\n            }\n        } else {\n            if (cc.isValid(self.contentNode)) {\n                self.contentNode.active = false;\n            }\n        }\n    }\n}\n","import CommonSkin from \"../../conf/skin/CommonSkin\";\nimport RuleContent from \"./RuleContent\";\nimport PopUpViewBase from \"../../../../../../main/core/popUpViewUtils/PopUpViewBase\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class Rule extends PopUpViewBase {\n    @property(cc.ScrollView)\n    mainScrollView: cc.ScrollView = null;\n\n    @property(cc.Node)\n    content: cc.Node = null;\n\n    public init(gameID): void {\n        UIDepend.PrefabManager\n            .loadPrefabBundle(CommonSkin.LoadOnDemand.gameRuleContent)\n            .then((prefab) => {\n                if (!prefab) {\n                    return;\n                }\n                let node = cc.instantiate(prefab);\n                node.getComponent(RuleContent).loadContent(gameID);\n                this.content.addChild(node);\n            });\n    }\n\n    private onClickClose(): void {\n        CommonDepend.AudioManager.playEffect(CommonSkin.LoadOnDemand.btnEffect);\n\n        this.close();\n    }\n}\n","import { BundleMgr } from \"../../../../main/core/bd/BundleMgr\";\nimport { H5Util } from \"../../../../main/core/platform/H5Util\";\nimport { PlatformType } from \"../../../../main/core/platform/PlatformType\";\nimport Listener from \"../../../../main/core/utils/Listener\";\nimport CommonEventName from \"./CommonEventName\";\n\n/**\n * 解决 task:1329\n * [需求背景]\n * 目前使用Safari浏览器打开H5页面后，保存至桌面显示的快捷方式默认图标为网页缩略图，因目前H5游戏没有内置图标\n * [需求详情]\n * 内置图标，快捷方式保存到桌面后显示内置的图标\n */\nclass SafariDeskIcon {\n    private _platform = null;\n    constructor() {\n        this._platform = H5Util.getInstance().platform;\n        if (this._platform !== PlatformType.H5) return;\n        if (!H5Util.getInstance().isSafari) return;\n        Listener.once(CommonEventName.SET_SAFARI_DESK_ICON, this.iconHandler, this);\n    }\n\n    iconHandler() {\n        //@ts-ignore\n        import(\"CommonSkin\").then((obj) => {\n            let res = obj.default.Priority.safari_desk_icon;\n            let iconSp = BundleMgr.getInstance().getResFromBundle(res);\n            let nativeURL = iconSp._texture.nativeUrl;\n            //set document\n            //let host = window.location.host;\n            let link = document.createElement(\"link\");\n            link.rel = \"apple-touch-icon\";\n            link.href = nativeURL;\n            document.head.appendChild(link);\n        });\n    }\n}\nconst newSafariDeskIcon = new SafariDeskIcon();\nwindow[\"sdiref\"] = newSafariDeskIcon;\nexport default newSafariDeskIcon;\n","import BundleCenter from \"../../../../main/core/bd/BundleCenter\";\nimport { BundleNames } from \"../../../../main/core/conf/BundleNames\";\nimport { GameType } from \"../../../../main/core/conf/GameType\";\nimport UIMgr from \"./Component/base/UIMgr\";\n\nimport { GameKind } from \"../../../../main/core/conf/GameEnum\";\nimport { Injector } from \"../../../../main/core/utils/decorators/Injector\";\nimport CommonLanguage from \"./conf/lang/CommonLanguage\";\nimport LoadingSceneStateObserver from \"./obs/LoadingSceneStateObserver\";\nimport { SceneType } from \"./SceneType\";\nimport Switch from \"./Switch\";\n\nexport class SceneControl {\n    private static _instance: SceneControl = null;\n\n    public static getInstance() {\n        if (!this._instance) {\n            this._instance = new SceneControl();\n        }\n\n        return this._instance;\n    }\n\n    @Injector.Inject(LoadingSceneStateObserver)\n    private loadingSceneStateObserver: LoadingSceneStateObserver = null;\n\n    private _currentScene: SceneType = SceneType.None;\n\n    public get scene() {\n        return this._currentScene;\n    }\n\n    private constructor() {}\n\n    public launchScene(gameId: GameType) {\n        let bundleName = CommonDepend.GameDatabase.getBundleNameWithGameId(gameId);\n        if (!bundleName) {\n            return;\n        }\n        switch (bundleName) {\n            case BundleNames.LOADING: {\n                return this.onLaunchScene(BundleNames.LOADING, \"LoginScene\");\n            }\n            case BundleNames.BIG_SMALL: {\n                return UIMgr.applyLoadingUi(this.onLaunchScene(bundleName));\n            }\n            default: {\n                return this.onLaunchScene(bundleName);\n            }\n        }\n    }\n\n    private onLaunchScene(bundleName: BundleNames, scene?: string) {\n        Switch.isSwitchUi = true;\n        this.loadingSceneStateObserver.onLoadingStart(bundleName);\n        return new Promise((resolve) => {\n            BundleCenter.getInstance()\n                .launchScene(bundleName, scene)\n                .onProgress((current, total) => {\n                    this.loadingSceneStateObserver.set(\"progress\", current / total);\n                })\n                .onSuccess(() => {\n                    this.loadingSceneStateObserver.onLoadingSuccess(bundleName);\n                    resolve(true);\n                })\n                .onFailed(() => {\n                    if (bundleName !== BundleNames.HALL) {\n                        UIMgr.showAlert({\n                            contentText: CommonLanguage.loadingResFailure,\n                            negativeBtnText: CommonLanguage.returnHall,\n                            positiveBtnText: CommonLanguage.tryAgain,\n                            style: 3,\n                        }).onClose((result) => {\n                            switch (result) {\n                                case false: {\n                                    this.loadingSceneStateObserver.onError(bundleName);\n                                    break;\n                                }\n                                case true: {\n                                    this.onLaunchScene(bundleName, scene);\n                                    break;\n                                }\n                            }\n                        });\n                    }\n                });\n        }).then(() => {\n            switch (bundleName) {\n                case BundleNames.HALL: {\n                    this._currentScene = SceneType.Hall;\n                    break;\n                }\n                case BundleNames.LOADING: {\n                    this._currentScene = SceneType.Login;\n                    break;\n                }\n                default: {\n                    this._currentScene = SceneType.Game;\n                }\n            }\n        });\n    }\n}\nwindow[\"scx\"] = SceneControl.getInstance();\n","export enum SceneType {\n    None, //Launcher,\n    Login,\n    Hall,\n    Game,\n}\n","import { PoolMgr } from \"../../../../../../main/core/objectPool/PoolMgr\";\nimport Listener from \"../../../../../../main/core/utils/Listener\";\nimport CommonEventName from \"../../CommonEventName\";\nimport PageItem from \"./PageItem\";\n\nconst { ccclass, property } = cc._decorator;\n\nenum CREATE_ITEM_DIR {\n    LEFT,\n    RIGHT,\n}\n\n/** item被选中以后放大系数 */\nconst ENLARGE_RATIO: number = 1.15;\n\n@ccclass\nexport default class SelectPageCom extends cc.Component {\n    @property({ type: cc.Label, tooltip: \"总页数lab\" })\n    lab_totalPage: cc.Label = null;\n\n    @property({ type: cc.Node, tooltip: \"左边按钮\" })\n    btn_left: cc.Node = null;\n\n    @property({ type: cc.Node, tooltip: \"右边按钮\" })\n    btn_right: cc.Node = null;\n\n    @property({ type: cc.EditBox, tooltip: \"页数输入框\" })\n    pageEditBox: cc.EditBox = null;\n\n    @property({ type: cc.Node, tooltip: \"页数标签item根节点\" })\n    pageItemRoot: cc.Node = null;\n\n    @property({ type: cc.Prefab, tooltip: \"页数标签预制体\" })\n    pageItem: cc.Prefab = null;\n\n    @property({ type: cc.Integer, tooltip: \"最大显示的页数标签数量,只能是奇数\" })\n    maxPageItemNum: number = 0;\n\n    @property({ type: cc.Integer, tooltip: \"页数标签之间的间隔宽度\" })\n    space: number = 10;\n\n    /** 当前被选中的item节点 */\n    private curSelectItemNode: cc.Node = null;\n    private totalPage: number = 0;\n\n    private itemNodeList: cc.Node[] = [];\n    private itemNodePosList: cc.Vec3[] = [];\n    private isMoveing: boolean = false;\n    private itemCenterIndex: number = 0;\n    private minSelectThreshold: number = 0;\n    private maxSelectThreshold: number = 0;\n    private selectCallFunc: (pageNum: number) => void = null;\n\n    onLoad() {\n        this.btn_left.on(cc.Node.EventType.TOUCH_END, this.onLeft, this);\n        this.btn_right.on(cc.Node.EventType.TOUCH_END, this.onRight, this);\n\n        this.pageEditBox.node.on(\"editing-did-ended\", this.onPageEditBoxEnded, this);\n    }\n\n    start() {}\n\n    protected onEnable(): void {\n        Listener.on(CommonEventName.CLICK_PAGE_ITEM, this.onCilckPageItem, this);\n    }\n\n    protected onDisable(): void {\n        Listener.targetOff(this);\n    }\n\n    public init(totalPage: number, selectCallFunc: (pageNum: number) => void) {\n        this.selectCallFunc = selectCallFunc;\n        this.isMoveing = false;\n        this.totalPage = totalPage;\n        this.lab_totalPage.string = String(this.totalPage);\n        this.pageEditBox.string = \"\";\n        this.itemNodeList = [];\n        this.itemNodePosList = [];\n\n        this.initItems();\n        this.initLeftAndRightBtnActive(1);\n        this.initLeftAndRightBtnPos();\n    }\n\n    private initLeftAndRightBtnPos() {\n        let width = this.pageItemRoot.width / 2;\n        this.btn_left.x = -(width + this.btn_left.width / 2 + 25);\n        this.btn_right.x = width + this.btn_right.width / 2 + 25;\n    }\n\n    private initLeftAndRightBtnActive(curSelectPageNum: number) {\n        if (this.totalPage <= 1) {\n            this.btn_left.active = false;\n            this.btn_right.active = false;\n        } else if (curSelectPageNum == 1) {\n            this.btn_left.active = false;\n            this.btn_right.active = true;\n        } else if (curSelectPageNum == this.totalPage) {\n            this.btn_left.active = true;\n            this.btn_right.active = false;\n        } else {\n            this.btn_left.active = true;\n            this.btn_right.active = true;\n        }\n    }\n\n    private initItemNodePosList() {\n        let indexs: number[] = [];\n\n        if (this.totalPage <= this.maxPageItemNum) {\n            for (let i = 0; i < this.totalPage; i++) {\n                indexs.push(i);\n            }\n        } else {\n            for (let i = 0, len = this.maxPageItemNum * 3; i < len; i++) {\n                indexs.push(-this.maxPageItemNum + i);\n            }\n        }\n\n        let itemWidth = this.itemNodeList[0].width;\n        let totalWidth = this.calcWidthWithItenNum(itemWidth, indexs.length);\n        for (let i = 0, len = indexs.length; i < len; i++) {\n            let index = indexs[i];\n            this.itemNodePosList[index] = this.calcItemPos(totalWidth, i, itemWidth);\n        }\n    }\n\n    private initItems() {\n        this.createItems();\n        this.initItemNodePosList();\n        this.initItemsPos();\n        this.initPageItemRootNodeSize();\n        this.curSelectItemNode = this.itemNodeList[0];\n        this.curSelectItemNode.setScale(ENLARGE_RATIO);\n    }\n\n    private initPageItemRootNodeSize() {\n        let totalWidth = this.calcWidthWithItenNum(\n            this.itemNodeList[0].width,\n            this.itemNodeList.length\n        );\n\n        let itemWidth = this.itemNodeList[0].width;\n        let itemHeight = this.itemNodeList[0].height;\n\n        let increaseWith = itemWidth * ENLARGE_RATIO - itemWidth + 2;\n        let increaseHeight = itemHeight * ENLARGE_RATIO - itemHeight + 2;\n\n        this.pageItemRoot.width = totalWidth + increaseWith;\n        this.pageItemRoot.height = itemHeight + increaseHeight;\n    }\n\n    private createItems() {\n        this.itemCenterIndex = Math.floor(this.maxPageItemNum / 2);\n        this.minSelectThreshold = Math.ceil(this.maxPageItemNum / 2);\n        this.maxSelectThreshold = this.totalPage - this.minSelectThreshold + 1;\n\n        // 创建之前先销毁所有 因为有可能会重复初始化创建（用到了对象池 但是不会影响对象池）\n        this.pageItemRoot.destroyAllChildren();\n        let createNum =\n            this.totalPage <= this.maxPageItemNum ? this.totalPage : this.maxPageItemNum;\n        for (let i = 0; i < createNum; i++) {\n            let item: cc.Node = this.createPageItemNode(i + 1, i);\n            this.itemNodeList.push(item);\n        }\n    }\n\n    private createPageItemNode(pageNun: number, posIndex: number): cc.Node {\n        let item = PoolMgr.getInstance().getNode(this.pageItem);\n        this.pageItemRoot.addChild(item);\n        item.getComponent(PageItem).init(pageNun, posIndex);\n\n        return item;\n    }\n\n    private initItemsPos() {\n        for (let i = 0, len = this.itemNodeList.length; i < len; i++) {\n            this.itemNodeList[i].setPosition(this.itemNodePosList[i]);\n        }\n    }\n\n    private calcWidthWithItenNum(itemWidth: number, itemNum: number): number {\n        return itemNum * itemWidth + (itemNum - 1) * this.space;\n    }\n\n    private calcItemPos(totalWidth: number, index: number, itemWidth: number): cc.Vec3 {\n        let startPosX = -totalWidth / 2;\n        return cc.v3(startPosX + index * itemWidth + itemWidth / 2 + index * this.space, 0, 0);\n    }\n\n    private onLeft() {\n        if (this.isMoveing) {\n            return;\n        }\n\n        let preSelectPageNum = this.curSelectItemNode.getComponent(PageItem).getPageNum();\n        let curSelectPageNum = preSelectPageNum - 1;\n        let moveStep = this.calcMoveStep(curSelectPageNum, preSelectPageNum);\n        this.changePage(CREATE_ITEM_DIR.LEFT, moveStep, curSelectPageNum);\n    }\n\n    private onRight() {\n        if (this.isMoveing) {\n            return;\n        }\n\n        let preSelectPageNum = this.curSelectItemNode.getComponent(PageItem).getPageNum();\n        let curSelectPageNum = preSelectPageNum + 1;\n        let moveStep = this.calcMoveStep(curSelectPageNum, preSelectPageNum);\n        this.changePage(CREATE_ITEM_DIR.RIGHT, moveStep, curSelectPageNum);\n    }\n\n    private changePage(\n        dir: CREATE_ITEM_DIR,\n        moveStep: number,\n        curSelectPageNum: number,\n        startPageNum?: number\n    ) {\n        let selectNode: cc.Node = null;\n\n        for (let i = 0; i < moveStep; i++) {\n            if (dir == CREATE_ITEM_DIR.RIGHT) {\n                let pageNum = 0;\n                if (startPageNum) {\n                    pageNum = startPageNum + i;\n                } else {\n                    pageNum =\n                        this.itemNodeList[this.itemNodeList.length - 1]\n                            .getComponent(PageItem)\n                            .getPageNum() + 1;\n                }\n                let posIndex = this.maxPageItemNum + i;\n                let item = this.createPageItemNode(pageNum, posIndex);\n                item.setPosition(this.itemNodePosList[posIndex]);\n\n                this.itemNodeList.push(item);\n\n                if (pageNum == curSelectPageNum) {\n                    selectNode = item;\n                }\n            } else {\n                let pageNum = 0;\n                if (startPageNum) {\n                    pageNum = startPageNum + moveStep - i - 1;\n                } else {\n                    pageNum = this.itemNodeList[0].getComponent(PageItem).getPageNum() - 1;\n                }\n                let posIndex = 0 - i - 1;\n                let item = this.createPageItemNode(pageNum, posIndex);\n                item.setPosition(this.itemNodePosList[posIndex]);\n\n                this.itemNodeList.unshift(item);\n\n                if (pageNum == curSelectPageNum) {\n                    selectNode = item;\n                }\n            }\n        }\n\n        if (selectNode == null) {\n            for (let i = 0; i < this.itemNodeList.length; i++) {\n                let pageNum = this.itemNodeList[i].getComponent(PageItem).getPageNum();\n                if (pageNum == curSelectPageNum) {\n                    selectNode = this.itemNodeList[i];\n                    break;\n                }\n            }\n        }\n        this.curSelectItemNode.setScale(1);\n        this.curSelectItemNode = selectNode;\n        this.curSelectItemNode.setScale(ENLARGE_RATIO);\n\n        this.initLeftAndRightBtnActive(curSelectPageNum);\n\n        if (moveStep > 0) {\n            this.moveItem(dir, moveStep);\n        }\n\n        this.selectCallFunc && this.selectCallFunc(curSelectPageNum);\n    }\n\n    private getItemMoveToPos(index: number, dir: CREATE_ITEM_DIR, moveStep: number): cc.Vec3 {\n        let pageIndex = this.itemNodeList[index].getComponent(PageItem).getPosIndex();\n        let toPos: cc.Vec3;\n        if (dir == CREATE_ITEM_DIR.RIGHT) {\n            toPos = this.itemNodePosList[pageIndex - moveStep];\n        } else {\n            toPos = this.itemNodePosList[pageIndex + moveStep];\n        }\n\n        return toPos;\n    }\n\n    private updateItemPosIndex(itemNode: cc.Node, dir: CREATE_ITEM_DIR, moveStep: number) {\n        let pageIndex = itemNode.getComponent(PageItem).getPosIndex();\n        if (dir == CREATE_ITEM_DIR.RIGHT) {\n            itemNode.getComponent(PageItem).setPosIndex(pageIndex - moveStep);\n        } else {\n            itemNode.getComponent(PageItem).setPosIndex(pageIndex + moveStep);\n        }\n    }\n\n    private moveItem(dir: CREATE_ITEM_DIR, moveStep: number) {\n        this.isMoveing = true;\n\n        let animList = [];\n\n        for (let i = 0; i < this.itemNodeList.length; i++) {\n            let toPos = this.getItemMoveToPos(i, dir, moveStep);\n            animList.push(\n                new Promise<void>((resolve) => {\n                    cc.tween(this.itemNodeList[i])\n                        .to(0.1, { position: toPos })\n                        .call(() => {\n                            this.updateItemPosIndex(this.itemNodeList[i], dir, moveStep);\n                            resolve();\n                        })\n                        .start();\n                })\n            );\n        }\n\n        Promise.all(animList).then(() => {\n            for (let i = 0; i < moveStep; i++) {\n                let node: cc.Node;\n                if (dir == CREATE_ITEM_DIR.RIGHT) {\n                    node = this.itemNodeList.shift();\n                } else {\n                    node = this.itemNodeList.pop();\n                }\n                PoolMgr.getInstance().putNode(node);\n            }\n\n            this.isMoveing = false;\n        });\n    }\n\n    private calcMoveStep(curSelectPageNum: number, preSelectPageNum: number): number {\n        let moveStep: number = 0;\n        let difference = curSelectPageNum - preSelectPageNum;\n        if (difference == 0) {\n            moveStep = 0;\n        } else if (difference > 0) {\n            if (difference >= this.maxPageItemNum) {\n                moveStep = this.maxPageItemNum;\n            } else if (curSelectPageNum <= this.minSelectThreshold) {\n                moveStep = 0;\n            } else {\n                let pageNum = this.itemNodeList[this.itemNodeList.length - 1]\n                    .getComponent(PageItem)\n                    .getPageNum();\n                let critical = this.totalPage - pageNum;\n                if (critical >= difference) {\n                    //  3 4 5    1 2 3    7  8  9  5  6  7\n                    moveStep =\n                        curSelectPageNum -\n                        this.itemNodeList[this.itemCenterIndex].getComponent(PageItem).getPageNum();\n                } else {\n                    moveStep = critical;\n                }\n            }\n        } else {\n            difference = Math.abs(difference);\n            if (difference >= this.maxPageItemNum) {\n                moveStep = this.maxPageItemNum;\n            } else if (curSelectPageNum >= this.maxSelectThreshold) {\n                moveStep = 0;\n            } else {\n                let pageNum = this.itemNodeList[0].getComponent(PageItem).getPageNum();\n                let critical = pageNum - difference;\n                if (critical > 0) {\n                    moveStep =\n                        this.itemNodeList[this.itemCenterIndex]\n                            .getComponent(PageItem)\n                            .getPageNum() - curSelectPageNum;\n                } else {\n                    moveStep = pageNum - 1;\n                }\n            }\n        }\n\n        return moveStep;\n    }\n\n    private onCilckPageItem(posIndex: number) {\n        if (this.isMoveing) {\n            return;\n        }\n\n        let curSelectPageNum = this.itemNodeList[posIndex].getComponent(PageItem).getPageNum();\n        let preSelectPageNum = this.curSelectItemNode.getComponent(PageItem).getPageNum();\n        let moveStep = this.calcMoveStep(curSelectPageNum, preSelectPageNum);\n\n        if (curSelectPageNum - preSelectPageNum > 0) {\n            this.changePage(CREATE_ITEM_DIR.RIGHT, moveStep, curSelectPageNum);\n        } else {\n            this.changePage(CREATE_ITEM_DIR.LEFT, moveStep, curSelectPageNum);\n        }\n    }\n\n    private onPageEditBoxEnded() {\n        if (this.isMoveing) {\n            return;\n        }\n\n        let str = this.pageEditBox.string.trim();\n        if (str == \"\") {\n            return;\n        }\n\n        let inputPageNum = Number(str);\n        let curSelectPageNum = inputPageNum;\n        if (inputPageNum < 1) {\n            curSelectPageNum = 1;\n            this.pageEditBox.string = String(curSelectPageNum);\n        } else if (inputPageNum > this.totalPage) {\n            curSelectPageNum = this.totalPage;\n            this.pageEditBox.string = String(curSelectPageNum);\n        }\n\n        let preSelectPageNum = this.curSelectItemNode.getComponent(PageItem).getPageNum();\n        let moveStep = this.calcMoveStep(curSelectPageNum, preSelectPageNum);\n        let difference = curSelectPageNum - preSelectPageNum;\n        if (moveStep <= this.itemCenterIndex) {\n            if (difference > 0) {\n                this.changePage(CREATE_ITEM_DIR.RIGHT, moveStep, curSelectPageNum);\n            } else {\n                this.changePage(CREATE_ITEM_DIR.LEFT, moveStep, curSelectPageNum);\n            }\n        } else {\n            if (difference > 0) {\n                let startPageNum = this.calcStartPageNum(\n                    CREATE_ITEM_DIR.RIGHT,\n                    curSelectPageNum,\n                    moveStep\n                );\n                this.changePage(CREATE_ITEM_DIR.RIGHT, moveStep, curSelectPageNum, startPageNum);\n            } else {\n                let startPageNum = this.calcStartPageNum(\n                    CREATE_ITEM_DIR.LEFT,\n                    curSelectPageNum,\n                    moveStep\n                );\n                this.changePage(CREATE_ITEM_DIR.LEFT, moveStep, curSelectPageNum, startPageNum);\n            }\n        }\n    }\n\n    private calcStartPageNum(\n        dir: CREATE_ITEM_DIR,\n        curSelectPageNum: number,\n        moveStep: number\n    ): number {\n        let startPageNum: number = 0;\n\n        if (moveStep < this.maxPageItemNum) {\n            if (dir == CREATE_ITEM_DIR.RIGHT) {\n                let pageNum = this.itemNodeList[this.itemNodeList.length - 1]\n                    .getComponent(PageItem)\n                    .getPageNum();\n                startPageNum = pageNum + 1;\n            } else {\n                let pageNum = this.itemNodeList[0].getComponent(PageItem).getPageNum();\n                startPageNum = pageNum - moveStep;\n            }\n        } else {\n            let rightPageNum = this.totalPage - curSelectPageNum;\n            let leftPageNum = curSelectPageNum - 1;\n            if (rightPageNum >= this.itemCenterIndex) {\n                if (leftPageNum >= this.itemCenterIndex) {\n                    startPageNum = curSelectPageNum - this.itemCenterIndex;\n                } else {\n                    startPageNum = 1;\n                }\n            } else {\n                startPageNum = this.totalPage - this.itemCenterIndex * 2;\n            }\n        }\n\n        return startPageNum;\n    }\n\n    protected onDestroy(): void {\n        PoolMgr.getInstance().clearPoolWithPrefab(this.pageItem);\n    }\n}\n","export enum ServiceCatchResult {\n    None,\n\n    Confirm,\n\n    Cancel,\n}\n","import CommonLanguage from \"../../../conf/lang/CommonLanguage\";\nimport { ServiceErrorSelectAlert } from \"./ServiceErrorSelectAlert\";\n\nexport default class ServiceEnterHallFailedAlert extends ServiceErrorSelectAlert {\n    protected getDefaultShowNotice() {\n        return CommonLanguage.enterHallFailed;\n    }\n\n    protected comfirmeText(): string {\n        return CommonLanguage.tryAgain;\n    }\n}\n","import BaseServiceErrorHandler from \"./base/BaseServiceErrorHandler\";\nimport UIMgr from \"../../../Component/base/UIMgr\";\nimport { ServiceErrorToHallScene } from \"./ServiceErrorToHallScene\";\nimport CommonLanguage from \"../../../conf/lang/CommonLanguage\";\n\nexport class ServiceErrorCoinLock extends ServiceErrorToHallScene {\n    protected getDefaultShowNotice() {\n        return CommonLanguage.unknownError;\n    }\n\n    protected getDefaultConfirmText() {\n        return CommonLanguage.iKnow;\n    }\n}\n","import BaseServiceErrorHandler from \"./base/BaseServiceErrorHandler\";\nimport UIMgr from \"../../../Component/base/UIMgr\";\n\nexport class ServiceErrorConfirmAlert extends BaseServiceErrorHandler {\n    protected onCatchError(data: ServiceError.IError): void {\n        UIMgr.showAlert({\n            contentText: data.message || this.getDefaultShowNotice(),\n            contextAlign: cc.macro.TextAlignment.CENTER,\n            style: UIMgr.ALERT_STYLE.POSITIVE,\n            positiveBtnText: this.getDefaultConfirmText(),\n        }).onClose(() => {\n            this.onConfirmBtnClick();\n        });\n    }\n\n    protected getDefaultShowNotice() {\n        return \"\";\n    }\n\n    protected getDefaultConfirmText() {\n        return \"\";\n    }\n\n    protected onConfirmBtnClick(): void { }\n}\n","import CommonLanguage from \"../../../conf/lang/CommonLanguage\";\nimport { ServiceErrorConfirmAlert } from \"./ServiceErrorConfirmAlert\";\nimport { ServiceErrorShowToast } from \"./ServiceErrorShowToast\";\n\nexport default class ServiceErrorNetwordErrorAlert extends ServiceErrorConfirmAlert {\n    protected getDefaultShowNotice() {\n        return CommonLanguage.error;\n    }\n}\n","import CommonLanguage from \"../../../conf/lang/CommonLanguage\";\nimport { ServiceErrorShowToast } from \"./ServiceErrorShowToast\";\n\nexport default class ServiceErrorNetwordError extends ServiceErrorShowToast {\n    protected onCatchError(data: ServiceError.IError): void {\n        super.onCatchError({\n            code: data.code,\n            message: CommonLanguage.error,\n        });\n    }\n}\n","import CommonLanguage from \"../../../conf/lang/CommonLanguage\";\nimport { ServiceErrorShowToast } from \"./ServiceErrorShowToast\";\n\nexport default class ServiceErrorNetwordTimeout extends ServiceErrorShowToast {\n    protected onCatchError(data: ServiceError.IError): void {\n        super.onCatchError({\n            code: data.code,\n            message: CommonLanguage.timeout,\n        });\n    }\n}\n","import BaseServiceErrorHandler from \"./base/BaseServiceErrorHandler\";\nimport UIMgr from \"../../../Component/base/UIMgr\";\nimport { ServiceCatchResult } from \"../define/ServiceCatchResult\";\n\nexport class ServiceErrorSelectAlert extends BaseServiceErrorHandler {\n    protected onCatchError(data: ServiceError.IError): ServiceError.TErrorCatch {\n        return new Promise((resolve, reject) => {\n            UIMgr.showAlert({\n                contentText: data.message || this.getDefaultShowNotice(),\n                contextAlign: cc.macro.TextAlignment.CENTER,\n                style: 3, // UIMgr.ALERT_STYLE.NEGATIVE_POSITIVE,\n                negativeBtnText: this.cancelText(),\n                positiveBtnText: this.comfirmeText(),\n            })\n            // .onClose((result) => {\n            //     if (result) {\n            //         this.onConfirmBtnClick();\n            //         reject({\n            //             ...data,\n            //             result: ServiceCatchResult.Confirm,\n            //         });\n            //     } else {\n            //         this.onCancelBtnClick();\n            //         reject({\n            //             ...data,\n            //             result: ServiceCatchResult.Cancel,\n            //         });\n            //     }\n            // });\n        });\n    }\n\n    protected comfirmeText(): string {\n        return;\n    }\n\n    protected cancelText(): string {\n        return;\n    }\n\n    protected getDefaultShowNotice() {\n        return \"\";\n    }\n\n    protected onConfirmBtnClick(): void { }\n\n    protected onCancelBtnClick(): void { }\n}\n","import BaseServiceErrorHandler from \"./base/BaseServiceErrorHandler\";\nimport UIMgr from \"../../../Component/base/UIMgr\";\n\nexport class ServiceErrorShowToast extends BaseServiceErrorHandler {\n    protected onCatchError(data: ServiceError.IError): void {\n        if (data.message || CC_DEBUG) {\n            UIMgr.showToast(data.message || `服务端没返回错误消息 code:${data.code}`);\n        } else {\n            CC_DEBUG && cc.error(`[ServiceError] code:${data.code},message: ${data.message}.`);\n        }\n    }\n}\n","import { GameType } from \"../../../../../../../main/core/conf/GameType\";\nimport { SceneControl } from \"../../../SceneControl\";\nimport { ServiceErrorConfirmAlert } from \"./ServiceErrorConfirmAlert\";\n\nexport class ServiceErrorToHallScene extends ServiceErrorConfirmAlert {\n    protected onConfirmBtnClick(): void {\n        SceneControl.getInstance().launchScene(GameType.GAME_HALL);\n    }\n}\n","import { GameType } from \"../../../../../../../main/core/conf/GameType\";\nimport UIMgr from \"../../../Component/base/UIMgr\";\nimport CommonSkin from \"../../../conf/skin/CommonSkin\";\nimport { SceneControl } from \"../../../SceneControl\";\nimport UniverseServiceMgr from \"../../../universe/UniverseServiceMgr\";\nimport { BlackIpUtil } from \"../../../utils/BlackIpUtil\";\nimport { ServiceErrorConfirmAlert } from \"./ServiceErrorConfirmAlert\";\n\nexport class ServiceErrorToLoginScene extends ServiceErrorConfirmAlert {\n    protected onConfirmBtnClick(): void {\n        CommonDepend.UserManager.clearAccount();\n        CommonDepend.UserManager.clearAvailableAvatar();\n        CommonDepend.LocalStorageMgr.clearNewAvatarId();\n        CommonDepend.LocalStorageMgr.clearUserLoginData();\n\n        if (cc.director.getScene().name == \"LoginScene\") {\n            //有无在黑名单\n            if (BlackIpUtil.chcekIsInBlackList()) return;\n            UIMgr.showUI(CommonSkin.LoadOnDemand.PasswordLogin);\n        } else {\n            SceneControl.getInstance()\n                .launchScene(GameType.LOGIN)\n                .then(() => {\n                    setTimeout(() => {\n                        if (BlackIpUtil.chcekIsInBlackList()) return;\n                        UIMgr.showUI(CommonSkin.LoadOnDemand.PasswordLogin);\n                    });\n                });\n        }\n    }\n}\n","import Listener from \"../../../../../../../main/core/utils/Listener\";\nimport { ServiceErrorSelectAlert } from \"./ServiceErrorSelectAlert\";\nimport CommonEventName from \"../../../CommonEventName\";\n\nexport default class ServiceErrorTryOpenTopup extends ServiceErrorSelectAlert {\n    protected onConfirmBtnClick(): void {\n        Listener.send(CommonEventName.SHOW_TOPUP);\n    }\n}\n","import CommonLanguage from \"../../../conf/lang/CommonLanguage\";\nimport { ServiceErrorToHallScene } from \"./ServiceErrorToHallScene\";\n\nexport class ServiceErrorUnkonw extends ServiceErrorToHallScene {\n    protected getDefaultShowNotice() {\n        return CommonLanguage.coinLock;\n    }\n\n    protected getDefaultConfirmText() {\n        return CommonLanguage.iKnow;\n    }\n}\n","import BaseServiceErrorHandler from \"./base/BaseServiceErrorHandler\";\nimport UIMgr from \"../../../Component/base/UIMgr\";\nimport CommonSkin from \"../../../conf/skin/CommonSkin\";\n\nexport class ServiceErrorUpgradeAccount extends BaseServiceErrorHandler {\n    protected onCatchError(data: ServiceError.IError): void {\n        UIMgr.showUI(CommonSkin.LoadOnDemand.CommonRegisterForGiftView);\n    }\n}\n","import { Instance } from \"../../../../../../main/core/utils/decorators/InstanceClassDecorator\";\nimport { CommonProto } from \"../ws/proto/CommonProto\";\nimport ApiServiceErrorCenter from \"./ApiServiceErrorCenter\";\nimport SocketServiceErrorCenter from \"./SocketServiceErrorCenter\";\nimport { ServiceOperateType } from \"./define/ServiceOperateType\";\nexport namespace ServiceErrorUtils {\n    export function catchError<T>(promise: Promise<T>): Promise<T> {\n        return promise.catch((ret) => {\n            return applyApiError(ret) as T;\n        });\n    }\n\n    export function catchErrorWithType<T>(\n        type: ServiceOperateType,\n        promise: Promise<T>\n    ): Promise<T> {\n        return promise.catch((ret) => {\n            return applyApiErrorWitchType(type, ret) as T;\n        });\n    }\n\n    export function applyApiErrorWitchType(type: ServiceOperateType, data: RespHeader) {\n        if (!data.code) {\n            return data;\n        }\n        return onApiErrorWitchType(type, data);\n    }\n\n    export function applyApiError(data: RespHeader) {\n        if (!data.code) {\n            return data;\n        }\n        return onApiError(data);\n    }\n\n    export function applySocketError(data: ProtoObject<CommonProto.ErrorST>) {\n        return onSocketError(data);\n    }\n\n    export function onApiErrorWitchType(type: ServiceOperateType, data: RespHeader) {\n        return Instance(ApiServiceErrorCenter).catchErrorWithType(type, {\n            code: data.code,\n            message: data.msg,\n        });\n    }\n\n    export function onApiError(data: RespHeader) {\n        return Instance(ApiServiceErrorCenter).catchError({\n            code: data.code,\n            message: data.msg,\n        });\n    }\n\n    export function onSocketError(data: ProtoObject<CommonProto.ErrorST>) {\n        return Instance(SocketServiceErrorCenter).catchError({\n            code: data.Status,\n            message: data.Msg,\n        });\n    }\n}\n","import Flavor from \"../../../../../../../main/core/conf/Flavor\";\nimport Listener from \"../../../../../../../main/core/utils/Listener\";\nimport CommonEventName from \"../../../CommonEventName\";\nimport UIMgr from \"../../../Component/base/UIMgr\";\nimport CommonLanguage from \"../../../conf/lang/CommonLanguage\";\nimport BaseServiceErrorHandler from \"./base/BaseServiceErrorHandler\";\n\nexport class ServiceErrorWithdrawAlert extends BaseServiceErrorHandler {\n    protected onCatchError(data: ServiceError.IError): void {\n        let accountColor = \"#ffecba\";\n        if (Flavor.Skin.isWorldCup()) {\n            accountColor = \"#01ecff\";\n        } else if (Flavor.Skin.isLight()) {\n            accountColor = \"#ffecba\";\n        }\n        UIMgr.showAlert({\n            contentText: data.message.format(accountColor) || ``,\n            negativeBtnText: CommonLanguage.iKonw,\n            positiveBtnText: CommonLanguage.bindOther,\n        }).onClose((result) => {\n            if (result) {\n                this.onConfirmBtnClick();\n            } else {\n                this.onCancalBtnClick();\n            }\n        });\n    }\n\n    protected onConfirmBtnClick(): void {\n        Listener.emit(CommonEventName.WITHDRAW_SELECT_TAB_INDEX, 1);\n    }\n\n    protected onCancalBtnClick(): void {}\n}\n","export enum ServiceOperateType {\n    None,\n    Login,\n}\n","import PopUpViewBase from \"../../../../../../../main/core/popUpViewUtils/PopUpViewBase\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class SevenUpDownRule extends PopUpViewBase {\n    @property([cc.Label])\n    oddsLabs: cc.Label[] = [];\n\n    protected onLoad(): void {\n        let oddsStr = CommonDepend.LocalStorageMgr.readSevenUpDownOdds();\n        let odds = JSON.parse(oddsStr) || [\"1\", \"1\", \"1\"];\n        for (let i = 0; i < this.oddsLabs.length; i++) {\n            this.oddsLabs[i].string = odds[i] + \"x\";\n        }\n    }\n}\n","export default class ShuffleUtil {\n    public static shuffleArray(array: Array<any>): Array<any> {\n        let m = array.length;\n        let t;\n        let i;\n        while (m) {\n            i = Math.floor(Math.random() * m--);\n            t = array[m];\n            array[m] = array[i];\n            array[i] = t;\n        }\n        return array;\n    }\n}\n","export enum SocketInternalEvent {\n    SEND_MESSAGE = \"send_message\",\n    CLOSE = \"CLOSE\",\n    RECONNECT = \"RECONNECT\",\n    ERROR = \"Error\",\n    DESTROY = \"Destroy\",\n}\n","import { setInstance } from \"../../../../../../main/core/utils/decorators/InstanceClassDecorator\";\nimport { CommonProto } from \"../ws/proto/CommonProto\";\nimport BaseServiceErrorCenter from \"./base/BaseServiceErrorCenter\";\nimport { ServiceErrorCoinLock } from \"./handler/ServiceErrorCoinLock\";\nimport { ServiceErrorShowToast } from \"./handler/ServiceErrorShowToast\";\nimport { ServiceErrorToHallScene } from \"./handler/ServiceErrorToHallScene\";\nimport { ServiceErrorToLoginScene } from \"./handler/ServiceErrorToLoginScene\";\nimport ServiceErrorTryOpenTopup from \"./handler/ServiceErrorTryOpenTopup\";\n\n@setInstance\nexport default class SocketServiceErrorCenter extends BaseServiceErrorCenter {\n    protected onInitialize(): void {\n        //连庄达到上限下庄\n        //金额不足下庄\n        //单个区域射击 金额超出限制\n        //上庄队列已满\n        //本局射击 金额已达上限\n        //射击 失败 钱不够\n        // 高于限红的上限金额\n        // 低于限红的下限金额\n        this.applyDeflaultHandler(new ServiceErrorShowToast());\n\n        /** 需要重新认证 */\n        this.applyHandler(CommonProto.STATUS.NOT_AUTH, new ServiceErrorToLoginScene());\n        /** token错误 */\n        this.applyHandler(CommonProto.STATUS.TOKEN_INVALID, new ServiceErrorToLoginScene());\n        /** 重复登录*/\n        this.applyHandler(CommonProto.STATUS.DUP_LOGIN, new ServiceErrorToHallScene());\n        /** 服务器已经关闭 */\n        this.applyHandler(CommonProto.STATUS.SERVER_CLOSED, new ServiceErrorToHallScene());\n        /** 需要用户重连到另外的服务器 */\n        this.applyHandler(CommonProto.STATUS.REDIRECT, new ServiceErrorToHallScene());\n        //房间人数已满\n        this.applyHandler(CommonProto.STATUS.ROOM_IS_FULL, new ServiceErrorToHallScene());\n        //房间桌子不存在\n        this.applyHandler(CommonProto.STATUS.CUBE_ROOM_NOT_EXIST, new ServiceErrorToHallScene());\n        //金币锁冲突\n        this.applyHandler(CommonProto.STATUS.GOLDLOCK_CONFLICT, new ServiceErrorCoinLock());\n        // 余额不足\n        //this.applyHandler(CommonProto.STATUS.INSUFFICIENT, new ServiceErrorTryOpenTopup());\n    }\n}\n","import { AudioManager } from \"../../../../../main/core/audio/AudioManager\";\nimport CommonSkin from \"../conf/skin/CommonSkin\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class StartAndStopAnim extends cc.Component {\n    @property(sp.Skeleton)\n    animSpine: sp.Skeleton = null;\n\n    _isShowEndBetAnim = false;\n\n    public init(): void {\n        let self = this;\n        self._isShowEndBetAnim = false;\n        if (cc.isValid(self.node)) {\n            self.node.opacity = 0;\n        }\n        if (cc.isValid(self.animSpine)) {\n            self.animSpine.node.opacity = 0;\n        }\n    }\n\n    public playStartBetAnimAction(callback?: Function): void {\n        AudioManager.getInstance().playEffect(CommonSkin.LoadOnDemand.Show, false, 1);\n        AudioManager.getInstance().playEffect(CommonSkin.LoadOnDemand.Start, false, 1);\n        this.playAnim(\"start_betting\", callback);\n    }\n\n    public playEndBetAnimAction(callback?: Function, option?): void {\n        if (this._isShowEndBetAnim) {\n            return;\n        }\n        AudioManager.getInstance().playEffect(CommonSkin.LoadOnDemand.Show, false, 1);\n        AudioManager.getInstance().playEffect(CommonSkin.LoadOnDemand.Stop, false, 1);\n        this.playAnim(\"stop_betting\", callback);\n        this._isShowEndBetAnim = true;\n    }\n\n    public playStartGameAnimAction(callback?: Function, option?): void {\n        AudioManager.getInstance().playEffect(CommonSkin.LoadOnDemand.Show, false, 1);\n        this.playAnim(\"game_start\", callback, option);\n    }\n\n    private playAnim(animName: string, callback?: Function, option?) {\n        if (!cc.isValid(this.node)) return;\n        this.node.opacity = 255;\n        if (!cc.isValid(this.animSpine)) return;\n        this.animSpine.node.opacity = 255;\n        this.animSpine.timeScale = option && option.timeScale ? option.timeScale : 1;\n        this.animSpine.getComponent(sp.Skeleton).setAnimation(0, animName, false);\n        this.animSpine.getComponent(sp.Skeleton).setCompleteListener(() => {\n            this.init();\n            callback && callback();\n        });\n    }\n}\n","class Switch {\n    public static needTriggerHallStartupChain: boolean = false;\n    public static isSwitchAccount: boolean = false;\n\n    public static isSwitchUi: boolean = false;\n\n    public static loadingLaunch: boolean = false;\n}\n\nexport default Switch;\n","import { Tools } from \"../../../../../main/core/utils/Tools\";\n\nexport namespace TimerUtil {\n    type TimeKey = string | symbol;\n\n    const timerMap: Map<TimeKey, NodeJS.Timer> = new Map();\n\n    export async function steup<T>(\n        key: TimeKey,\n        callfunc: (count: number, option?: T) => T,\n        time: number,\n        option: T = null\n    ) {\n        stop(key);\n        let count = 0;\n        option = callfunc(count++, option);\n\n        timerMap.set(\n            key,\n            setInterval(() => {\n                option = callfunc(count++, option);\n            }, time)\n        );\n    }\n\n    export function steupOnce<T>(\n        key: TimeKey,\n        callfunc: (count: number, option?: T) => T,\n        time: number,\n        option: T = null\n    ) {\n        stop(key);\n        let count = 0;\n\n        timerMap.set(\n            key,\n            setInterval(() => {\n                option = callfunc(count++, option);\n                stop(key);\n            }, time)\n        );\n    }\n\n    export function stop(key: TimeKey) {\n        let timeId = timerMap.get(key);\n        if (timeId) {\n            clearInterval(timeId);\n        }\n        timerMap.delete(key);\n        if (timeId) {\n            return true;\n        }\n        return false;\n    }\n}\n","import PopUpViewBase from \"../../../../main/core/popUpViewUtils/PopUpViewBase\";\n\nconst { ccclass, property } = cc._decorator;\n\n/** 提示信息窗口方向 */\nexport enum TipsInfoDir {\n    UP = 1,\n    DOWN = 2,\n    LEFT = 3,\n    RIGHT = 4,\n}\n\n@ccclass\nexport default class TipsInfo extends PopUpViewBase {\n    @property({ type: cc.Node, tooltip: \"朝上的tips节点\" })\n    tips_up: cc.Node = null;\n\n    @property({ type: cc.Node, tooltip: \"朝下的tips节点\" })\n    tips_down: cc.Node = null;\n\n    @property({ type: cc.Node, tooltip: \"朝左的tips节点\" })\n    tips_left: cc.Node = null;\n\n    @property({ type: cc.Node, tooltip: \"朝右的tips节点\" })\n    tips_right: cc.Node = null;\n\n    private curTips: cc.Node = null;\n\n    onLoad() {\n        this.node.on(cc.Node.EventType.TOUCH_END, this.close, this);\n    }\n\n    public init(parm: ITipsInfoParm) {\n        this.tips_up.active = false;\n        this.tips_down.active = false;\n        this.tips_left.active = false;\n        this.tips_right.active = false;\n\n        if (parm.direction == TipsInfoDir.UP) {\n            this.curTips = this.tips_up;\n        } else if (parm.direction == TipsInfoDir.DOWN) {\n            this.curTips = this.tips_down;\n        } else if (parm.direction == TipsInfoDir.LEFT) {\n            this.curTips = this.tips_left;\n        } else if (parm.direction == TipsInfoDir.RIGHT) {\n            this.curTips = this.tips_right;\n        } else {\n            this.curTips = this.tips_up;\n        }\n        this.curTips.active = true;\n\n        let lab_info: cc.Label = cc\n            .find(\"img_infoBG/lab_info\", this.curTips)\n            .getComponent(cc.Label);\n        let lab_title: cc.Label = cc\n            .find(\"img_infoBG/lab_title\", this.curTips)\n            .getComponent(cc.Label);\n        if (parm.width) {\n            let img_infoBG = cc.find(\"img_infoBG\", this.curTips);\n            img_infoBG.width = parm.width;\n            lab_info.node.width = parm.width - 30;\n            lab_title.node.width = parm.width - 30;\n        }\n        if (parm.title && parm.title != \"\") {\n            lab_title.overflow = cc.Label.Overflow.RESIZE_HEIGHT;\n            lab_title.string = parm.title;\n            lab_title[\"_forceUpdateRenderData\"](true); // 强制刷新lable尺寸\n        } else {\n            lab_title.node.active = false;\n        }\n        lab_info.overflow = cc.Label.Overflow.RESIZE_HEIGHT;\n        lab_info.string = parm.content;\n        lab_info[\"_forceUpdateRenderData\"](true); // 强制刷新lable尺寸\n        this.node.getComponent(cc.Widget).updateAlignment();\n        let nodePos = this.node.convertToNodeSpaceAR(parm.worldPos);\n        this.curTips.setPosition(nodePos);\n    }\n}\n","const { ccclass, property } = cc._decorator;\n\nconst content_MAX_WIDTH = 960;\n\n@ccclass\nexport default class ToastItem extends cc.Component {\n    @property(cc.Label)\n    lab_content: cc.Label = null;\n\n    public setContent(content: string) {\n        this.lab_content.string = content;\n        this.lab_content[\"_forceUpdateRenderData\"](true);\n        this.scheduleOnce(() => {\n            let layout = this.node.getComponent(cc.Layout);\n            if (this.lab_content.node.width < content_MAX_WIDTH) {\n                this.lab_content.overflow = cc.Label.Overflow.NONE;\n                layout.type = cc.Layout.Type.HORIZONTAL;\n            } else {\n                this.lab_content.overflow = cc.Label.Overflow.RESIZE_HEIGHT;\n                this.lab_content.node.width = content_MAX_WIDTH;\n                layout.updateLayout();\n                layout.type = cc.Layout.Type.VERTICAL;\n                layout.paddingTop = 10;\n                layout.paddingBottom = 20;\n            }\n        });\n    }\n}\n","import ToastItem from \"./ToastItem\";\n\nconst { ccclass, property } = cc._decorator;\n\nconst ACTION_TIME = 0.24;\n\n@ccclass\nexport default class ToastUI extends cc.Component {\n    @property(cc.Node)\n    content: cc.Node = null;\n\n    @property(cc.Prefab)\n    toastItemPrefab: cc.Prefab = null;\n\n    private toastList: cc.Node[] = [];\n\n    public addToast(msg: string) {\n        let toastItem = cc.instantiate(this.toastItemPrefab);\n        toastItem.position = cc.v3(0, 0, 0);\n        toastItem.opacity = 0;\n        this.content.addChild(toastItem);\n\n        toastItem.stopAllActions();\n        toastItem.targetOff(this);\n        toastItem.on(cc.Node.EventType.SIZE_CHANGED, this.toastItemSizeChanged, this);\n        toastItem.getComponent(ToastItem).setContent(msg);\n        this.toastList.unshift(toastItem);\n\n        cc.tween<cc.Node>(toastItem)\n            .to(ACTION_TIME, { opacity: 255 })\n            .delay(1.5)\n            .to(ACTION_TIME, { opacity: 0 })\n            .call(() => {\n                this.deleteToast(toastItem);\n            })\n            .start();\n    }\n\n    private toastItemSizeChanged() {\n        let satrtPos = cc.v3(0, 0, 0);\n        let allHeight = 0;\n        for (let i = 0; i < this.toastList.length; i++) {\n            const node = this.toastList[i];\n            let toPos = satrtPos.add(cc.v3(0, allHeight + node.height / 2, 0));\n            allHeight = allHeight + node.height;\n            cc.tween<cc.Node>(node).to(ACTION_TIME, { position: toPos }).start();\n        }\n    }\n\n    private deleteToast(toastItem: cc.Node) {\n        for (let i = 0; i < this.toastList.length; i++) {\n            const element = this.toastList[i];\n            if (toastItem.uuid === element.uuid) {\n                this.toastList.splice(i, 1);\n                break;\n            }\n        }\n        toastItem.destroy();\n    }\n}\n","import PopUpViewBase from \"../../../../../../../main/core/popUpViewUtils/PopUpViewBase\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class TrucoRuleDialog extends PopUpViewBase {\n    @property({ type: cc.Node, displayName: \"\" })\n    trucoRule: cc.Node = null;\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start() {\n        this.trucoRule.on(\"onCloseClick\", () => {\n            this.close();\n        });\n    }\n\n    // update (dt) {}\n}\n","const { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class TrucoRule extends cc.Component {\n    @property({ type: cc.Node, displayName: \"\" })\n    close: cc.Node = null;\n\n    @property({ type: cc.Node, displayName: \"\" })\n    left: cc.Node = null;\n\n    @property({ type: cc.ScrollView, displayName: \"\" })\n    private right: cc.ScrollView = null;\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start() {\n        this.left.children.forEach((node, index) => {\n            node.on(\"click\", () => {\n                this.right.stopAutoScroll();\n                this.right.scrollToPercentVertical(1 - (1 / (this.left.childrenCount - 1)) * index);\n            });\n        });\n        this.close.on(\"click\", () => {\n            this.onCloseClick();\n        });\n    }\n\n    private onCloseClick(): void {\n        this.node.emit(\"onCloseClick\");\n    }\n\n    // update (dt) {}\n}\n","import { BundleMgr } from \"../../../../../../main/core/bd/BundleMgr\";\nimport { lodash } from \"../../../../../../main/core/utils/NpmExport\";\nimport { PopupUtil } from \"../../../../../../main/core/utils/PopupUtil\";\nimport { Tools } from \"../../../../../../main/core/utils/Tools\";\nimport { BundleCommonMgr } from \"../../bd/BundleCommonMgr\";\nimport CommonLanguage from \"../../conf/lang/CommonLanguage\";\nimport CommonSkin from \"../../conf/skin/CommonSkin\";\nimport { CurrencyUtil } from \"../../utils/CurrencyUtil\";\nimport { TimerUtil } from \"../../utils/TimerUtil\";\nimport LoadingUI from \"./loading_ui/LoadingUI\";\nimport ToastUI from \"./toast/ToastUI\";\n\nnamespace UIMgr {\n    export let toastUI: cc.Node = null;\n    export let loadingUI: cc.Node = null;\n\n    export let ALERT_STYLE = <IAlertStyle>{\n        NEGATIVE_POSITIVE: 0,\n        POSITIVE: 1,\n        NEGATIVE_POSITIVE_CLOSE: 2,\n    };\n\n    export let UILayer = cc.Enum({\n        /** 普通 */\n        NORMAL: 100,\n\n        /** 普通弹窗 */\n        POP: 200,\n\n        /** Alert */\n        ALERT: 300,\n\n        /** Toast */\n        TOAST: cc.macro.MAX_ZINDEX,\n\n        /** 加载 */\n        LOADING: cc.macro.MAX_ZINDEX - 1,\n    });\n\n    let showLoadingCount = 0;\n\n    /**\n     * 显示toast\n     */\n    export function showToast(msg: string) {\n        let node = toastUI;\n        if (!cc.isValid(node)) {\n            let toastUIPrefab: cc.Prefab = BundleMgr.getInstance().getResFromBundle(\n                BundleCommonMgr.getInstance().getBundleNameDescForToastUI()\n            );\n            let canvas: cc.Node = CommonDepend.CocosUtils.getSceneCanvas();\n            node = cc.instantiate(toastUIPrefab);\n            canvas.addChild(node, UILayer.TOAST);\n            toastUI = node;\n        }\n        node.getComponent(ToastUI).addToast(msg);\n    }\n\n    export function applyLoadingUi<T = any>(\n        backCatch: boolean\n    ): (\n        target: Object | Promise<T> | boolean,\n        propertyKey?: string | symbol,\n        descriptor?: TypedPropertyDescriptor<(...args: any[]) => Promise<T>>\n    ) => TypedPropertyDescriptor<(...args: any[]) => Promise<T>>;\n    export function applyLoadingUi<T>(target: Promise<T>): Promise<T>;\n\n    export function applyLoadingUi<T>(\n        target: Object,\n        propertyKey: string | symbol,\n        descriptor: TypedPropertyDescriptor<(...args: any[]) => Promise<T>>\n    );\n    export function applyLoadingUi<T>(\n        target: Object | Promise<T> | boolean,\n        propertyKey?: string | symbol,\n        descriptor?: TypedPropertyDescriptor<(...args: any[]) => Promise<T>>\n    ):\n        | TypedPropertyDescriptor<(...args: any[]) => Promise<T>>\n        | Promise<T>\n        | ((\n              target: Object | Promise<T> | boolean,\n              propertyKey?: string | symbol,\n              descriptor?: TypedPropertyDescriptor<(...args: any[]) => Promise<T>>\n          ) => TypedPropertyDescriptor<(...args: any[]) => Promise<T>>) {\n        const backCatch = typeof target === \"boolean\" ? target : false;\n        const loading = (promise: Promise<T>): Promise<T> => {\n            return new Promise<T>((resolve, reject) => {\n                showLoading();\n                if (!promise) {\n                    hideLoading();\n                } else {\n                    import(\"../../service/service_error/ServiceErrorUtils\")\n                        .then((ret) => {\n                            return ret.ServiceErrorUtils.catchError(promise);\n                        })\n                        .then((res) => {\n                            resolve(res);\n                        })\n                        .catch((res) => {\n                            backCatch && reject(res);\n                        })\n                        .then((ret) => {\n                            hideLoading();\n                        });\n                }\n            });\n        };\n\n        function decorator(\n            target: Object,\n            propertyKey: string | symbol,\n            descriptor: TypedPropertyDescriptor<(...args: any[]) => Promise<T>>\n        ) {\n            let oldMethod = descriptor.value;\n            descriptor.value = function (...args: any[]): Promise<T> {\n                let result = oldMethod.apply(this, args);\n                return loading(result);\n            };\n            return descriptor as TypedPropertyDescriptor<(...args: any[]) => Promise<T>>;\n        }\n\n        if (typeof target === \"boolean\") {\n            return decorator;\n        }\n        if (target instanceof Promise) {\n            return loading(target);\n        } else {\n            return decorator(target, propertyKey, descriptor);\n        }\n    }\n\n    /**\n     * 显示loading加载UI\n     */\n    export function showLoading(delayShow?: number) {\n        showLoadingCount++;\n        let node = loadingUI;\n        if (!cc.isValid(node)) {\n            let loadingUIPrefab: cc.Prefab = BundleMgr.getInstance().getResFromBundle(\n                BundleCommonMgr.getInstance().getBundleNameDescForLoadingUI()\n            );\n\n            let canvas: cc.Node = CommonDepend.CocosUtils.getSceneCanvas();\n            node = cc.instantiate(loadingUIPrefab);\n            canvas.addChild(node, UILayer.LOADING);\n            loadingUI = node;\n        }\n        loadingUI.active = true;\n        if (delayShow) {\n            loadingUI.getComponent(LoadingUI).init(delayShow);\n        }\n    }\n\n    /**\n     * 隐藏loading加载UI\n     */\n    export function hideLoading() {\n        if (--showLoadingCount <= 0) {\n            showLoadingCount = 0;\n            if (cc.isValid(loadingUI)) {\n                loadingUI.active = false;\n            }\n        }\n    }\n\n    export function applyAlert(option: IAlertParm) {\n        return function <T>(\n            target: Object,\n            propertyKey: string | symbol,\n            descriptor: TypedPropertyDescriptor<(...args: any[]) => any>\n        ) {\n            const oldValue = descriptor.value;\n\n            descriptor.value = function (...args: any[]) {\n                showAlert(\n                    lodash.merge(\n                        {\n                            contextAlign: cc.macro.TextAlignment.CENTER,\n                        } as IAlertParm,\n                        option\n                    )\n                ).onClose((result) => {\n                    oldValue.call(this, ...args, result);\n                });\n            };\n        };\n    }\n\n    /**\n     * 显示Alert\n     */\n    export function showAlert(parm: IAlertParm) {\n        let sceneName = cc.director.getScene().name;\n        if(sceneName == \"LoginScene\") return\n        return showUISync(BundleCommonMgr.getInstance().getBundleNameDescForAlert(), {\n            args: [parm],\n            zIndex: UILayer.ALERT,\n            new: true,\n        });\n    }\n\n    /**\n     * 显示Alert 异步\n     */\n    export function showAlertAwait(parm: IAlertParm) {\n        return showUI(BundleCommonMgr.getInstance().getBundleNameDescForAlert(), {\n            args: [parm],\n            zIndex: UILayer.ALERT,\n            new: true,\n        });\n    }\n\n    export function hideLoadingToast() {\n        const desc = CommonSkin.Priority.loadingToast;\n        close(desc);\n    }\n\n    export function showLoadingToast(message: string, delayTime: number = -1) {\n        const timeID = \"showLoadingToast\";\n        const desc = CommonSkin.Priority.loadingToast;\n        TimerUtil.stop(timeID);\n        if (delayTime > 0) {\n            TimerUtil.steupOnce(\n                timeID,\n                () => {\n                    hideLoadingToast();\n                },\n                delayTime * 1000\n            );\n        }\n\n        return showUISync(desc, {\n            args: [message],\n            zIndex: UILayer.LOADING,\n        });\n    }\n\n    export function preload(resDesc: IResDescribe, options?: PopupUtil.IShowOptions) {\n        return PopupUtil.preload(resDesc, options);\n    }\n\n    /**\n     * 显示UI\n     */\n    export function showUI(resDesc: IResDescribe, options?: PopupUtil.IShowOptions) {\n        return PopupUtil.show(resDesc, options);\n    }\n\n    export function showUISync(resDesc: IResDescribe, options?: PopupUtil.IShowOptions) {\n        return PopupUtil.showSync(resDesc, options);\n    }\n\n    export function close(resDesc: IResDescribe) {\n        return PopupUtil.close(resDesc);\n    }\n\n    export function destroy(resDesc: IResDescribe) {\n        return PopupUtil.destroy(resDesc);\n    }\n\n    /**\n     * 续押弹窗\n     * @param coin\n     * @param rechargeCallback\n     */\n    export function showContinueBetAlert(coin, rechargeCallback) {\n        let continueBet = CommonLanguage.continueBet;\n        let coinStr = CurrencyUtil.formatMoney(coin);\n        continueBet = continueBet.format(coinStr);\n        let config: IAlertParm = {\n            contentText: continueBet,\n            positiveBtnText: CommonLanguage.recharge,\n            positiveCallFunc: rechargeCallback,\n            negativeBtnText: CommonLanguage.cancel,\n        };\n\n        showAlert(config);\n    }\n\n    /**\n     * 余额不足统一弹窗提示\n     *\n     */\n    export function showInsufficientAlert() {\n        //判断当前场景是否存在相同内容的Alert\n        const ALERT_NAME = \"InsufficientAlert\";\n        let isExistAlert = UIMgr.checkDialogExits(ALERT_NAME);\n        if (isExistAlert) return;\n\n        let config: IAlertParm = {\n            contentText: CommonLanguage.rechargeTip5,\n            negativeBtnText: CommonLanguage.cancel,\n            style: ALERT_STYLE.NEGATIVE_POSITIVE,\n        };\n        let result = showAlert(config);\n        result.popupNode.name = ALERT_NAME;\n    }\n\n    /**\n     * 已投注，退出后系统托管弹窗\n     * @param positiveCallback\n     */\n    export function showGameAutoAlert(positiveCallback: () => void) {\n        let config: IAlertParm = {\n            contentText: CommonLanguage.auto2,\n            positiveBtnText: CommonLanguage.confirm,\n            positiveCallFunc: positiveCallback,\n            negativeBtnText: CommonLanguage.cancel,\n        };\n        showAlert(config);\n    }\n\n    /**\n     * 主动退出游戏的确认弹窗\n     * @param exitCallback\n     */\n    export function showGameExitAlert(exitCallback: () => void) {\n        let config: IAlertParm = {\n            contentText: CommonLanguage.gaming,\n            positiveBtnText: CommonLanguage.confirmExit,\n            positiveCallFunc: exitCallback,\n            negativeBtnText: CommonLanguage.cancel,\n        };\n        showAlert(config);\n    }\n\n    /**\n     * 游戏内的无网弹窗\n     * @param positiveCallback\n     */\n    export function showGameNoNetworkAlert(positiveCallback: () => void) {\n        let config: IAlertParm = {\n            contentText: CommonLanguage.networkError4,\n            positiveBtnText: CommonLanguage.returnHall,\n            positiveCallFunc: positiveCallback,\n        };\n        showAlert(config);\n    }\n\n    /**\n     * 游戏暂离踢人，倒计时返回大厅弹窗\n     * @param countdownCallback\n     * @param positiveCallback\n     */\n    export function showIdleCountDownAlert(\n        countdownSeconds: number,\n        countdownCallback: () => void,\n        positiveCallback: () => void,\n        negativeCallback: () => void\n    ) {\n        let config: IAlertParm = {\n            contentText: CommonLanguage.idleTimeoutMsg,\n            positiveBtnText: CommonLanguage.returnHall,\n            positiveCallFunc: positiveCallback,\n            negativeBtnText: CommonLanguage.continueGame,\n            negativeCallFunc: negativeCallback,\n            countdown: countdownSeconds,\n            countdownEndCallFunc: countdownCallback,\n        };\n        showAlert(config);\n    }\n\n    /**\n     * 是否充值\n     * @param coin\n     * @param rechargeCallback\n     */\n    export function showRechargeAlert(coin, rechargeCallback) {\n        let rechargeTip1 = CommonLanguage.rechargeTip1;\n        rechargeTip1 = rechargeTip1.replace(\"{coin}\", CurrencyUtil.formatMoney(coin));\n        let config: IAlertParm = {\n            contentText: rechargeTip1,\n            positiveBtnText: CommonLanguage.recharge,\n            positiveCallFunc: rechargeCallback,\n            negativeBtnText: CommonLanguage.cancel,\n        };\n\n        showAlert(config);\n    }\n    export function showRechargeAlert2(\n        msg: string,\n        rechargeCallback: () => void,\n        cancelCallback?: () => void\n    ) {\n        //判断当前场景是否存在相同内容的Alert\n        const ALERT_NAME = \"showRechargeAlert2\";\n        let isExistAlert = UIMgr.checkDialogExits(ALERT_NAME);\n        if (isExistAlert) return;\n\n        let config: IAlertParm = {\n            contentText: msg,\n            positiveBtnText: CommonLanguage.recharge,\n            positiveCallFunc: rechargeCallback,\n            negativeCallFunc: cancelCallback,\n            negativeBtnText: CommonLanguage.cancel,\n        };\n\n        let result = showAlert(config);\n        result.popupNode.name = ALERT_NAME;\n    }\n\n    /**\n     * 是否打开保险柜\n     * @param coin\n     * @param rechargeCallback\n     */\n    export function showSafeBoxAlert(coin, callback) {\n        let rechargeTip2 = CommonLanguage.rechargeTip2;\n        rechargeTip2 = rechargeTip2.replace(\"{coin}\", CurrencyUtil.formatMoney(coin));\n        let config: IAlertParm = {\n            contentText: rechargeTip2,\n            positiveBtnText: CommonLanguage.openSafebox,\n            positiveCallFunc: callback,\n            negativeBtnText: CommonLanguage.cancel,\n        };\n\n        showAlert(config);\n    }\n\n    export function showSafeBoxAlert2(msg, callback) {\n        let config: IAlertParm = {\n            contentText: msg,\n            positiveBtnText: CommonLanguage.openSafebox,\n            positiveCallFunc: callback,\n            negativeBtnText: CommonLanguage.cancel,\n        };\n\n        showAlert(config);\n    }\n\n    /**\n     * 对战类游戏 余额不足弹窗 默认5s后自动回到大厅\n     * @param callBack\n     * @param countdown 单位：s 默认：5s\n     */\n    export function fightInsBalanceAlert(callBack: () => void, countdown: number = 5): void {\n        //判断当前场景是否存在相同内容的Alert\n        const ALERT_NAME = \"fightInsBalanceAlert\";\n        let isExistAlert = UIMgr.checkDialogExits(ALERT_NAME);\n        if (isExistAlert) return;\n\n        let config: IAlertParm = {\n            style: UIMgr.ALERT_STYLE.POSITIVE,\n            contentText: CommonLanguage.rechargeTip6,\n            positiveBtnText: CommonLanguage.returnHall,\n            positiveCallFunc: callBack,\n            countdown: countdown,\n            countdownEndCallFunc: callBack,\n        };\n\n        let result = showAlert(config);\n        result.popupNode.name = ALERT_NAME;\n    }\n\n    /**\n     * 对战类游戏 超时踢人弹窗\n     * @param positiveCallback\n     * @param negativeCallback\n     */\n    export function fightTimeOutAlert(\n        positiveCallback: () => void,\n        negativeCallback: () => void\n    ): void {\n        let config: IAlertParm = {\n            style: UIMgr.ALERT_STYLE.NEGATIVE_POSITIVE,\n            contentText: CommonLanguage.timeoutTips,\n            positiveBtnText: CommonLanguage.returnHall,\n            positiveCallFunc: positiveCallback,\n            negativeBtnText: CommonLanguage.continueGame,\n            negativeCallFunc: negativeCallback,\n        };\n\n        showAlert(config);\n    }\n\n    /**\n     * 比大小AllIn（全押）提示弹窗\n     * @param betCoin\n     * @param positiveCallback\n     * @param negativeCallback\n     */\n    export function showAllInAlert(betCoin, positiveCallback, negativeCallback) {\n        let allInTips = CommonLanguage.allInAlert;\n        allInTips = allInTips.replace(\"{betCoin}\", CurrencyUtil.formatMoney(betCoin));\n        let config: IAlertParm = {\n            contentText: allInTips,\n            positiveBtnText: CommonLanguage.confirm,\n            positiveCallFunc: positiveCallback,\n            negativeCallFunc: negativeCallback,\n            negativeBtnText: CommonLanguage.cancel,\n        };\n\n        showAlert(config);\n    }\n\n    /**\n     * 根据节点名 检测节点是否存在\n     * @param name\n     */\n    export function checkDialogExits(name: string) {\n        let canvas = CommonDepend.CocosUtils.getSceneCanvas();\n        return canvas.children.find((chid) => chid.name === name);\n    }\n}\nexport default UIMgr;\n","import { UniverseProto } from \"./UniverseProto\";\n\nconst { MessageID } = UniverseProto;\n\nexport const UniverseProtoMap = {\n    [MessageID.PING]: null,\n    [MessageID.AUTH_REQ]: UniverseProto.AuthReq,\n    [MessageID.FEATURE_CONF_REQ]: UniverseProto.FeatureConfReq,\n    [MessageID.LAUNCH_CONF_REQ]: UniverseProto.LaunchConfReq,\n    [MessageID.CUSTOMER_CONF_REQ]: UniverseProto.CustomerConfReq,\n    [MessageID.PROPS_CONF_REQ]: UniverseProto.PropsConfReq,\n    [MessageID.POPUPS_CONF_REQ]: UniverseProto.PopUpsConfReq,\n    [MessageID.NAMING_ST]: UniverseProto.NamingST,\n    [MessageID.FEATURE_CONF_RESP]: UniverseProto.FeatureConfResp,\n    [MessageID.LAUNCH_CONF_RESP]: UniverseProto.LaunchConfResp,\n    [MessageID.CUSTOMER_CONF_RESP]: UniverseProto.CustomerConfResp,\n    [MessageID.PROPS_CONF_RESP]: UniverseProto.PropsConfResp,\n    [MessageID.POPUPS_CONF_RESP]: UniverseProto.PopUpsConfResp,\n    [MessageID.BROADCAST_NT]: UniverseProto.BroadCastNT,\n    [MessageID.IP_BLACK_LIST_NT]: UniverseProto.IPBlacklistNT,\n    [MessageID.UNREAD_MSG_NT]: UniverseProto.UnreadMsgNT,\n    [MessageID.MAIL_DELETE_NT]: UniverseProto.MailDeleteNT,\n    [MessageID.UPDATE_NEW_NT]: UniverseProto.UpdateNewNT,\n    [MessageID.ACTIVITY_AWARD_NT]: UniverseProto.ActivityAwardNT,\n    [MessageID.ACTIVITY_STATUS_NT]: UniverseProto.ActivityStatusNT,\n    [MessageID.LOGIN_AWARD_NT]: UniverseProto.LoginAwardNT,\n    [MessageID.BROADCASTS_NT]: UniverseProto.BroadCastsNT,\n};\n","/**\n * Generated by the protoc-gen-ts.  DO NOT EDIT!\n * compiler version: 3.19.4\n * source: int/universe/universe.proto\n * git: https://github.com/thesayyn/protoc-gen-ts */\n\nimport { pb_1 } from \"../../../../../../main/core/utils/NpmExport\";\n\n/*\n此处请修改为Creator NpmExport路径\n请注意路径的层级\n */\nexport namespace UniverseProto {\n    /** \n      消息ID，供客户端消息寻址使用\n       **/\n    export enum MessageID {\n        PING = 0,\n        AUTH_REQ = 999,\n        FEATURE_CONF_REQ = 11,\n        LAUNCH_CONF_REQ = 12,\n        CUSTOMER_CONF_REQ = 13,\n        PROPS_CONF_REQ = 14,\n        POPUPS_CONF_REQ = 15,\n        NAMING_ST = 101,\n        FEATURE_CONF_RESP = 111,\n        LAUNCH_CONF_RESP = 112,\n        CUSTOMER_CONF_RESP = 113,\n        PROPS_CONF_RESP = 114,\n        POPUPS_CONF_RESP = 115,\n        BROADCAST_NT = 121,\n        IP_BLACK_LIST_NT = 122,\n        UNREAD_MSG_NT = 123,\n        MAIL_DELETE_NT = 125,\n        UPDATE_NEW_NT = 126,\n        BROADCASTS_NT = 127,\n        ACTIVITY_AWARD_NT = 151,\n        ACTIVITY_STATUS_NT = 152,\n        LOGIN_AWARD_NT = 153,\n    }\n\n    /** \n      --------------------------服务端应答------------------------------\n       游戏导航编号\n       **/\n    export enum GameNavNo {\n        /** \n          热门\n           **/\n        NAV_NO_HOT = 0,\n\n        /** \n          棋牌\n           **/\n        NAV_NO_CARD = 1,\n\n        /** \n          老虎机\n           **/\n        NAV_NO_SLOT = 2,\n\n        /** \n          (真人)视讯\n           **/\n        NAV_NO_LIVE = 3,\n\n        /** \n          体育\n           **/\n        NAV_NO_SPORTS = 4,\n\n        /** \n          彩票\n           **/\n        NAV_NO_LOTTERY = 5,\n\n        /** \n          (电竞)竞技\n           **/\n        NAV_NO_GAMING = 6,\n\n        /** \n          百人\n           **/\n        NAV_NO_CUBE = 7,\n\n        /** \n          其它\n           **/\n        NAV_NO_OTHER = 8,\n    }\n\n    /** \n      导航分类 多个导航可能为同一个类型，对应同样的公告牌和开场白\n       **/\n    export enum GameNavType {\n        /** \n          默认\n           **/\n        NAV_TYPE_DEFAULT = 0,\n\n        /** \n          热门\n           **/\n        NAV_TYPE_HOT = 1,\n\n        /** \n          老虎机\n           **/\n        NAV_TYPE_SLOT = 2,\n\n        /** \n          体育\n           **/\n        NAV_TYPE_SPORTS = 3,\n\n        /** \n          其他\n           **/\n        NAV_TYPE_OTHER = 4,\n\n        /** \n          彩票\n           **/\n        NAV_TYPE_LOTTERY = 5,\n\n        /** \n          棋牌\n           **/\n        NAV_TYPE_CARD = 6,\n\n        /** \n          真人\n           **/\n        NAV_TYPE_LIVE = 7,\n    }\n\n    /** \n      游戏标签\n       **/\n    export enum GameTagType {\n        /** \n          热门\n           **/\n        TAG_TYPE_HOT = 0,\n\n        /** \n          新手\n           **/\n        TAG_TYPE_NEW = 1,\n\n        /** \n          土豪\n           **/\n        TAG_TYPE_RICH = 2,\n\n        /** \n          活动\n           **/\n        TAG_TYPE_ACTIVITY = 3,\n\n        /** \n          强制引导\n           **/\n        TAG_TYPE_FORCE_GUIDE = 4,\n\n        /** \n          新手引导\n           **/\n        TAG_TYPE_NEWBIE_GUIDE = 5,\n    }\n    export enum GameStatus {\n        RUNNING = 0,\n        MAINTAINING = 1,\n        DEVELOPING = 2,\n    }\n    export enum BarItem {\n        /** \n          充值\n           **/\n        BAR_RECHARGE = 0,\n\n        /** \n          兑换\n           **/\n        BAR_WITHDRAW = 1,\n\n        /** \n          注册有礼\n           **/\n        BAR_REGISTER = 2,\n\n        /** \n          公告\n           **/\n        BAR_NOTICE = 3,\n\n        /** \n          客服\n           **/\n        BAR_CUSTOMER = 4,\n\n        /** \n          邮件\n           **/\n        BAR_MAIL = 5,\n\n        /** \n          保险箱\n           **/\n        BAR_SAFEBOX = 6,\n\n        /** \n          消息\n           **/\n        BAR_MESSAGE = 7,\n\n        /** \n          福利中心\n           **/\n        BAR_WELFARE = 8,\n\n        /** \n          任务\n           **/\n        BAR_TASK = 9,\n\n        /** \n          VIP\n           **/\n        BAR_VIP_GIFT = 10,\n\n        /** \n          推广员\n           **/\n        BAR_PROMOTER = 11,\n\n        /** \n          首冲\n           **/\n        BAR_FIRST_CHARGE = 12,\n\n        /** \n          存钱罐\n           **/\n        BAR_PIGGY_BANK = 13,\n\n        /** \n          转盘\n           **/\n        BAR_LUCKY_WHEEL = 14,\n\n        /** \n          迎新三重礼\n           **/\n        BAR_NEW_TRIPLE_GIFT = 15,\n\n        /** \n          新推广员\n           **/\n        BAR_PROMOTER2 = 16,\n    }\n    export enum UnreadMsgType {\n        /** \n          无用消息\n           **/\n        UN_USED = 0,\n\n        /** \n          目前弃用消息\n           **/\n        MF_MSG = 1,\n\n        /** \n          客服消息\n           **/\n        KF_MSG = 2,\n\n        /** \n          支付成功\n           **/\n        PAY_MSG = 3,\n        ACTIVITY_TASK_MSG = 4,\n\n        /** \n          新邮件\n           **/\n        MAIL_MSG = 5,\n    }\n\n    /** \n      弹窗类型\n       **/\n    export enum PopUpsKind {\n        /** \n          所有类型\n           **/\n        ALL = 0,\n\n        /** \n          充值提醒\n           **/\n        PAY_NOTICE = 1,\n\n        /** \n          新手捕鱼弹窗\n           **/\n        FISHING_NEWBIE = 2,\n\n        /** \n          充值下单失败引导\n           **/\n        RECHARGE_JUMP = 3,\n\n        /** \n          兑换提醒\n           **/\n        WITHDRAW_NOTICE = 4,\n    }\n\n    /** \n      更新类型\n       **/\n    export enum UpdateTypeEnu {\n        /** \n          无用\n           **/\n        NOT_USED = 0,\n\n        /** \n          普通热更\n           **/\n        NORMAL_HOT = 1,\n\n        /** \n          强制热更\n           **/\n        FORCE_HOT = 2,\n\n        /** \n          强制更新整包\n           **/\n        FORCE_PACKAGE = 3,\n\n        /** \n          非强制更新整包\n           **/\n        PACKAGE = 4,\n    }\n    export enum PackageTypeEnu {\n        /** \n          无用\n           **/\n        PACKAGE_NOT_USED = 0,\n\n        /** \n          h5类型\n           **/\n        H5 = 1,\n\n        /** \n          native类型\n           **/\n        NATIVE = 2,\n    }\n\n    /** \n      消息后缀为Req，表示客户端向服务端发送的请求\n      用户认证，id:1，用户认证\n       **/\n    export class AuthReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Timestamp?: number;\n                      UserID?: number;\n                      Token?: string;\n                      DeviceID?: string;\n                      Package?: string;\n                      Channel?: string;\n                      VersionName?: string;\n                      VersionCode?: number;\n                      BrandCode?: string;\n                      Platform?: string;\n                      PackageType?: PackageTypeEnu;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Timestamp\" in data && data.Timestamp != undefined) {\n                    this.Timestamp = data.Timestamp;\n                }\n                if (\"UserID\" in data && data.UserID != undefined) {\n                    this.UserID = data.UserID;\n                }\n                if (\"Token\" in data && data.Token != undefined) {\n                    this.Token = data.Token;\n                }\n                if (\"DeviceID\" in data && data.DeviceID != undefined) {\n                    this.DeviceID = data.DeviceID;\n                }\n                if (\"Package\" in data && data.Package != undefined) {\n                    this.Package = data.Package;\n                }\n                if (\"Channel\" in data && data.Channel != undefined) {\n                    this.Channel = data.Channel;\n                }\n                if (\"VersionName\" in data && data.VersionName != undefined) {\n                    this.VersionName = data.VersionName;\n                }\n                if (\"VersionCode\" in data && data.VersionCode != undefined) {\n                    this.VersionCode = data.VersionCode;\n                }\n                if (\"BrandCode\" in data && data.BrandCode != undefined) {\n                    this.BrandCode = data.BrandCode;\n                }\n                if (\"Platform\" in data && data.Platform != undefined) {\n                    this.Platform = data.Platform;\n                }\n                if (\"PackageType\" in data && data.PackageType != undefined) {\n                    this.PackageType = data.PackageType;\n                }\n            }\n        }\n        get Timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set Timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          用户ID，为0（没传）\n           **/\n        get UserID() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n\n        /** \n          用户ID，为0（没传）\n           **/\n        set UserID(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          授权凭证，为\"\"（没传）\n           **/\n        get Token() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n\n        /** \n          授权凭证，为\"\"（没传）\n           **/\n        set Token(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n\n        /** \n          客户端设备号\n           **/\n        get DeviceID() {\n            return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n        }\n\n        /** \n          客户端设备号\n           **/\n        set DeviceID(value: string) {\n            pb_1.Message.setField(this, 4, value);\n        }\n\n        /** \n          客户端包名\n           **/\n        get Package() {\n            return pb_1.Message.getFieldWithDefault(this, 5, \"\") as string;\n        }\n\n        /** \n          客户端包名\n           **/\n        set Package(value: string) {\n            pb_1.Message.setField(this, 5, value);\n        }\n\n        /** \n          客户端渠道号\n           **/\n        get Channel() {\n            return pb_1.Message.getFieldWithDefault(this, 6, \"\") as string;\n        }\n\n        /** \n          客户端渠道号\n           **/\n        set Channel(value: string) {\n            pb_1.Message.setField(this, 6, value);\n        }\n\n        /** \n          客户端游戏版本号版本号4.9.0，预留字段\n           **/\n        get VersionName() {\n            return pb_1.Message.getFieldWithDefault(this, 7, \"\") as string;\n        }\n\n        /** \n          客户端游戏版本号版本号4.9.0，预留字段\n           **/\n        set VersionName(value: string) {\n            pb_1.Message.setField(this, 7, value);\n        }\n\n        /** \n          客户端版本号16\n           **/\n        get VersionCode() {\n            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;\n        }\n\n        /** \n          客户端版本号16\n           **/\n        set VersionCode(value: number) {\n            pb_1.Message.setField(this, 8, value);\n        }\n\n        /** \n          品牌\n           **/\n        get BrandCode() {\n            return pb_1.Message.getFieldWithDefault(this, 9, \"\") as string;\n        }\n\n        /** \n          品牌\n           **/\n        set BrandCode(value: string) {\n            pb_1.Message.setField(this, 9, value);\n        }\n\n        /** \n          手机系统，a:android, i:ios,h:h5,d:default\n           **/\n        get Platform() {\n            return pb_1.Message.getFieldWithDefault(this, 10, \"\") as string;\n        }\n\n        /** \n          手机系统，a:android, i:ios,h:h5,d:default\n           **/\n        set Platform(value: string) {\n            pb_1.Message.setField(this, 10, value);\n        }\n\n        /** \n          包类型，1:h5, 2:native\n           **/\n        get PackageType() {\n            return pb_1.Message.getFieldWithDefault(\n                this,\n                11,\n                PackageTypeEnu.PACKAGE_NOT_USED\n            ) as PackageTypeEnu;\n        }\n\n        /** \n          包类型，1:h5, 2:native\n           **/\n        set PackageType(value: PackageTypeEnu) {\n            pb_1.Message.setField(this, 11, value);\n        }\n        static fromObject(data: {\n            Timestamp?: number;\n            UserID?: number;\n            Token?: string;\n            DeviceID?: string;\n            Package?: string;\n            Channel?: string;\n            VersionName?: string;\n            VersionCode?: number;\n            BrandCode?: string;\n            Platform?: string;\n            PackageType?: PackageTypeEnu;\n        }): AuthReq {\n            const message = new AuthReq({});\n            if (data.Timestamp != null) {\n                message.Timestamp = data.Timestamp;\n            }\n            if (data.UserID != null) {\n                message.UserID = data.UserID;\n            }\n            if (data.Token != null) {\n                message.Token = data.Token;\n            }\n            if (data.DeviceID != null) {\n                message.DeviceID = data.DeviceID;\n            }\n            if (data.Package != null) {\n                message.Package = data.Package;\n            }\n            if (data.Channel != null) {\n                message.Channel = data.Channel;\n            }\n            if (data.VersionName != null) {\n                message.VersionName = data.VersionName;\n            }\n            if (data.VersionCode != null) {\n                message.VersionCode = data.VersionCode;\n            }\n            if (data.BrandCode != null) {\n                message.BrandCode = data.BrandCode;\n            }\n            if (data.Platform != null) {\n                message.Platform = data.Platform;\n            }\n            if (data.PackageType != null) {\n                message.PackageType = data.PackageType;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Timestamp?: number;\n                UserID?: number;\n                Token?: string;\n                DeviceID?: string;\n                Package?: string;\n                Channel?: string;\n                VersionName?: string;\n                VersionCode?: number;\n                BrandCode?: string;\n                Platform?: string;\n                PackageType?: PackageTypeEnu;\n            } = {};\n            if (this.Timestamp != null) {\n                data.Timestamp = this.Timestamp;\n            }\n            if (this.UserID != null) {\n                data.UserID = this.UserID;\n            }\n            if (this.Token != null) {\n                data.Token = this.Token;\n            }\n            if (this.DeviceID != null) {\n                data.DeviceID = this.DeviceID;\n            }\n            if (this.Package != null) {\n                data.Package = this.Package;\n            }\n            if (this.Channel != null) {\n                data.Channel = this.Channel;\n            }\n            if (this.VersionName != null) {\n                data.VersionName = this.VersionName;\n            }\n            if (this.VersionCode != null) {\n                data.VersionCode = this.VersionCode;\n            }\n            if (this.BrandCode != null) {\n                data.BrandCode = this.BrandCode;\n            }\n            if (this.Platform != null) {\n                data.Platform = this.Platform;\n            }\n            if (this.PackageType != null) {\n                data.PackageType = this.PackageType;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Timestamp != 0) writer.writeInt64(1, this.Timestamp);\n            if (this.UserID != 0) writer.writeUint64(2, this.UserID);\n            if (this.Token.length) writer.writeString(3, this.Token);\n            if (this.DeviceID.length) writer.writeString(4, this.DeviceID);\n            if (this.Package.length) writer.writeString(5, this.Package);\n            if (this.Channel.length) writer.writeString(6, this.Channel);\n            if (this.VersionName.length) writer.writeString(7, this.VersionName);\n            if (this.VersionCode != 0) writer.writeInt32(8, this.VersionCode);\n            if (this.BrandCode.length) writer.writeString(9, this.BrandCode);\n            if (this.Platform.length) writer.writeString(10, this.Platform);\n            if (this.PackageType != PackageTypeEnu.PACKAGE_NOT_USED)\n                writer.writeEnum(11, this.PackageType);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new AuthReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Timestamp = reader.readInt64();\n                        break;\n                    case 2:\n                        message.UserID = reader.readUint64();\n                        break;\n                    case 3:\n                        message.Token = reader.readString();\n                        break;\n                    case 4:\n                        message.DeviceID = reader.readString();\n                        break;\n                    case 5:\n                        message.Package = reader.readString();\n                        break;\n                    case 6:\n                        message.Channel = reader.readString();\n                        break;\n                    case 7:\n                        message.VersionName = reader.readString();\n                        break;\n                    case 8:\n                        message.VersionCode = reader.readInt32();\n                        break;\n                    case 9:\n                        message.BrandCode = reader.readString();\n                        break;\n                    case 10:\n                        message.Platform = reader.readString();\n                        break;\n                    case 11:\n                        message.PackageType = reader.readEnum();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): AuthReq {\n            return AuthReq.deserialize(bytes);\n        }\n    }\n\n    /** \n      naming状态信息, 包含主域名列表, id: 101\n       **/\n    export class NamingST extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Timestamp?: number;\n                      HostList?: string[];\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [2],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Timestamp\" in data && data.Timestamp != undefined) {\n                    this.Timestamp = data.Timestamp;\n                }\n                if (\"HostList\" in data && data.HostList != undefined) {\n                    this.HostList = data.HostList;\n                }\n            }\n        }\n        get Timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set Timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          主域名地址\n           **/\n        get HostList() {\n            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];\n        }\n\n        /** \n          主域名地址\n           **/\n        set HostList(value: string[]) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: { Timestamp?: number; HostList?: string[] }): NamingST {\n            const message = new NamingST({});\n            if (data.Timestamp != null) {\n                message.Timestamp = data.Timestamp;\n            }\n            if (data.HostList != null) {\n                message.HostList = data.HostList;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Timestamp?: number;\n                HostList?: string[];\n            } = {};\n            if (this.Timestamp != null) {\n                data.Timestamp = this.Timestamp;\n            }\n            if (this.HostList != null) {\n                data.HostList = this.HostList;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Timestamp != 0) writer.writeInt64(1, this.Timestamp);\n            if (this.HostList.length) writer.writeRepeatedString(2, this.HostList);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NamingST {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new NamingST();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Timestamp = reader.readInt64();\n                        break;\n                    case 2:\n                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): NamingST {\n            return NamingST.deserialize(bytes);\n        }\n    }\n\n    /** \n      首页配置加载, id:11\n       **/\n    export class FeatureConfReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Timestamp?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Timestamp\" in data && data.Timestamp != undefined) {\n                    this.Timestamp = data.Timestamp;\n                }\n            }\n        }\n        get Timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set Timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        static fromObject(data: { Timestamp?: number }): FeatureConfReq {\n            const message = new FeatureConfReq({});\n            if (data.Timestamp != null) {\n                message.Timestamp = data.Timestamp;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Timestamp?: number;\n            } = {};\n            if (this.Timestamp != null) {\n                data.Timestamp = this.Timestamp;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Timestamp != 0) writer.writeInt64(1, this.Timestamp);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FeatureConfReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new FeatureConfReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Timestamp = reader.readInt64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): FeatureConfReq {\n            return FeatureConfReq.deserialize(bytes);\n        }\n    }\n\n    /** \n      首页配置加载, id:111\n       **/\n    export class FeatureConfResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Timestamp?: number;\n                      bar?: BarItem[];\n                      switch_conf?: Map<string, boolean>;\n                      feature_settings?: FeatureConfResp.FeatureSetting;\n                      game_settings?: FeatureConfResp.GameSetting;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [2],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Timestamp\" in data && data.Timestamp != undefined) {\n                    this.Timestamp = data.Timestamp;\n                }\n                if (\"bar\" in data && data.bar != undefined) {\n                    this.bar = data.bar;\n                }\n                if (\"switch_conf\" in data && data.switch_conf != undefined) {\n                    this.switch_conf = data.switch_conf;\n                }\n                if (\"feature_settings\" in data && data.feature_settings != undefined) {\n                    this.feature_settings = data.feature_settings;\n                }\n                if (\"game_settings\" in data && data.game_settings != undefined) {\n                    this.game_settings = data.game_settings;\n                }\n            }\n            if (!this.switch_conf) this.switch_conf = new Map();\n        }\n        get Timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set Timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get bar() {\n            return pb_1.Message.getFieldWithDefault(\n                this,\n                2,\n                BarItem.BAR_RECHARGE\n            ) as unknown as BarItem[];\n        }\n        set bar(value: BarItem[]) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get switch_conf() {\n            return pb_1.Message.getField(this, 3) as any as Map<string, boolean>;\n        }\n        set switch_conf(value: Map<string, boolean>) {\n            pb_1.Message.setField(this, 3, value as any);\n        }\n        get feature_settings() {\n            return pb_1.Message.getWrapperField(\n                this,\n                FeatureConfResp.FeatureSetting,\n                4\n            ) as FeatureConfResp.FeatureSetting;\n        }\n        set feature_settings(value: FeatureConfResp.FeatureSetting) {\n            pb_1.Message.setWrapperField(this, 4, value);\n        }\n        get has_feature_settings() {\n            return pb_1.Message.getField(this, 4) != null;\n        }\n        get game_settings() {\n            return pb_1.Message.getWrapperField(\n                this,\n                FeatureConfResp.GameSetting,\n                5\n            ) as FeatureConfResp.GameSetting;\n        }\n        set game_settings(value: FeatureConfResp.GameSetting) {\n            pb_1.Message.setWrapperField(this, 5, value);\n        }\n        get has_game_settings() {\n            return pb_1.Message.getField(this, 5) != null;\n        }\n        static fromObject(data: {\n            Timestamp?: number;\n            bar?: BarItem[];\n            switch_conf?: {\n                [key: string]: boolean;\n            };\n            feature_settings?: ReturnType<typeof FeatureConfResp.FeatureSetting.prototype.toObject>;\n            game_settings?: ReturnType<typeof FeatureConfResp.GameSetting.prototype.toObject>;\n        }): FeatureConfResp {\n            const message = new FeatureConfResp({});\n            if (data.Timestamp != null) {\n                message.Timestamp = data.Timestamp;\n            }\n            if (data.bar != null) {\n                message.bar = data.bar;\n            }\n            if (typeof data.switch_conf == \"object\") {\n                message.switch_conf = new Map(Object.entries(data.switch_conf));\n            }\n            if (data.feature_settings != null) {\n                message.feature_settings = FeatureConfResp.FeatureSetting.fromObject(\n                    data.feature_settings\n                );\n            }\n            if (data.game_settings != null) {\n                message.game_settings = FeatureConfResp.GameSetting.fromObject(data.game_settings);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Timestamp?: number;\n                bar?: BarItem[];\n                switch_conf?: {\n                    [key: string]: boolean;\n                };\n                feature_settings?: ReturnType<\n                    typeof FeatureConfResp.FeatureSetting.prototype.toObject\n                >;\n                game_settings?: ReturnType<typeof FeatureConfResp.GameSetting.prototype.toObject>;\n            } = {};\n            if (this.Timestamp != null) {\n                data.Timestamp = this.Timestamp;\n            }\n            if (this.bar != null) {\n                data.bar = this.bar;\n            }\n            if (this.switch_conf.size > 0) {\n                data.switch_conf = Object.fromEntries(this.switch_conf);\n            }\n            if (this.feature_settings != null) {\n                data.feature_settings = this.feature_settings.toObject();\n            }\n            if (this.game_settings != null) {\n                data.game_settings = this.game_settings.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Timestamp != 0) writer.writeInt64(1, this.Timestamp);\n            if (this.bar.length) writer.writePackedEnum(2, this.bar);\n            for (const [key, value] of this.switch_conf) {\n                writer.writeMessage(3, this.switch_conf, () => {\n                    writer.writeString(1, key);\n                    writer.writeBool(2, value);\n                });\n            }\n            if (this.has_feature_settings)\n                writer.writeMessage(4, this.feature_settings, () =>\n                    this.feature_settings.serialize(writer)\n                );\n            if (this.has_game_settings)\n                writer.writeMessage(5, this.game_settings, () =>\n                    this.game_settings.serialize(writer)\n                );\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FeatureConfResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new FeatureConfResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Timestamp = reader.readInt64();\n                        break;\n                    case 2:\n                        message.bar = reader.readPackedEnum();\n                        break;\n                    case 3:\n                        reader.readMessage(message, () =>\n                            pb_1.Map.deserializeBinary(\n                                message.switch_conf as any,\n                                reader,\n                                reader.readString,\n                                reader.readBool\n                            )\n                        );\n                        break;\n                    case 4:\n                        reader.readMessage(\n                            message.feature_settings,\n                            () =>\n                                (message.feature_settings =\n                                    FeatureConfResp.FeatureSetting.deserialize(reader))\n                        );\n                        break;\n                    case 5:\n                        reader.readMessage(\n                            message.game_settings,\n                            () =>\n                                (message.game_settings =\n                                    FeatureConfResp.GameSetting.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): FeatureConfResp {\n            return FeatureConfResp.deserialize(bytes);\n        }\n    }\n    export namespace FeatureConfResp {\n        export class FeatureSetting extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          anonymous?: number;\n                          upgrade?: number;\n                          register?: number;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"anonymous\" in data && data.anonymous != undefined) {\n                        this.anonymous = data.anonymous;\n                    }\n                    if (\"upgrade\" in data && data.upgrade != undefined) {\n                        this.upgrade = data.upgrade;\n                    }\n                    if (\"register\" in data && data.register != undefined) {\n                        this.register = data.register;\n                    }\n                }\n            }\n            get anonymous() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n            set anonymous(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get upgrade() {\n                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n            }\n            set upgrade(value: number) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            get register() {\n                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n            }\n            set register(value: number) {\n                pb_1.Message.setField(this, 3, value);\n            }\n            static fromObject(data: {\n                anonymous?: number;\n                upgrade?: number;\n                register?: number;\n            }): FeatureSetting {\n                const message = new FeatureSetting({});\n                if (data.anonymous != null) {\n                    message.anonymous = data.anonymous;\n                }\n                if (data.upgrade != null) {\n                    message.upgrade = data.upgrade;\n                }\n                if (data.register != null) {\n                    message.register = data.register;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    anonymous?: number;\n                    upgrade?: number;\n                    register?: number;\n                } = {};\n                if (this.anonymous != null) {\n                    data.anonymous = this.anonymous;\n                }\n                if (this.upgrade != null) {\n                    data.upgrade = this.upgrade;\n                }\n                if (this.register != null) {\n                    data.register = this.register;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.anonymous != 0) writer.writeInt64(1, this.anonymous);\n                if (this.upgrade != 0) writer.writeInt64(2, this.upgrade);\n                if (this.register != 0) writer.writeInt64(3, this.register);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FeatureSetting {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new FeatureSetting();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.anonymous = reader.readInt64();\n                            break;\n                        case 2:\n                            message.upgrade = reader.readInt64();\n                            break;\n                        case 3:\n                            message.register = reader.readInt64();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): FeatureSetting {\n                return FeatureSetting.deserialize(bytes);\n            }\n        }\n\n        /** \n          游戏导航配置\n           **/\n        export class GameNavigation extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          nav_no?: GameNavNo;\n                          type?: GameNavType;\n                          name?: string;\n                          layout?: string;\n                          game_ids?: number[];\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [5],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"nav_no\" in data && data.nav_no != undefined) {\n                        this.nav_no = data.nav_no;\n                    }\n                    if (\"type\" in data && data.type != undefined) {\n                        this.type = data.type;\n                    }\n                    if (\"name\" in data && data.name != undefined) {\n                        this.name = data.name;\n                    }\n                    if (\"layout\" in data && data.layout != undefined) {\n                        this.layout = data.layout;\n                    }\n                    if (\"game_ids\" in data && data.game_ids != undefined) {\n                        this.game_ids = data.game_ids;\n                    }\n                }\n            }\n\n            /** \n              导航编号对应一个icon\n               **/\n            get nav_no() {\n                return pb_1.Message.getFieldWithDefault(this, 1, GameNavNo.NAV_NO_HOT) as GameNavNo;\n            }\n\n            /** \n              导航编号对应一个icon\n               **/\n            set nav_no(value: GameNavNo) {\n                pb_1.Message.setField(this, 1, value);\n            }\n\n            /** \n              导航类型对应一个开场白\n               **/\n            get type() {\n                return pb_1.Message.getFieldWithDefault(\n                    this,\n                    2,\n                    GameNavType.NAV_TYPE_DEFAULT\n                ) as GameNavType;\n            }\n\n            /** \n              导航类型对应一个开场白\n               **/\n            set type(value: GameNavType) {\n                pb_1.Message.setField(this, 2, value);\n            }\n\n            /** \n              导航标题\n               **/\n            get name() {\n                return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n            }\n\n            /** \n              导航标题\n               **/\n            set name(value: string) {\n                pb_1.Message.setField(this, 3, value);\n            }\n\n            /** \n              排列方式 a/b/c\n               **/\n            get layout() {\n                return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n            }\n\n            /** \n              排列方式 a/b/c\n               **/\n            set layout(value: string) {\n                pb_1.Message.setField(this, 4, value);\n            }\n\n            /** \n              该分类下的游戏列表\n               **/\n            get game_ids() {\n                return pb_1.Message.getFieldWithDefault(this, 5, []) as number[];\n            }\n\n            /** \n              该分类下的游戏列表\n               **/\n            set game_ids(value: number[]) {\n                pb_1.Message.setField(this, 5, value);\n            }\n            static fromObject(data: {\n                nav_no?: GameNavNo;\n                type?: GameNavType;\n                name?: string;\n                layout?: string;\n                game_ids?: number[];\n            }): GameNavigation {\n                const message = new GameNavigation({});\n                if (data.nav_no != null) {\n                    message.nav_no = data.nav_no;\n                }\n                if (data.type != null) {\n                    message.type = data.type;\n                }\n                if (data.name != null) {\n                    message.name = data.name;\n                }\n                if (data.layout != null) {\n                    message.layout = data.layout;\n                }\n                if (data.game_ids != null) {\n                    message.game_ids = data.game_ids;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    nav_no?: GameNavNo;\n                    type?: GameNavType;\n                    name?: string;\n                    layout?: string;\n                    game_ids?: number[];\n                } = {};\n                if (this.nav_no != null) {\n                    data.nav_no = this.nav_no;\n                }\n                if (this.type != null) {\n                    data.type = this.type;\n                }\n                if (this.name != null) {\n                    data.name = this.name;\n                }\n                if (this.layout != null) {\n                    data.layout = this.layout;\n                }\n                if (this.game_ids != null) {\n                    data.game_ids = this.game_ids;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.nav_no != GameNavNo.NAV_NO_HOT) writer.writeEnum(1, this.nav_no);\n                if (this.type != GameNavType.NAV_TYPE_DEFAULT) writer.writeEnum(2, this.type);\n                if (this.name.length) writer.writeString(3, this.name);\n                if (this.layout.length) writer.writeString(4, this.layout);\n                if (this.game_ids.length) writer.writePackedInt32(5, this.game_ids);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameNavigation {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new GameNavigation();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.nav_no = reader.readEnum();\n                            break;\n                        case 2:\n                            message.type = reader.readEnum();\n                            break;\n                        case 3:\n                            message.name = reader.readString();\n                            break;\n                        case 4:\n                            message.layout = reader.readString();\n                            break;\n                        case 5:\n                            message.game_ids = reader.readPackedInt32();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): GameNavigation {\n                return GameNavigation.deserialize(bytes);\n            }\n        }\n\n        /** \n          游戏标签\n           **/\n        export class GameTag extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          type?: GameTagType;\n                          game_ids?: number[];\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [2],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"type\" in data && data.type != undefined) {\n                        this.type = data.type;\n                    }\n                    if (\"game_ids\" in data && data.game_ids != undefined) {\n                        this.game_ids = data.game_ids;\n                    }\n                }\n            }\n\n            /** \n              标签类型\n               **/\n            get type() {\n                return pb_1.Message.getFieldWithDefault(\n                    this,\n                    1,\n                    GameTagType.TAG_TYPE_HOT\n                ) as GameTagType;\n            }\n\n            /** \n              标签类型\n               **/\n            set type(value: GameTagType) {\n                pb_1.Message.setField(this, 1, value);\n            }\n\n            /** \n              该标签的所有游戏\n               **/\n            get game_ids() {\n                return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];\n            }\n\n            /** \n              该标签的所有游戏\n               **/\n            set game_ids(value: number[]) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            static fromObject(data: { type?: GameTagType; game_ids?: number[] }): GameTag {\n                const message = new GameTag({});\n                if (data.type != null) {\n                    message.type = data.type;\n                }\n                if (data.game_ids != null) {\n                    message.game_ids = data.game_ids;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    type?: GameTagType;\n                    game_ids?: number[];\n                } = {};\n                if (this.type != null) {\n                    data.type = this.type;\n                }\n                if (this.game_ids != null) {\n                    data.game_ids = this.game_ids;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.type != GameTagType.TAG_TYPE_HOT) writer.writeEnum(1, this.type);\n                if (this.game_ids.length) writer.writePackedInt32(2, this.game_ids);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameTag {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new GameTag();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.type = reader.readEnum();\n                            break;\n                        case 2:\n                            message.game_ids = reader.readPackedInt32();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): GameTag {\n                return GameTag.deserialize(bytes);\n            }\n        }\n\n        /** \n          需要的游戏信息，如h5游戏的icon\n           **/\n        export class GameInfo extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          game_id?: number;\n                          kind?: number;\n                          status?: GameStatus;\n                          icon?: string;\n                          game_code?: string;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"game_id\" in data && data.game_id != undefined) {\n                        this.game_id = data.game_id;\n                    }\n                    if (\"kind\" in data && data.kind != undefined) {\n                        this.kind = data.kind;\n                    }\n                    if (\"status\" in data && data.status != undefined) {\n                        this.status = data.status;\n                    }\n                    if (\"icon\" in data && data.icon != undefined) {\n                        this.icon = data.icon;\n                    }\n                    if (\"game_code\" in data && data.game_code != undefined) {\n                        this.game_code = data.game_code;\n                    }\n                }\n            }\n            get game_id() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n            set game_id(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n\n            /** \n              原生=1，H5=2，SDK=3\n               **/\n            get kind() {\n                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n            }\n\n            /** \n              原生=1，H5=2，SDK=3\n               **/\n            set kind(value: number) {\n                pb_1.Message.setField(this, 2, value);\n            }\n\n            /** \n              游戏状态\n               **/\n            get status() {\n                return pb_1.Message.getFieldWithDefault(this, 3, GameStatus.RUNNING) as GameStatus;\n            }\n\n            /** \n              游戏状态\n               **/\n            set status(value: GameStatus) {\n                pb_1.Message.setField(this, 3, value);\n            }\n            get icon() {\n                return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n            }\n            set icon(value: string) {\n                pb_1.Message.setField(this, 4, value);\n            }\n\n            /** \n              用来拼接游戏域名\n               **/\n            get game_code() {\n                return pb_1.Message.getFieldWithDefault(this, 5, \"\") as string;\n            }\n\n            /** \n              用来拼接游戏域名\n               **/\n            set game_code(value: string) {\n                pb_1.Message.setField(this, 5, value);\n            }\n            static fromObject(data: {\n                game_id?: number;\n                kind?: number;\n                status?: GameStatus;\n                icon?: string;\n                game_code?: string;\n            }): GameInfo {\n                const message = new GameInfo({});\n                if (data.game_id != null) {\n                    message.game_id = data.game_id;\n                }\n                if (data.kind != null) {\n                    message.kind = data.kind;\n                }\n                if (data.status != null) {\n                    message.status = data.status;\n                }\n                if (data.icon != null) {\n                    message.icon = data.icon;\n                }\n                if (data.game_code != null) {\n                    message.game_code = data.game_code;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    game_id?: number;\n                    kind?: number;\n                    status?: GameStatus;\n                    icon?: string;\n                    game_code?: string;\n                } = {};\n                if (this.game_id != null) {\n                    data.game_id = this.game_id;\n                }\n                if (this.kind != null) {\n                    data.kind = this.kind;\n                }\n                if (this.status != null) {\n                    data.status = this.status;\n                }\n                if (this.icon != null) {\n                    data.icon = this.icon;\n                }\n                if (this.game_code != null) {\n                    data.game_code = this.game_code;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.game_id != 0) writer.writeInt32(1, this.game_id);\n                if (this.kind != 0) writer.writeInt32(2, this.kind);\n                if (this.status != GameStatus.RUNNING) writer.writeEnum(3, this.status);\n                if (this.icon.length) writer.writeString(4, this.icon);\n                if (this.game_code.length) writer.writeString(5, this.game_code);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameInfo {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new GameInfo();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.game_id = reader.readInt32();\n                            break;\n                        case 2:\n                            message.kind = reader.readInt32();\n                            break;\n                        case 3:\n                            message.status = reader.readEnum();\n                            break;\n                        case 4:\n                            message.icon = reader.readString();\n                            break;\n                        case 5:\n                            message.game_code = reader.readString();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): GameInfo {\n                return GameInfo.deserialize(bytes);\n            }\n        }\n        export class GameSetting extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          navigation?: FeatureConfResp.GameNavigation[];\n                          game_tag?: FeatureConfResp.GameTag[];\n                          hide_new?: number[];\n                          game_list?: FeatureConfResp.GameInfo[];\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [1, 2, 3, 4],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"navigation\" in data && data.navigation != undefined) {\n                        this.navigation = data.navigation;\n                    }\n                    if (\"game_tag\" in data && data.game_tag != undefined) {\n                        this.game_tag = data.game_tag;\n                    }\n                    if (\"hide_new\" in data && data.hide_new != undefined) {\n                        this.hide_new = data.hide_new;\n                    }\n                    if (\"game_list\" in data && data.game_list != undefined) {\n                        this.game_list = data.game_list;\n                    }\n                }\n            }\n            get navigation() {\n                return pb_1.Message.getRepeatedWrapperField(\n                    this,\n                    FeatureConfResp.GameNavigation,\n                    1\n                ) as FeatureConfResp.GameNavigation[];\n            }\n            set navigation(value: FeatureConfResp.GameNavigation[]) {\n                pb_1.Message.setRepeatedWrapperField(this, 1, value);\n            }\n            get game_tag() {\n                return pb_1.Message.getRepeatedWrapperField(\n                    this,\n                    FeatureConfResp.GameTag,\n                    2\n                ) as FeatureConfResp.GameTag[];\n            }\n            set game_tag(value: FeatureConfResp.GameTag[]) {\n                pb_1.Message.setRepeatedWrapperField(this, 2, value);\n            }\n\n            /** \n              屏蔽新手场游戏\n               **/\n            get hide_new() {\n                return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];\n            }\n\n            /** \n              屏蔽新手场游戏\n               **/\n            set hide_new(value: number[]) {\n                pb_1.Message.setField(this, 3, value);\n            }\n            get game_list() {\n                return pb_1.Message.getRepeatedWrapperField(\n                    this,\n                    FeatureConfResp.GameInfo,\n                    4\n                ) as FeatureConfResp.GameInfo[];\n            }\n            set game_list(value: FeatureConfResp.GameInfo[]) {\n                pb_1.Message.setRepeatedWrapperField(this, 4, value);\n            }\n            static fromObject(data: {\n                navigation?: ReturnType<typeof FeatureConfResp.GameNavigation.prototype.toObject>[];\n                game_tag?: ReturnType<typeof FeatureConfResp.GameTag.prototype.toObject>[];\n                hide_new?: number[];\n                game_list?: ReturnType<typeof FeatureConfResp.GameInfo.prototype.toObject>[];\n            }): GameSetting {\n                const message = new GameSetting({});\n                if (data.navigation != null) {\n                    message.navigation = data.navigation.map((item) =>\n                        FeatureConfResp.GameNavigation.fromObject(item)\n                    );\n                }\n                if (data.game_tag != null) {\n                    message.game_tag = data.game_tag.map((item) =>\n                        FeatureConfResp.GameTag.fromObject(item)\n                    );\n                }\n                if (data.hide_new != null) {\n                    message.hide_new = data.hide_new;\n                }\n                if (data.game_list != null) {\n                    message.game_list = data.game_list.map((item) =>\n                        FeatureConfResp.GameInfo.fromObject(item)\n                    );\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    navigation?: ReturnType<\n                        typeof FeatureConfResp.GameNavigation.prototype.toObject\n                    >[];\n                    game_tag?: ReturnType<typeof FeatureConfResp.GameTag.prototype.toObject>[];\n                    hide_new?: number[];\n                    game_list?: ReturnType<typeof FeatureConfResp.GameInfo.prototype.toObject>[];\n                } = {};\n                if (this.navigation != null) {\n                    data.navigation = this.navigation.map((item: FeatureConfResp.GameNavigation) =>\n                        item.toObject()\n                    );\n                }\n                if (this.game_tag != null) {\n                    data.game_tag = this.game_tag.map((item: FeatureConfResp.GameTag) =>\n                        item.toObject()\n                    );\n                }\n                if (this.hide_new != null) {\n                    data.hide_new = this.hide_new;\n                }\n                if (this.game_list != null) {\n                    data.game_list = this.game_list.map((item: FeatureConfResp.GameInfo) =>\n                        item.toObject()\n                    );\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.navigation.length)\n                    writer.writeRepeatedMessage(\n                        1,\n                        this.navigation,\n                        (item: FeatureConfResp.GameNavigation) => item.serialize(writer)\n                    );\n                if (this.game_tag.length)\n                    writer.writeRepeatedMessage(2, this.game_tag, (item: FeatureConfResp.GameTag) =>\n                        item.serialize(writer)\n                    );\n                if (this.hide_new.length) writer.writePackedInt32(3, this.hide_new);\n                if (this.game_list.length)\n                    writer.writeRepeatedMessage(\n                        4,\n                        this.game_list,\n                        (item: FeatureConfResp.GameInfo) => item.serialize(writer)\n                    );\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameSetting {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new GameSetting();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            reader.readMessage(message.navigation, () =>\n                                pb_1.Message.addToRepeatedWrapperField(\n                                    message,\n                                    1,\n                                    FeatureConfResp.GameNavigation.deserialize(reader),\n                                    FeatureConfResp.GameNavigation\n                                )\n                            );\n                            break;\n                        case 2:\n                            reader.readMessage(message.game_tag, () =>\n                                pb_1.Message.addToRepeatedWrapperField(\n                                    message,\n                                    2,\n                                    FeatureConfResp.GameTag.deserialize(reader),\n                                    FeatureConfResp.GameTag\n                                )\n                            );\n                            break;\n                        case 3:\n                            message.hide_new = reader.readPackedInt32();\n                            break;\n                        case 4:\n                            reader.readMessage(message.game_list, () =>\n                                pb_1.Message.addToRepeatedWrapperField(\n                                    message,\n                                    4,\n                                    FeatureConfResp.GameInfo.deserialize(reader),\n                                    FeatureConfResp.GameInfo\n                                )\n                            );\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): GameSetting {\n                return GameSetting.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      启动配置, id:12\n       **/\n    export class LaunchConfReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Timestamp?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Timestamp\" in data && data.Timestamp != undefined) {\n                    this.Timestamp = data.Timestamp;\n                }\n            }\n        }\n        get Timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set Timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        static fromObject(data: { Timestamp?: number }): LaunchConfReq {\n            const message = new LaunchConfReq({});\n            if (data.Timestamp != null) {\n                message.Timestamp = data.Timestamp;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Timestamp?: number;\n            } = {};\n            if (this.Timestamp != null) {\n                data.Timestamp = this.Timestamp;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Timestamp != 0) writer.writeInt64(1, this.Timestamp);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LaunchConfReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new LaunchConfReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Timestamp = reader.readInt64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): LaunchConfReq {\n            return LaunchConfReq.deserialize(bytes);\n        }\n    }\n\n    /** \n      启动配置, id:112\n       **/\n    export class LaunchConfResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Timestamp?: number;\n                      homepage?: string;\n                      fb_appid?: string;\n                      adjust_conf?: LaunchConfResp.AdjustConf;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Timestamp\" in data && data.Timestamp != undefined) {\n                    this.Timestamp = data.Timestamp;\n                }\n                if (\"homepage\" in data && data.homepage != undefined) {\n                    this.homepage = data.homepage;\n                }\n                if (\"fb_appid\" in data && data.fb_appid != undefined) {\n                    this.fb_appid = data.fb_appid;\n                }\n                if (\"adjust_conf\" in data && data.adjust_conf != undefined) {\n                    this.adjust_conf = data.adjust_conf;\n                }\n            }\n        }\n        get Timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set Timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get homepage() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set homepage(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get fb_appid() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n        set fb_appid(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        get adjust_conf() {\n            return pb_1.Message.getWrapperField(\n                this,\n                LaunchConfResp.AdjustConf,\n                4\n            ) as LaunchConfResp.AdjustConf;\n        }\n        set adjust_conf(value: LaunchConfResp.AdjustConf) {\n            pb_1.Message.setWrapperField(this, 4, value);\n        }\n        get has_adjust_conf() {\n            return pb_1.Message.getField(this, 4) != null;\n        }\n        static fromObject(data: {\n            Timestamp?: number;\n            homepage?: string;\n            fb_appid?: string;\n            adjust_conf?: ReturnType<typeof LaunchConfResp.AdjustConf.prototype.toObject>;\n        }): LaunchConfResp {\n            const message = new LaunchConfResp({});\n            if (data.Timestamp != null) {\n                message.Timestamp = data.Timestamp;\n            }\n            if (data.homepage != null) {\n                message.homepage = data.homepage;\n            }\n            if (data.fb_appid != null) {\n                message.fb_appid = data.fb_appid;\n            }\n            if (data.adjust_conf != null) {\n                message.adjust_conf = LaunchConfResp.AdjustConf.fromObject(data.adjust_conf);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Timestamp?: number;\n                homepage?: string;\n                fb_appid?: string;\n                adjust_conf?: ReturnType<typeof LaunchConfResp.AdjustConf.prototype.toObject>;\n            } = {};\n            if (this.Timestamp != null) {\n                data.Timestamp = this.Timestamp;\n            }\n            if (this.homepage != null) {\n                data.homepage = this.homepage;\n            }\n            if (this.fb_appid != null) {\n                data.fb_appid = this.fb_appid;\n            }\n            if (this.adjust_conf != null) {\n                data.adjust_conf = this.adjust_conf.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Timestamp != 0) writer.writeInt64(1, this.Timestamp);\n            if (this.homepage.length) writer.writeString(2, this.homepage);\n            if (this.fb_appid.length) writer.writeString(3, this.fb_appid);\n            if (this.has_adjust_conf)\n                writer.writeMessage(4, this.adjust_conf, () => this.adjust_conf.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LaunchConfResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new LaunchConfResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Timestamp = reader.readInt64();\n                        break;\n                    case 2:\n                        message.homepage = reader.readString();\n                        break;\n                    case 3:\n                        message.fb_appid = reader.readString();\n                        break;\n                    case 4:\n                        reader.readMessage(\n                            message.adjust_conf,\n                            () =>\n                                (message.adjust_conf =\n                                    LaunchConfResp.AdjustConf.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): LaunchConfResp {\n            return LaunchConfResp.deserialize(bytes);\n        }\n    }\n    export namespace LaunchConfResp {\n        /** \n          移动营销工具adjust参数配置\n           **/\n        export class AdjustConf extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          appid?: string;\n                          event_list?: LaunchConfResp.AdjustConf.EventInfo[];\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [2],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"appid\" in data && data.appid != undefined) {\n                        this.appid = data.appid;\n                    }\n                    if (\"event_list\" in data && data.event_list != undefined) {\n                        this.event_list = data.event_list;\n                    }\n                }\n            }\n            get appid() {\n                return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n            }\n            set appid(value: string) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get event_list() {\n                return pb_1.Message.getRepeatedWrapperField(\n                    this,\n                    LaunchConfResp.AdjustConf.EventInfo,\n                    2\n                ) as LaunchConfResp.AdjustConf.EventInfo[];\n            }\n            set event_list(value: LaunchConfResp.AdjustConf.EventInfo[]) {\n                pb_1.Message.setRepeatedWrapperField(this, 2, value);\n            }\n            static fromObject(data: {\n                appid?: string;\n                event_list?: ReturnType<\n                    typeof LaunchConfResp.AdjustConf.EventInfo.prototype.toObject\n                >[];\n            }): AdjustConf {\n                const message = new AdjustConf({});\n                if (data.appid != null) {\n                    message.appid = data.appid;\n                }\n                if (data.event_list != null) {\n                    message.event_list = data.event_list.map((item) =>\n                        LaunchConfResp.AdjustConf.EventInfo.fromObject(item)\n                    );\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    appid?: string;\n                    event_list?: ReturnType<\n                        typeof LaunchConfResp.AdjustConf.EventInfo.prototype.toObject\n                    >[];\n                } = {};\n                if (this.appid != null) {\n                    data.appid = this.appid;\n                }\n                if (this.event_list != null) {\n                    data.event_list = this.event_list.map(\n                        (item: LaunchConfResp.AdjustConf.EventInfo) => item.toObject()\n                    );\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.appid.length) writer.writeString(1, this.appid);\n                if (this.event_list.length)\n                    writer.writeRepeatedMessage(\n                        2,\n                        this.event_list,\n                        (item: LaunchConfResp.AdjustConf.EventInfo) => item.serialize(writer)\n                    );\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdjustConf {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new AdjustConf();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.appid = reader.readString();\n                            break;\n                        case 2:\n                            reader.readMessage(message.event_list, () =>\n                                pb_1.Message.addToRepeatedWrapperField(\n                                    message,\n                                    2,\n                                    LaunchConfResp.AdjustConf.EventInfo.deserialize(reader),\n                                    LaunchConfResp.AdjustConf.EventInfo\n                                )\n                            );\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): AdjustConf {\n                return AdjustConf.deserialize(bytes);\n            }\n        }\n        export namespace AdjustConf {\n            export class EventInfo extends pb_1.Message {\n                #one_of_decls: number[][] = [];\n                constructor(\n                    data?:\n                        | any[]\n                        | {\n                              event_name?: string;\n                              event_token?: string;\n                          }\n                ) {\n                    super();\n                    pb_1.Message.initialize(\n                        this,\n                        Array.isArray(data) ? data : [],\n                        0,\n                        -1,\n                        [],\n                        this.#one_of_decls\n                    );\n                    if (!Array.isArray(data) && typeof data == \"object\") {\n                        if (\"event_name\" in data && data.event_name != undefined) {\n                            this.event_name = data.event_name;\n                        }\n                        if (\"event_token\" in data && data.event_token != undefined) {\n                            this.event_token = data.event_token;\n                        }\n                    }\n                }\n                get event_name() {\n                    return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n                }\n                set event_name(value: string) {\n                    pb_1.Message.setField(this, 1, value);\n                }\n                get event_token() {\n                    return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n                }\n                set event_token(value: string) {\n                    pb_1.Message.setField(this, 2, value);\n                }\n                static fromObject(data: { event_name?: string; event_token?: string }): EventInfo {\n                    const message = new EventInfo({});\n                    if (data.event_name != null) {\n                        message.event_name = data.event_name;\n                    }\n                    if (data.event_token != null) {\n                        message.event_token = data.event_token;\n                    }\n                    return message;\n                }\n                toObject() {\n                    const data: {\n                        event_name?: string;\n                        event_token?: string;\n                    } = {};\n                    if (this.event_name != null) {\n                        data.event_name = this.event_name;\n                    }\n                    if (this.event_token != null) {\n                        data.event_token = this.event_token;\n                    }\n                    return data;\n                }\n                serialize(): Uint8Array;\n                serialize(w: pb_1.BinaryWriter): void;\n                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                    const writer = w || new pb_1.BinaryWriter();\n                    if (this.event_name.length) writer.writeString(1, this.event_name);\n                    if (this.event_token.length) writer.writeString(2, this.event_token);\n                    if (!w) return writer.getResultBuffer();\n                }\n                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventInfo {\n                    const reader =\n                            bytes instanceof pb_1.BinaryReader\n                                ? bytes\n                                : new pb_1.BinaryReader(bytes),\n                        message = new EventInfo();\n                    while (reader.nextField()) {\n                        if (reader.isEndGroup()) break;\n                        switch (reader.getFieldNumber()) {\n                            case 1:\n                                message.event_name = reader.readString();\n                                break;\n                            case 2:\n                                message.event_token = reader.readString();\n                                break;\n                            default:\n                                reader.skipField();\n                        }\n                    }\n                    return message;\n                }\n                serializeBinary(): Uint8Array {\n                    return this.serialize();\n                }\n                static deserializeBinary(bytes: Uint8Array): EventInfo {\n                    return EventInfo.deserialize(bytes);\n                }\n            }\n        }\n    }\n\n    /** \n      客服配置, id:13\n       **/\n    export class CustomerConfReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Timestamp?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Timestamp\" in data && data.Timestamp != undefined) {\n                    this.Timestamp = data.Timestamp;\n                }\n            }\n        }\n        get Timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set Timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        static fromObject(data: { Timestamp?: number }): CustomerConfReq {\n            const message = new CustomerConfReq({});\n            if (data.Timestamp != null) {\n                message.Timestamp = data.Timestamp;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Timestamp?: number;\n            } = {};\n            if (this.Timestamp != null) {\n                data.Timestamp = this.Timestamp;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Timestamp != 0) writer.writeInt64(1, this.Timestamp);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomerConfReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new CustomerConfReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Timestamp = reader.readInt64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): CustomerConfReq {\n            return CustomerConfReq.deserialize(bytes);\n        }\n    }\n\n    /** \n      客服配置, id:113\n       **/\n    export class CustomerConfResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Timestamp?: number;\n                      token?: string;\n                      domain?: string;\n                      browser_type?: number;\n                      browser_direction?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Timestamp\" in data && data.Timestamp != undefined) {\n                    this.Timestamp = data.Timestamp;\n                }\n                if (\"token\" in data && data.token != undefined) {\n                    this.token = data.token;\n                }\n                if (\"domain\" in data && data.domain != undefined) {\n                    this.domain = data.domain;\n                }\n                if (\"browser_type\" in data && data.browser_type != undefined) {\n                    this.browser_type = data.browser_type;\n                }\n                if (\"browser_direction\" in data && data.browser_direction != undefined) {\n                    this.browser_direction = data.browser_direction;\n                }\n            }\n        }\n        get Timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set Timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get token() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set token(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          eg: 'http:***.com'\n           **/\n        get domain() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n\n        /** \n          eg: 'http:***.com'\n           **/\n        set domain(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n\n        /** \n          指定打开的浏览器，1内置，2第三方\n           **/\n        get browser_type() {\n            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n        }\n\n        /** \n          指定打开的浏览器，1内置，2第三方\n           **/\n        set browser_type(value: number) {\n            pb_1.Message.setField(this, 4, value);\n        }\n\n        /** \n          1:横屏，2：竖屏\n           **/\n        get browser_direction() {\n            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;\n        }\n\n        /** \n          1:横屏，2：竖屏\n           **/\n        set browser_direction(value: number) {\n            pb_1.Message.setField(this, 5, value);\n        }\n        static fromObject(data: {\n            Timestamp?: number;\n            token?: string;\n            domain?: string;\n            browser_type?: number;\n            browser_direction?: number;\n        }): CustomerConfResp {\n            const message = new CustomerConfResp({});\n            if (data.Timestamp != null) {\n                message.Timestamp = data.Timestamp;\n            }\n            if (data.token != null) {\n                message.token = data.token;\n            }\n            if (data.domain != null) {\n                message.domain = data.domain;\n            }\n            if (data.browser_type != null) {\n                message.browser_type = data.browser_type;\n            }\n            if (data.browser_direction != null) {\n                message.browser_direction = data.browser_direction;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Timestamp?: number;\n                token?: string;\n                domain?: string;\n                browser_type?: number;\n                browser_direction?: number;\n            } = {};\n            if (this.Timestamp != null) {\n                data.Timestamp = this.Timestamp;\n            }\n            if (this.token != null) {\n                data.token = this.token;\n            }\n            if (this.domain != null) {\n                data.domain = this.domain;\n            }\n            if (this.browser_type != null) {\n                data.browser_type = this.browser_type;\n            }\n            if (this.browser_direction != null) {\n                data.browser_direction = this.browser_direction;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Timestamp != 0) writer.writeInt64(1, this.Timestamp);\n            if (this.token.length) writer.writeString(2, this.token);\n            if (this.domain.length) writer.writeString(3, this.domain);\n            if (this.browser_type != 0) writer.writeInt32(4, this.browser_type);\n            if (this.browser_direction != 0) writer.writeInt32(5, this.browser_direction);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomerConfResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new CustomerConfResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Timestamp = reader.readInt64();\n                        break;\n                    case 2:\n                        message.token = reader.readString();\n                        break;\n                    case 3:\n                        message.domain = reader.readString();\n                        break;\n                    case 4:\n                        message.browser_type = reader.readInt32();\n                        break;\n                    case 5:\n                        message.browser_direction = reader.readInt32();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): CustomerConfResp {\n            return CustomerConfResp.deserialize(bytes);\n        }\n    }\n\n    /** \n      道具配置, id:14\n       **/\n    export class PropsConfReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Timestamp?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Timestamp\" in data && data.Timestamp != undefined) {\n                    this.Timestamp = data.Timestamp;\n                }\n            }\n        }\n        get Timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set Timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        static fromObject(data: { Timestamp?: number }): PropsConfReq {\n            const message = new PropsConfReq({});\n            if (data.Timestamp != null) {\n                message.Timestamp = data.Timestamp;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Timestamp?: number;\n            } = {};\n            if (this.Timestamp != null) {\n                data.Timestamp = this.Timestamp;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Timestamp != 0) writer.writeInt64(1, this.Timestamp);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PropsConfReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PropsConfReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Timestamp = reader.readInt64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PropsConfReq {\n            return PropsConfReq.deserialize(bytes);\n        }\n    }\n\n    /** \n      道具配置, id:114\n       **/\n    export class PropsConfResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Timestamp?: number;\n                      props_list?: PropsConfResp.PropsInfo[];\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [2],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Timestamp\" in data && data.Timestamp != undefined) {\n                    this.Timestamp = data.Timestamp;\n                }\n                if (\"props_list\" in data && data.props_list != undefined) {\n                    this.props_list = data.props_list;\n                }\n            }\n        }\n        get Timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set Timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get props_list() {\n            return pb_1.Message.getRepeatedWrapperField(\n                this,\n                PropsConfResp.PropsInfo,\n                2\n            ) as PropsConfResp.PropsInfo[];\n        }\n        set props_list(value: PropsConfResp.PropsInfo[]) {\n            pb_1.Message.setRepeatedWrapperField(this, 2, value);\n        }\n        static fromObject(data: {\n            Timestamp?: number;\n            props_list?: ReturnType<typeof PropsConfResp.PropsInfo.prototype.toObject>[];\n        }): PropsConfResp {\n            const message = new PropsConfResp({});\n            if (data.Timestamp != null) {\n                message.Timestamp = data.Timestamp;\n            }\n            if (data.props_list != null) {\n                message.props_list = data.props_list.map((item) =>\n                    PropsConfResp.PropsInfo.fromObject(item)\n                );\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Timestamp?: number;\n                props_list?: ReturnType<typeof PropsConfResp.PropsInfo.prototype.toObject>[];\n            } = {};\n            if (this.Timestamp != null) {\n                data.Timestamp = this.Timestamp;\n            }\n            if (this.props_list != null) {\n                data.props_list = this.props_list.map((item: PropsConfResp.PropsInfo) =>\n                    item.toObject()\n                );\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Timestamp != 0) writer.writeInt64(1, this.Timestamp);\n            if (this.props_list.length)\n                writer.writeRepeatedMessage(2, this.props_list, (item: PropsConfResp.PropsInfo) =>\n                    item.serialize(writer)\n                );\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PropsConfResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PropsConfResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Timestamp = reader.readInt64();\n                        break;\n                    case 2:\n                        reader.readMessage(message.props_list, () =>\n                            pb_1.Message.addToRepeatedWrapperField(\n                                message,\n                                2,\n                                PropsConfResp.PropsInfo.deserialize(reader),\n                                PropsConfResp.PropsInfo\n                            )\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PropsConfResp {\n            return PropsConfResp.deserialize(bytes);\n        }\n    }\n    export namespace PropsConfResp {\n        export class PropsInfo extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          props_id?: number;\n                          name?: string;\n                          kind?: string;\n                          sub_kind?: string;\n                          icon?: number;\n                          desc?: string;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"props_id\" in data && data.props_id != undefined) {\n                        this.props_id = data.props_id;\n                    }\n                    if (\"name\" in data && data.name != undefined) {\n                        this.name = data.name;\n                    }\n                    if (\"kind\" in data && data.kind != undefined) {\n                        this.kind = data.kind;\n                    }\n                    if (\"sub_kind\" in data && data.sub_kind != undefined) {\n                        this.sub_kind = data.sub_kind;\n                    }\n                    if (\"icon\" in data && data.icon != undefined) {\n                        this.icon = data.icon;\n                    }\n                    if (\"desc\" in data && data.desc != undefined) {\n                        this.desc = data.desc;\n                    }\n                }\n            }\n            get props_id() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n            set props_id(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get name() {\n                return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n            }\n            set name(value: string) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            get kind() {\n                return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n            }\n            set kind(value: string) {\n                pb_1.Message.setField(this, 3, value);\n            }\n            get sub_kind() {\n                return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n            }\n            set sub_kind(value: string) {\n                pb_1.Message.setField(this, 4, value);\n            }\n            get icon() {\n                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;\n            }\n            set icon(value: number) {\n                pb_1.Message.setField(this, 5, value);\n            }\n            get desc() {\n                return pb_1.Message.getFieldWithDefault(this, 6, \"\") as string;\n            }\n            set desc(value: string) {\n                pb_1.Message.setField(this, 6, value);\n            }\n            static fromObject(data: {\n                props_id?: number;\n                name?: string;\n                kind?: string;\n                sub_kind?: string;\n                icon?: number;\n                desc?: string;\n            }): PropsInfo {\n                const message = new PropsInfo({});\n                if (data.props_id != null) {\n                    message.props_id = data.props_id;\n                }\n                if (data.name != null) {\n                    message.name = data.name;\n                }\n                if (data.kind != null) {\n                    message.kind = data.kind;\n                }\n                if (data.sub_kind != null) {\n                    message.sub_kind = data.sub_kind;\n                }\n                if (data.icon != null) {\n                    message.icon = data.icon;\n                }\n                if (data.desc != null) {\n                    message.desc = data.desc;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    props_id?: number;\n                    name?: string;\n                    kind?: string;\n                    sub_kind?: string;\n                    icon?: number;\n                    desc?: string;\n                } = {};\n                if (this.props_id != null) {\n                    data.props_id = this.props_id;\n                }\n                if (this.name != null) {\n                    data.name = this.name;\n                }\n                if (this.kind != null) {\n                    data.kind = this.kind;\n                }\n                if (this.sub_kind != null) {\n                    data.sub_kind = this.sub_kind;\n                }\n                if (this.icon != null) {\n                    data.icon = this.icon;\n                }\n                if (this.desc != null) {\n                    data.desc = this.desc;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.props_id != 0) writer.writeInt32(1, this.props_id);\n                if (this.name.length) writer.writeString(2, this.name);\n                if (this.kind.length) writer.writeString(3, this.kind);\n                if (this.sub_kind.length) writer.writeString(4, this.sub_kind);\n                if (this.icon != 0) writer.writeInt32(5, this.icon);\n                if (this.desc.length) writer.writeString(6, this.desc);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PropsInfo {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new PropsInfo();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.props_id = reader.readInt32();\n                            break;\n                        case 2:\n                            message.name = reader.readString();\n                            break;\n                        case 3:\n                            message.kind = reader.readString();\n                            break;\n                        case 4:\n                            message.sub_kind = reader.readString();\n                            break;\n                        case 5:\n                            message.icon = reader.readInt32();\n                            break;\n                        case 6:\n                            message.desc = reader.readString();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): PropsInfo {\n                return PropsInfo.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      获取弹窗, id:15\n       **/\n    export class PopUpsConfReq extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Timestamp?: number;\n                      kind?: PopUpsKind;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Timestamp\" in data && data.Timestamp != undefined) {\n                    this.Timestamp = data.Timestamp;\n                }\n                if (\"kind\" in data && data.kind != undefined) {\n                    this.kind = data.kind;\n                }\n            }\n        }\n        get Timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set Timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          0 全部 1 支付公告弹窗 2 捕鱼新手充值弹窗 3 充值下单失败引导 4 兑换提醒\n           **/\n        get kind() {\n            return pb_1.Message.getFieldWithDefault(this, 2, PopUpsKind.ALL) as PopUpsKind;\n        }\n\n        /** \n          0 全部 1 支付公告弹窗 2 捕鱼新手充值弹窗 3 充值下单失败引导 4 兑换提醒\n           **/\n        set kind(value: PopUpsKind) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: { Timestamp?: number; kind?: PopUpsKind }): PopUpsConfReq {\n            const message = new PopUpsConfReq({});\n            if (data.Timestamp != null) {\n                message.Timestamp = data.Timestamp;\n            }\n            if (data.kind != null) {\n                message.kind = data.kind;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Timestamp?: number;\n                kind?: PopUpsKind;\n            } = {};\n            if (this.Timestamp != null) {\n                data.Timestamp = this.Timestamp;\n            }\n            if (this.kind != null) {\n                data.kind = this.kind;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Timestamp != 0) writer.writeInt64(1, this.Timestamp);\n            if (this.kind != PopUpsKind.ALL) writer.writeEnum(2, this.kind);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PopUpsConfReq {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PopUpsConfReq();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Timestamp = reader.readInt64();\n                        break;\n                    case 2:\n                        message.kind = reader.readEnum();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PopUpsConfReq {\n            return PopUpsConfReq.deserialize(bytes);\n        }\n    }\n    export class PopUpInfo extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      content?: string;\n                      frequency?: number;\n                      tutorial_addr?: string;\n                      button_title?: string;\n                      jump_pay_type?: number;\n                      is_jump?: boolean;\n                      customize_frequency?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"content\" in data && data.content != undefined) {\n                    this.content = data.content;\n                }\n                if (\"frequency\" in data && data.frequency != undefined) {\n                    this.frequency = data.frequency;\n                }\n                if (\"tutorial_addr\" in data && data.tutorial_addr != undefined) {\n                    this.tutorial_addr = data.tutorial_addr;\n                }\n                if (\"button_title\" in data && data.button_title != undefined) {\n                    this.button_title = data.button_title;\n                }\n                if (\"jump_pay_type\" in data && data.jump_pay_type != undefined) {\n                    this.jump_pay_type = data.jump_pay_type;\n                }\n                if (\"is_jump\" in data && data.is_jump != undefined) {\n                    this.is_jump = data.is_jump;\n                }\n                if (\"customize_frequency\" in data && data.customize_frequency != undefined) {\n                    this.customize_frequency = data.customize_frequency;\n                }\n            }\n        }\n\n        /** \n          弹窗文案\n           **/\n        get content() {\n            return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n        }\n\n        /** \n          弹窗文案\n           **/\n        set content(value: string) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          弹窗频率\n           **/\n        get frequency() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n\n        /** \n          弹窗频率\n           **/\n        set frequency(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          教程地址\n           **/\n        get tutorial_addr() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n\n        /** \n          教程地址\n           **/\n        set tutorial_addr(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n\n        /** \n          跳转按钮文案\n           **/\n        get button_title() {\n            return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n        }\n\n        /** \n          跳转按钮文案\n           **/\n        set button_title(value: string) {\n            pb_1.Message.setField(this, 4, value);\n        }\n\n        /** \n          跳转支付类型\n           **/\n        get jump_pay_type() {\n            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;\n        }\n\n        /** \n          跳转支付类型\n           **/\n        set jump_pay_type(value: number) {\n            pb_1.Message.setField(this, 5, value);\n        }\n\n        /** \n          是否跳转\n           **/\n        get is_jump() {\n            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;\n        }\n\n        /** \n          是否跳转\n           **/\n        set is_jump(value: boolean) {\n            pb_1.Message.setField(this, 6, value);\n        }\n\n        /** \n          自定义弹窗频率, 当PopUpsKind为2时\n           **/\n        get customize_frequency() {\n            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;\n        }\n\n        /** \n          自定义弹窗频率, 当PopUpsKind为2时\n           **/\n        set customize_frequency(value: number) {\n            pb_1.Message.setField(this, 7, value);\n        }\n        static fromObject(data: {\n            content?: string;\n            frequency?: number;\n            tutorial_addr?: string;\n            button_title?: string;\n            jump_pay_type?: number;\n            is_jump?: boolean;\n            customize_frequency?: number;\n        }): PopUpInfo {\n            const message = new PopUpInfo({});\n            if (data.content != null) {\n                message.content = data.content;\n            }\n            if (data.frequency != null) {\n                message.frequency = data.frequency;\n            }\n            if (data.tutorial_addr != null) {\n                message.tutorial_addr = data.tutorial_addr;\n            }\n            if (data.button_title != null) {\n                message.button_title = data.button_title;\n            }\n            if (data.jump_pay_type != null) {\n                message.jump_pay_type = data.jump_pay_type;\n            }\n            if (data.is_jump != null) {\n                message.is_jump = data.is_jump;\n            }\n            if (data.customize_frequency != null) {\n                message.customize_frequency = data.customize_frequency;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                content?: string;\n                frequency?: number;\n                tutorial_addr?: string;\n                button_title?: string;\n                jump_pay_type?: number;\n                is_jump?: boolean;\n                customize_frequency?: number;\n            } = {};\n            if (this.content != null) {\n                data.content = this.content;\n            }\n            if (this.frequency != null) {\n                data.frequency = this.frequency;\n            }\n            if (this.tutorial_addr != null) {\n                data.tutorial_addr = this.tutorial_addr;\n            }\n            if (this.button_title != null) {\n                data.button_title = this.button_title;\n            }\n            if (this.jump_pay_type != null) {\n                data.jump_pay_type = this.jump_pay_type;\n            }\n            if (this.is_jump != null) {\n                data.is_jump = this.is_jump;\n            }\n            if (this.customize_frequency != null) {\n                data.customize_frequency = this.customize_frequency;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.content.length) writer.writeString(1, this.content);\n            if (this.frequency != 0) writer.writeInt32(2, this.frequency);\n            if (this.tutorial_addr.length) writer.writeString(3, this.tutorial_addr);\n            if (this.button_title.length) writer.writeString(4, this.button_title);\n            if (this.jump_pay_type != 0) writer.writeInt32(5, this.jump_pay_type);\n            if (this.is_jump != false) writer.writeBool(6, this.is_jump);\n            if (this.customize_frequency != 0) writer.writeInt64(7, this.customize_frequency);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PopUpInfo {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PopUpInfo();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.content = reader.readString();\n                        break;\n                    case 2:\n                        message.frequency = reader.readInt32();\n                        break;\n                    case 3:\n                        message.tutorial_addr = reader.readString();\n                        break;\n                    case 4:\n                        message.button_title = reader.readString();\n                        break;\n                    case 5:\n                        message.jump_pay_type = reader.readInt32();\n                        break;\n                    case 6:\n                        message.is_jump = reader.readBool();\n                        break;\n                    case 7:\n                        message.customize_frequency = reader.readInt64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PopUpInfo {\n            return PopUpInfo.deserialize(bytes);\n        }\n    }\n\n    /** \n      返回翻窗, id:115\n       **/\n    export class PopUpsConfResp extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Timestamp?: number;\n                      PopUps?: Map<number, PopUpInfo>;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Timestamp\" in data && data.Timestamp != undefined) {\n                    this.Timestamp = data.Timestamp;\n                }\n                if (\"PopUps\" in data && data.PopUps != undefined) {\n                    this.PopUps = data.PopUps;\n                }\n            }\n            if (!this.PopUps) this.PopUps = new Map();\n        }\n        get Timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set Timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          key的值为 PopUpsKind\n           **/\n        get PopUps() {\n            return pb_1.Message.getField(this, 2) as any as Map<number, PopUpInfo>;\n        }\n\n        /** \n          key的值为 PopUpsKind\n           **/\n        set PopUps(value: Map<number, PopUpInfo>) {\n            pb_1.Message.setField(this, 2, value as any);\n        }\n        static fromObject(data: {\n            Timestamp?: number;\n            PopUps?: {\n                [key: number]: ReturnType<typeof PopUpInfo.prototype.toObject>;\n            };\n        }): PopUpsConfResp {\n            const message = new PopUpsConfResp({});\n            if (data.Timestamp != null) {\n                message.Timestamp = data.Timestamp;\n            }\n            if (typeof data.PopUps == \"object\") {\n                message.PopUps = new Map(\n                    Object.entries(data.PopUps).map(([key, value]) => [\n                        Number(key),\n                        PopUpInfo.fromObject(value),\n                    ])\n                );\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Timestamp?: number;\n                PopUps?: {\n                    [key: number]: ReturnType<typeof PopUpInfo.prototype.toObject>;\n                };\n            } = {};\n            if (this.Timestamp != null) {\n                data.Timestamp = this.Timestamp;\n            }\n            if (this.PopUps.size > 0) {\n                data.PopUps = Object.fromEntries(\n                    Array.from(this.PopUps).map(([key, value]) => [key, value.toObject()])\n                );\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Timestamp != 0) writer.writeInt64(1, this.Timestamp);\n            for (const [key, value] of this.PopUps) {\n                writer.writeMessage(2, this.PopUps, () => {\n                    writer.writeInt32(1, key);\n                    writer.writeMessage(2, value, () => value.serialize(writer));\n                });\n            }\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PopUpsConfResp {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new PopUpsConfResp();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Timestamp = reader.readInt64();\n                        break;\n                    case 2:\n                        reader.readMessage(message, () =>\n                            pb_1.Map.deserializeBinary(\n                                message.PopUps as any,\n                                reader,\n                                reader.readInt32,\n                                () => {\n                                    let value;\n                                    reader.readMessage(\n                                        message,\n                                        () => (value = PopUpInfo.deserialize(reader))\n                                    );\n                                    return value;\n                                }\n                            )\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): PopUpsConfResp {\n            return PopUpsConfResp.deserialize(bytes);\n        }\n    }\n\n    /** \n      im work\n       IM 广播 id: 121\n       **/\n    export class BroadCastNT extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Timestamp?: number;\n                      BroadCastType?: number;\n                      Template?: string;\n                      Element?: Map<string, BroadCastNT.AdornElement>;\n                      Desc?: string;\n                      UserID?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Timestamp\" in data && data.Timestamp != undefined) {\n                    this.Timestamp = data.Timestamp;\n                }\n                if (\"BroadCastType\" in data && data.BroadCastType != undefined) {\n                    this.BroadCastType = data.BroadCastType;\n                }\n                if (\"Template\" in data && data.Template != undefined) {\n                    this.Template = data.Template;\n                }\n                if (\"Element\" in data && data.Element != undefined) {\n                    this.Element = data.Element;\n                }\n                if (\"Desc\" in data && data.Desc != undefined) {\n                    this.Desc = data.Desc;\n                }\n                if (\"UserID\" in data && data.UserID != undefined) {\n                    this.UserID = data.UserID;\n                }\n            }\n            if (!this.Element) this.Element = new Map();\n        }\n        get Timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set Timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get BroadCastType() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n        set BroadCastType(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get Template() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n        set Template(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        get Element() {\n            return pb_1.Message.getField(this, 4) as any as Map<string, BroadCastNT.AdornElement>;\n        }\n        set Element(value: Map<string, BroadCastNT.AdornElement>) {\n            pb_1.Message.setField(this, 4, value as any);\n        }\n        get Desc() {\n            return pb_1.Message.getFieldWithDefault(this, 5, \"\") as string;\n        }\n        set Desc(value: string) {\n            pb_1.Message.setField(this, 5, value);\n        }\n        get UserID() {\n            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;\n        }\n        set UserID(value: number) {\n            pb_1.Message.setField(this, 6, value);\n        }\n        static fromObject(data: {\n            Timestamp?: number;\n            BroadCastType?: number;\n            Template?: string;\n            Element?: {\n                [key: string]: ReturnType<typeof BroadCastNT.AdornElement.prototype.toObject>;\n            };\n            Desc?: string;\n            UserID?: number;\n        }): BroadCastNT {\n            const message = new BroadCastNT({});\n            if (data.Timestamp != null) {\n                message.Timestamp = data.Timestamp;\n            }\n            if (data.BroadCastType != null) {\n                message.BroadCastType = data.BroadCastType;\n            }\n            if (data.Template != null) {\n                message.Template = data.Template;\n            }\n            if (typeof data.Element == \"object\") {\n                message.Element = new Map(\n                    Object.entries(data.Element).map(([key, value]) => [\n                        key,\n                        BroadCastNT.AdornElement.fromObject(value),\n                    ])\n                );\n            }\n            if (data.Desc != null) {\n                message.Desc = data.Desc;\n            }\n            if (data.UserID != null) {\n                message.UserID = data.UserID;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Timestamp?: number;\n                BroadCastType?: number;\n                Template?: string;\n                Element?: {\n                    [key: string]: ReturnType<typeof BroadCastNT.AdornElement.prototype.toObject>;\n                };\n                Desc?: string;\n                UserID?: number;\n            } = {};\n            if (this.Timestamp != null) {\n                data.Timestamp = this.Timestamp;\n            }\n            if (this.BroadCastType != null) {\n                data.BroadCastType = this.BroadCastType;\n            }\n            if (this.Template != null) {\n                data.Template = this.Template;\n            }\n            if (this.Element.size > 0) {\n                data.Element = Object.fromEntries(\n                    Array.from(this.Element).map(([key, value]) => [key, value.toObject()])\n                );\n            }\n            if (this.Desc != null) {\n                data.Desc = this.Desc;\n            }\n            if (this.UserID != null) {\n                data.UserID = this.UserID;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Timestamp != 0) writer.writeInt64(1, this.Timestamp);\n            if (this.BroadCastType != 0) writer.writeInt32(2, this.BroadCastType);\n            if (this.Template.length) writer.writeString(3, this.Template);\n            for (const [key, value] of this.Element) {\n                writer.writeMessage(4, this.Element, () => {\n                    writer.writeString(1, key);\n                    writer.writeMessage(2, value, () => value.serialize(writer));\n                });\n            }\n            if (this.Desc.length) writer.writeString(5, this.Desc);\n            if (this.UserID != 0) writer.writeUint64(6, this.UserID);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BroadCastNT {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new BroadCastNT();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Timestamp = reader.readInt64();\n                        break;\n                    case 2:\n                        message.BroadCastType = reader.readInt32();\n                        break;\n                    case 3:\n                        message.Template = reader.readString();\n                        break;\n                    case 4:\n                        reader.readMessage(message, () =>\n                            pb_1.Map.deserializeBinary(\n                                message.Element as any,\n                                reader,\n                                reader.readString,\n                                () => {\n                                    let value;\n                                    reader.readMessage(\n                                        message,\n                                        () => (value = BroadCastNT.AdornElement.deserialize(reader))\n                                    );\n                                    return value;\n                                }\n                            )\n                        );\n                        break;\n                    case 5:\n                        message.Desc = reader.readString();\n                        break;\n                    case 6:\n                        message.UserID = reader.readUint64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): BroadCastNT {\n            return BroadCastNT.deserialize(bytes);\n        }\n    }\n    export namespace BroadCastNT {\n        /** \n          装饰元素\n           **/\n        export class AdornElement extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          Name?: string;\n                          Colour?: string;\n                          Font?: string;\n                          Value?: string;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"Name\" in data && data.Name != undefined) {\n                        this.Name = data.Name;\n                    }\n                    if (\"Colour\" in data && data.Colour != undefined) {\n                        this.Colour = data.Colour;\n                    }\n                    if (\"Font\" in data && data.Font != undefined) {\n                        this.Font = data.Font;\n                    }\n                    if (\"Value\" in data && data.Value != undefined) {\n                        this.Value = data.Value;\n                    }\n                }\n            }\n            get Name() {\n                return pb_1.Message.getFieldWithDefault(this, 1, \"\") as string;\n            }\n            set Name(value: string) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get Colour() {\n                return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n            }\n            set Colour(value: string) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            get Font() {\n                return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n            }\n            set Font(value: string) {\n                pb_1.Message.setField(this, 3, value);\n            }\n            get Value() {\n                return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n            }\n            set Value(value: string) {\n                pb_1.Message.setField(this, 4, value);\n            }\n            static fromObject(data: {\n                Name?: string;\n                Colour?: string;\n                Font?: string;\n                Value?: string;\n            }): AdornElement {\n                const message = new AdornElement({});\n                if (data.Name != null) {\n                    message.Name = data.Name;\n                }\n                if (data.Colour != null) {\n                    message.Colour = data.Colour;\n                }\n                if (data.Font != null) {\n                    message.Font = data.Font;\n                }\n                if (data.Value != null) {\n                    message.Value = data.Value;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    Name?: string;\n                    Colour?: string;\n                    Font?: string;\n                    Value?: string;\n                } = {};\n                if (this.Name != null) {\n                    data.Name = this.Name;\n                }\n                if (this.Colour != null) {\n                    data.Colour = this.Colour;\n                }\n                if (this.Font != null) {\n                    data.Font = this.Font;\n                }\n                if (this.Value != null) {\n                    data.Value = this.Value;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.Name.length) writer.writeString(1, this.Name);\n                if (this.Colour.length) writer.writeString(2, this.Colour);\n                if (this.Font.length) writer.writeString(3, this.Font);\n                if (this.Value.length) writer.writeString(4, this.Value);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdornElement {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new AdornElement();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.Name = reader.readString();\n                            break;\n                        case 2:\n                            message.Colour = reader.readString();\n                            break;\n                        case 3:\n                            message.Font = reader.readString();\n                            break;\n                        case 4:\n                            message.Value = reader.readString();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): AdornElement {\n                return AdornElement.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      ip黑名单禁止访问, id: 122\n       **/\n    export class IPBlacklistNT extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Timestamp?: number;\n                      Ip?: string;\n                      ErrorMsg?: string;\n                      ErrorCode?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Timestamp\" in data && data.Timestamp != undefined) {\n                    this.Timestamp = data.Timestamp;\n                }\n                if (\"Ip\" in data && data.Ip != undefined) {\n                    this.Ip = data.Ip;\n                }\n                if (\"ErrorMsg\" in data && data.ErrorMsg != undefined) {\n                    this.ErrorMsg = data.ErrorMsg;\n                }\n                if (\"ErrorCode\" in data && data.ErrorCode != undefined) {\n                    this.ErrorCode = data.ErrorCode;\n                }\n            }\n        }\n        get Timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set Timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get Ip() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set Ip(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get ErrorMsg() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n        set ErrorMsg(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        get ErrorCode() {\n            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;\n        }\n        set ErrorCode(value: number) {\n            pb_1.Message.setField(this, 4, value);\n        }\n        static fromObject(data: {\n            Timestamp?: number;\n            Ip?: string;\n            ErrorMsg?: string;\n            ErrorCode?: number;\n        }): IPBlacklistNT {\n            const message = new IPBlacklistNT({});\n            if (data.Timestamp != null) {\n                message.Timestamp = data.Timestamp;\n            }\n            if (data.Ip != null) {\n                message.Ip = data.Ip;\n            }\n            if (data.ErrorMsg != null) {\n                message.ErrorMsg = data.ErrorMsg;\n            }\n            if (data.ErrorCode != null) {\n                message.ErrorCode = data.ErrorCode;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Timestamp?: number;\n                Ip?: string;\n                ErrorMsg?: string;\n                ErrorCode?: number;\n            } = {};\n            if (this.Timestamp != null) {\n                data.Timestamp = this.Timestamp;\n            }\n            if (this.Ip != null) {\n                data.Ip = this.Ip;\n            }\n            if (this.ErrorMsg != null) {\n                data.ErrorMsg = this.ErrorMsg;\n            }\n            if (this.ErrorCode != null) {\n                data.ErrorCode = this.ErrorCode;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Timestamp != 0) writer.writeInt64(1, this.Timestamp);\n            if (this.Ip.length) writer.writeString(2, this.Ip);\n            if (this.ErrorMsg.length) writer.writeString(3, this.ErrorMsg);\n            if (this.ErrorCode != 0) writer.writeInt32(4, this.ErrorCode);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IPBlacklistNT {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new IPBlacklistNT();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Timestamp = reader.readInt64();\n                        break;\n                    case 2:\n                        message.Ip = reader.readString();\n                        break;\n                    case 3:\n                        message.ErrorMsg = reader.readString();\n                        break;\n                    case 4:\n                        message.ErrorCode = reader.readInt32();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): IPBlacklistNT {\n            return IPBlacklistNT.deserialize(bytes);\n        }\n    }\n\n    /** \n      未读消息推送, id: 123\n       **/\n    export class UnreadMsgNT extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Timestamp?: number;\n                      UnreadMsgList?: UnreadMsgNT.UnreadMsgInfo[];\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [2],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Timestamp\" in data && data.Timestamp != undefined) {\n                    this.Timestamp = data.Timestamp;\n                }\n                if (\"UnreadMsgList\" in data && data.UnreadMsgList != undefined) {\n                    this.UnreadMsgList = data.UnreadMsgList;\n                }\n            }\n        }\n        get Timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set Timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get UnreadMsgList() {\n            return pb_1.Message.getRepeatedWrapperField(\n                this,\n                UnreadMsgNT.UnreadMsgInfo,\n                2\n            ) as UnreadMsgNT.UnreadMsgInfo[];\n        }\n        set UnreadMsgList(value: UnreadMsgNT.UnreadMsgInfo[]) {\n            pb_1.Message.setRepeatedWrapperField(this, 2, value);\n        }\n        static fromObject(data: {\n            Timestamp?: number;\n            UnreadMsgList?: ReturnType<typeof UnreadMsgNT.UnreadMsgInfo.prototype.toObject>[];\n        }): UnreadMsgNT {\n            const message = new UnreadMsgNT({});\n            if (data.Timestamp != null) {\n                message.Timestamp = data.Timestamp;\n            }\n            if (data.UnreadMsgList != null) {\n                message.UnreadMsgList = data.UnreadMsgList.map((item) =>\n                    UnreadMsgNT.UnreadMsgInfo.fromObject(item)\n                );\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Timestamp?: number;\n                UnreadMsgList?: ReturnType<typeof UnreadMsgNT.UnreadMsgInfo.prototype.toObject>[];\n            } = {};\n            if (this.Timestamp != null) {\n                data.Timestamp = this.Timestamp;\n            }\n            if (this.UnreadMsgList != null) {\n                data.UnreadMsgList = this.UnreadMsgList.map((item: UnreadMsgNT.UnreadMsgInfo) =>\n                    item.toObject()\n                );\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Timestamp != 0) writer.writeInt64(1, this.Timestamp);\n            if (this.UnreadMsgList.length)\n                writer.writeRepeatedMessage(\n                    2,\n                    this.UnreadMsgList,\n                    (item: UnreadMsgNT.UnreadMsgInfo) => item.serialize(writer)\n                );\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnreadMsgNT {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new UnreadMsgNT();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Timestamp = reader.readInt64();\n                        break;\n                    case 2:\n                        reader.readMessage(message.UnreadMsgList, () =>\n                            pb_1.Message.addToRepeatedWrapperField(\n                                message,\n                                2,\n                                UnreadMsgNT.UnreadMsgInfo.deserialize(reader),\n                                UnreadMsgNT.UnreadMsgInfo\n                            )\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): UnreadMsgNT {\n            return UnreadMsgNT.deserialize(bytes);\n        }\n    }\n    export namespace UnreadMsgNT {\n        export class UnreadMsgInfo extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          MsgType?: UnreadMsgType;\n                          Count?: number;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"MsgType\" in data && data.MsgType != undefined) {\n                        this.MsgType = data.MsgType;\n                    }\n                    if (\"Count\" in data && data.Count != undefined) {\n                        this.Count = data.Count;\n                    }\n                }\n            }\n            get MsgType() {\n                return pb_1.Message.getFieldWithDefault(\n                    this,\n                    1,\n                    UnreadMsgType.UN_USED\n                ) as UnreadMsgType;\n            }\n            set MsgType(value: UnreadMsgType) {\n                pb_1.Message.setField(this, 1, value);\n            }\n            get Count() {\n                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n            }\n            set Count(value: number) {\n                pb_1.Message.setField(this, 2, value);\n            }\n            static fromObject(data: { MsgType?: UnreadMsgType; Count?: number }): UnreadMsgInfo {\n                const message = new UnreadMsgInfo({});\n                if (data.MsgType != null) {\n                    message.MsgType = data.MsgType;\n                }\n                if (data.Count != null) {\n                    message.Count = data.Count;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    MsgType?: UnreadMsgType;\n                    Count?: number;\n                } = {};\n                if (this.MsgType != null) {\n                    data.MsgType = this.MsgType;\n                }\n                if (this.Count != null) {\n                    data.Count = this.Count;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.MsgType != UnreadMsgType.UN_USED) writer.writeEnum(1, this.MsgType);\n                if (this.Count != 0) writer.writeInt32(2, this.Count);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UnreadMsgInfo {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new UnreadMsgInfo();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.MsgType = reader.readEnum();\n                            break;\n                        case 2:\n                            message.Count = reader.readInt32();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): UnreadMsgInfo {\n                return UnreadMsgInfo.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      删除邮件推送，id: 125\n       **/\n    export class MailDeleteNT extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Timestamp?: number;\n                      UserID?: number;\n                      DeletedAt?: number;\n                      MailList?: string[];\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [4],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Timestamp\" in data && data.Timestamp != undefined) {\n                    this.Timestamp = data.Timestamp;\n                }\n                if (\"UserID\" in data && data.UserID != undefined) {\n                    this.UserID = data.UserID;\n                }\n                if (\"DeletedAt\" in data && data.DeletedAt != undefined) {\n                    this.DeletedAt = data.DeletedAt;\n                }\n                if (\"MailList\" in data && data.MailList != undefined) {\n                    this.MailList = data.MailList;\n                }\n            }\n        }\n        get Timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set Timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get UserID() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n        set UserID(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get DeletedAt() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n        set DeletedAt(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        get MailList() {\n            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];\n        }\n        set MailList(value: string[]) {\n            pb_1.Message.setField(this, 4, value);\n        }\n        static fromObject(data: {\n            Timestamp?: number;\n            UserID?: number;\n            DeletedAt?: number;\n            MailList?: string[];\n        }): MailDeleteNT {\n            const message = new MailDeleteNT({});\n            if (data.Timestamp != null) {\n                message.Timestamp = data.Timestamp;\n            }\n            if (data.UserID != null) {\n                message.UserID = data.UserID;\n            }\n            if (data.DeletedAt != null) {\n                message.DeletedAt = data.DeletedAt;\n            }\n            if (data.MailList != null) {\n                message.MailList = data.MailList;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Timestamp?: number;\n                UserID?: number;\n                DeletedAt?: number;\n                MailList?: string[];\n            } = {};\n            if (this.Timestamp != null) {\n                data.Timestamp = this.Timestamp;\n            }\n            if (this.UserID != null) {\n                data.UserID = this.UserID;\n            }\n            if (this.DeletedAt != null) {\n                data.DeletedAt = this.DeletedAt;\n            }\n            if (this.MailList != null) {\n                data.MailList = this.MailList;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Timestamp != 0) writer.writeInt64(1, this.Timestamp);\n            if (this.UserID != 0) writer.writeUint64(2, this.UserID);\n            if (this.DeletedAt != 0) writer.writeInt64(3, this.DeletedAt);\n            if (this.MailList.length) writer.writeRepeatedString(4, this.MailList);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MailDeleteNT {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new MailDeleteNT();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Timestamp = reader.readInt64();\n                        break;\n                    case 2:\n                        message.UserID = reader.readUint64();\n                        break;\n                    case 3:\n                        message.DeletedAt = reader.readInt64();\n                        break;\n                    case 4:\n                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): MailDeleteNT {\n            return MailDeleteNT.deserialize(bytes);\n        }\n    }\n\n    /** \n      热更新地址通知，id：126\n       **/\n    export class UpdateNewNT extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Timestamp?: number;\n                      version_name?: string;\n                      content?: string;\n                      update_url?: string;\n                      update_type?: UpdateTypeEnu;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Timestamp\" in data && data.Timestamp != undefined) {\n                    this.Timestamp = data.Timestamp;\n                }\n                if (\"version_name\" in data && data.version_name != undefined) {\n                    this.version_name = data.version_name;\n                }\n                if (\"content\" in data && data.content != undefined) {\n                    this.content = data.content;\n                }\n                if (\"update_url\" in data && data.update_url != undefined) {\n                    this.update_url = data.update_url;\n                }\n                if (\"update_type\" in data && data.update_type != undefined) {\n                    this.update_type = data.update_type;\n                }\n            }\n        }\n        get Timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set Timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          客户端版本\n           **/\n        get version_name() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n\n        /** \n          客户端版本\n           **/\n        set version_name(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          更新内容\n           **/\n        get content() {\n            return pb_1.Message.getFieldWithDefault(this, 3, \"\") as string;\n        }\n\n        /** \n          更新内容\n           **/\n        set content(value: string) {\n            pb_1.Message.setField(this, 3, value);\n        }\n\n        /** \n          更新地址\n           **/\n        get update_url() {\n            return pb_1.Message.getFieldWithDefault(this, 4, \"\") as string;\n        }\n\n        /** \n          更新地址\n           **/\n        set update_url(value: string) {\n            pb_1.Message.setField(this, 4, value);\n        }\n\n        /** \n          更新类型\n           **/\n        get update_type() {\n            return pb_1.Message.getFieldWithDefault(\n                this,\n                5,\n                UpdateTypeEnu.NOT_USED\n            ) as UpdateTypeEnu;\n        }\n\n        /** \n          更新类型\n           **/\n        set update_type(value: UpdateTypeEnu) {\n            pb_1.Message.setField(this, 5, value);\n        }\n        static fromObject(data: {\n            Timestamp?: number;\n            version_name?: string;\n            content?: string;\n            update_url?: string;\n            update_type?: UpdateTypeEnu;\n        }): UpdateNewNT {\n            const message = new UpdateNewNT({});\n            if (data.Timestamp != null) {\n                message.Timestamp = data.Timestamp;\n            }\n            if (data.version_name != null) {\n                message.version_name = data.version_name;\n            }\n            if (data.content != null) {\n                message.content = data.content;\n            }\n            if (data.update_url != null) {\n                message.update_url = data.update_url;\n            }\n            if (data.update_type != null) {\n                message.update_type = data.update_type;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Timestamp?: number;\n                version_name?: string;\n                content?: string;\n                update_url?: string;\n                update_type?: UpdateTypeEnu;\n            } = {};\n            if (this.Timestamp != null) {\n                data.Timestamp = this.Timestamp;\n            }\n            if (this.version_name != null) {\n                data.version_name = this.version_name;\n            }\n            if (this.content != null) {\n                data.content = this.content;\n            }\n            if (this.update_url != null) {\n                data.update_url = this.update_url;\n            }\n            if (this.update_type != null) {\n                data.update_type = this.update_type;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Timestamp != 0) writer.writeInt64(1, this.Timestamp);\n            if (this.version_name.length) writer.writeString(2, this.version_name);\n            if (this.content.length) writer.writeString(3, this.content);\n            if (this.update_url.length) writer.writeString(4, this.update_url);\n            if (this.update_type != UpdateTypeEnu.NOT_USED) writer.writeEnum(5, this.update_type);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateNewNT {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new UpdateNewNT();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Timestamp = reader.readInt64();\n                        break;\n                    case 2:\n                        message.version_name = reader.readString();\n                        break;\n                    case 3:\n                        message.content = reader.readString();\n                        break;\n                    case 4:\n                        message.update_url = reader.readString();\n                        break;\n                    case 5:\n                        message.update_type = reader.readEnum();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): UpdateNewNT {\n            return UpdateNewNT.deserialize(bytes);\n        }\n    }\n\n    /** \n      广播消息批量推送, id: 127\n       **/\n    export class BroadCastsNT extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Timestamp?: number;\n                      BroadCastList?: BroadCastNT[];\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [2],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Timestamp\" in data && data.Timestamp != undefined) {\n                    this.Timestamp = data.Timestamp;\n                }\n                if (\"BroadCastList\" in data && data.BroadCastList != undefined) {\n                    this.BroadCastList = data.BroadCastList;\n                }\n            }\n        }\n        get Timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set Timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get BroadCastList() {\n            return pb_1.Message.getRepeatedWrapperField(this, BroadCastNT, 2) as BroadCastNT[];\n        }\n        set BroadCastList(value: BroadCastNT[]) {\n            pb_1.Message.setRepeatedWrapperField(this, 2, value);\n        }\n        static fromObject(data: {\n            Timestamp?: number;\n            BroadCastList?: ReturnType<typeof BroadCastNT.prototype.toObject>[];\n        }): BroadCastsNT {\n            const message = new BroadCastsNT({});\n            if (data.Timestamp != null) {\n                message.Timestamp = data.Timestamp;\n            }\n            if (data.BroadCastList != null) {\n                message.BroadCastList = data.BroadCastList.map((item) =>\n                    BroadCastNT.fromObject(item)\n                );\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Timestamp?: number;\n                BroadCastList?: ReturnType<typeof BroadCastNT.prototype.toObject>[];\n            } = {};\n            if (this.Timestamp != null) {\n                data.Timestamp = this.Timestamp;\n            }\n            if (this.BroadCastList != null) {\n                data.BroadCastList = this.BroadCastList.map((item: BroadCastNT) => item.toObject());\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Timestamp != 0) writer.writeInt64(1, this.Timestamp);\n            if (this.BroadCastList.length)\n                writer.writeRepeatedMessage(2, this.BroadCastList, (item: BroadCastNT) =>\n                    item.serialize(writer)\n                );\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BroadCastsNT {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new BroadCastsNT();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Timestamp = reader.readInt64();\n                        break;\n                    case 2:\n                        reader.readMessage(message.BroadCastList, () =>\n                            pb_1.Message.addToRepeatedWrapperField(\n                                message,\n                                2,\n                                BroadCastNT.deserialize(reader),\n                                BroadCastNT\n                            )\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): BroadCastsNT {\n            return BroadCastsNT.deserialize(bytes);\n        }\n    }\n\n    /** \n      活动奖励推送，id: 151\n       **/\n    export class ActivityAwardNT extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Timestamp?: number;\n                      ActAwardType?: string;\n                      user_info?: ActivityAwardNT.UserInfo;\n                      prop_info?: ActivityAwardNT.PropsInfo;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Timestamp\" in data && data.Timestamp != undefined) {\n                    this.Timestamp = data.Timestamp;\n                }\n                if (\"ActAwardType\" in data && data.ActAwardType != undefined) {\n                    this.ActAwardType = data.ActAwardType;\n                }\n                if (\"user_info\" in data && data.user_info != undefined) {\n                    this.user_info = data.user_info;\n                }\n                if (\"prop_info\" in data && data.prop_info != undefined) {\n                    this.prop_info = data.prop_info;\n                }\n            }\n        }\n        get Timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set Timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n        get ActAwardType() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n        set ActAwardType(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        get user_info() {\n            return pb_1.Message.getWrapperField(\n                this,\n                ActivityAwardNT.UserInfo,\n                3\n            ) as ActivityAwardNT.UserInfo;\n        }\n        set user_info(value: ActivityAwardNT.UserInfo) {\n            pb_1.Message.setWrapperField(this, 3, value);\n        }\n        get has_user_info() {\n            return pb_1.Message.getField(this, 3) != null;\n        }\n        get prop_info() {\n            return pb_1.Message.getWrapperField(\n                this,\n                ActivityAwardNT.PropsInfo,\n                4\n            ) as ActivityAwardNT.PropsInfo;\n        }\n        set prop_info(value: ActivityAwardNT.PropsInfo) {\n            pb_1.Message.setWrapperField(this, 4, value);\n        }\n        get has_prop_info() {\n            return pb_1.Message.getField(this, 4) != null;\n        }\n        static fromObject(data: {\n            Timestamp?: number;\n            ActAwardType?: string;\n            user_info?: ReturnType<typeof ActivityAwardNT.UserInfo.prototype.toObject>;\n            prop_info?: ReturnType<typeof ActivityAwardNT.PropsInfo.prototype.toObject>;\n        }): ActivityAwardNT {\n            const message = new ActivityAwardNT({});\n            if (data.Timestamp != null) {\n                message.Timestamp = data.Timestamp;\n            }\n            if (data.ActAwardType != null) {\n                message.ActAwardType = data.ActAwardType;\n            }\n            if (data.user_info != null) {\n                message.user_info = ActivityAwardNT.UserInfo.fromObject(data.user_info);\n            }\n            if (data.prop_info != null) {\n                message.prop_info = ActivityAwardNT.PropsInfo.fromObject(data.prop_info);\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Timestamp?: number;\n                ActAwardType?: string;\n                user_info?: ReturnType<typeof ActivityAwardNT.UserInfo.prototype.toObject>;\n                prop_info?: ReturnType<typeof ActivityAwardNT.PropsInfo.prototype.toObject>;\n            } = {};\n            if (this.Timestamp != null) {\n                data.Timestamp = this.Timestamp;\n            }\n            if (this.ActAwardType != null) {\n                data.ActAwardType = this.ActAwardType;\n            }\n            if (this.user_info != null) {\n                data.user_info = this.user_info.toObject();\n            }\n            if (this.prop_info != null) {\n                data.prop_info = this.prop_info.toObject();\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Timestamp != 0) writer.writeInt64(1, this.Timestamp);\n            if (this.ActAwardType.length) writer.writeString(2, this.ActAwardType);\n            if (this.has_user_info)\n                writer.writeMessage(3, this.user_info, () => this.user_info.serialize(writer));\n            if (this.has_prop_info)\n                writer.writeMessage(4, this.prop_info, () => this.prop_info.serialize(writer));\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActivityAwardNT {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new ActivityAwardNT();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Timestamp = reader.readInt64();\n                        break;\n                    case 2:\n                        message.ActAwardType = reader.readString();\n                        break;\n                    case 3:\n                        reader.readMessage(\n                            message.user_info,\n                            () => (message.user_info = ActivityAwardNT.UserInfo.deserialize(reader))\n                        );\n                        break;\n                    case 4:\n                        reader.readMessage(\n                            message.prop_info,\n                            () =>\n                                (message.prop_info = ActivityAwardNT.PropsInfo.deserialize(reader))\n                        );\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): ActivityAwardNT {\n            return ActivityAwardNT.deserialize(bytes);\n        }\n    }\n    export namespace ActivityAwardNT {\n        export class UserInfo extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          UserID?: number;\n                          Avatar?: number;\n                          Gender?: number;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"UserID\" in data && data.UserID != undefined) {\n                        this.UserID = data.UserID;\n                    }\n                    if (\"Avatar\" in data && data.Avatar != undefined) {\n                        this.Avatar = data.Avatar;\n                    }\n                    if (\"Gender\" in data && data.Gender != undefined) {\n                        this.Gender = data.Gender;\n                    }\n                }\n            }\n\n            /** \n              用户id\n               **/\n            get UserID() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n\n            /** \n              用户id\n               **/\n            set UserID(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n\n            /** \n              头像\n               **/\n            get Avatar() {\n                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n            }\n\n            /** \n              头像\n               **/\n            set Avatar(value: number) {\n                pb_1.Message.setField(this, 2, value);\n            }\n\n            /** \n              性别\n               **/\n            get Gender() {\n                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n            }\n\n            /** \n              性别\n               **/\n            set Gender(value: number) {\n                pb_1.Message.setField(this, 3, value);\n            }\n            static fromObject(data: {\n                UserID?: number;\n                Avatar?: number;\n                Gender?: number;\n            }): UserInfo {\n                const message = new UserInfo({});\n                if (data.UserID != null) {\n                    message.UserID = data.UserID;\n                }\n                if (data.Avatar != null) {\n                    message.Avatar = data.Avatar;\n                }\n                if (data.Gender != null) {\n                    message.Gender = data.Gender;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    UserID?: number;\n                    Avatar?: number;\n                    Gender?: number;\n                } = {};\n                if (this.UserID != null) {\n                    data.UserID = this.UserID;\n                }\n                if (this.Avatar != null) {\n                    data.Avatar = this.Avatar;\n                }\n                if (this.Gender != null) {\n                    data.Gender = this.Gender;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.UserID != 0) writer.writeUint64(1, this.UserID);\n                if (this.Avatar != 0) writer.writeInt32(2, this.Avatar);\n                if (this.Gender != 0) writer.writeInt32(3, this.Gender);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserInfo {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new UserInfo();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.UserID = reader.readUint64();\n                            break;\n                        case 2:\n                            message.Avatar = reader.readInt32();\n                            break;\n                        case 3:\n                            message.Gender = reader.readInt32();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): UserInfo {\n                return UserInfo.deserialize(bytes);\n            }\n        }\n        export class PropsInfo extends pb_1.Message {\n            #one_of_decls: number[][] = [];\n            constructor(\n                data?:\n                    | any[]\n                    | {\n                          PropsId?: number;\n                          Count?: number;\n                          Amount?: number;\n                      }\n            ) {\n                super();\n                pb_1.Message.initialize(\n                    this,\n                    Array.isArray(data) ? data : [],\n                    0,\n                    -1,\n                    [],\n                    this.#one_of_decls\n                );\n                if (!Array.isArray(data) && typeof data == \"object\") {\n                    if (\"PropsId\" in data && data.PropsId != undefined) {\n                        this.PropsId = data.PropsId;\n                    }\n                    if (\"Count\" in data && data.Count != undefined) {\n                        this.Count = data.Count;\n                    }\n                    if (\"Amount\" in data && data.Amount != undefined) {\n                        this.Amount = data.Amount;\n                    }\n                }\n            }\n\n            /** \n              道具id\n               **/\n            get PropsId() {\n                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n            }\n\n            /** \n              道具id\n               **/\n            set PropsId(value: number) {\n                pb_1.Message.setField(this, 1, value);\n            }\n\n            /** \n              道具数量\n               **/\n            get Count() {\n                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n            }\n\n            /** \n              道具数量\n               **/\n            set Count(value: number) {\n                pb_1.Message.setField(this, 2, value);\n            }\n\n            /** \n              金额\n               **/\n            get Amount() {\n                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n            }\n\n            /** \n              金额\n               **/\n            set Amount(value: number) {\n                pb_1.Message.setField(this, 3, value);\n            }\n            static fromObject(data: {\n                PropsId?: number;\n                Count?: number;\n                Amount?: number;\n            }): PropsInfo {\n                const message = new PropsInfo({});\n                if (data.PropsId != null) {\n                    message.PropsId = data.PropsId;\n                }\n                if (data.Count != null) {\n                    message.Count = data.Count;\n                }\n                if (data.Amount != null) {\n                    message.Amount = data.Amount;\n                }\n                return message;\n            }\n            toObject() {\n                const data: {\n                    PropsId?: number;\n                    Count?: number;\n                    Amount?: number;\n                } = {};\n                if (this.PropsId != null) {\n                    data.PropsId = this.PropsId;\n                }\n                if (this.Count != null) {\n                    data.Count = this.Count;\n                }\n                if (this.Amount != null) {\n                    data.Amount = this.Amount;\n                }\n                return data;\n            }\n            serialize(): Uint8Array;\n            serialize(w: pb_1.BinaryWriter): void;\n            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n                const writer = w || new pb_1.BinaryWriter();\n                if (this.PropsId != 0) writer.writeUint32(1, this.PropsId);\n                if (this.Count != 0) writer.writeUint32(2, this.Count);\n                if (this.Amount != 0) writer.writeInt64(3, this.Amount);\n                if (!w) return writer.getResultBuffer();\n            }\n            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PropsInfo {\n                const reader =\n                        bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                    message = new PropsInfo();\n                while (reader.nextField()) {\n                    if (reader.isEndGroup()) break;\n                    switch (reader.getFieldNumber()) {\n                        case 1:\n                            message.PropsId = reader.readUint32();\n                            break;\n                        case 2:\n                            message.Count = reader.readUint32();\n                            break;\n                        case 3:\n                            message.Amount = reader.readInt64();\n                            break;\n                        default:\n                            reader.skipField();\n                    }\n                }\n                return message;\n            }\n            serializeBinary(): Uint8Array {\n                return this.serialize();\n            }\n            static deserializeBinary(bytes: Uint8Array): PropsInfo {\n                return PropsInfo.deserialize(bytes);\n            }\n        }\n    }\n\n    /** \n      活动状态推送，id: 152\n       **/\n    export class ActivityStatusNT extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Timestamp?: number;\n                      ActAwardType?: string;\n                      Status?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Timestamp\" in data && data.Timestamp != undefined) {\n                    this.Timestamp = data.Timestamp;\n                }\n                if (\"ActAwardType\" in data && data.ActAwardType != undefined) {\n                    this.ActAwardType = data.ActAwardType;\n                }\n                if (\"Status\" in data && data.Status != undefined) {\n                    this.Status = data.Status;\n                }\n            }\n        }\n        get Timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set Timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          活动标识\n           **/\n        get ActAwardType() {\n            return pb_1.Message.getFieldWithDefault(this, 2, \"\") as string;\n        }\n\n        /** \n          活动标识\n           **/\n        set ActAwardType(value: string) {\n            pb_1.Message.setField(this, 2, value);\n        }\n\n        /** \n          状态\n           **/\n        get Status() {\n            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;\n        }\n\n        /** \n          状态\n           **/\n        set Status(value: number) {\n            pb_1.Message.setField(this, 3, value);\n        }\n        static fromObject(data: {\n            Timestamp?: number;\n            ActAwardType?: string;\n            Status?: number;\n        }): ActivityStatusNT {\n            const message = new ActivityStatusNT({});\n            if (data.Timestamp != null) {\n                message.Timestamp = data.Timestamp;\n            }\n            if (data.ActAwardType != null) {\n                message.ActAwardType = data.ActAwardType;\n            }\n            if (data.Status != null) {\n                message.Status = data.Status;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Timestamp?: number;\n                ActAwardType?: string;\n                Status?: number;\n            } = {};\n            if (this.Timestamp != null) {\n                data.Timestamp = this.Timestamp;\n            }\n            if (this.ActAwardType != null) {\n                data.ActAwardType = this.ActAwardType;\n            }\n            if (this.Status != null) {\n                data.Status = this.Status;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Timestamp != 0) writer.writeInt64(1, this.Timestamp);\n            if (this.ActAwardType.length) writer.writeString(2, this.ActAwardType);\n            if (this.Status != 0) writer.writeInt32(3, this.Status);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActivityStatusNT {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new ActivityStatusNT();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Timestamp = reader.readInt64();\n                        break;\n                    case 2:\n                        message.ActAwardType = reader.readString();\n                        break;\n                    case 3:\n                        message.Status = reader.readInt32();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): ActivityStatusNT {\n            return ActivityStatusNT.deserialize(bytes);\n        }\n    }\n\n    /** \n      登陆奖励推送，id: 153\n       **/\n    export class LoginAwardNT extends pb_1.Message {\n        #one_of_decls: number[][] = [];\n        constructor(\n            data?:\n                | any[]\n                | {\n                      Timestamp?: number;\n                      AwardAmount?: number;\n                  }\n        ) {\n            super();\n            pb_1.Message.initialize(\n                this,\n                Array.isArray(data) ? data : [],\n                0,\n                -1,\n                [],\n                this.#one_of_decls\n            );\n            if (!Array.isArray(data) && typeof data == \"object\") {\n                if (\"Timestamp\" in data && data.Timestamp != undefined) {\n                    this.Timestamp = data.Timestamp;\n                }\n                if (\"AwardAmount\" in data && data.AwardAmount != undefined) {\n                    this.AwardAmount = data.AwardAmount;\n                }\n            }\n        }\n        get Timestamp() {\n            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;\n        }\n        set Timestamp(value: number) {\n            pb_1.Message.setField(this, 1, value);\n        }\n\n        /** \n          奖励金额\n           **/\n        get AwardAmount() {\n            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;\n        }\n\n        /** \n          奖励金额\n           **/\n        set AwardAmount(value: number) {\n            pb_1.Message.setField(this, 2, value);\n        }\n        static fromObject(data: { Timestamp?: number; AwardAmount?: number }): LoginAwardNT {\n            const message = new LoginAwardNT({});\n            if (data.Timestamp != null) {\n                message.Timestamp = data.Timestamp;\n            }\n            if (data.AwardAmount != null) {\n                message.AwardAmount = data.AwardAmount;\n            }\n            return message;\n        }\n        toObject() {\n            const data: {\n                Timestamp?: number;\n                AwardAmount?: number;\n            } = {};\n            if (this.Timestamp != null) {\n                data.Timestamp = this.Timestamp;\n            }\n            if (this.AwardAmount != null) {\n                data.AwardAmount = this.AwardAmount;\n            }\n            return data;\n        }\n        serialize(): Uint8Array;\n        serialize(w: pb_1.BinaryWriter): void;\n        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {\n            const writer = w || new pb_1.BinaryWriter();\n            if (this.Timestamp != 0) writer.writeInt64(1, this.Timestamp);\n            if (this.AwardAmount != 0) writer.writeInt64(2, this.AwardAmount);\n            if (!w) return writer.getResultBuffer();\n        }\n        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginAwardNT {\n            const reader =\n                    bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes),\n                message = new LoginAwardNT();\n            while (reader.nextField()) {\n                if (reader.isEndGroup()) break;\n                switch (reader.getFieldNumber()) {\n                    case 1:\n                        message.Timestamp = reader.readInt64();\n                        break;\n                    case 2:\n                        message.AwardAmount = reader.readInt64();\n                        break;\n                    default:\n                        reader.skipField();\n                }\n            }\n            return message;\n        }\n        serializeBinary(): Uint8Array {\n            return this.serialize();\n        }\n        static deserializeBinary(bytes: Uint8Array): LoginAwardNT {\n            return LoginAwardNT.deserialize(bytes);\n        }\n    }\n}\n","import PopUpViewBase from \"../../../../../main/core/popUpViewUtils/PopUpViewBase\";\nimport { LocalStorageMgr } from \"../../../../../main/core/storage/LocalStorageMgr\";\nimport { AdjustTrack } from \"../../../../../main/core/track/AdjustTrack\";\nimport { Instance } from \"../../../../../main/core/utils/decorators/InstanceClassDecorator\";\nimport Listener from \"../../../../../main/core/utils/Listener\";\nimport { lodash } from \"../../../../../main/core/utils/NpmExport\";\nimport CommonEventName from \"../CommonEventName\";\nimport UIMgr from \"../Component/base/UIMgr\";\nimport CommonLanguage from \"../conf/lang/CommonLanguage\";\nimport { DataCacheMgr } from \"../DataCacheMgr\";\nimport CommonListenUiEvent from \"../event/CommonListenUiEvent\";\nimport GameNavigation from \"../GameNavigation\";\nimport H5Customer from \"../h5_customer/H5Customer\";\nimport CommonFeatureSettingObserver from \"../obs/CommonFeatureSettingObserver\";\nimport CommonHostListObserver from \"../obs/CommonHostListObserver\";\nimport CommonLaunchConfigObserver from \"../obs/CommonLaunchConfigObserver\";\nimport CommonNetworkSwitchObserver from \"../obs/CommonNetworkSwitchObserver\";\nimport CommonUpdateNewObserver from \"../obs/CommonUpdateNewObserver\";\nimport RedPointObserver from \"../obs/RedPointObserver\";\nimport PropConfMgr from \"../PropConfMgr\";\nimport CommonStorageMgr from \"../Storage/CommonStorageMgr\";\nimport { CommonUserUtil } from \"../user/CommonUserUtil\";\nimport { UniverseProto } from \"./proto/UniverseProto\";\nimport { UniverseProtoMap } from \"./proto/UniverseProtoMap\";\nimport UniverseSocketMgr from \"./UniverseSocketMgr\";\nimport CommonGameListObserver from \"../obs/CommonGameListObserver\";\nimport { BlackIpUtil } from \"../utils/BlackIpUtil\";\n\nconst { MessageID } = UniverseProto;\n\ntype TCacheOption = {\n    [K in keyof typeof UniverseProto.MessageID]?: ProtoObject<\n        Pick<typeof UniverseProtoMap, typeof UniverseProto.MessageID[K]>\n    >;\n};\n\nclass UniverseServiceMgr {\n    private cacheOption: TCacheOption = {};\n\n    public startUniverse() {\n        UniverseSocketMgr.init({\n            onMessage: this.onMessage.bind(this),\n        });\n    }\n\n    public reconnect() {\n        UniverseSocketMgr.reconnect();\n    }\n\n    private async onMessage(\n        message: ProtoObject<typeof UniverseProtoMap[UniverseProto.MessageID]>\n    ) {\n        this.cacheOption[message.msgId] = message.msgData as any;\n        this?.[`on${MessageID[message.msgId]}`]?.(message);\n        switch (message.msgId) {\n            case MessageID.NAMING_ST: {\n                this.parseNamingMessage(message.msgData);\n                UniverseSocketMgr.onPropsConfReq();\n                Listener.send(CommonEventName.AUTH_SUCCESS);\n                break;\n            }\n\n            case MessageID.LAUNCH_CONF_RESP: {\n                this.parseLaunchConfigResp(message.msgData);\n                break;\n            }\n\n            case MessageID.FEATURE_CONF_RESP: {\n                this.parseFeatureConfResp(message.msgData);\n                break;\n            }\n\n            case MessageID.UNREAD_MSG_NT: {\n                this.parseUnreadMsgNT(message.msgData);\n                break;\n            }\n\n            case MessageID.BROADCAST_NT: {\n                Listener.send(CommonEventName.EVENT_IM_NEW_MESSAGE, message.msgData);\n                break;\n            }\n\n            case MessageID.PROPS_CONF_RESP: {\n                this.parsePropsConfResp(message.msgData);\n                break;\n            }\n\n            case MessageID.POPUPS_CONF_RESP: {\n                //\n                this.parseUpsConfResp(message.msgData);\n                break;\n            }\n\n            case MessageID.LOGIN_AWARD_NT: {\n                let data: ILoginBonusData = { AwardAmount: message.msgData.AwardAmount };\n                DataCacheMgr.getInstance().setLoginBonusData(data);\n                break;\n            }\n\n            case MessageID.CUSTOMER_CONF_RESP: {\n                let data: ProtoObject<UniverseProto.CustomerConfResp> = message.msgData;\n                H5Customer.getInstance().setCustomerInfo(data);\n                break;\n            }\n\n            case MessageID.MAIL_DELETE_NT: {\n                let data: ProtoObject<UniverseProto.MailDeleteNT> = message.msgData;\n                Listener.emit(CommonEventName.MailRomoteDelList, data.MailList);\n                break;\n            }\n\n            case MessageID.IP_BLACK_LIST_NT:\n                let data: ProtoObject<UniverseProto.IPBlacklistNT> = message.msgData;\n                BlackIpUtil.blackListFlag = data.ErrorMsg;\n                let result = await UIMgr.showAlertAwait({\n                    contentText: data.ErrorMsg,\n                    contextAlign: cc.macro.TextAlignment.CENTER,\n                    style: UIMgr.ALERT_STYLE.POSITIVE,\n                });\n\n                result.onClose(() => {\n                    CommonUserUtil.logout();\n                });\n                break;\n            case MessageID.UPDATE_NEW_NT: {\n                Instance(CommonUpdateNewObserver).tryUpdate(message.msgData);\n                break;\n            }\n            default:\n                break;\n        }\n    }\n\n    private parseUpsConfResp(msg: ProtoObject<UniverseProto.PopUpsConfResp>) {\n        if (!msg?.PopUps) return;\n\n        let storageMgr = CommonStorageMgr.getInstance();\n\n        // 支付公告弹窗\n        let topupUps = msg.PopUps[\"1\"];\n        if (topupUps) {\n            storageMgr.writeTopupUps(topupUps);\n        } else {\n            //清除本地缓存\n            storageMgr.clearTopupUps();\n        }\n\n        // 捕鱼新手充值弹框\n        let fishTopUpUps = msg.PopUps[\"2\"];\n        if (fishTopUpUps) {\n            storageMgr.writeFishTopUpUps(fishTopUpUps);\n        } else {\n            //清除本地缓存\n            storageMgr.clearFishTopUpUps();\n        }\n\n        // 支付公告弹窗\n        let topupFailUps = msg.PopUps[\"3\"];\n        if (topupFailUps) {\n            storageMgr.writeTopupFailUps(topupFailUps);\n        } else {\n            //清除本地缓存\n            storageMgr.clearTopupFailUps();\n        }\n\n        // 支付公告弹窗\n        let WithdrawUps = msg.PopUps[\"4\"];\n        if (WithdrawUps) {\n            storageMgr.writeWithdrawUps(WithdrawUps);\n        } else {\n            //清除本地缓存\n            storageMgr.clearWithdrawUps();\n        }\n    }\n\n    private parseUnreadMsgNT(msg: ProtoObject<UniverseProto.UnreadMsgNT>) {\n        let msgList = msg.UnreadMsgList;\n        for (let i = 0, len = msgList.length; i < len; i++) {\n            switch (msgList[i].MsgType) {\n                case UniverseProto.UnreadMsgType.PAY_MSG:\n                    CommonUserUtil.updateUserBalance();\n                    Listener.send(CommonEventName.PAY_SUCCESS);\n\n                    //如果存在充值默认结果窗口时 关闭此窗口\n                    let payResultAlert = UIMgr.checkDialogExits(\"PayResultAlert\");\n                    payResultAlert && payResultAlert.getComponent(PopUpViewBase).close();\n\n                    //打开窗口\n                    const ALERT_NAME = \"PaySuccessAlert\";\n                    let result = UIMgr.showAlert({\n                        contentText: CommonLanguage.paySuccess,\n                        style: UIMgr.ALERT_STYLE.POSITIVE,\n                    });\n                    result.popupNode.name = ALERT_NAME;\n\n                case UniverseProto.UnreadMsgType.MAIL_MSG:\n                    Listener.emit(CommonEventName.MailShowRedDot);\n                    break;\n                case UniverseProto.UnreadMsgType.KF_MSG:\n                    CommonStorageMgr.getInstance().writeCustomerUnreadMsg(true);\n                    Listener.send(CommonEventName.CUSTOMER_RED_DOT_REFRESH);\n                    break;\n\n                default:\n            }\n        }\n    }\n\n    private parsePropsConfResp(msg: ProtoObject<UniverseProto.PropsConfResp>) {\n        // to do 解析道具，icon对应具体的道具图片，多个props_id可能对应同一个icon\n        let propConf: Map<number, IPropsConf> = new Map();\n        let props_list = msg.props_list;\n        for (let key in props_list) {\n            let props_id = props_list[key].props_id;\n            let name = props_list[key].name;\n            let kind = props_list[key].kind;\n            let sub_kind = props_list[key].sub_kind;\n            let icon = props_list[key].icon;\n            let desc = props_list[key].desc;\n            propConf.set(props_id, {\n                props_id: props_id,\n                name: name,\n                kind: kind,\n                sub_kind: sub_kind,\n                icon: icon,\n                desc: desc,\n            });\n        }\n        PropConfMgr.getInstance().setPropConf(propConf);\n    }\n\n    private parseLaunchConfigResp(msg: ProtoObject<UniverseProto.LaunchConfResp>) {\n        Instance(CommonLaunchConfigObserver).set(msg);\n        LocalStorageMgr.getInstance().saveLauncherConfig(msg);\n        AdjustTrack.getInstance().initAdjustConf();\n    }\n\n    private parseFeatureConfResp(msg: ProtoObject<UniverseProto.FeatureConfResp>) {\n        let game_settings = msg.game_settings;\n        let navigation = game_settings.navigation;\n        let game_list = game_settings.game_list;\n        let game_tag = game_settings.game_tag;\n        let bar = msg.bar;\n\n        GameNavigation.navigation = navigation;\n        GameNavigation.initGameTagTypeMap(game_tag);\n\n        Instance(CommonHostListObserver).loadGameInfo(game_list);\n\n        Listener.send(CommonListenUiEvent.LISTEN_UI_HALL_VIEW_SHOW);\n        Instance(CommonFeatureSettingObserver).modify(msg?.feature_settings ?? {});\n        Instance(CommonNetworkSwitchObserver).modify(msg?.switch_conf ?? {});\n        Instance(RedPointObserver).initGameGuide(game_settings?.game_tag ?? []);\n        Instance(RedPointObserver).initBar(bar);\n        Instance(CommonGameListObserver).set(game_list);\n    }\n\n    private parseNamingMessage(msg: ProtoObject<UniverseProto.NamingST>) {\n        if (!msg) {\n            return;\n        }\n        /** ws host list **/\n        let hostList = [];\n        let remoteHostList = msg.HostList;\n        Instance(CommonHostListObserver).loadServerHostList(msg.HostList);\n        if (!lodash.isEmpty(remoteHostList)) {\n            hostList = Array.from(new Set(remoteHostList));\n        }\n        let localHostList = CommonDepend.LocalStorageMgr.readHostList();\n        if (!lodash.isEmpty(localHostList)) {\n            let arr = lodash.difference(hostList, localHostList);\n            hostList = arr.concat(localHostList);\n        }\n        CommonDepend.LocalStorageMgr.saveHostList(hostList);\n        Instance(CommonHostListObserver).reset();\n    }\n}\n\nexport default new UniverseServiceMgr();\n","import { GameType } from \"../../../../../main/core/conf/GameType\";\nimport { PlatformType } from \"../../../../../main/core/platform/PlatformType\";\nimport { PlatformUtil } from \"../../../../../main/core/platform/PlatformUtil\";\nimport { lodash } from \"../../../../../main/core/utils/NpmExport\";\nimport BaseSocketMgr from \"../service/ws/BaseSocketMgr\";\nimport { UniverseProto } from \"./proto/UniverseProto\";\nimport { UniverseProtoMap } from \"./proto/UniverseProtoMap\";\n\nconst { MessageID } = UniverseProto;\n\ntype TMessage = UniverseProto.MessageID;\n\nclass UniverseSocketMgr extends BaseSocketMgr<TMessage> {\n    protected gameId: number = GameType.UNIVERSE;\n    protected host: string;\n    protected isEncrypt: boolean = true;\n    protected cryptId: number = 2000;\n    protected aesKey: string = \"SEWkGIc2RiqcASstuR4kuw==\";\n\n    constructor() {\n        super();\n        this.applyConfig({\n            log: {\n                blacklist: [MessageID.BROADCAST_NT],\n            },\n        });\n    }\n\n    public getMessageCtor<T extends TMessage>(msgType: T) {\n        return UniverseProtoMap[msgType];\n    }\n\n    public onAuthReq() {\n        let data: ProtoObject<UniverseProto.AuthReq> = {\n            UserID: CommonDepend.UserManager.uid,\n            Token: CommonDepend.UserManager.token,\n            DeviceID: CommonDepend.AppParamManager.getDeviceID(),\n            Package: CommonDepend.AppParamManager.getPackageName(),\n            Channel: CommonDepend.AppParamManager.getChn(),\n            VersionName: CommonDepend.ProjectInfo.GAME_VERSION,\n            VersionCode: CommonDepend.AppParamManager.getAppVersionCode(),\n            BrandCode: CommonDepend.CommonSocketModel.getBrandCode(),\n            Platform: PlatformUtil.getInstance().getSvn(),\n            PackageType: {\n                [PlatformType.Unknow]: UniverseProto.PackageTypeEnu.PACKAGE_NOT_USED,\n                [PlatformType.H5]: UniverseProto.PackageTypeEnu.H5,\n                [PlatformType.H5Native]: UniverseProto.PackageTypeEnu.H5,\n            }[PlatformUtil.getInstance().type],\n        };\n        this.request(MessageID.AUTH_REQ, data);\n    }\n\n    public onPropsConfReq() {\n        let now = new Date().getTime();\n        let curr_time = now + CommonDepend.DateUtils.getTimeDiff();\n        let data: ProtoObject<UniverseProto.PropsConfReq> = {\n            Timestamp: curr_time,\n        };\n        this.request(MessageID.PROPS_CONF_REQ, data);\n    }\n\n    public onCustomerConfReq() {\n        let now = new Date().getTime();\n        let curr_time = now + CommonDepend.DateUtils.getTimeDiff();\n        let data: ProtoObject<UniverseProto.CustomerConfReq> = {\n            Timestamp: curr_time,\n        };\n        this.request(MessageID.CUSTOMER_CONF_REQ, data);\n    }\n\n    public onLaunchConfReq() {\n        this.request(MessageID.LAUNCH_CONF_REQ, {});\n    }\n\n    public request<T extends TMessage>(msgType: T, data: ProtoObject<typeof UniverseProtoMap[T]>) {\n        const ctor = this.getMessageCtor(msgType);\n        lodash.set(data, \"timestamp\", new Date().getTime());\n        this.send(msgType, new ctor(data));\n    }\n}\nexport default new UniverseSocketMgr();\n","import { UserManager } from \"../../../../../../main/core/user/UserManager\";\nimport { CurrencyUtil } from \"../../utils/CurrencyUtil\";\n\nconst { ccclass, property, menu } = cc._decorator;\n\n/**\n * 自动更新金额信息\n */\n@ccclass\n@menu(\"common/UserAmountComp\")\nexport default class UserAmountComp extends cc.Component {\n    protected onEnable(): void {\n        UserManager.getInstance().info.listenChange(this.updateLabel, this);\n    }\n    protected onDisable(): void {\n        UserManager.getInstance().info.unListenChange(this.updateLabel, this);\n    }\n\n    updateLabel() {\n        const tmpNum = parseInt(UserManager.getInstance().coin * 100 + \"\") / 100;\n        const amount = CurrencyUtil.formatMoney(tmpNum);\n        this.getComponent(cc.Label).string = amount;\n    }\n}\n","import { BundleMgr } from \"../../../../../../main/core/bd/BundleMgr\";\nimport { Tools } from \"../../../../../../main/core/utils/Tools\";\nimport CommonSkin from \"../../conf/skin/CommonSkin\";\nimport UserAvatar from \"./UserAvatar\";\nimport UserAvatarModel from \"./UserAvatarModel\";\n\nexport default class UserAvatarMgr {\n    public static getSpriteFrame(spriteName: string): cc.SpriteFrame {\n        let res = CommonSkin.Priority.avatar[spriteName];\n        if (!res) {\n            return null;\n        }\n        return BundleMgr.getInstance().getResFromBundle(res);\n    }\n\n    //ApiProto.GENDER\n    static getAvatar(\n        avatar: number,\n        gender: UserAvatarModel.GENDER\n    ): cc.SpriteFrame | sp.SkeletonData {\n        let self = this;\n        let result = null;\n        switch (Number(avatar)) {\n            case UserAvatarModel.AVATAR_ID.NORMAL_1:\n            case UserAvatarModel.AVATAR_ID.NORMAL_2:\n            case UserAvatarModel.AVATAR_ID.NORMAL_3:\n            case UserAvatarModel.AVATAR_ID.NORMAL_4:\n            case UserAvatarModel.AVATAR_ID.NORMAL_5:\n            case UserAvatarModel.AVATAR_ID.NORMAL_6:\n            case UserAvatarModel.AVATAR_ID.NORMAL_7:\n            case UserAvatarModel.AVATAR_ID.NORMAL_8:\n                result = self.getNormalAvatar(avatar, gender==0 ? 1 : gender);\n                break;\n            case UserAvatarModel.AVATAR_ID.DYNAMIC_0:\n                result = BundleMgr.getInstance().getResFromBundle(\n                    CommonSkin.Priority.avatar[avatar]\n                );\n                break;\n            default:\n                result = self.getNormalAvatar(\n                    UserAvatarModel.AVATAR_ID.NORMAL_1,\n                    UserAvatarModel.GENDER.FEMALE\n                );\n                break;\n        }\n        return result;\n    }\n\n    static isDynamicAvatar(avatar: number) {\n        return [UserAvatarModel.AVATAR_ID.DYNAMIC_0].includes(Number(avatar));\n    }\n\n    /**\n     * 从图集获取头像\n     * DWC:  avatar=\"head_boy1.png\"\n     * PACK: avatar=1\n     * @param avatar\n     * @param gender\n     */\n    static getNormalAvatar(avatar: number, gender: UserAvatarModel.GENDER) {\n        let self = this;\n        let frame;\n        if (avatar) {\n            frame = this.getSpriteFrame(`head_${gender}_${Tools.limit(Number(avatar), 1, 8)}`);\n        }\n        return frame;\n    }\n\n    static switchPointRed() {\n        let self = this;\n        let data = CommonDepend.LocalStorageMgr.getNewAvatarId();\n        if (data) {\n            let newAvatar = data.newAvatar;\n            let available_avatar = CommonDepend.UserManager.available_avatar;\n            if (available_avatar && available_avatar.length > 0) {\n                for (let i = 0; i < available_avatar.length; i++) {\n                    if (newAvatar) {\n                        let result = newAvatar.indexOf(available_avatar[i]);\n                        if (result == -1) {\n                            return true;\n                        }\n                    }\n                }\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     *\n     * @param node 挂载头像节点\n     * @param avatar 头像id\n     * @param gender 头像性别\n     * @param options 头像缩放大小\n     * @param pointRed 小红点\n     * @param buttonEnabled 是否启用Button\n     *\n     * 挂载头像方法\n     */\n    static async loadUserAvatarPrefab(\n        node: cc.Node | cc.Component,\n        avatar: number,\n        gender: UserAvatarModel.GENDER\n    ) {\n        let ccNode = null;\n        if (cc.isValid(node)) {\n            if (node instanceof cc.Node) {\n                ccNode = node;\n            } else {\n                ccNode = node.node;\n            }\n\n            return UIDepend.PrefabManager.loadPrefabBundle(CommonSkin.UnPriority.UserAvatar).then(\n                (res: cc.Prefab) => {\n                    if (res && cc.isValid(ccNode)) {\n                        let prefabIns = cc.instantiate(res);\n                        ccNode.removeAllChildren();\n                        ccNode.addChild(prefabIns);\n                        prefabIns.getComponent(UserAvatar)?.init?.(Number(avatar), gender);\n                        return prefabIns;\n                    }\n                }\n            );\n        }\n        return null;\n    }\n}\n","namespace UserAvatarModel {\n    export enum AVATAR_ID {\n        NORMAL_1 = 1,\n        NORMAL_2 = 2,\n        NORMAL_3 = 3,\n        NORMAL_4 = 4,\n        NORMAL_5 = 5,\n        NORMAL_6 = 6,\n        NORMAL_7 = 7,\n        NORMAL_8 = 8,\n\n        DYNAMIC_0 = 3001,\n    }\n    export enum GENDER {\n        GENDER_UNKNOWN = 0,\n        FEMALE = 1,\n        MALE = 2,\n    }\n}\nexport default UserAvatarModel;\n","import UserAvatarMgr from \"./UserAvatarMgr\";\nimport SkeletonHelper from \"../../../../../../main/core/utils/class/SkeletonHelper\";\nimport { Tools } from \"../../../../../../main/core/utils/Tools\";\nimport UserAvatarModel from \"./UserAvatarModel\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class UserAvatar extends cc.Component {\n    @property(cc.Node)\n    avatar: cc.Node = null;\n\n    @property(cc.SpriteFrame)\n    avatarList =[];\n\n    avatarInfo: any;\n    currentAvatar: any;\n\n    private skeletonHelper: SkeletonHelper = null;\n\n    private curAnim: Promise<any> = Promise.resolve();\n\n    public init(data: number, gender: UserAvatarModel.GENDER): void {\n        this.unscheduleAllCallbacks();\n        this.skeletonHelper = null;\n        this.curAnim = Promise.resolve();\n        this.avatar.scale = 1;\n        if (data) {\n            this.currentAvatar = data;\n            this.avatarInfo = this.avatarList[ data%4 ]   // UserAvatarMgr.getAvatar(data, gender);\n\n            UIDepend.SpriteManager.setSpriteFrame(this.avatar, this.avatarInfo);\n            this.avatar.getComponent(cc.Sprite).enabled = true;\n            this.avatar.width =  this.avatarInfo.getRect().width;\n            this.avatar.height =  this.avatarInfo.getRect().height;\n\n            // if (this.avatarInfo instanceof cc.SpriteFrame) {\n            //     const spf = this.avatarInfo as cc.SpriteFrame;\n            //     this.avatar.getComponent(sp.Skeleton)?.destroy();\n            //     this.scheduleOnce(() => {\n            //         UIDepend.SpriteManager.setSpriteFrame(this.avatar, this.avatarInfo);\n            //         this.avatar.getComponent(cc.Sprite).enabled = true;\n            //         this.avatar.width = spf.getRect().width;\n            //         this.avatar.height = spf.getRect().height;\n            //     });\n            // }\n            // if (this.avatarInfo instanceof sp.SkeletonData) {\n            //     this.avatar.scale = 1;\n            //     this.avatar.removeComponent(cc.SpriteFrame);\n            //     let skeleton =\n            //         this.avatar.getComponent(sp.Skeleton) || this.avatar.addComponent(sp.Skeleton);\n            //     skeleton.skeletonData = this.avatarInfo;\n            //     this.skeletonHelper = new SkeletonHelper(skeleton);\n            //     if (!this.node.activeInHierarchy) {\n            //         this.curAnim = null;\n            //     }\n            //     this.playWaitAnim();\n            // }\n        } else {\n            let value = UserAvatarMgr.getAvatar(data, gender);\n            UIDepend.SpriteManager.setSpriteFrame(this.avatar, this.avatarList[0]);\n        }\n    }\n\n    protected playWaitAnim() {\n        this.curAnim =\n            this.curAnim?.then?.(() => {\n                return this.skeletonHelper?.play(\"idle\").then(() => {\n                    Tools.delayTime(0).then(() => {\n                        this.playWaitAnim();\n                    });\n                });\n            }) ??\n            Promise.resolve().then(() => {\n                Tools.delayTime(3).then(() => {\n                    this.playWaitAnim();\n                });\n            });\n    }\n    /** 头像赢钱动画 */\n    public playWinAnimation() {\n        let onStart: () => void;\n        let onEnd: () => void;\n\n        if (this.skeletonHelper) {\n            let helper = SkeletonHelper.createInParent(this.node.parent, {\n                position: this.node.position,\n            });\n            helper.setData(this.avatarInfo);\n            helper.tryPlay(\"gold\").then(() => {\n                helper.destroy();\n            });\n        }\n        onStart?.();\n        this.curAnim = (\n            this.skeletonHelper\n                ?.play(\"smile\")\n                .then(() => this.skeletonHelper?.play(\"smile\"))\n                .then(() => {\n                    onEnd?.();\n                }) ??\n            Promise.resolve().then(() => {\n                onEnd?.();\n            })\n        ).then(() => this.playWaitAnim());\n\n        let result = {\n            onStart: (callfunc: () => void) => {\n                onStart = callfunc;\n                return result;\n            },\n            onEnd: (callfunc: () => void) => {\n                onEnd = callfunc;\n                return result;\n            },\n        };\n        return result;\n    }\n\n    /** 头像输钱动画 */\n    public playLoseAnimation() {\n        let onStart: () => void;\n        let onEnd: () => void;\n\n        onStart?.();\n        this.curAnim = (\n            this.skeletonHelper\n                ?.play(\"sad\")\n                .then(() => this.skeletonHelper?.play(\"sad\"))\n                .then(() => {\n                    onEnd?.();\n                }) ??\n            Promise.resolve().then(() => {\n                onEnd?.();\n            })\n        ).then(() => this.playWaitAnim());\n\n        let result = {\n            onStart: (callfunc: () => void) => {\n                onStart = callfunc;\n                return result;\n            },\n            onEnd: (callfunc: () => void) => {\n                onEnd = callfunc;\n                return result;\n            },\n        };\n\n        return result;\n    }\n}\n"],"file":"index.js"}